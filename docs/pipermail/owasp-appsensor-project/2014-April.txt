From jtmelton at gmail.com  Tue Apr  1 04:55:28 2014
From: jtmelton at gmail.com (John Melton)
Date: Tue, 1 Apr 2014 00:55:28 -0400
Subject: [Owasp-appsensor-project] Appsensor Analysis engine
In-Reply-To: <CAJcRqZgM7ADXHMJAs41PC9yqoX8gJBzw-7+uD7kQf7KasbkCsg@mail.gmail.com>
References: <CAJcRqZgM7ADXHMJAs41PC9yqoX8gJBzw-7+uD7kQf7KasbkCsg@mail.gmail.com>
Message-ID: <CAM8z=yKnD-+4rAU5H82acVZSDiP62LgC_D7NGJkd+g_ZD4Hzvw@mail.gmail.com>

Monish,
Responses inline.  Great questions, please send over any others you may
have.
Thanks,
John


On Mon, Mar 31, 2014 at 3:35 PM, monish appusamy
<monishappusamy at gmail.com>wrote:

> Hi John,
>
> 1. If I want to contribute to *Event Analysis engine (EVA)*, where must I start from?
>
>  The code is on github: https://github.com/jtmelton/appsensor . Ask
questions on this mailing list or grab the code and start coding.

> 2. What is the current execution progress state of *Event analysis engine*? If there is any current research going-on how to join the club?
>
> Hopefully I'm answering the question properly.

Have a look at:
https://github.com/jtmelton/appsensor/tree/master/analysis-engines , which
currently contains only
https://github.com/jtmelton/appsensor/tree/master/analysis-engines/appsensor-analysis-reference.

The reference event analysis engine simply executes the configured policy.
There is a simple formula:

If X events of type Y occur within a timeframe of Z, and attack is
triggered.

3. After going through *Owasp-Appsensor-guide-v2.doc*, I've understood
that an Event analysis engine will analyse events and
> respond accordingly. But, I couldn't find clear specifications that states the complete *requirements for the EVA*.
>
> If there is one please help me to locate. Orelse could you specify what will be the requirements for EVA?
>
>
Good question. There is no requirements document. AppSensor is a unique
project in that it is both a documentation project and a code project.

For the documentation portion of the project, we try to be rather more
descriptive than prescriptive. The book authors have done a great job of
describing the basic problem set, and a few generic possible solutions.
However, since the major goal of the documentation is to provide awareness
and think through the approaches from a higher level, there are no
specified requirements for "this is how to build the software". The book
conveys the idea, not the tool.

The code/software/tooling portion of the project aims to build a reference
implementation that can be used to implement the concepts conveyed in the
book. The first version of the code was really a Java-only tool that only
worked within a single host and didn't provide any visibility metrics. This
really was a proof of concept tool. Version 2 is aiming to allow any
language on the client talking to java on the backend using web services.

As for the specific question of requirements, there are actually lots of
different ways we could make different analysis engines. They could be
simple or very complex. The first (and probably the primary) implementation
uses a policy-driven configuration where the detection points and their
policy are configured and made available to the analysis engine. The
analysis engine then accepts events and evaluates them against the policy,
detecting attacks, and issuing responses as needed.

I hope that helps.

>
> Thanks,
>
> Monish
>
>
> >* All,
> *>>* I've been plugging away on v2 of the code for a bit now, and am asking for
> *>* help at this point. Link to v2 of the code:
> *>* https://github.com/jtmelton/appsensor <https://github.com/jtmelton/appsensor>
> *>>* The code has been fully rewritten. The main reason for the rewrite was to
> *>* allow a client-server style model as opposed to requiring appsensor be
> *>* fully embedded in the application. You can now have a central server
> *>* collecting events from multiple applications and performing analysis. These
> *>* front-end applications can be in any language as long as they speak
> *>* rest/soap. There's been a host of other changes, but this was the primary
> *>* one.
> *>>* I've lined up a bunch of starter ideas below, but if you want to work on
> *>* ANYTHING, please let me know.
> *>>* --------
> *>* CODING
> *>* - analysis engine - different versions could be built, ie stochastic vs.
> *>* statistical vs. behavioral, etc. (written in java)
> *>* - web services - currently working on these, but need handlers for
> *>* rest/soap in the backend (java)
> *>* - implementations of core storage components - current implementations are
> *>* in-memory, but we'll want file-backed, database-backed (sql/nosql), etc.
> *>* implementations (java)
> *>* - unit tests / integration tests for the analysis engine (java)
> *>* - sample detection point implementations (any language)
> *>* - sample client applications / demos using appsensor (any language)
> *>* - reporting services apis (java)
> *>* - reporting client UI - need a reference front-end to visualize and
> *>* manage the data (any language, but should be web-based) - see also UX below
> *>>* UX
> *>* - It would be awesome to provide a default UI for event visualization and
> *>* management. This could be a big, fun project.
> *>>* DOCUMENTATION
> *>* - configuration scripts / tutorials for different web / application
> *>* servers. We need to show how to setup the authentication for client
> *>* applications since that will be done by the web/app servers and not the
> *>* analysis engine itself. Essentially, this is setup and documentation of
> *>* reverse proxy configuration. We can lean heavily on web server
> *>* documentation here. (documentation / scripting)
> *>* - end-user documentation guidance (documentation)
> *>* --------
> *>>* Thanks,
> *>* John
> *>>* _______________________________________________
> *>* Owasp-appsensor-project mailing list
> *>* Owasp-appsensor-project at lists.owasp.org <https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project>
> *>* https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project <https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project>
> *>>
>
>
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140401/f9b866e9/attachment.html>

From colin.watson at owasp.org  Tue Apr  1 14:40:32 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Tue, 1 Apr 2014 15:40:32 +0100
Subject: [Owasp-appsensor-project] AppSensor API Questions (Node.js
 Demonstration Implementation)
In-Reply-To: <CAAxdBBm9REegvd4E2jUYcVW87=WXRhvxWjUc1sbNXRA8Qp7x2Q@mail.gmail.com>
References: <CACHuFzb10mOWsQz_4e-YsKTOEPDRhJv=8Qt3fYdDmQNZcfO26A@mail.gmail.com>
	<CAM8z=yLgm-z7+TbFZarE-qyFMj_QJQPbkhS-Ad36-xmv8iVYkg@mail.gmail.com>
	<CACHuFzYZ4shDarq7ZCGyrbYfr25PDy54-4i-P6i2Lz+H5=+t0Q@mail.gmail.com>
	<CAM8z=yJMS1nSdRvJs-BFCh-GOHiGGv7c=nrx1_Hqg-MiAYL-4Q@mail.gmail.com>
	<CACHuFzYmDdtWe6mKxp-Kt7=iQm6UyK-dETthv5huqWDWznH2AQ@mail.gmail.com>
	<CAM8z=yKoqn0-jDv+jjTrfn_v9hdbqByVo8+Lcdand3Ezodis5Q@mail.gmail.com>
	<CAAxdBB=9rtF3Pg=XYAuAnm1bVt16cORJdBG-WXV4s8V9wUTmQw@mail.gmail.com>
	<CAAxdBBmbi776Gx=aeNO83vuSObp8sxajj75kVUVct9riOKKY6Q@mail.gmail.com>
	<CAM8z=yJAfoTsg29n76EFqTj2GFJn8SjUpAO1qa_8TkjUa+KyGA@mail.gmail.com>
	<CAAxdBBm9REegvd4E2jUYcVW87=WXRhvxWjUc1sbNXRA8Qp7x2Q@mail.gmail.com>
Message-ID: <CAAxdBBn51gvCfqBaGpTM5FRtbTnH2YGOaE7T0f9NNTuNeGDZAQ@mail.gmail.com>

John

Another final question... the timestamp you are using is UNIX.  Would
an RFC 3339 timestamp be more generic?

  http://tools.ietf.org/html/rfc3339

Syslog and web server logs all use that.

CEF seems to use MILLIseconds since epoch (instead of seconds). Any
thoughts? Any log experts?

Colin




On 27 March 2014 12:50, Colin Watson <colin.watson at owasp.org> wrote:
> John
>
>> You have great (and very complicating) thoughts :>.
>
> Just random thoughts as I write...
>
>
>> I think I would throw this into the meta-reporting bucket since the
>> detection point policy is configured on the analysis engine.
>>
>> In local mode, this makes no difference. However, consider your web services
>> setup. Let's say we have 5 client applications all configured to send data
>> to a single analysis engine. When the client application detects an event,
>> it will notify the analysis engine of the detection point id, not the
>> policy. So, the analysis engine needs to lookup the policy for a given
>> detection point id.
>> - If you have distinct detection point ids (ie. a naming convention setup by
>> the user as you mentioned above), no problem.
>
> I think this is what I meant yes. So as long as the IDs are unique,
> AppSensor WS doesn't care.  I've added some text about ID uniqueness
> to the guide.
>
> "WEB05-WEBSHOP-IE1-1012"
>
>
>> - If you mean supporting different policies for the same detection point id
>> on different applications, I would just recommend using 2 different analysis
>> engines, then have a reporting interface that prefixes the client
>> application to the detection point for presentation.
>
> Noted.
>
> Colin
>
>
>
>> On Tue, Mar 25, 2014 at 12:47 PM, Colin Watson <colin.watson at owasp.org>
>> wrote:
>>>
>>> John et al
>>>
>>> On the topic of events and JSON.... would it be useful if the
>>> detection point ID were unique per application/host? I am just trying
>>> to write up what someone might do if they sent events somewhere else
>>> using Common Event Format.
>>>
>>> A centralised system might want to know that RE4 on the corporate
>>> website is different to RE4 on the customer extranet or RE4 on the
>>> supplier extranet.  Not sure if it matters too much in the
>>> demonstration implementation, but might be nice not to rule it out?
>>> And in my experience some applications have multiple instances of
>>> detection point types (RE1, RE2, RE3, IE4 etc). I don't want to
>>> complicate anything too much though.
>>>
>>>
>>> "SOME_HOST_ID"-"SOME_APP_ID"-"SOME_APP_VERSION"-"SOME_DETECTION_POINT_TYPE"-"SOME_DP_ID"
>>>
>>> e.g. WS03-CUSTEXTRANET-3.02-RE3-002
>>>
>>> Maybe this is already possible with AppSensor WS - just a longer
>>> string for the "SOME_DETECTION_POINT_ID"?
>>>
>>>
>>> Colin
>>>
>>>
>>>
>>>
>>> On 25 March 2014 15:32, Colin Watson <colin.watson at owasp.org> wrote:
>>> > Hi John
>>> >
>>> > Thanks for the event JSON. I am writing things for the Guide v2. Would
>>> > you have an example JSON request with that all populated including the
>>> > HTTP headers?
>>> >
>>> > If the applications is running on multiple hosts, would it be better
>>> > to include the host identity in the
>>> > 'X-Appsensor-Client-Application-Name' header as well?
>>> >
>>> >    X-Appsensor-Client-Application-Name: WidgetCo-Web05
>>> >
>>> > Or should we encourage a separate optional header for host?
>>> >
>>> > And do you have the same for attacks and responses, which I think are
>>> > the other exposed services (having had a snoop around the code)?
>>> >
>>> > I have forgotten, but are we (you) doing any form of identity
>>> > authentication or message integrity checking at this stage?Just so
>>> > that I can allude to such stuff in my draft text.
>>> >
>>> > Colin
>>> >
>>> >
>>> > On 17 March 2014 05:25, John Melton <jtmelton at gmail.com> wrote:
>>> >> Chetan,
>>> >> Replying to this on list since Colin had asked for an example json
>>> >> snippet
>>> >> at one point. A sample JSON string for adding a new event is below.
>>> >>
>>> >>
>>> >> {"user":{"username":"SOME_END_USERNAME"},"detectionPoint":{"id":"SOME_DETECTION_POINT_ID"},"timestamp":
>>> >> SOME_UNIX_TIMESTAMP }
>>> >>
>>> >> The only additional point to note is that you have to make the request
>>> >> with
>>> >> an http request header. The default key for that header is
>>> >> 'X-Appsensor-Client-Application-Name' and the value would be the name
>>> >> of the
>>> >> client application being used.
>>> >>
>>> >> For further info check the addRecord method at
>>> >>
>>> >> https://github.com/jtmelton/appsensor/blob/master/sample-apps/simple-dashboard/src/main/webapp/index.jsp
>>> >> .
>>> >>
>>> >> Thanks,
>>> >> John
>>> >>
>>> >>
>>> >> On Sun, Mar 16, 2014 at 11:40 PM, Chetan Karande
>>> >> <chetan.karande at owasp.org>
>>> >> wrote:
>>> >>>
>>> >>> Great. Thank you  John.
>>> >>>
>>> >>> On Mar 16, 2014 11:37 PM, "John Melton" <jtmelton at gmail.com> wrote:
>>> >>>>
>>> >>>> Chetan,
>>> >>>> Good question. I've been working on the code. I'm actually pushing
>>> >>>> some
>>> >>>> code right now, then I'll send out a group email with some updates. I
>>> >>>> haven't pulled out the JSON structure yet, but I'll try to get some
>>> >>>> basic
>>> >>>> examples together and documented and send it to the list in the next
>>> >>>> couple
>>> >>>> days.
>>> >>>>
>>> >>>> Thanks,
>>> >>>> John
>>> >>>>
>>> >>>>
>>> >>>> On Sun, Mar 16, 2014 at 10:57 PM, Chetan Karande
>>> >>>> <chetan.karande at owasp.org> wrote:
>>> >>>>>
>>> >>>>> Hi John,
>>> >>>>>
>>> >>>>> I was side tracked due to other priorities for a while, and wanted
>>> >>>>> to
>>> >>>>> resume working in AppSensor reference implementation in Node.js.
>>> >>>>>
>>> >>>>> As per our last conversation, you were going to work on adding a
>>> >>>>> sample
>>> >>>>> app and include minimum required json message structure as part the
>>> >>>>> tech
>>> >>>>> documentation. Just wanted to check if you had chance to do any
>>> >>>>> progress on
>>> >>>>> that.
>>> >>>>>
>>> >>>>> Thank you.
>>> >>>>>
>>> >>>>>
>>> >>>>> Best Regards,
>>> >>>>>
>>> >>>>> Chetan Karande
>>> >>>>>
>>> >>>>> chetan.karande at owasp.org
>>> >>>>>
>>> >>>>> OWASP NYC Local Chapter
>>> >>>>>
>>> >>>>> Open Web Application Security Project
>>> >>>>>
>>> >>>>>
>>> >>>>>
>>> >>>>> On Mon, Dec 9, 2013 at 2:42 AM, John Melton <jtmelton at gmail.com>
>>> >>>>> wrote:
>>> >>>>>>
>>> >>>>>> Chetan,
>>> >>>>>> Awesome to see what you're coming up with.
>>> >>>>>>
>>> >>>>>> With respect to your questions, I responded inline below, but also
>>> >>>>>> wanted to mention that one task I have for Colin is to give him the
>>> >>>>>> minimum
>>> >>>>>> json structure needed so it can be documented. I'll also put that
>>> >>>>>> in the
>>> >>>>>> tech documentation as well.
>>> >>>>>>
>>> >>>>>> Thanks,
>>> >>>>>> John
>>> >>>>>>
>>> >>>>>>
>>> >>>>>> On Sun, Dec 8, 2013 at 6:07 PM, Chetan Karande
>>> >>>>>> <chetan.karande at owasp.org> wrote:
>>> >>>>>>>
>>> >>>>>>> Hi John,
>>> >>>>>>>
>>> >>>>>>> I started exploring the AppSensor code on github and went over the
>>> >>>>>>> AppSensor Guide document. It helped me in getting more idea about
>>> >>>>>>> AppSensor
>>> >>>>>>> in general. I have a few questions for you specifically about
>>> >>>>>>> approaching
>>> >>>>>>> Node.js demonstration implementation. Please answer when you get
>>> >>>>>>> chance:
>>> >>>>>>>
>>> >>>>>>> Question 1. As per on our earlier email conversation, I explored
>>> >>>>>>> more
>>> >>>>>>> on implementing addEvent() and getResponses() methods in Node.js
>>> >>>>>>> app. Based
>>> >>>>>>> on the AppSensor REST Service code on github, I think the service
>>> >>>>>>> expects
>>> >>>>>>> client using following endpoints and JSON message structures. Can
>>> >>>>>>> you please
>>> >>>>>>> confirm if I am on right track, and answer question highlighted.
>>> >>>>>>>
>>> >>>>>>> addEvent() Implementation:
>>> >>>>>>> ======================
>>> >>>>>>>
>>> >>>>>>> Invoke REST Endpoint: /api/v1.0/events
>>> >>>>>>>
>>> >>>>>>> Sample Event JSON Object to be sent from the Node.js  App:
>>> >>>>>>>
>>> >>>>>>> {
>>> >>>>>>> user: {
>>> >>>>>>> username: ""
>>> >>>>>>> ipAddress: ""
>>> >>>>>>> },
>>> >>>>>>> detectionPoint : {  // ??? Does Node.js client need to populate
>>> >>>>>>> this
>>> >>>>>>> object? If yes, what goes in responses, how to decide threshold?
>>> >>>>>>
>>> >>>>>>
>>> >>>>>> All that is needed in the detectionPoint object field is the "id"
>>> >>>>>> field. The rest is found server-side.
>>> >>>>>>
>>> >>>>>>> id: "",
>>> >>>>>>> threshold: "",
>>> >>>>>>> responses: []
>>> >>>>>>> },
>>> >>>>>>> timestamp: "",
>>> >>>>>>> detectionSystemId: "",
>>> >>>>>>> resource: "",
>>> >>>>>>> eventType: ""
>>> >>>>>>>
>>> >>>>>>> }
>>> >>>>>>>
>>> >>>>>>> getResponses() Implementation:
>>> >>>>>>> =========================
>>> >>>>>>>
>>> >>>>>>> Poll REST EndPoint URL: /api/v1.0/responses
>>> >>>>>>>
>>> >>>>>>> Expected Response object from AppSensor REST service:
>>> >>>>>>>
>>> >>>>>>> {
>>> >>>>>>> id: "",
>>> >>>>>>> threshold: "",
>>> >>>>>>> responses: [
>>> >>>>>>> {
>>> >>>>>>> user: {
>>> >>>>>>> username: "",
>>> >>>>>>> ipAddress: ""
>>> >>>>>>> },
>>> >>>>>>> action: "",
>>> >>>>>>> detectionPoint: {}, //???. It contains responses array again. What
>>> >>>>>>> to
>>> >>>>>>> expect in it?
>>> >>>>>>
>>> >>>>>>
>>> >>>>>> The detection point really shouldn't be part of the response - I'll
>>> >>>>>> try
>>> >>>>>> to remove this from being serialized.
>>> >>>>>>
>>> >>>>>>>
>>> >>>>>>> timestamp: "",
>>> >>>>>>> detectionSystemId: "",
>>> >>>>>>> interval : {
>>> >>>>>>> duration: "",
>>> >>>>>>> unit: 0 //number
>>> >>>>>>> }
>>> >>>>>>> },
>>> >>>>>>> {
>>> >>>>>>> //another response
>>> >>>>>>> }
>>> >>>>>>> ]
>>> >>>>>>> }
>>> >>>>>>>
>>> >>>>>>> 2. In case multiple responses received as result of invoking
>>> >>>>>>> getResponses(), does order in which actions are performed matter?
>>> >>>>>>
>>> >>>>>>
>>> >>>>>> Good question that I don't think has been considered before. It
>>> >>>>>> shouldn't in our case in the reference implementation (unless we
>>> >>>>>> add some
>>> >>>>>> new features), but the timestamp is available, so it's likely best
>>> >>>>>> practice
>>> >>>>>> to execute them in order. I'll add this point to the documentation.
>>> >>>>>>
>>> >>>>>>>
>>> >>>>>>>
>>> >>>>>>> 3. Can I set AppSensor REST Server on my machine and use it for
>>> >>>>>>> testing Node.js demo implementation? If so, can you please provide
>>> >>>>>>> me steps
>>> >>>>>>> to set it up.
>>> >>>>>>
>>> >>>>>>
>>> >>>>>> Yep, but there's not a project setup to do it yet. I'll try to add
>>> >>>>>> a
>>> >>>>>> sample app for that soon. If you'd like to use it before I get that
>>> >>>>>> done,
>>> >>>>>> have a look at the appsensor-ws-rest-server project and the
>>> >>>>>> RestRequestHandlerTest class. There is a helper method at the
>>> >>>>>> bottom of the
>>> >>>>>> class (startServer) that runs the service on grizzly. You can call
>>> >>>>>> that in a
>>> >>>>>> main method to get a small simple server going for testing.
>>> >>>>>>
>>> >>>>>>>
>>> >>>>>>> Just to share, I am exploring to retrofit ghost, an open-source
>>> >>>>>>> Node.js based blogging platform for AppSensor demonstration
>>> >>>>>>> implementation.
>>> >>>>>>> I am working on getting familiar with its code and identify
>>> >>>>>>> detection
>>> >>>>>>> points.
>>> >>>>>>
>>> >>>>>>
>>> >>>>>> That's an awesome project. Adding security to existing popular
>>> >>>>>> platforms has been a goal for OWASP for some time - nice to see
>>> >>>>>> progress
>>> >>>>>> here.
>>> >>>>>>
>>> >>>>>>>
>>> >>>>>>>
>>> >>>>>>> Best Regards,
>>> >>>>>>>
>>> >>>>>>> Chetan Karande
>>> >>>>>>>
>>> >>>>>>> chetan.karande at owasp.org
>>> >>>>>>>
>>> >>>>>>> OWASP NYC Local Chapter
>>> >>>>>>>
>>> >>>>>>> Open Web Application Security Project
>>> >>>>>>
>>> >>>>>>
>>> >>>>>
>>> >>>>
>>> >>
>>> >>
>>> >> _______________________________________________
>>> >> Owasp-appsensor-project mailing list
>>> >> Owasp-appsensor-project at lists.owasp.org
>>> >> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>>> >>
>>
>>

From jtmelton at gmail.com  Tue Apr  1 17:58:41 2014
From: jtmelton at gmail.com (John Melton)
Date: Tue, 1 Apr 2014 13:58:41 -0400
Subject: [Owasp-appsensor-project] AppSensor API Questions (Node.js
 Demonstration Implementation)
In-Reply-To: <CAAxdBBn51gvCfqBaGpTM5FRtbTnH2YGOaE7T0f9NNTuNeGDZAQ@mail.gmail.com>
References: <CACHuFzb10mOWsQz_4e-YsKTOEPDRhJv=8Qt3fYdDmQNZcfO26A@mail.gmail.com>
	<CAM8z=yLgm-z7+TbFZarE-qyFMj_QJQPbkhS-Ad36-xmv8iVYkg@mail.gmail.com>
	<CACHuFzYZ4shDarq7ZCGyrbYfr25PDy54-4i-P6i2Lz+H5=+t0Q@mail.gmail.com>
	<CAM8z=yJMS1nSdRvJs-BFCh-GOHiGGv7c=nrx1_Hqg-MiAYL-4Q@mail.gmail.com>
	<CACHuFzYmDdtWe6mKxp-Kt7=iQm6UyK-dETthv5huqWDWznH2AQ@mail.gmail.com>
	<CAM8z=yKoqn0-jDv+jjTrfn_v9hdbqByVo8+Lcdand3Ezodis5Q@mail.gmail.com>
	<CAAxdBB=9rtF3Pg=XYAuAnm1bVt16cORJdBG-WXV4s8V9wUTmQw@mail.gmail.com>
	<CAAxdBBmbi776Gx=aeNO83vuSObp8sxajj75kVUVct9riOKKY6Q@mail.gmail.com>
	<CAM8z=yJAfoTsg29n76EFqTj2GFJn8SjUpAO1qa_8TkjUa+KyGA@mail.gmail.com>
	<CAAxdBBm9REegvd4E2jUYcVW87=WXRhvxWjUc1sbNXRA8Qp7x2Q@mail.gmail.com>
	<CAAxdBBn51gvCfqBaGpTM5FRtbTnH2YGOaE7T0f9NNTuNeGDZAQ@mail.gmail.com>
Message-ID: <CAM8z=yJeMmy=RGGTcpUexG0C50YaaPzF2XzC6+QB2oVbsV=chg@mail.gmail.com>

This makes sense to me. Pretty simple change to make. I'll give it a couple
days for people to give opinions. If no objections, rfc3339 makes more
sense to me.
Thanks,
John


On Tue, Apr 1, 2014 at 10:40 AM, Colin Watson <colin.watson at owasp.org>wrote:

> John
>
> Another final question... the timestamp you are using is UNIX.  Would
> an RFC 3339 timestamp be more generic?
>
>   http://tools.ietf.org/html/rfc3339
>
> Syslog and web server logs all use that.
>
> CEF seems to use MILLIseconds since epoch (instead of seconds). Any
> thoughts? Any log experts?
>
> Colin
>
>
>
>
> On 27 March 2014 12:50, Colin Watson <colin.watson at owasp.org> wrote:
> > John
> >
> >> You have great (and very complicating) thoughts :>.
> >
> > Just random thoughts as I write...
> >
> >
> >> I think I would throw this into the meta-reporting bucket since the
> >> detection point policy is configured on the analysis engine.
> >>
> >> In local mode, this makes no difference. However, consider your web
> services
> >> setup. Let's say we have 5 client applications all configured to send
> data
> >> to a single analysis engine. When the client application detects an
> event,
> >> it will notify the analysis engine of the detection point id, not the
> >> policy. So, the analysis engine needs to lookup the policy for a given
> >> detection point id.
> >> - If you have distinct detection point ids (ie. a naming convention
> setup by
> >> the user as you mentioned above), no problem.
> >
> > I think this is what I meant yes. So as long as the IDs are unique,
> > AppSensor WS doesn't care.  I've added some text about ID uniqueness
> > to the guide.
> >
> > "WEB05-WEBSHOP-IE1-1012"
> >
> >
> >> - If you mean supporting different policies for the same detection
> point id
> >> on different applications, I would just recommend using 2 different
> analysis
> >> engines, then have a reporting interface that prefixes the client
> >> application to the detection point for presentation.
> >
> > Noted.
> >
> > Colin
> >
> >
> >
> >> On Tue, Mar 25, 2014 at 12:47 PM, Colin Watson <colin.watson at owasp.org>
> >> wrote:
> >>>
> >>> John et al
> >>>
> >>> On the topic of events and JSON.... would it be useful if the
> >>> detection point ID were unique per application/host? I am just trying
> >>> to write up what someone might do if they sent events somewhere else
> >>> using Common Event Format.
> >>>
> >>> A centralised system might want to know that RE4 on the corporate
> >>> website is different to RE4 on the customer extranet or RE4 on the
> >>> supplier extranet.  Not sure if it matters too much in the
> >>> demonstration implementation, but might be nice not to rule it out?
> >>> And in my experience some applications have multiple instances of
> >>> detection point types (RE1, RE2, RE3, IE4 etc). I don't want to
> >>> complicate anything too much though.
> >>>
> >>>
> >>>
> "SOME_HOST_ID"-"SOME_APP_ID"-"SOME_APP_VERSION"-"SOME_DETECTION_POINT_TYPE"-"SOME_DP_ID"
> >>>
> >>> e.g. WS03-CUSTEXTRANET-3.02-RE3-002
> >>>
> >>> Maybe this is already possible with AppSensor WS - just a longer
> >>> string for the "SOME_DETECTION_POINT_ID"?
> >>>
> >>>
> >>> Colin
> >>>
> >>>
> >>>
> >>>
> >>> On 25 March 2014 15:32, Colin Watson <colin.watson at owasp.org> wrote:
> >>> > Hi John
> >>> >
> >>> > Thanks for the event JSON. I am writing things for the Guide v2.
> Would
> >>> > you have an example JSON request with that all populated including
> the
> >>> > HTTP headers?
> >>> >
> >>> > If the applications is running on multiple hosts, would it be better
> >>> > to include the host identity in the
> >>> > 'X-Appsensor-Client-Application-Name' header as well?
> >>> >
> >>> >    X-Appsensor-Client-Application-Name: WidgetCo-Web05
> >>> >
> >>> > Or should we encourage a separate optional header for host?
> >>> >
> >>> > And do you have the same for attacks and responses, which I think are
> >>> > the other exposed services (having had a snoop around the code)?
> >>> >
> >>> > I have forgotten, but are we (you) doing any form of identity
> >>> > authentication or message integrity checking at this stage?Just so
> >>> > that I can allude to such stuff in my draft text.
> >>> >
> >>> > Colin
> >>> >
> >>> >
> >>> > On 17 March 2014 05:25, John Melton <jtmelton at gmail.com> wrote:
> >>> >> Chetan,
> >>> >> Replying to this on list since Colin had asked for an example json
> >>> >> snippet
> >>> >> at one point. A sample JSON string for adding a new event is below.
> >>> >>
> >>> >>
> >>> >>
> {"user":{"username":"SOME_END_USERNAME"},"detectionPoint":{"id":"SOME_DETECTION_POINT_ID"},"timestamp":
> >>> >> SOME_UNIX_TIMESTAMP }
> >>> >>
> >>> >> The only additional point to note is that you have to make the
> request
> >>> >> with
> >>> >> an http request header. The default key for that header is
> >>> >> 'X-Appsensor-Client-Application-Name' and the value would be the
> name
> >>> >> of the
> >>> >> client application being used.
> >>> >>
> >>> >> For further info check the addRecord method at
> >>> >>
> >>> >>
> https://github.com/jtmelton/appsensor/blob/master/sample-apps/simple-dashboard/src/main/webapp/index.jsp
> >>> >> .
> >>> >>
> >>> >> Thanks,
> >>> >> John
> >>> >>
> >>> >>
> >>> >> On Sun, Mar 16, 2014 at 11:40 PM, Chetan Karande
> >>> >> <chetan.karande at owasp.org>
> >>> >> wrote:
> >>> >>>
> >>> >>> Great. Thank you  John.
> >>> >>>
> >>> >>> On Mar 16, 2014 11:37 PM, "John Melton" <jtmelton at gmail.com>
> wrote:
> >>> >>>>
> >>> >>>> Chetan,
> >>> >>>> Good question. I've been working on the code. I'm actually pushing
> >>> >>>> some
> >>> >>>> code right now, then I'll send out a group email with some
> updates. I
> >>> >>>> haven't pulled out the JSON structure yet, but I'll try to get
> some
> >>> >>>> basic
> >>> >>>> examples together and documented and send it to the list in the
> next
> >>> >>>> couple
> >>> >>>> days.
> >>> >>>>
> >>> >>>> Thanks,
> >>> >>>> John
> >>> >>>>
> >>> >>>>
> >>> >>>> On Sun, Mar 16, 2014 at 10:57 PM, Chetan Karande
> >>> >>>> <chetan.karande at owasp.org> wrote:
> >>> >>>>>
> >>> >>>>> Hi John,
> >>> >>>>>
> >>> >>>>> I was side tracked due to other priorities for a while, and
> wanted
> >>> >>>>> to
> >>> >>>>> resume working in AppSensor reference implementation in Node.js.
> >>> >>>>>
> >>> >>>>> As per our last conversation, you were going to work on adding a
> >>> >>>>> sample
> >>> >>>>> app and include minimum required json message structure as part
> the
> >>> >>>>> tech
> >>> >>>>> documentation. Just wanted to check if you had chance to do any
> >>> >>>>> progress on
> >>> >>>>> that.
> >>> >>>>>
> >>> >>>>> Thank you.
> >>> >>>>>
> >>> >>>>>
> >>> >>>>> Best Regards,
> >>> >>>>>
> >>> >>>>> Chetan Karande
> >>> >>>>>
> >>> >>>>> chetan.karande at owasp.org
> >>> >>>>>
> >>> >>>>> OWASP NYC Local Chapter
> >>> >>>>>
> >>> >>>>> Open Web Application Security Project
> >>> >>>>>
> >>> >>>>>
> >>> >>>>>
> >>> >>>>> On Mon, Dec 9, 2013 at 2:42 AM, John Melton <jtmelton at gmail.com>
> >>> >>>>> wrote:
> >>> >>>>>>
> >>> >>>>>> Chetan,
> >>> >>>>>> Awesome to see what you're coming up with.
> >>> >>>>>>
> >>> >>>>>> With respect to your questions, I responded inline below, but
> also
> >>> >>>>>> wanted to mention that one task I have for Colin is to give him
> the
> >>> >>>>>> minimum
> >>> >>>>>> json structure needed so it can be documented. I'll also put
> that
> >>> >>>>>> in the
> >>> >>>>>> tech documentation as well.
> >>> >>>>>>
> >>> >>>>>> Thanks,
> >>> >>>>>> John
> >>> >>>>>>
> >>> >>>>>>
> >>> >>>>>> On Sun, Dec 8, 2013 at 6:07 PM, Chetan Karande
> >>> >>>>>> <chetan.karande at owasp.org> wrote:
> >>> >>>>>>>
> >>> >>>>>>> Hi John,
> >>> >>>>>>>
> >>> >>>>>>> I started exploring the AppSensor code on github and went over
> the
> >>> >>>>>>> AppSensor Guide document. It helped me in getting more idea
> about
> >>> >>>>>>> AppSensor
> >>> >>>>>>> in general. I have a few questions for you specifically about
> >>> >>>>>>> approaching
> >>> >>>>>>> Node.js demonstration implementation. Please answer when you
> get
> >>> >>>>>>> chance:
> >>> >>>>>>>
> >>> >>>>>>> Question 1. As per on our earlier email conversation, I
> explored
> >>> >>>>>>> more
> >>> >>>>>>> on implementing addEvent() and getResponses() methods in
> Node.js
> >>> >>>>>>> app. Based
> >>> >>>>>>> on the AppSensor REST Service code on github, I think the
> service
> >>> >>>>>>> expects
> >>> >>>>>>> client using following endpoints and JSON message structures.
> Can
> >>> >>>>>>> you please
> >>> >>>>>>> confirm if I am on right track, and answer question
> highlighted.
> >>> >>>>>>>
> >>> >>>>>>> addEvent() Implementation:
> >>> >>>>>>> ======================
> >>> >>>>>>>
> >>> >>>>>>> Invoke REST Endpoint: /api/v1.0/events
> >>> >>>>>>>
> >>> >>>>>>> Sample Event JSON Object to be sent from the Node.js  App:
> >>> >>>>>>>
> >>> >>>>>>> {
> >>> >>>>>>> user: {
> >>> >>>>>>> username: ""
> >>> >>>>>>> ipAddress: ""
> >>> >>>>>>> },
> >>> >>>>>>> detectionPoint : {  // ??? Does Node.js client need to populate
> >>> >>>>>>> this
> >>> >>>>>>> object? If yes, what goes in responses, how to decide
> threshold?
> >>> >>>>>>
> >>> >>>>>>
> >>> >>>>>> All that is needed in the detectionPoint object field is the
> "id"
> >>> >>>>>> field. The rest is found server-side.
> >>> >>>>>>
> >>> >>>>>>> id: "",
> >>> >>>>>>> threshold: "",
> >>> >>>>>>> responses: []
> >>> >>>>>>> },
> >>> >>>>>>> timestamp: "",
> >>> >>>>>>> detectionSystemId: "",
> >>> >>>>>>> resource: "",
> >>> >>>>>>> eventType: ""
> >>> >>>>>>>
> >>> >>>>>>> }
> >>> >>>>>>>
> >>> >>>>>>> getResponses() Implementation:
> >>> >>>>>>> =========================
> >>> >>>>>>>
> >>> >>>>>>> Poll REST EndPoint URL: /api/v1.0/responses
> >>> >>>>>>>
> >>> >>>>>>> Expected Response object from AppSensor REST service:
> >>> >>>>>>>
> >>> >>>>>>> {
> >>> >>>>>>> id: "",
> >>> >>>>>>> threshold: "",
> >>> >>>>>>> responses: [
> >>> >>>>>>> {
> >>> >>>>>>> user: {
> >>> >>>>>>> username: "",
> >>> >>>>>>> ipAddress: ""
> >>> >>>>>>> },
> >>> >>>>>>> action: "",
> >>> >>>>>>> detectionPoint: {}, //???. It contains responses array again.
> What
> >>> >>>>>>> to
> >>> >>>>>>> expect in it?
> >>> >>>>>>
> >>> >>>>>>
> >>> >>>>>> The detection point really shouldn't be part of the response -
> I'll
> >>> >>>>>> try
> >>> >>>>>> to remove this from being serialized.
> >>> >>>>>>
> >>> >>>>>>>
> >>> >>>>>>> timestamp: "",
> >>> >>>>>>> detectionSystemId: "",
> >>> >>>>>>> interval : {
> >>> >>>>>>> duration: "",
> >>> >>>>>>> unit: 0 //number
> >>> >>>>>>> }
> >>> >>>>>>> },
> >>> >>>>>>> {
> >>> >>>>>>> //another response
> >>> >>>>>>> }
> >>> >>>>>>> ]
> >>> >>>>>>> }
> >>> >>>>>>>
> >>> >>>>>>> 2. In case multiple responses received as result of invoking
> >>> >>>>>>> getResponses(), does order in which actions are performed
> matter?
> >>> >>>>>>
> >>> >>>>>>
> >>> >>>>>> Good question that I don't think has been considered before. It
> >>> >>>>>> shouldn't in our case in the reference implementation (unless we
> >>> >>>>>> add some
> >>> >>>>>> new features), but the timestamp is available, so it's likely
> best
> >>> >>>>>> practice
> >>> >>>>>> to execute them in order. I'll add this point to the
> documentation.
> >>> >>>>>>
> >>> >>>>>>>
> >>> >>>>>>>
> >>> >>>>>>> 3. Can I set AppSensor REST Server on my machine and use it for
> >>> >>>>>>> testing Node.js demo implementation? If so, can you please
> provide
> >>> >>>>>>> me steps
> >>> >>>>>>> to set it up.
> >>> >>>>>>
> >>> >>>>>>
> >>> >>>>>> Yep, but there's not a project setup to do it yet. I'll try to
> add
> >>> >>>>>> a
> >>> >>>>>> sample app for that soon. If you'd like to use it before I get
> that
> >>> >>>>>> done,
> >>> >>>>>> have a look at the appsensor-ws-rest-server project and the
> >>> >>>>>> RestRequestHandlerTest class. There is a helper method at the
> >>> >>>>>> bottom of the
> >>> >>>>>> class (startServer) that runs the service on grizzly. You can
> call
> >>> >>>>>> that in a
> >>> >>>>>> main method to get a small simple server going for testing.
> >>> >>>>>>
> >>> >>>>>>>
> >>> >>>>>>> Just to share, I am exploring to retrofit ghost, an open-source
> >>> >>>>>>> Node.js based blogging platform for AppSensor demonstration
> >>> >>>>>>> implementation.
> >>> >>>>>>> I am working on getting familiar with its code and identify
> >>> >>>>>>> detection
> >>> >>>>>>> points.
> >>> >>>>>>
> >>> >>>>>>
> >>> >>>>>> That's an awesome project. Adding security to existing popular
> >>> >>>>>> platforms has been a goal for OWASP for some time - nice to see
> >>> >>>>>> progress
> >>> >>>>>> here.
> >>> >>>>>>
> >>> >>>>>>>
> >>> >>>>>>>
> >>> >>>>>>> Best Regards,
> >>> >>>>>>>
> >>> >>>>>>> Chetan Karande
> >>> >>>>>>>
> >>> >>>>>>> chetan.karande at owasp.org
> >>> >>>>>>>
> >>> >>>>>>> OWASP NYC Local Chapter
> >>> >>>>>>>
> >>> >>>>>>> Open Web Application Security Project
> >>> >>>>>>
> >>> >>>>>>
> >>> >>>>>
> >>> >>>>
> >>> >>
> >>> >>
> >>> >> _______________________________________________
> >>> >> Owasp-appsensor-project mailing list
> >>> >> Owasp-appsensor-project at lists.owasp.org
> >>> >> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
> >>> >>
> >>
> >>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140401/04733013/attachment-0001.html>

From ryan.barnett at owasp.org  Wed Apr  2 14:40:10 2014
From: ryan.barnett at owasp.org (Ryan Barnett)
Date: Wed, 02 Apr 2014 10:40:10 -0400
Subject: [Owasp-appsensor-project] AppSensor Guide v2 - Update and
 forward plan
In-Reply-To: <CAAxdBBkGPokSkTgibmFGH5gzZOUN5jr=mFhb_BiKNm3MXLpt4g@mail.gmail.com>
References: <CAAxdBBnYOy4c1sbsJUupLHv3yeM8X9+ENPC+kv7W0PGG__+SiQ@mail.gmail.com>
	<CAAxdBBkGPokSkTgibmFGH5gzZOUN5jr=mFhb_BiKNm3MXLpt4g@mail.gmail.com>
Message-ID: <CF6197D6.E5004%ryan.barnett@owasp.org>

Sorry I have been quite for so long :)

Two items -

1) I am now reviewing the v2 guide in Google docs.
2) I am rethinking strategy with regards to how to utilize ModSecurity WAF
as an AppSensor tool.

Regarding #2 - While I can certainly add in applicable "tag" reference
links to existing OWASP ModSecurity CRS rules to point to the
corresponding AppSensor detection points - the fact is that this is not a
robust option.  While I do think that WAF alerts can funnel into AppSensor
alerts, it is not complete enough in its normal default configuration to
be considered a true "AppSensor" imlementation.  The key piece here is
that most WAFs work as "attack detection systems" for a very narrow
category of attacks - mainly Injection flaws.  In order to have good
AppSensor coverage, users need to customize the detection points for their
application.  It is this key piece that has caused me to re-think strategy
here for ModSecurity.  What I am considering is to still have basic
mappings in the OWASP CRS to AppSensor detection points, but to possibly
develop a completely separate "AppSensor" ruleset for ModSecurity.  These
rules would utilize the Lua API to implement the detection points and it
would take some customization by the user.

Anyways - just wanted to chime in on an update.  Great work by all on
getting AppSensor v2 moving forward.

Cheers,
Ryan

On 3/25/14 1:13 PM, "Colin Watson" <colin.watson at owasp.org> wrote:

>I have begun my ongoing additions and alterations. v1.38 now at:
>
>   https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
>
>This is still work in progress, and I will keep uploading every day or
>two, up until 17th April. I won't send any more such announcements to
>the list.
>
>Colin
>
>
>
>On 16 March 2014 17:08, Colin Watson <colin.watson at owasp.org> wrote:
>> Dear all
>>
>> Further details on DHS HOST Award funding for design has not been
>> forthcoming, therefore we will proceed without that. As mentioned
>>before,
>> the draft book continues to be maintained here:
>>
>>    https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
>>
>> I plan to finish my own work on the book by 17th April. If I receive any
>> contributions, edits and other additions by then, they will be
>>incorporated
>> into the draft for review.
>>
>> If you are able to review between the 18th and 30th April, please be
>>ready.
>> The review period will end on 1st May.
>>
>> We will then publish the v2.0 book on 7th May 2014. This will be as a
>>PDF,
>> in Word and also as a Lulu book.
>>
>> Further additions and improvements can be made after that in future
>> versions.
>>
>> Colin
>>
>>
>_______________________________________________
>Owasp-appsensor-project mailing list
>Owasp-appsensor-project at lists.owasp.org
>https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project



From dennis.groves at owasp.org  Wed Apr  2 15:04:49 2014
From: dennis.groves at owasp.org (Dennis Groves)
Date: Wed, 2 Apr 2014 08:04:49 -0700
Subject: [Owasp-appsensor-project] AppSensor Guide v2 - Update and
	forward plan
In-Reply-To: <CF6197D6.E5004%ryan.barnett@owasp.org>
References: <CAAxdBBnYOy4c1sbsJUupLHv3yeM8X9+ENPC+kv7W0PGG__+SiQ@mail.gmail.com>
	<CAAxdBBkGPokSkTgibmFGH5gzZOUN5jr=mFhb_BiKNm3MXLpt4g@mail.gmail.com>
	<CF6197D6.E5004%ryan.barnett@owasp.org>
Message-ID: <CAJL+Z05pLZugYGZkqAVNntpVSS8Fytcn0zXxRfTwfYfE_WSPgw@mail.gmail.com>

Hi Ryan,

Thank you for your feedback and thoughts! If you have any feedback about
the document please leave it in the document so we can be sure to
incorporate your input. If you are unable to do this let me know and I will
make sure you have edit rights.

As for your point about Mod Security / Incompleteness.

AppSensor describes a 'best practice' and can be built into new
applications. However, the very important question remains "what about
legacy applications?" How do you do an AppSensor then? And this is the
primary use case for most of the world. So while you can add tags, and they
are not as specific as the application detection points - I personally
think that is a giant win and move forward for the vast majority of people
who have legacy issues. After all, AppSensor is also a "Security
Architecture" pattern - and having mod security provide censors for
applications that would otherwise never have them is a giant win.

Sure it isn't complete, but maybe other IDS/IPS/SEIM/WAF vendors will start
doing the same and we can grow that coverage from precisely zero to
something more than nothing, and something less that building it in. I just
can not see how this doesn't create value for security architects, and thus
create an opportunity for additional security controls custom to the
architecture to be put in place to provide better protection.

Remember the key idea of AppSensor is a risk base approach of treating the
impact instead of the vulnerability or threat. This is not unlike fire
suppression systems in buildings. What is important is not the quality of
the sprinklers in the ceiling (although that is a factor) but the coverage
of the sprinklers in the building.

What are your thoughts?

Dennis


Dennis Groves <http://about.me/dennis.groves>, MSc
Email me, <dennis.groves at gmail.com> or schedule a meeting<http://goo.gl/8sPIy>
.
*This email is licensed under a CC BY-ND 3.0
<http://creativecommons.org/licenses/by-nd/3.0/deed.en_GB> license.*
Stand up for your freedom to install free
software.<http://www.fsf.org/campaigns/secure-boot/statement>

Please do not send me Microsoft Office/Apple iWork documents.
Send OpenDocument <http://fsf.org/campaigns/opendocument/> instead!

"What is the use of living, if it be not to strive for noble causes and
make this muddled world a better place for those who will live in it after
we have gone."
-- Winston Churchill, October 10th, 1908


On Wed, Apr 2, 2014 at 7:40 AM, Ryan Barnett <ryan.barnett at owasp.org> wrote:

> Sorry I have been quite for so long :)
>
> Two items -
>
> 1) I am now reviewing the v2 guide in Google docs.
> 2) I am rethinking strategy with regards to how to utilize ModSecurity WAF
> as an AppSensor tool.
>
> Regarding #2 - While I can certainly add in applicable "tag" reference
> links to existing OWASP ModSecurity CRS rules to point to the
> corresponding AppSensor detection points - the fact is that this is not a
> robust option.  While I do think that WAF alerts can funnel into AppSensor
> alerts, it is not complete enough in its normal default configuration to
> be considered a true "AppSensor" imlementation.  The key piece here is
> that most WAFs work as "attack detection systems" for a very narrow
> category of attacks - mainly Injection flaws.  In order to have good
> AppSensor coverage, users need to customize the detection points for their
> application.  It is this key piece that has caused me to re-think strategy
> here for ModSecurity.  What I am considering is to still have basic
> mappings in the OWASP CRS to AppSensor detection points, but to possibly
> develop a completely separate "AppSensor" ruleset for ModSecurity.  These
> rules would utilize the Lua API to implement the detection points and it
> would take some customization by the user.
>
> Anyways - just wanted to chime in on an update.  Great work by all on
> getting AppSensor v2 moving forward.
>
> Cheers,
> Ryan
>
> On 3/25/14 1:13 PM, "Colin Watson" <colin.watson at owasp.org> wrote:
>
> >I have begun my ongoing additions and alterations. v1.38 now at:
> >
> >   https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
> >
> >This is still work in progress, and I will keep uploading every day or
> >two, up until 17th April. I won't send any more such announcements to
> >the list.
> >
> >Colin
> >
> >
> >
> >On 16 March 2014 17:08, Colin Watson <colin.watson at owasp.org> wrote:
> >> Dear all
> >>
> >> Further details on DHS HOST Award funding for design has not been
> >> forthcoming, therefore we will proceed without that. As mentioned
> >>before,
> >> the draft book continues to be maintained here:
> >>
> >>    https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
> >>
> >> I plan to finish my own work on the book by 17th April. If I receive any
> >> contributions, edits and other additions by then, they will be
> >>incorporated
> >> into the draft for review.
> >>
> >> If you are able to review between the 18th and 30th April, please be
> >>ready.
> >> The review period will end on 1st May.
> >>
> >> We will then publish the v2.0 book on 7th May 2014. This will be as a
> >>PDF,
> >> in Word and also as a Lulu book.
> >>
> >> Further additions and improvements can be made after that in future
> >> versions.
> >>
> >> Colin
> >>
> >>
> >_______________________________________________
> >Owasp-appsensor-project mailing list
> >Owasp-appsensor-project at lists.owasp.org
> >https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>
>
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140402/4e16e33a/attachment.html>

From colin.watson at owasp.org  Wed Apr  2 15:18:23 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Wed, 2 Apr 2014 16:18:23 +0100
Subject: [Owasp-appsensor-project] AppSensor Guide v2 - Update and
	forward plan
In-Reply-To: <CF6197D6.E5004%ryan.barnett@owasp.org>
References: <CAAxdBBnYOy4c1sbsJUupLHv3yeM8X9+ENPC+kv7W0PGG__+SiQ@mail.gmail.com>
	<CAAxdBBkGPokSkTgibmFGH5gzZOUN5jr=mFhb_BiKNm3MXLpt4g@mail.gmail.com>
	<CF6197D6.E5004%ryan.barnett@owasp.org>
Message-ID: <CAAxdBBk4r2H1Rqi3C462J1-B9GBRmfhzBqpSdx=pSRw0MXS5EA@mail.gmail.com>

Hello Ryan

I am sitting here writing python scripts to demonstrate pulling
AppSensor event data into SIEM and log management tools, and at the
same time adding new content gradually to the draft book. I am adding
directly into (my) source Word document, and saving it nightly to:

   https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc

Please do edit in Google Docs, and I will incorporate those.... but if
you have any major section re-writes, you can also do those in any
other format and send them across.

I think Chapter 28 (v1.41 numbering) titled "Leveraging a web
application firewall" is a key one that we need help from you on.
There are other references to WAFs elsewhere in the text and I hope I
have the balance right.


> Anyways - just wanted to chime in on an update.

Your name has now been added to the front cover! (v1.42 will be
uploaded in a few hours). We are freezing content additions on the
17th April, for publication of v2.0 in early May. More content can be
added to a later edition too.

Colin





On 2 April 2014 15:40, Ryan Barnett <ryan.barnett at owasp.org> wrote:
> Sorry I have been quite for so long :)
>
> Two items -
>
> 1) I am now reviewing the v2 guide in Google docs.
> 2) I am rethinking strategy with regards to how to utilize ModSecurity WAF
> as an AppSensor tool.
>
> Regarding #2 - While I can certainly add in applicable "tag" reference
> links to existing OWASP ModSecurity CRS rules to point to the
> corresponding AppSensor detection points - the fact is that this is not a
> robust option.  While I do think that WAF alerts can funnel into AppSensor
> alerts, it is not complete enough in its normal default configuration to
> be considered a true "AppSensor" imlementation.  The key piece here is
> that most WAFs work as "attack detection systems" for a very narrow
> category of attacks - mainly Injection flaws.  In order to have good
> AppSensor coverage, users need to customize the detection points for their
> application.  It is this key piece that has caused me to re-think strategy
> here for ModSecurity.  What I am considering is to still have basic
> mappings in the OWASP CRS to AppSensor detection points, but to possibly
> develop a completely separate "AppSensor" ruleset for ModSecurity.  These
> rules would utilize the Lua API to implement the detection points and it
> would take some customization by the user.
>
> Anyways - just wanted to chime in on an update.  Great work by all on
> getting AppSensor v2 moving forward.
>
> Cheers,
> Ryan
>
> On 3/25/14 1:13 PM, "Colin Watson" <colin.watson at owasp.org> wrote:
>
>>I have begun my ongoing additions and alterations. v1.38 now at:
>>
>>   https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
>>
>>This is still work in progress, and I will keep uploading every day or
>>two, up until 17th April. I won't send any more such announcements to
>>the list.
>>
>>Colin
>>
>>
>>
>>On 16 March 2014 17:08, Colin Watson <colin.watson at owasp.org> wrote:
>>> Dear all
>>>
>>> Further details on DHS HOST Award funding for design has not been
>>> forthcoming, therefore we will proceed without that. As mentioned
>>>before,
>>> the draft book continues to be maintained here:
>>>
>>>    https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
>>>
>>> I plan to finish my own work on the book by 17th April. If I receive any
>>> contributions, edits and other additions by then, they will be
>>>incorporated
>>> into the draft for review.
>>>
>>> If you are able to review between the 18th and 30th April, please be
>>>ready.
>>> The review period will end on 1st May.
>>>
>>> We will then publish the v2.0 book on 7th May 2014. This will be as a
>>>PDF,
>>> in Word and also as a Lulu book.
>>>
>>> Further additions and improvements can be made after that in future
>>> versions.
>>>
>>> Colin
>>>
>>>
>>_______________________________________________
>>Owasp-appsensor-project mailing list
>>Owasp-appsensor-project at lists.owasp.org
>>https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>
>

From ryan.barnett at owasp.org  Wed Apr  2 15:21:59 2014
From: ryan.barnett at owasp.org (Ryan Barnett)
Date: Wed, 02 Apr 2014 11:21:59 -0400
Subject: [Owasp-appsensor-project] AppSensor Guide v2 - Update and
 forward plan
In-Reply-To: <CAAxdBBk4r2H1Rqi3C462J1-B9GBRmfhzBqpSdx=pSRw0MXS5EA@mail.gmail.com>
References: <CAAxdBBnYOy4c1sbsJUupLHv3yeM8X9+ENPC+kv7W0PGG__+SiQ@mail.gmail.com>
	<CAAxdBBkGPokSkTgibmFGH5gzZOUN5jr=mFhb_BiKNm3MXLpt4g@mail.gmail.com>
	<CF6197D6.E5004%ryan.barnett@owasp.org>
	<CAAxdBBk4r2H1Rqi3C462J1-B9GBRmfhzBqpSdx=pSRw0MXS5EA@mail.gmail.com>
Message-ID: <CF61A344.E5041%ryan.barnett@owasp.org>

Got it.  Working on Chapter 28 updates in Google docs now.

-Ryan

On 4/2/14 11:18 AM, "Colin Watson" <colin.watson at owasp.org> wrote:

>Hello Ryan
>
>I am sitting here writing python scripts to demonstrate pulling
>AppSensor event data into SIEM and log management tools, and at the
>same time adding new content gradually to the draft book. I am adding
>directly into (my) source Word document, and saving it nightly to:
>
>   https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
>
>Please do edit in Google Docs, and I will incorporate those.... but if
>you have any major section re-writes, you can also do those in any
>other format and send them across.
>
>I think Chapter 28 (v1.41 numbering) titled "Leveraging a web
>application firewall" is a key one that we need help from you on.
>There are other references to WAFs elsewhere in the text and I hope I
>have the balance right.
>
>
>> Anyways - just wanted to chime in on an update.
>
>Your name has now been added to the front cover! (v1.42 will be
>uploaded in a few hours). We are freezing content additions on the
>17th April, for publication of v2.0 in early May. More content can be
>added to a later edition too.
>
>Colin
>
>
>
>
>
>On 2 April 2014 15:40, Ryan Barnett <ryan.barnett at owasp.org> wrote:
>> Sorry I have been quite for so long :)
>>
>> Two items -
>>
>> 1) I am now reviewing the v2 guide in Google docs.
>> 2) I am rethinking strategy with regards to how to utilize ModSecurity
>>WAF
>> as an AppSensor tool.
>>
>> Regarding #2 - While I can certainly add in applicable "tag" reference
>> links to existing OWASP ModSecurity CRS rules to point to the
>> corresponding AppSensor detection points - the fact is that this is not
>>a
>> robust option.  While I do think that WAF alerts can funnel into
>>AppSensor
>> alerts, it is not complete enough in its normal default configuration to
>> be considered a true "AppSensor" imlementation.  The key piece here is
>> that most WAFs work as "attack detection systems" for a very narrow
>> category of attacks - mainly Injection flaws.  In order to have good
>> AppSensor coverage, users need to customize the detection points for
>>their
>> application.  It is this key piece that has caused me to re-think
>>strategy
>> here for ModSecurity.  What I am considering is to still have basic
>> mappings in the OWASP CRS to AppSensor detection points, but to possibly
>> develop a completely separate "AppSensor" ruleset for ModSecurity.
>>These
>> rules would utilize the Lua API to implement the detection points and it
>> would take some customization by the user.
>>
>> Anyways - just wanted to chime in on an update.  Great work by all on
>> getting AppSensor v2 moving forward.
>>
>> Cheers,
>> Ryan
>>
>> On 3/25/14 1:13 PM, "Colin Watson" <colin.watson at owasp.org> wrote:
>>
>>>I have begun my ongoing additions and alterations. v1.38 now at:
>>>
>>>   https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
>>>
>>>This is still work in progress, and I will keep uploading every day or
>>>two, up until 17th April. I won't send any more such announcements to
>>>the list.
>>>
>>>Colin
>>>
>>>
>>>
>>>On 16 March 2014 17:08, Colin Watson <colin.watson at owasp.org> wrote:
>>>> Dear all
>>>>
>>>> Further details on DHS HOST Award funding for design has not been
>>>> forthcoming, therefore we will proceed without that. As mentioned
>>>>before,
>>>> the draft book continues to be maintained here:
>>>>
>>>>    https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
>>>>
>>>> I plan to finish my own work on the book by 17th April. If I receive
>>>>any
>>>> contributions, edits and other additions by then, they will be
>>>>incorporated
>>>> into the draft for review.
>>>>
>>>> If you are able to review between the 18th and 30th April, please be
>>>>ready.
>>>> The review period will end on 1st May.
>>>>
>>>> We will then publish the v2.0 book on 7th May 2014. This will be as a
>>>>PDF,
>>>> in Word and also as a Lulu book.
>>>>
>>>> Further additions and improvements can be made after that in future
>>>> versions.
>>>>
>>>> Colin
>>>>
>>>>
>>>_______________________________________________
>>>Owasp-appsensor-project mailing list
>>>Owasp-appsensor-project at lists.owasp.org
>>>https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>>
>>



From dennis.groves at owasp.org  Wed Apr  2 15:21:56 2014
From: dennis.groves at owasp.org (Dennis Groves)
Date: Wed, 2 Apr 2014 08:21:56 -0700
Subject: [Owasp-appsensor-project] AppSensor Guide v2 - Update and
	forward plan
In-Reply-To: <CAAxdBBk4r2H1Rqi3C462J1-B9GBRmfhzBqpSdx=pSRw0MXS5EA@mail.gmail.com>
References: <CAAxdBBnYOy4c1sbsJUupLHv3yeM8X9+ENPC+kv7W0PGG__+SiQ@mail.gmail.com>
	<CAAxdBBkGPokSkTgibmFGH5gzZOUN5jr=mFhb_BiKNm3MXLpt4g@mail.gmail.com>
	<CF6197D6.E5004%ryan.barnett@owasp.org>
	<CAAxdBBk4r2H1Rqi3C462J1-B9GBRmfhzBqpSdx=pSRw0MXS5EA@mail.gmail.com>
Message-ID: <CAJL+Z04535BFFghy7=KtS=RLskENref65oQWCnnY5ZcnBN6idA@mail.gmail.com>

Colin why don't you join us in editing the google doc? We an always export
and make it sexy. The whole point of group collaboration is that we all
work on it together. :-)

Dennis Groves <http://about.me/dennis.groves>, MSc
Email me, <dennis.groves at gmail.com> or schedule a meeting<http://goo.gl/8sPIy>
.
*This email is licensed under a CC BY-ND 3.0
<http://creativecommons.org/licenses/by-nd/3.0/deed.en_GB> license.*
Stand up for your freedom to install free
software.<http://www.fsf.org/campaigns/secure-boot/statement>

Please do not send me Microsoft Office/Apple iWork documents.
Send OpenDocument <http://fsf.org/campaigns/opendocument/> instead!

"What is the use of living, if it be not to strive for noble causes and
make this muddled world a better place for those who will live in it after
we have gone."
-- Winston Churchill, October 10th, 1908


On Wed, Apr 2, 2014 at 8:18 AM, Colin Watson <colin.watson at owasp.org> wrote:

> Hello Ryan
>
> I am sitting here writing python scripts to demonstrate pulling
> AppSensor event data into SIEM and log management tools, and at the
> same time adding new content gradually to the draft book. I am adding
> directly into (my) source Word document, and saving it nightly to:
>
>    https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
>
> Please do edit in Google Docs, and I will incorporate those.... but if
> you have any major section re-writes, you can also do those in any
> other format and send them across.
>
> I think Chapter 28 (v1.41 numbering) titled "Leveraging a web
> application firewall" is a key one that we need help from you on.
> There are other references to WAFs elsewhere in the text and I hope I
> have the balance right.
>
>
> > Anyways - just wanted to chime in on an update.
>
> Your name has now been added to the front cover! (v1.42 will be
> uploaded in a few hours). We are freezing content additions on the
> 17th April, for publication of v2.0 in early May. More content can be
> added to a later edition too.
>
> Colin
>
>
>
>
>
> On 2 April 2014 15:40, Ryan Barnett <ryan.barnett at owasp.org> wrote:
> > Sorry I have been quite for so long :)
> >
> > Two items -
> >
> > 1) I am now reviewing the v2 guide in Google docs.
> > 2) I am rethinking strategy with regards to how to utilize ModSecurity
> WAF
> > as an AppSensor tool.
> >
> > Regarding #2 - While I can certainly add in applicable "tag" reference
> > links to existing OWASP ModSecurity CRS rules to point to the
> > corresponding AppSensor detection points - the fact is that this is not a
> > robust option.  While I do think that WAF alerts can funnel into
> AppSensor
> > alerts, it is not complete enough in its normal default configuration to
> > be considered a true "AppSensor" imlementation.  The key piece here is
> > that most WAFs work as "attack detection systems" for a very narrow
> > category of attacks - mainly Injection flaws.  In order to have good
> > AppSensor coverage, users need to customize the detection points for
> their
> > application.  It is this key piece that has caused me to re-think
> strategy
> > here for ModSecurity.  What I am considering is to still have basic
> > mappings in the OWASP CRS to AppSensor detection points, but to possibly
> > develop a completely separate "AppSensor" ruleset for ModSecurity.  These
> > rules would utilize the Lua API to implement the detection points and it
> > would take some customization by the user.
> >
> > Anyways - just wanted to chime in on an update.  Great work by all on
> > getting AppSensor v2 moving forward.
> >
> > Cheers,
> > Ryan
> >
> > On 3/25/14 1:13 PM, "Colin Watson" <colin.watson at owasp.org> wrote:
> >
> >>I have begun my ongoing additions and alterations. v1.38 now at:
> >>
> >>   https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
> >>
> >>This is still work in progress, and I will keep uploading every day or
> >>two, up until 17th April. I won't send any more such announcements to
> >>the list.
> >>
> >>Colin
> >>
> >>
> >>
> >>On 16 March 2014 17:08, Colin Watson <colin.watson at owasp.org> wrote:
> >>> Dear all
> >>>
> >>> Further details on DHS HOST Award funding for design has not been
> >>> forthcoming, therefore we will proceed without that. As mentioned
> >>>before,
> >>> the draft book continues to be maintained here:
> >>>
> >>>    https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
> >>>
> >>> I plan to finish my own work on the book by 17th April. If I receive
> any
> >>> contributions, edits and other additions by then, they will be
> >>>incorporated
> >>> into the draft for review.
> >>>
> >>> If you are able to review between the 18th and 30th April, please be
> >>>ready.
> >>> The review period will end on 1st May.
> >>>
> >>> We will then publish the v2.0 book on 7th May 2014. This will be as a
> >>>PDF,
> >>> in Word and also as a Lulu book.
> >>>
> >>> Further additions and improvements can be made after that in future
> >>> versions.
> >>>
> >>> Colin
> >>>
> >>>
> >>_______________________________________________
> >>Owasp-appsensor-project mailing list
> >>Owasp-appsensor-project at lists.owasp.org
> >>https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
> >
> >
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140402/a6a5da88/attachment.html>

From colin.watson at owasp.org  Wed Apr  2 15:40:32 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Wed, 2 Apr 2014 16:40:32 +0100
Subject: [Owasp-appsensor-project] AppSensor Guide v2 - Update and
	forward plan
In-Reply-To: <CAJL+Z04535BFFghy7=KtS=RLskENref65oQWCnnY5ZcnBN6idA@mail.gmail.com>
References: <CAAxdBBnYOy4c1sbsJUupLHv3yeM8X9+ENPC+kv7W0PGG__+SiQ@mail.gmail.com>
	<CAAxdBBkGPokSkTgibmFGH5gzZOUN5jr=mFhb_BiKNm3MXLpt4g@mail.gmail.com>
	<CF6197D6.E5004%ryan.barnett@owasp.org>
	<CAAxdBBk4r2H1Rqi3C462J1-B9GBRmfhzBqpSdx=pSRw0MXS5EA@mail.gmail.com>
	<CAJL+Z04535BFFghy7=KtS=RLskENref65oQWCnnY5ZcnBN6idA@mail.gmail.com>
Message-ID: <CAAxdBB=PAdfFpZ9A=4yzQL+MhsY5=ESRmxsdy3BRyyxtThLAhA@mail.gmail.com>

Dennis

> Colin why don't you join us in editing the google doc?

Because...

- A Lulu Word template was used as a starting point, to ensure we can
publish to Lulu rapidly at the end
- Goggle Docs is too slow to render on a super-fast computer
- It is clunky to use
- Some useful functionality is completely missing
- The import has broken a lot of the the previously worked on layout
and formatting
- I still seem to be the main writer as there have been only a handful
of edits to the Google Doc (until Ryan started!)
- I have added 2-3 orders of magnitude more content than has been done
so far in Google Docs since it was uploaded there
- v2.0 will be created from the Word document

I am closing off v2.0. After v2.0 you can do what you like!

BTW I would have preferred to use Open Office text document, but the
OWASP wiki doesn't allow that to be uploaded. I have asked a number of
times for that to be changed.


>We an always export
> and make it sexy.

I/we don't have time to re-do all the existing tables,
cross-referencing and other formatting.


> The whole point of group collaboration is that we all work
> on it together. :-)

Like I said previously, I'm very happy if people want to edit in
Google Docs, but that I wouldn't be doing that myself. Please don't
force me to do something.  I will pull in all the updates on the 18th
April and again at the end of the review period (1st May).

Colin

From ryan.barnett at owasp.org  Wed Apr  2 17:26:30 2014
From: ryan.barnett at owasp.org (Ryan Barnett)
Date: Wed, 02 Apr 2014 13:26:30 -0400
Subject: [Owasp-appsensor-project] AppSensor and WAFs
In-Reply-To: <CF61BE1C.E50F5%ryan.barnett@owasp.org>
References: <CF61BE1C.E50F5%ryan.barnett@owasp.org>
Message-ID: <CF61C059.E5106%ryan.barnett@owasp.org>

I am watching Michael's recent AppSensor presentation video
(https://www.youtube.com/watch?v=YOtTPr8r0tI) and an interesting
concept/debate popped into my head.  At around 18:00 mins in, Michael is
talking about how AppSensor is different than WAF in that it has internal
app knowledge.  While this is certainly true of WAFs that are deployed as
totally separate systems, I wanted to pose this question to the group ? How
are the lines blurred here if we are talking about ModSecurity for Java?  In
this deployment model ? ModSecurity is hooked directly into the Java web
server via JNI and has access to more data.  Additionally, it can use
BeanShell API code to interact with Java -
http://www.modsecurity.org/projects/modsecurity/java/index.html.

This is more of a philosophical exercise :)  But I do want to clarify under
which WAF deployment modes does the security layer stop being considered a
"WAF".  ModSecurity for Java is an interesting hybrid model to consider.

Thoughts?

-Ryan



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140402/a66e5b6d/attachment-0001.html>

From colin.watson at owasp.org  Wed Apr  2 19:46:29 2014
From: colin.watson at owasp.org (=?utf-8?B?Y29saW4ud2F0c29uQG93YXNwLm9yZw==?=)
Date: Wed, 02 Apr 2014 20:46:29 +0100
Subject: [Owasp-appsensor-project] =?utf-8?q?AppSensor_and_WAFs?=
Message-ID: <533c6965.2315c20a.0ceb.ffff85ff@mx.google.com>

Ryan
Good challenge! I like this, and any other way of hooking into apps. 

Maybe we also need a Chapter 27.5

Colin

----- Reply message -----
From: "Ryan Barnett" <ryan.barnett at owasp.org>
To: <owasp-appsensor-project at lists.owasp.org>
Subject: [Owasp-appsensor-project] AppSensor and WAFs
Date: Wed, Apr 2, 2014 18:26

I am watching Michael's recent AppSensor presentation video (https://www.youtube.com/watch?v=YOtTPr8r0tI) and an interesting concept/debate popped into my head.  At around 18:00 mins in, Michael is talking about how AppSensor is different than WAF in that it has internal app knowledge.  While this is certainly true of WAFs that are deployed as totally separate systems, I wanted to pose this question to the group ? How are the lines blurred here if we are talking about ModSecurity for Java?  In this deployment model ? ModSecurity is hooked directly into the Java web server via JNI and has access to more data.  Additionally, it can use BeanShell API code to interact with Java - http://www.modsecurity.org/projects/modsecurity/java/index.html.  

This is more of a philosophical exercise :)  But I do want to clarify under which WAF deployment modes does the security layer stop being considered a "WAF".  ModSecurity for Java is an interesting hybrid model to consider.

Thoughts?

-Ryan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140402/35e87120/attachment.html>

From michael.coates at owasp.org  Wed Apr  2 19:56:15 2014
From: michael.coates at owasp.org (Michael Coates)
Date: Wed, 2 Apr 2014 12:56:15 -0700
Subject: [Owasp-appsensor-project] AppSensor and WAFs
In-Reply-To: <533c6965.2315c20a.0ceb.ffff85ff@mx.google.com>
References: <533c6965.2315c20a.0ceb.ffff85ff@mx.google.com>
Message-ID: <CAKA9LHzXBmhfBRDUyjZRuxPshoTFQ2VKHpgVdf41cJ5JD1cZ4Q@mail.gmail.com>

Ryan,

Capturing a middle ground deployment would be good. The comments about WAF
are about those systems that don't have app knowledge. So if something can
be both a WAF and have app knowledge, then we should call it out as a
separate item


--
Michael Coates
@_mwc



On Wed, Apr 2, 2014 at 12:46 PM, colin.watson at owasp.org <
colin.watson at owasp.org> wrote:

> Ryan
>
> Good challenge! I like this, and any other way of hooking into apps.
>
> Maybe we also need a Chapter 27.5
>
> Colin
>
> ----- Reply message -----
> From: "Ryan Barnett" <ryan.barnett at owasp.org>
> To: <owasp-appsensor-project at lists.owasp.org>
> Subject: [Owasp-appsensor-project] AppSensor and WAFs
> Date: Wed, Apr 2, 2014 18:26
>
> I am watching Michael's recent AppSensor presentation video (
> https://www.youtube.com/watch?v=YOtTPr8r0tI) and an interesting
> concept/debate popped into my head.  At around 18:00 mins in, Michael is
> talking about how AppSensor is different than WAF in that it has internal
> app knowledge.  While this is certainly true of WAFs that are deployed as
> totally separate systems, I wanted to pose this question to the group - How
> are the lines blurred here if we are talking about ModSecurity for Java?
>  In this deployment model - ModSecurity is hooked directly into the Java
> web server via JNI and has access to more data.  Additionally, it can use
> BeanShell API code to interact with Java -
> http://www.modsecurity.org/projects/modsecurity/java/index.html.
>
> This is more of a philosophical exercise :)  But I do want to clarify
> under which WAF deployment modes does the security layer stop being
> considered a "WAF".  ModSecurity for Java is an interesting hybrid model to
> consider.
>
> Thoughts?
>
> -Ryan
>
>
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140402/0cefae27/attachment.html>

From ryan.barnett at owasp.org  Wed Apr  2 20:02:07 2014
From: ryan.barnett at owasp.org (Ryan Barnett)
Date: Wed, 02 Apr 2014 16:02:07 -0400
Subject: [Owasp-appsensor-project] AppSensor and WAFs
In-Reply-To: <CAKA9LHzXBmhfBRDUyjZRuxPshoTFQ2VKHpgVdf41cJ5JD1cZ4Q@mail.gmail.com>
References: <533c6965.2315c20a.0ceb.ffff85ff@mx.google.com>
	<CAKA9LHzXBmhfBRDUyjZRuxPshoTFQ2VKHpgVdf41cJ5JD1cZ4Q@mail.gmail.com>
Message-ID: <CF61E3E3.E5192%ryan.barnett@owasp.org>

Agreed.  I encountered this "naming" issue previously with regards to the
ESAPI Java WAF.  Isn't that a potential misnomer?  If the detection logic is
inside the app ? then is it really a WAF at all?  Hmm?  Perhaps we need a
new name.  The term WAF is overloaded anyways as it leads to misconceptions
about both deployment models (inline, separate security device) and response
action (blocking).  Maybe talking more about "Application Security
Filtering" or something would be more appropriate.

-Ryan  

From:  Michael Coates <michael.coates at owasp.org>
Date:  Wednesday, April 2, 2014 3:56 PM
To:  "colin.watson at owasp.org" <colin.watson at owasp.org>
Cc:  Ryan Barnett <ryan.barnett at owasp.org>, owasp-appsensor-project
<owasp-appsensor-project at lists.owasp.org>
Subject:  Re: [Owasp-appsensor-project] AppSensor and WAFs

> Ryan,
> 
> Capturing a middle ground deployment would be good. The comments about WAF are
> about those systems that don't have app knowledge. So if something can be both
> a WAF and have app knowledge, then we should call it out as a separate item
> 
> 
> --
> Michael Coates
> @_mwc
> 
> 
> 
> On Wed, Apr 2, 2014 at 12:46 PM, colin.watson at owasp.org
> <colin.watson at owasp.org> wrote:
>> Ryan
>> 
>> Good challenge! I like this, and any other way of hooking into apps.
>> 
>> Maybe we also need a Chapter 27.5
>> 
>> Colin
>> 
>> ----- Reply message -----
>> From: "Ryan Barnett" <ryan.barnett at owasp.org>
>> To: <owasp-appsensor-project at lists.owasp.org>
>> Subject: [Owasp-appsensor-project] AppSensor and WAFs
>> Date: Wed, Apr 2, 2014 18:26
>> 
>> I am watching Michael's recent AppSensor presentation video
>> (https://www.youtube.com/watch?v=YOtTPr8r0tI) and an interesting
>> concept/debate popped into my head.  At around 18:00 mins in, Michael is
>> talking about how AppSensor is different than WAF in that it has internal app
>> knowledge.  While this is certainly true of WAFs that are deployed as totally
>> separate systems, I wanted to pose this question to the group ? How are the
>> lines blurred here if we are talking about ModSecurity for Java?  In this
>> deployment model ? ModSecurity is hooked directly into the Java web server
>> via JNI and has access to more data.  Additionally, it can use BeanShell API
>> code to interact with Java -
>> http://www.modsecurity.org/projects/modsecurity/java/index.html.
>> 
>> This is more of a philosophical exercise :)  But I do want to clarify under
>> which WAF deployment modes does the security layer stop being considered a
>> "WAF".  ModSecurity for Java is an interesting hybrid model to consider.
>> 
>> Thoughts?
>> 
>> -Ryan
>> 
>> 
>> _______________________________________________
>> Owasp-appsensor-project mailing list
>> Owasp-appsensor-project at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>> 
> 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140402/402a54b0/attachment.html>

From colin.watson at owasp.org  Thu Apr  3 07:46:20 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Thu, 3 Apr 2014 08:46:20 +0100
Subject: [Owasp-appsensor-project] AppSensor and WAFs
In-Reply-To: <CF61E3E3.E5192%ryan.barnett@owasp.org>
References: <533c6965.2315c20a.0ceb.ffff85ff@mx.google.com>
	<CAKA9LHzXBmhfBRDUyjZRuxPshoTFQ2VKHpgVdf41cJ5JD1cZ4Q@mail.gmail.com>
	<CF61E3E3.E5192%ryan.barnett@owasp.org>
Message-ID: <CAAxdBBn+Gf1UaD4SBPWXfV5rrCWtUbkSwDFY1ynfRExkrm95Bg@mail.gmail.com>

Ryan

The naming would be important. I see the term "filter" as also being a
bit overloaded too. I'm pretty sure some sectors call application
firewalls "guards" or "filters" - maybe for XML or certain file type
validation?

The word "harness" came to mind last night, in that it is an add-on,
but tightly integrated. So maybe something like "Runtime Security
Harness", "Application Security Harness" or "Software Security
Harness" (SSH for L7!). At least it wouldn't "sound like WAF" even if
it can use WAF-like technologies.

I'm sure you have better contacts in the industry to come up with some
WAFish term.

Colin



On 2 April 2014 21:02, Ryan Barnett <ryan.barnett at owasp.org> wrote:
> Agreed.  I encountered this "naming" issue previously with regards to the
> ESAPI Java WAF.  Isn't that a potential misnomer?  If the detection logic is
> inside the app - then is it really a WAF at all?  Hmm...  Perhaps we need a
> new name.  The term WAF is overloaded anyways as it leads to misconceptions
> about both deployment models (inline, separate security device) and response
> action (blocking).  Maybe talking more about "Application Security
> Filtering" or something would be more appropriate.
>
> -Ryan
>
> From: Michael Coates <michael.coates at owasp.org>
> Date: Wednesday, April 2, 2014 3:56 PM
> To: "colin.watson at owasp.org" <colin.watson at owasp.org>
> Cc: Ryan Barnett <ryan.barnett at owasp.org>, owasp-appsensor-project
> <owasp-appsensor-project at lists.owasp.org>
> Subject: Re: [Owasp-appsensor-project] AppSensor and WAFs
>
> Ryan,
>
> Capturing a middle ground deployment would be good. The comments about WAF
> are about those systems that don't have app knowledge. So if something can
> be both a WAF and have app knowledge, then we should call it out as a
> separate item
>
>
> --
> Michael Coates
> @_mwc
>
>
>
> On Wed, Apr 2, 2014 at 12:46 PM, colin.watson at owasp.org
> <colin.watson at owasp.org> wrote:
>>
>> Ryan
>>
>> Good challenge! I like this, and any other way of hooking into apps.
>>
>> Maybe we also need a Chapter 27.5
>>
>> Colin
>>
>> ----- Reply message -----
>> From: "Ryan Barnett" <ryan.barnett at owasp.org>
>> To: <owasp-appsensor-project at lists.owasp.org>
>> Subject: [Owasp-appsensor-project] AppSensor and WAFs
>> Date: Wed, Apr 2, 2014 18:26
>>
>> I am watching Michael's recent AppSensor presentation video
>> (https://www.youtube.com/watch?v=YOtTPr8r0tI) and an interesting
>> concept/debate popped into my head.  At around 18:00 mins in, Michael is
>> talking about how AppSensor is different than WAF in that it has internal
>> app knowledge.  While this is certainly true of WAFs that are deployed as
>> totally separate systems, I wanted to pose this question to the group - How
>> are the lines blurred here if we are talking about ModSecurity for Java?  In
>> this deployment model - ModSecurity is hooked directly into the Java web
>> server via JNI and has access to more data.  Additionally, it can use
>> BeanShell API code to interact with Java -
>> http://www.modsecurity.org/projects/modsecurity/java/index.html.
>>
>> This is more of a philosophical exercise :)  But I do want to clarify
>> under which WAF deployment modes does the security layer stop being
>> considered a "WAF".  ModSecurity for Java is an interesting hybrid model to
>> consider.
>>
>> Thoughts?
>>
>> -Ryan
>>
>>
>> _______________________________________________
>> Owasp-appsensor-project mailing list
>> Owasp-appsensor-project at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>>
>

From colin.watson at owasp.org  Thu Apr  3 10:43:24 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Thu, 3 Apr 2014 11:43:24 +0100
Subject: [Owasp-appsensor-project] Detection points for IP-address and
 user agent
In-Reply-To: <CECCCB07.C8038%ryan.barnett@owasp.org>
References: <CAHnknQVoBNKtNFW0vPqEKh4K3fDwkaHVgzF-NL8XDHZ3cqUKWA@mail.gmail.com>
	<CECCCB07.C8038%ryan.barnett@owasp.org>
Message-ID: <CAAxdBBkf9VUjdDJWaz=qNk=sqDyXiJCtq1s4tQxjA3tx7jReCA@mail.gmail.com>

Erlend (ref your posting 10 Dec 2013)

Your input has been added to the considerations of example detection
points SE5 and SE6 in the reference section of the v2.0 Guide being
worked on currently, and on the wiki:

   https://www.owasp.org/index.php/AppSensor_DetectionPoints

Thank you for your contribution to the project.

Colin


On 10 December 2013 18:45, Ryan Barnett <ryan.barnett at owasp.org> wrote:
> Yes, we run into similar issues with the ModSecurity CRS.  When implementing
> these AppSensor Detection Points - we opted to check each one of these
> individually and they would raise an alert for "suspicious" behaviour but
> only if BOTH IP netblock and UA changing would result in a malicious client
> designation (for potential Session Hijacking).
>
> https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/master/optional_rules/modsecurity_crs_16_session_hijacking.conf
>
> -Ryan
>
> From: Erlend Oftedal <erlend at oftedal.no>
> Date: Tuesday, December 10, 2013 1:40 PM
> To: <owasp-appsensor-project at lists.owasp.org>
> Subject: [Owasp-appsensor-project] Detection points for IP-address and user
> agent
>
> Hi
>
> I was wondering whether anyone has looked into detection points for
> IP-address and user agent.
> While running this on a test site, I experienced the IP-address changing
> benignly due to the use of clustered outgoing proxies, and user agents
> changing during downloads of PDFs. The user agent changed between IE and
> Chrome Frame, IE also sends "Contype" as user agent when a PDF is downloaded
> from the Adobe Reader plugin. Similar things happen for Safari and other
> browsers. On Windows 8, the word "touch" also sometimes appears in the user
> agent and sometimes not.
> This makes it hard to use these detection points for anything useful without
> maintaining a seemingly fragile set of rules.
>
> Best regards
> Erlend
> _______________________________________________ Owasp-appsensor-project
> mailing list Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>
>
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>

From colin.watson at owasp.org  Fri Apr  4 14:51:09 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Fri, 4 Apr 2014 15:51:09 +0100
Subject: [Owasp-appsensor-project] AppSensor Guide v2.0 - Last call for
	"whole section" contributions
Message-ID: <CAAxdBBku2bXQ4=hE=L0YjyCAVmj6TqFWdZ3+vX96VwLik33fgg@mail.gmail.com>

Dear all

Further to Jim's perfectly reasonable "cage rattling" a couple of
weeks ago, here is an update.

Since the start of this push, 10 days ago, to publish I have added
more new content to v1.38. In numbers this means the book has grown by
in total 26 extra pages:

- 5,000 new words
- 22 new figures
- 5 new tables
- 2 additional contributors listed (Josh and Erlend)

I went through the version on Google Docs today, but cannot see any
actual edits and new additional text. I only see a score or so
comments. BTW apart from the Preamble, most of the text was drafted by
me alone, so Josh, some of your questions directed at Ryan about use
of a WAF, are really my misunderstandings, mistakes or lack of
clarity.

Version v1.45 is in the usual place linked from the project wiki. I
have also tried to check all the applied styles, and created new
styles for URLs and code samples.

https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc

The following sections appear to be largely incomplete (and by whom!).
Please forward on any contributions for these, otherwise they will be
dropped from the version for review in a couple of weeks time, when
bulk content addition will then be frozen. If anyone else is able to
write these, perhaps with the exception of the Foreword, that would be
fine too. These sections can of course be added back into a later
edition if they are written subsequently.

[MC] Foreword
[DG] Preamble - About This Guide
[DG] Preamble - How To Use This Book
[CW] Part III - Chapter 16: Software Acquisition Process
[DG] Part III - Chapter 20: Statistical Detection Points
[CW] Part IV - Utilizing Web Analytics
[CW] Reference - File Data Logging Format
[CW] Reference - Index

I am hoping to get the Web Analytics and File Data Logging Format
sections written. But the other two sections with my initials will not
be done in time for this edition.

************
If any of these sections will be written by the end of 17th April,
please let me know and we can defer them to a later edition, and
perhaps progress to the final review period sooner.
************

Can anyone update the Google Docs version? I don't know how to
import/merge/add the changes from v1.45. BTW there are erroneous
artefacts in the Google Doc version that do not exist in the Word
version that was previously uploaded (e.g. the extra "h" at the end of
Chapter 27), in case a difference check is used.

As a reminder, the review period is between the 18th and 30th April.
We will then publish the v2.0 book by 7th May 2014. This will be as a
PDF, in Word, in Google Docs and also as a Lulu print on demand book.

Regards

Colin

From jim.manico at owasp.org  Fri Apr  4 14:57:59 2014
From: jim.manico at owasp.org (Jim Manico)
Date: Fri, 04 Apr 2014 07:57:59 -0700
Subject: [Owasp-appsensor-project] AppSensor Guide v2.0 - Last call for
 "whole section" contributions
In-Reply-To: <CAAxdBBku2bXQ4=hE=L0YjyCAVmj6TqFWdZ3+vX96VwLik33fgg@mail.gmail.com>
References: <CAAxdBBku2bXQ4=hE=L0YjyCAVmj6TqFWdZ3+vX96VwLik33fgg@mail.gmail.com>
Message-ID: <533EC877.7050908@owasp.org>

You are not the only cage I rattled lately. Sorry gents, I really 
appreciate your work.

Speaking of cage rattling....

Building a project, dropping code, and then no longer updating or 
maintaining it is really harmful to open source. It also keeps away the 
most die hard part of the Java community who actively look for project 
activity before choosing an open source project.

Instead of regular big changes consider frequent small changes. It 
demonstrates a history of maintenance and activity that is really 
appealing to the developer community.

Just my 2 cents,
Aloha,
Jim




On 4/4/14, 7:51 AM, Colin Watson wrote:
> Dear all
>
> Further to Jim's perfectly reasonable "cage rattling" a couple of
> weeks ago, here is an update.
>
> Since the start of this push, 10 days ago, to publish I have added
> more new content to v1.38. In numbers this means the book has grown by
> in total 26 extra pages:
>
> - 5,000 new words
> - 22 new figures
> - 5 new tables
> - 2 additional contributors listed (Josh and Erlend)
>
> I went through the version on Google Docs today, but cannot see any
> actual edits and new additional text. I only see a score or so
> comments. BTW apart from the Preamble, most of the text was drafted by
> me alone, so Josh, some of your questions directed at Ryan about use
> of a WAF, are really my misunderstandings, mistakes or lack of
> clarity.
>
> Version v1.45 is in the usual place linked from the project wiki. I
> have also tried to check all the applied styles, and created new
> styles for URLs and code samples.
>
> https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
>
> The following sections appear to be largely incomplete (and by whom!).
> Please forward on any contributions for these, otherwise they will be
> dropped from the version for review in a couple of weeks time, when
> bulk content addition will then be frozen. If anyone else is able to
> write these, perhaps with the exception of the Foreword, that would be
> fine too. These sections can of course be added back into a later
> edition if they are written subsequently.
>
> [MC] Foreword
> [DG] Preamble - About This Guide
> [DG] Preamble - How To Use This Book
> [CW] Part III - Chapter 16: Software Acquisition Process
> [DG] Part III - Chapter 20: Statistical Detection Points
> [CW] Part IV - Utilizing Web Analytics
> [CW] Reference - File Data Logging Format
> [CW] Reference - Index
>
> I am hoping to get the Web Analytics and File Data Logging Format
> sections written. But the other two sections with my initials will not
> be done in time for this edition.
>
> ************
> If any of these sections will be written by the end of 17th April,
> please let me know and we can defer them to a later edition, and
> perhaps progress to the final review period sooner.
> ************
>
> Can anyone update the Google Docs version? I don't know how to
> import/merge/add the changes from v1.45. BTW there are erroneous
> artefacts in the Google Doc version that do not exist in the Word
> version that was previously uploaded (e.g. the extra "h" at the end of
> Chapter 27), in case a difference check is used.
>
> As a reminder, the review period is between the 18th and 30th April.
> We will then publish the v2.0 book by 7th May 2014. This will be as a
> PDF, in Word, in Google Docs and also as a Lulu print on demand book.
>
> Regards
>
> Colin
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project


From jtmelton at gmail.com  Fri Apr  4 15:33:03 2014
From: jtmelton at gmail.com (John Melton)
Date: Fri, 4 Apr 2014 11:33:03 -0400
Subject: [Owasp-appsensor-project] AppSensor Guide v2.0 - Last call for
 "whole section" contributions
In-Reply-To: <533EC877.7050908@owasp.org>
References: <CAAxdBBku2bXQ4=hE=L0YjyCAVmj6TqFWdZ3+vX96VwLik33fgg@mail.gmail.com>
	<533EC877.7050908@owasp.org>
Message-ID: <CAM8z=y+JE+eTpPscBpBpa6W7GDzv6CGrD4Ag_o04sU-32puAbw@mail.gmail.com>

Thanks Colin and Jim.

Jim, with regards to the big vs. small changes, are you referring to the
documentation or the code version of the project? If you mean the
documentation, I think it's natural for it to be updated periodically and
not continually. If you mean the code, that's completely reasonable and
100% on me.

I pushed out the initial version of code several years ago, then my twin
children were born, so I effectively quit for a while apart from occasional
emails and bug fixes. Late last year, I got motivated again, and have been
making updates since then, and it appears others are hopefully starting to
jump in and help out as well.

I'm definitely aware of the perception you get from infrequent updates in
the dev community. I think thus far our project has been pretty clear that
the code was always a proof of concept implementation, not production code.
It could be used for very simple small applications but wasn't particularly
useful beyond that. The version currently being built has the intention of
being much more robust and useful.

I will be carrying the responsibility (hopefully sharing it) for the code
for the foreseeable future, and should I need to back off again, I'll make
that clear to the list so that hopefully someone else can pick up the lead.

Thanks,
John


On Fri, Apr 4, 2014 at 10:57 AM, Jim Manico <jim.manico at owasp.org> wrote:

> You are not the only cage I rattled lately. Sorry gents, I really
> appreciate your work.
>
> Speaking of cage rattling....
>
> Building a project, dropping code, and then no longer updating or
> maintaining it is really harmful to open source. It also keeps away the
> most die hard part of the Java community who actively look for project
> activity before choosing an open source project.
>
> Instead of regular big changes consider frequent small changes. It
> demonstrates a history of maintenance and activity that is really appealing
> to the developer community.
>
> Just my 2 cents,
> Aloha,
> Jim
>
>
>
>
>
> On 4/4/14, 7:51 AM, Colin Watson wrote:
>
>> Dear all
>>
>> Further to Jim's perfectly reasonable "cage rattling" a couple of
>> weeks ago, here is an update.
>>
>> Since the start of this push, 10 days ago, to publish I have added
>> more new content to v1.38. In numbers this means the book has grown by
>> in total 26 extra pages:
>>
>> - 5,000 new words
>> - 22 new figures
>> - 5 new tables
>> - 2 additional contributors listed (Josh and Erlend)
>>
>> I went through the version on Google Docs today, but cannot see any
>> actual edits and new additional text. I only see a score or so
>> comments. BTW apart from the Preamble, most of the text was drafted by
>> me alone, so Josh, some of your questions directed at Ryan about use
>> of a WAF, are really my misunderstandings, mistakes or lack of
>> clarity.
>>
>> Version v1.45 is in the usual place linked from the project wiki. I
>> have also tried to check all the applied styles, and created new
>> styles for URLs and code samples.
>>
>> https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
>>
>> The following sections appear to be largely incomplete (and by whom!).
>> Please forward on any contributions for these, otherwise they will be
>> dropped from the version for review in a couple of weeks time, when
>> bulk content addition will then be frozen. If anyone else is able to
>> write these, perhaps with the exception of the Foreword, that would be
>> fine too. These sections can of course be added back into a later
>> edition if they are written subsequently.
>>
>> [MC] Foreword
>> [DG] Preamble - About This Guide
>> [DG] Preamble - How To Use This Book
>> [CW] Part III - Chapter 16: Software Acquisition Process
>> [DG] Part III - Chapter 20: Statistical Detection Points
>> [CW] Part IV - Utilizing Web Analytics
>> [CW] Reference - File Data Logging Format
>> [CW] Reference - Index
>>
>> I am hoping to get the Web Analytics and File Data Logging Format
>> sections written. But the other two sections with my initials will not
>> be done in time for this edition.
>>
>> ************
>> If any of these sections will be written by the end of 17th April,
>> please let me know and we can defer them to a later edition, and
>> perhaps progress to the final review period sooner.
>> ************
>>
>> Can anyone update the Google Docs version? I don't know how to
>> import/merge/add the changes from v1.45. BTW there are erroneous
>> artefacts in the Google Doc version that do not exist in the Word
>> version that was previously uploaded (e.g. the extra "h" at the end of
>> Chapter 27), in case a difference check is used.
>>
>> As a reminder, the review period is between the 18th and 30th April.
>> We will then publish the v2.0 book by 7th May 2014. This will be as a
>> PDF, in Word, in Google Docs and also as a Lulu print on demand book.
>>
>> Regards
>>
>> Colin
>> _______________________________________________
>> Owasp-appsensor-project mailing list
>> Owasp-appsensor-project at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>>
>
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140404/afe3f60d/attachment.html>

From jim.manico at owasp.org  Fri Apr  4 15:38:54 2014
From: jim.manico at owasp.org (Jim Manico)
Date: Fri, 04 Apr 2014 08:38:54 -0700
Subject: [Owasp-appsensor-project] AppSensor Guide v2.0 - Last call for
 "whole section" contributions
In-Reply-To: <CAM8z=y+JE+eTpPscBpBpa6W7GDzv6CGrD4Ag_o04sU-32puAbw@mail.gmail.com>
References: <CAAxdBBku2bXQ4=hE=L0YjyCAVmj6TqFWdZ3+vX96VwLik33fgg@mail.gmail.com>
	<533EC877.7050908@owasp.org>
	<CAM8z=y+JE+eTpPscBpBpa6W7GDzv6CGrD4Ag_o04sU-32puAbw@mail.gmail.com>
Message-ID: <533ED20E.6020502@owasp.org>

I mean code! :) Just a suggestion. I tend to look at an open source code 
repos to review checkins before using an open source project. If I see 
none in the last year, I consider it a dead project (and so do many 
other Java devs).

John, this is only meant as a marketing suggestion. I am totally with 
you that you are a volunteer and can only do so much.

I'm only saying that the more "little changes over time" the better in 
terms of encouraging dev's to use your project.  But this is not always 
possible due to the realities of life, I'm with you.

Respectfully,
Jim


On 4/4/14, 8:33 AM, John Melton wrote:
> Thanks Colin and Jim.
>
> Jim, with regards to the big vs. small changes, are you referring to 
> the documentation or the code version of the project? If you mean the 
> documentation, I think it's natural for it to be updated periodically 
> and not continually. If you mean the code, that's completely 
> reasonable and 100% on me.
>
> I pushed out the initial version of code several years ago, then my 
> twin children were born, so I effectively quit for a while apart from 
> occasional emails and bug fixes. Late last year, I got motivated 
> again, and have been making updates since then, and it appears others 
> are hopefully starting to jump in and help out as well.
>
> I'm definitely aware of the perception you get from infrequent updates 
> in the dev community. I think thus far our project has been pretty 
> clear that the code was always a proof of concept implementation, not 
> production code. It could be used for very simple small applications 
> but wasn't particularly useful beyond that. The version currently 
> being built has the intention of being much more robust and useful.
>
> I will be carrying the responsibility (hopefully sharing it) for the 
> code for the foreseeable future, and should I need to back off again, 
> I'll make that clear to the list so that hopefully someone else can 
> pick up the lead.
>
> Thanks,
> John
>
>
> On Fri, Apr 4, 2014 at 10:57 AM, Jim Manico <jim.manico at owasp.org 
> <mailto:jim.manico at owasp.org>> wrote:
>
>     You are not the only cage I rattled lately. Sorry gents, I really
>     appreciate your work.
>
>     Speaking of cage rattling....
>
>     Building a project, dropping code, and then no longer updating or
>     maintaining it is really harmful to open source. It also keeps
>     away the most die hard part of the Java community who actively
>     look for project activity before choosing an open source project.
>
>     Instead of regular big changes consider frequent small changes. It
>     demonstrates a history of maintenance and activity that is really
>     appealing to the developer community.
>
>     Just my 2 cents,
>     Aloha,
>     Jim
>
>
>
>
>
>     On 4/4/14, 7:51 AM, Colin Watson wrote:
>
>         Dear all
>
>         Further to Jim's perfectly reasonable "cage rattling" a couple of
>         weeks ago, here is an update.
>
>         Since the start of this push, 10 days ago, to publish I have added
>         more new content to v1.38. In numbers this means the book has
>         grown by
>         in total 26 extra pages:
>
>         - 5,000 new words
>         - 22 new figures
>         - 5 new tables
>         - 2 additional contributors listed (Josh and Erlend)
>
>         I went through the version on Google Docs today, but cannot
>         see any
>         actual edits and new additional text. I only see a score or so
>         comments. BTW apart from the Preamble, most of the text was
>         drafted by
>         me alone, so Josh, some of your questions directed at Ryan
>         about use
>         of a WAF, are really my misunderstandings, mistakes or lack of
>         clarity.
>
>         Version v1.45 is in the usual place linked from the project
>         wiki. I
>         have also tried to check all the applied styles, and created new
>         styles for URLs and code samples.
>
>         https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
>
>         The following sections appear to be largely incomplete (and by
>         whom!).
>         Please forward on any contributions for these, otherwise they
>         will be
>         dropped from the version for review in a couple of weeks time,
>         when
>         bulk content addition will then be frozen. If anyone else is
>         able to
>         write these, perhaps with the exception of the Foreword, that
>         would be
>         fine too. These sections can of course be added back into a later
>         edition if they are written subsequently.
>
>         [MC] Foreword
>         [DG] Preamble - About This Guide
>         [DG] Preamble - How To Use This Book
>         [CW] Part III - Chapter 16: Software Acquisition Process
>         [DG] Part III - Chapter 20: Statistical Detection Points
>         [CW] Part IV - Utilizing Web Analytics
>         [CW] Reference - File Data Logging Format
>         [CW] Reference - Index
>
>         I am hoping to get the Web Analytics and File Data Logging Format
>         sections written. But the other two sections with my initials
>         will not
>         be done in time for this edition.
>
>         ************
>         If any of these sections will be written by the end of 17th April,
>         please let me know and we can defer them to a later edition, and
>         perhaps progress to the final review period sooner.
>         ************
>
>         Can anyone update the Google Docs version? I don't know how to
>         import/merge/add the changes from v1.45. BTW there are erroneous
>         artefacts in the Google Doc version that do not exist in the Word
>         version that was previously uploaded (e.g. the extra "h" at
>         the end of
>         Chapter 27), in case a difference check is used.
>
>         As a reminder, the review period is between the 18th and 30th
>         April.
>         We will then publish the v2.0 book by 7th May 2014. This will
>         be as a
>         PDF, in Word, in Google Docs and also as a Lulu print on
>         demand book.
>
>         Regards
>
>         Colin
>         _______________________________________________
>         Owasp-appsensor-project mailing list
>         Owasp-appsensor-project at lists.owasp.org
>         <mailto:Owasp-appsensor-project at lists.owasp.org>
>         https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>
>
>     _______________________________________________
>     Owasp-appsensor-project mailing list
>     Owasp-appsensor-project at lists.owasp.org
>     <mailto:Owasp-appsensor-project at lists.owasp.org>
>     https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140404/62975685/attachment-0001.html>

From chetan.karande at owasp.org  Sun Apr  6 04:13:54 2014
From: chetan.karande at owasp.org (Chetan Karande)
Date: Sun, 6 Apr 2014 00:13:54 -0400
Subject: [Owasp-appsensor-project] AppSensor API Questions (Node.js
	Demonstration Implementation)
In-Reply-To: <CAM8z=yKoqn0-jDv+jjTrfn_v9hdbqByVo8+Lcdand3Ezodis5Q@mail.gmail.com>
References: <CACHuFzb10mOWsQz_4e-YsKTOEPDRhJv=8Qt3fYdDmQNZcfO26A@mail.gmail.com>
	<CAM8z=yLgm-z7+TbFZarE-qyFMj_QJQPbkhS-Ad36-xmv8iVYkg@mail.gmail.com>
	<CACHuFzYZ4shDarq7ZCGyrbYfr25PDy54-4i-P6i2Lz+H5=+t0Q@mail.gmail.com>
	<CAM8z=yJMS1nSdRvJs-BFCh-GOHiGGv7c=nrx1_Hqg-MiAYL-4Q@mail.gmail.com>
	<CACHuFzYmDdtWe6mKxp-Kt7=iQm6UyK-dETthv5huqWDWznH2AQ@mail.gmail.com>
	<CAM8z=yKoqn0-jDv+jjTrfn_v9hdbqByVo8+Lcdand3Ezodis5Q@mail.gmail.com>
Message-ID: <CACHuFzaL7SpW54h=E32Zvd5=9h1nQrssay31KuAYk8=nTwjZsQ@mail.gmail.com>

John,

Based on the sample apps you have added (which were very helpful), I
attempted to build initial version of nodejs client in a forked repository:

https://github.com/ckarande/appsensor/tree/master/sample-apps/simple-nodejs-ws-rest-client

I didn't verify end-to-end behavior yet, but thought of sharing it to get
your feedback and to know if I am on the right track.

Also, I noticed webSocket is used for sample dashboard implementation. Do
you plan for using webSockets even on AppSensor server as an alternate
option to REST APIs, so that responses can be pushed without client polling
for it?

Best,

Chetan

On Mon, Mar 17, 2014 at 1:25 AM, John Melton <jtmelton at gmail.com> wrote:

> Chetan,
> Replying to this on list since Colin had asked for an example json snippet
> at one point. A sample JSON string for adding a new event is below.
>
> {"user":{"username":"SOME_END_USERNAME"},"detectionPoint":{"id":"SOME_DETECTION_POINT_ID"},"timestamp":
> SOME_UNIX_TIMESTAMP }
>
> The only additional point to note is that you have to make the request
> with an http request header. The default key for that header is 'X-Appsensor-Client-Application-Name'
> and the value would be the name of the client application being used.
>
> For further info check the addRecord method at
> https://github.com/jtmelton/appsensor/blob/master/sample-apps/simple-dashboard/src/main/webapp/index.jsp.
> Thanks,
> John
>
>
> On Sun, Mar 16, 2014 at 11:40 PM, Chetan Karande <chetan.karande at owasp.org
> > wrote:
>
>> Great. Thank you  John.
>> On Mar 16, 2014 11:37 PM, "John Melton" <jtmelton at gmail.com> wrote:
>>
>>> Chetan,
>>> Good question. I've been working on the code. I'm actually pushing some
>>> code right now, then I'll send out a group email with some updates. I
>>> haven't pulled out the JSON structure yet, but I'll try to get some basic
>>> examples together and documented and send it to the list in the next couple
>>> days.
>>>
>>> Thanks,
>>> John
>>>
>>>
>>> On Sun, Mar 16, 2014 at 10:57 PM, Chetan Karande <
>>> chetan.karande at owasp.org> wrote:
>>>
>>>> Hi John,
>>>>
>>>> I was side tracked due to other priorities for a while, and wanted to
>>>> resume working in AppSensor reference implementation in Node.js.
>>>>
>>>> As per our last conversation, you were going to work on adding a sample
>>>> app and include minimum required json message structure as part the tech
>>>> documentation. Just wanted to check if you had chance to do any progress on
>>>> that.
>>>>
>>>> Thank you.
>>>>
>>>>
>>>> Best Regards,
>>>>
>>>> Chetan Karande
>>>>
>>>> chetan.karande at owasp.org
>>>>
>>>> OWASP NYC Local Chapter <https://www.owasp.org/index.php/NYC>
>>>>
>>>> Open Web Application Security Project<https://www.owasp.org/index.php/Main_Page>
>>>>
>>>>
>>>> On Mon, Dec 9, 2013 at 2:42 AM, John Melton <jtmelton at gmail.com> wrote:
>>>>
>>>>> Chetan,
>>>>> Awesome to see what you're coming up with.
>>>>>
>>>>> With respect to your questions, I responded inline below, but also
>>>>> wanted to mention that one task I have for Colin is to give him the minimum
>>>>> json structure needed so it can be documented. I'll also put that in the
>>>>> tech documentation as well.
>>>>>
>>>>> Thanks,
>>>>> John
>>>>>
>>>>>
>>>>> On Sun, Dec 8, 2013 at 6:07 PM, Chetan Karande <
>>>>> chetan.karande at owasp.org> wrote:
>>>>>
>>>>>> Hi John,
>>>>>>
>>>>>> I started exploring the AppSensor code on github and went over the
>>>>>> AppSensor Guide document. It helped me in getting more idea about AppSensor
>>>>>> in general. I have a few questions for you specifically about approaching
>>>>>> Node.js demonstration implementation. Please answer when you get chance:
>>>>>>
>>>>>> Question 1. As per on our earlier email conversation, I explored
>>>>>> more on implementing addEvent() and getResponses() methods in Node.js
>>>>>> app. Based on the AppSensor REST Service code on github, I think the
>>>>>> service expects client using following endpoints and JSON
>>>>>> message structures. Can you please confirm if I am on right track, and
>>>>>> answer question highlighted.
>>>>>>
>>>>>> *addEvent() Implementation:*
>>>>>> *======================*
>>>>>>
>>>>>> *Invoke REST Endpoint:* /api/v1.0/events
>>>>>>
>>>>>> *Sample Event JSON Object to be sent from the Node.js  App:*
>>>>>>
>>>>>> {
>>>>>> user: {
>>>>>> username: ""
>>>>>>  ipAddress: ""
>>>>>> },
>>>>>> detectionPoint : {  // ??? Does Node.js client need to populate this
>>>>>> object? If yes, what goes in responses, how to decide threshold?
>>>>>>
>>>>>
>>>>> All that is needed in the detectionPoint object field is the "id"
>>>>> field. The rest is found server-side.
>>>>>
>>>>>  id: "",
>>>>>> threshold: "",
>>>>>> responses: []
>>>>>>  },
>>>>>> timestamp: "",
>>>>>> detectionSystemId: "",
>>>>>>  resource: "",
>>>>>> eventType: ""
>>>>>>
>>>>>> }
>>>>>>
>>>>>>
>>>>>> *getResponses() Implementation:*
>>>>>> *=========================*
>>>>>>
>>>>>> *Poll REST EndPoint URL:* /api/v1.0/responses
>>>>>>
>>>>>> *Expected Response object from AppSensor REST service:*
>>>>>>
>>>>>> {
>>>>>> id: "",
>>>>>> threshold: "",
>>>>>>  responses: [
>>>>>> {
>>>>>> user: {
>>>>>> username: "",
>>>>>>  ipAddress: ""
>>>>>> },
>>>>>> action: "",
>>>>>>  detectionPoint: {}, //???. It contains responses array again. What
>>>>>> to expect in it?
>>>>>>
>>>>>
>>>>> The detection point really shouldn't be part of the response - I'll
>>>>> try to remove this from being serialized.
>>>>>
>>>>>
>>>>>>  timestamp: "",
>>>>>>  detectionSystemId: "",
>>>>>> interval : {
>>>>>> duration: "",
>>>>>>  unit: 0 //number
>>>>>> }
>>>>>> },
>>>>>> {
>>>>>>  //another response
>>>>>> }
>>>>>> ]
>>>>>> }
>>>>>>
>>>>>> 2. In case multiple responses received as result of invoking
>>>>>> *getResponses()*, does order in which actions are performed matter?
>>>>>>
>>>>>
>>>>> Good question that I don't think has been considered before. It
>>>>> shouldn't in our case in the reference implementation (unless we add some
>>>>> new features), but the timestamp is available, so it's likely best practice
>>>>> to execute them in order. I'll add this point to the documentation.
>>>>>
>>>>>
>>>>>>
>>>>>> 3. Can I set AppSensor REST Server on my machine and use it for
>>>>>> testing Node.js demo implementation? If so, can you please provide me steps
>>>>>> to set it up.
>>>>>>
>>>>>
>>>>> Yep, but there's not a project setup to do it yet. I'll try to add a
>>>>> sample app for that soon. If you'd like to use it before I get that done,
>>>>> have a look at the appsensor-ws-rest-server project and the
>>>>> RestRequestHandlerTest class. There is a helper method at the bottom of the
>>>>> class (startServer) that runs the service on grizzly. You can call that in
>>>>> a main method to get a small simple server going for testing.
>>>>>
>>>>>
>>>>>> Just to share, I am exploring to retrofit ghost <https://ghost.org/>,
>>>>>> an open-source Node.js based blogging platform for AppSensor demonstration
>>>>>> implementation. I am working on getting familiar with its code and identify
>>>>>> detection points.
>>>>>>
>>>>>
>>>>> That's an awesome project. Adding security to existing popular
>>>>> platforms has been a goal for OWASP for some time - nice to see progress
>>>>> here.
>>>>>
>>>>>
>>>>>>
>>>>>> Best Regards,
>>>>>>
>>>>>> Chetan Karande
>>>>>>
>>>>>> chetan.karande at owasp.org
>>>>>>
>>>>>> OWASP NYC Local Chapter <https://www.owasp.org/index.php/NYC>
>>>>>>
>>>>>> Open Web Application Security Project<https://www.owasp.org/index.php/Main_Page>
>>>>>>
>>>>>
>>>>>
>>>>
>>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140406/1728180a/attachment.html>

From jtmelton at gmail.com  Mon Apr  7 03:57:20 2014
From: jtmelton at gmail.com (John Melton)
Date: Sun, 6 Apr 2014 23:57:20 -0400
Subject: [Owasp-appsensor-project] AppSensor API Questions (Node.js
	Demonstration Implementation)
In-Reply-To: <CACHuFzaL7SpW54h=E32Zvd5=9h1nQrssay31KuAYk8=nTwjZsQ@mail.gmail.com>
References: <CACHuFzb10mOWsQz_4e-YsKTOEPDRhJv=8Qt3fYdDmQNZcfO26A@mail.gmail.com>
	<CAM8z=yLgm-z7+TbFZarE-qyFMj_QJQPbkhS-Ad36-xmv8iVYkg@mail.gmail.com>
	<CACHuFzYZ4shDarq7ZCGyrbYfr25PDy54-4i-P6i2Lz+H5=+t0Q@mail.gmail.com>
	<CAM8z=yJMS1nSdRvJs-BFCh-GOHiGGv7c=nrx1_Hqg-MiAYL-4Q@mail.gmail.com>
	<CACHuFzYmDdtWe6mKxp-Kt7=iQm6UyK-dETthv5huqWDWznH2AQ@mail.gmail.com>
	<CAM8z=yKoqn0-jDv+jjTrfn_v9hdbqByVo8+Lcdand3Ezodis5Q@mail.gmail.com>
	<CACHuFzaL7SpW54h=E32Zvd5=9h1nQrssay31KuAYk8=nTwjZsQ@mail.gmail.com>
Message-ID: <CAM8z=yJhJUxPQLkU5mr2+X8Q4K9kYNhTya6B-VFzcrS0T-pm5w@mail.gmail.com>

Chetan,

This looks awesome - thanks! It looks like the main points are definitely
covered. There is an "add attack" function exposed, but most client
applications won't need that feature (more used for WAFs and the like). So
.. the only thing needed additionally is probably response handling. That
may be possible generically in Node or may be application-specific through
some adapter, but looks like it's well on it's way. Side note, I'm going to
change the date/time implementation based on a comment by Colin, so the
code will have to be updated slightly, but should be a pretty trivial
change.

As for the websocket question, yes I built and will support a websocket
implementation that can push responses down to the client. Because of the
choice of using a web server -> app server architecture where the web
server does authentication and sends a trusted request header down (reverse
proxy mode), the web server will need to be able to proxy web sockets.
Nginx added this feature late last year and Apache added it early this
year. Both of these are relatively new features and will probably have some
bugs. One of the important things for us to do is to document how to use
these features for users. That means part of the 2.0 documentation set will
be "how do I setup apache/nginx/XYZ as a reverse proxy?"

Although websockets will make sense in many circumstances, most of the
enterprise folks I talk to say their policies won't allow the server to
talk back out to the client, so there will still be many users of the
polling option as well. Want to do as many things to support different
usage models as we can while having high quality implementations.

Thanks,
John



On Sun, Apr 6, 2014 at 12:13 AM, Chetan Karande <chetan.karande at owasp.org>wrote:

> John,
>
> Based on the sample apps you have added (which were very helpful), I
> attempted to build initial version of nodejs client in a forked repository:
>
>
> https://github.com/ckarande/appsensor/tree/master/sample-apps/simple-nodejs-ws-rest-client
>
> I didn't verify end-to-end behavior yet, but thought of sharing it to get
> your feedback and to know if I am on the right track.
>
> Also, I noticed webSocket is used for sample dashboard implementation. Do
> you plan for using webSockets even on AppSensor server as an alternate
> option to REST APIs, so that responses can be pushed without client polling
> for it?
>
> Best,
>
> Chetan
>
> On Mon, Mar 17, 2014 at 1:25 AM, John Melton <jtmelton at gmail.com> wrote:
>
>> Chetan,
>> Replying to this on list since Colin had asked for an example json
>> snippet at one point. A sample JSON string for adding a new event is below.
>>
>> {"user":{"username":"SOME_END_USERNAME"},"detectionPoint":{"id":"SOME_DETECTION_POINT_ID"},"timestamp":
>> SOME_UNIX_TIMESTAMP }
>>
>> The only additional point to note is that you have to make the request
>> with an http request header. The default key for that header is 'X-Appsensor-Client-Application-Name'
>> and the value would be the name of the client application being used.
>>
>> For further info check the addRecord method at
>> https://github.com/jtmelton/appsensor/blob/master/sample-apps/simple-dashboard/src/main/webapp/index.jsp.
>> Thanks,
>> John
>>
>>
>> On Sun, Mar 16, 2014 at 11:40 PM, Chetan Karande <
>> chetan.karande at owasp.org> wrote:
>>
>>> Great. Thank you  John.
>>> On Mar 16, 2014 11:37 PM, "John Melton" <jtmelton at gmail.com> wrote:
>>>
>>>> Chetan,
>>>> Good question. I've been working on the code. I'm actually pushing some
>>>> code right now, then I'll send out a group email with some updates. I
>>>> haven't pulled out the JSON structure yet, but I'll try to get some basic
>>>> examples together and documented and send it to the list in the next couple
>>>> days.
>>>>
>>>> Thanks,
>>>> John
>>>>
>>>>
>>>> On Sun, Mar 16, 2014 at 10:57 PM, Chetan Karande <
>>>> chetan.karande at owasp.org> wrote:
>>>>
>>>>> Hi John,
>>>>>
>>>>> I was side tracked due to other priorities for a while, and wanted to
>>>>> resume working in AppSensor reference implementation in Node.js.
>>>>>
>>>>> As per our last conversation, you were going to work on adding a
>>>>> sample app and include minimum required json message structure as part the
>>>>> tech documentation. Just wanted to check if you had chance to do any
>>>>> progress on that.
>>>>>
>>>>> Thank you.
>>>>>
>>>>>
>>>>> Best Regards,
>>>>>
>>>>> Chetan Karande
>>>>>
>>>>> chetan.karande at owasp.org
>>>>>
>>>>> OWASP NYC Local Chapter <https://www.owasp.org/index.php/NYC>
>>>>>
>>>>> Open Web Application Security Project<https://www.owasp.org/index.php/Main_Page>
>>>>>
>>>>>
>>>>> On Mon, Dec 9, 2013 at 2:42 AM, John Melton <jtmelton at gmail.com>wrote:
>>>>>
>>>>>> Chetan,
>>>>>> Awesome to see what you're coming up with.
>>>>>>
>>>>>> With respect to your questions, I responded inline below, but also
>>>>>> wanted to mention that one task I have for Colin is to give him the minimum
>>>>>> json structure needed so it can be documented. I'll also put that in the
>>>>>> tech documentation as well.
>>>>>>
>>>>>> Thanks,
>>>>>> John
>>>>>>
>>>>>>
>>>>>> On Sun, Dec 8, 2013 at 6:07 PM, Chetan Karande <
>>>>>> chetan.karande at owasp.org> wrote:
>>>>>>
>>>>>>> Hi John,
>>>>>>>
>>>>>>> I started exploring the AppSensor code on github and went over the
>>>>>>> AppSensor Guide document. It helped me in getting more idea about AppSensor
>>>>>>> in general. I have a few questions for you specifically about approaching
>>>>>>> Node.js demonstration implementation. Please answer when you get chance:
>>>>>>>
>>>>>>> Question 1. As per on our earlier email conversation, I explored
>>>>>>> more on implementing addEvent() and getResponses() methods in Node.js
>>>>>>> app. Based on the AppSensor REST Service code on github, I think
>>>>>>> the service expects client using following endpoints and JSON
>>>>>>> message structures. Can you please confirm if I am on right track, and
>>>>>>> answer question highlighted.
>>>>>>>
>>>>>>> *addEvent() Implementation:*
>>>>>>> *======================*
>>>>>>>
>>>>>>> *Invoke REST Endpoint:* /api/v1.0/events
>>>>>>>
>>>>>>> *Sample Event JSON Object to be sent from the Node.js  App:*
>>>>>>>
>>>>>>> {
>>>>>>> user: {
>>>>>>> username: ""
>>>>>>>  ipAddress: ""
>>>>>>> },
>>>>>>> detectionPoint : {  // ??? Does Node.js client need to populate
>>>>>>> this object? If yes, what goes in responses, how to decide threshold?
>>>>>>>
>>>>>>
>>>>>> All that is needed in the detectionPoint object field is the "id"
>>>>>> field. The rest is found server-side.
>>>>>>
>>>>>>  id: "",
>>>>>>> threshold: "",
>>>>>>> responses: []
>>>>>>>  },
>>>>>>> timestamp: "",
>>>>>>> detectionSystemId: "",
>>>>>>>  resource: "",
>>>>>>> eventType: ""
>>>>>>>
>>>>>>> }
>>>>>>>
>>>>>>>
>>>>>>> *getResponses() Implementation:*
>>>>>>> *=========================*
>>>>>>>
>>>>>>> *Poll REST EndPoint URL:* /api/v1.0/responses
>>>>>>>
>>>>>>> *Expected Response object from AppSensor REST service:*
>>>>>>>
>>>>>>> {
>>>>>>> id: "",
>>>>>>> threshold: "",
>>>>>>>  responses: [
>>>>>>> {
>>>>>>> user: {
>>>>>>> username: "",
>>>>>>>  ipAddress: ""
>>>>>>> },
>>>>>>> action: "",
>>>>>>>  detectionPoint: {}, //???. It contains responses array again. What
>>>>>>> to expect in it?
>>>>>>>
>>>>>>
>>>>>> The detection point really shouldn't be part of the response - I'll
>>>>>> try to remove this from being serialized.
>>>>>>
>>>>>>
>>>>>>>  timestamp: "",
>>>>>>>  detectionSystemId: "",
>>>>>>> interval : {
>>>>>>> duration: "",
>>>>>>>  unit: 0 //number
>>>>>>> }
>>>>>>> },
>>>>>>> {
>>>>>>>  //another response
>>>>>>> }
>>>>>>> ]
>>>>>>> }
>>>>>>>
>>>>>>> 2. In case multiple responses received as result of invoking
>>>>>>> *getResponses()*, does order in which actions are performed matter?
>>>>>>>
>>>>>>
>>>>>> Good question that I don't think has been considered before. It
>>>>>> shouldn't in our case in the reference implementation (unless we add some
>>>>>> new features), but the timestamp is available, so it's likely best practice
>>>>>> to execute them in order. I'll add this point to the documentation.
>>>>>>
>>>>>>
>>>>>>>
>>>>>>> 3. Can I set AppSensor REST Server on my machine and use it for
>>>>>>> testing Node.js demo implementation? If so, can you please provide me steps
>>>>>>> to set it up.
>>>>>>>
>>>>>>
>>>>>> Yep, but there's not a project setup to do it yet. I'll try to add a
>>>>>> sample app for that soon. If you'd like to use it before I get that done,
>>>>>> have a look at the appsensor-ws-rest-server project and the
>>>>>> RestRequestHandlerTest class. There is a helper method at the bottom of the
>>>>>> class (startServer) that runs the service on grizzly. You can call that in
>>>>>> a main method to get a small simple server going for testing.
>>>>>>
>>>>>>
>>>>>>> Just to share, I am exploring to retrofit ghost <https://ghost.org/>,
>>>>>>> an open-source Node.js based blogging platform for AppSensor demonstration
>>>>>>> implementation. I am working on getting familiar with its code and identify
>>>>>>> detection points.
>>>>>>>
>>>>>>
>>>>>> That's an awesome project. Adding security to existing popular
>>>>>> platforms has been a goal for OWASP for some time - nice to see progress
>>>>>> here.
>>>>>>
>>>>>>
>>>>>>>
>>>>>>> Best Regards,
>>>>>>>
>>>>>>> Chetan Karande
>>>>>>>
>>>>>>> chetan.karande at owasp.org
>>>>>>>
>>>>>>> OWASP NYC Local Chapter <https://www.owasp.org/index.php/NYC>
>>>>>>>
>>>>>>> Open Web Application Security Project<https://www.owasp.org/index.php/Main_Page>
>>>>>>>
>>>>>>
>>>>>>
>>>>>
>>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140406/cd476ddd/attachment.html>

From colin.watson at owasp.org  Tue Apr  8 14:14:28 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Tue, 8 Apr 2014 15:14:28 +0100
Subject: [Owasp-appsensor-project] AppSensor Guide v2.0 - Last call for
 "whole section" contributions
In-Reply-To: <CAJL+Z04mOBi-TBw=1wAY517Ys_=RV3d=5pYjjU9KFv3roB3c=w@mail.gmail.com>
References: <CAAxdBBku2bXQ4=hE=L0YjyCAVmj6TqFWdZ3+vX96VwLik33fgg@mail.gmail.com>
	<CAJL+Z04mOBi-TBw=1wAY517Ys_=RV3d=5pYjjU9KFv3roB3c=w@mail.gmail.com>
Message-ID: <CAAxdBBnNYX0mVfsoYuka96za2LgdD9K5g=C48zBaJUPum=rpsA@mail.gmail.com>

Dennis

If the chapter on statistical detection points will not be written,
the preamble may also need some adjustment to match. But could you do
even a page or two for the statistical detection points chapter, even
as a teaser for v2.1, v3.0 or a separate document entirely?

Colin




On 4 April 2014 16:01, Dennis Groves <dennis.groves at owasp.org> wrote:
> Hello Colin,
>
> I have a new preamble. But due to the work I have been doing I am doubtful
> that I will have my sections completed by the deadline you have set. I am
> unable to even get the new preamble up on Google docs right now. I am 100%
> travel. :(  however given the push I will try to get something done.
>
> Dennis
>
> Sent from my phone, apologies for the brevity and spelling errors.
>
> On Apr 4, 2014 7:51 AM, "Colin Watson" <colin.watson at owasp.org> wrote:
>>
>> Dear all
>>
>> Further to Jim's perfectly reasonable "cage rattling" a couple of
>> weeks ago, here is an update.
>>
>> Since the start of this push, 10 days ago, to publish I have added
>> more new content to v1.38. In numbers this means the book has grown by
>> in total 26 extra pages:
>>
>> - 5,000 new words
>> - 22 new figures
>> - 5 new tables
>> - 2 additional contributors listed (Josh and Erlend)
>>
>> I went through the version on Google Docs today, but cannot see any
>> actual edits and new additional text. I only see a score or so
>> comments. BTW apart from the Preamble, most of the text was drafted by
>> me alone, so Josh, some of your questions directed at Ryan about use
>> of a WAF, are really my misunderstandings, mistakes or lack of
>> clarity.
>>
>> Version v1.45 is in the usual place linked from the project wiki. I
>> have also tried to check all the applied styles, and created new
>> styles for URLs and code samples.
>>
>> https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
>>
>> The following sections appear to be largely incomplete (and by whom!).
>> Please forward on any contributions for these, otherwise they will be
>> dropped from the version for review in a couple of weeks time, when
>> bulk content addition will then be frozen. If anyone else is able to
>> write these, perhaps with the exception of the Foreword, that would be
>> fine too. These sections can of course be added back into a later
>> edition if they are written subsequently.
>>
>> [MC] Foreword
>> [DG] Preamble - About This Guide
>> [DG] Preamble - How To Use This Book
>> [CW] Part III - Chapter 16: Software Acquisition Process
>> [DG] Part III - Chapter 20: Statistical Detection Points
>> [CW] Part IV - Utilizing Web Analytics
>> [CW] Reference - File Data Logging Format
>> [CW] Reference - Index
>>
>> I am hoping to get the Web Analytics and File Data Logging Format
>> sections written. But the other two sections with my initials will not
>> be done in time for this edition.
>>
>> ************
>> If any of these sections will be written by the end of 17th April,
>> please let me know and we can defer them to a later edition, and
>> perhaps progress to the final review period sooner.
>> ************
>>
>> Can anyone update the Google Docs version? I don't know how to
>> import/merge/add the changes from v1.45. BTW there are erroneous
>> artefacts in the Google Doc version that do not exist in the Word
>> version that was previously uploaded (e.g. the extra "h" at the end of
>> Chapter 27), in case a difference check is used.
>>
>> As a reminder, the review period is between the 18th and 30th April.
>> We will then publish the v2.0 book by 7th May 2014. This will be as a
>> PDF, in Word, in Google Docs and also as a Lulu print on demand book.
>>
>> Regards
>>
>> Colin
>> _______________________________________________
>> Owasp-appsensor-project mailing list
>> Owasp-appsensor-project at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project

From chetan.karande at owasp.org  Tue Apr  8 16:06:05 2014
From: chetan.karande at owasp.org (Chetan Karande)
Date: Tue, 8 Apr 2014 12:06:05 -0400
Subject: [Owasp-appsensor-project] AppSensor API Questions (Node.js
	Demonstration Implementation)
In-Reply-To: <CAM8z=yJhJUxPQLkU5mr2+X8Q4K9kYNhTya6B-VFzcrS0T-pm5w@mail.gmail.com>
References: <CACHuFzb10mOWsQz_4e-YsKTOEPDRhJv=8Qt3fYdDmQNZcfO26A@mail.gmail.com>
	<CAM8z=yLgm-z7+TbFZarE-qyFMj_QJQPbkhS-Ad36-xmv8iVYkg@mail.gmail.com>
	<CACHuFzYZ4shDarq7ZCGyrbYfr25PDy54-4i-P6i2Lz+H5=+t0Q@mail.gmail.com>
	<CAM8z=yJMS1nSdRvJs-BFCh-GOHiGGv7c=nrx1_Hqg-MiAYL-4Q@mail.gmail.com>
	<CACHuFzYmDdtWe6mKxp-Kt7=iQm6UyK-dETthv5huqWDWznH2AQ@mail.gmail.com>
	<CAM8z=yKoqn0-jDv+jjTrfn_v9hdbqByVo8+Lcdand3Ezodis5Q@mail.gmail.com>
	<CACHuFzaL7SpW54h=E32Zvd5=9h1nQrssay31KuAYk8=nTwjZsQ@mail.gmail.com>
	<CAM8z=yJhJUxPQLkU5mr2+X8Q4K9kYNhTya6B-VFzcrS0T-pm5w@mail.gmail.com>
Message-ID: <CACHuFzY1EX+2PuZkmufTFmM_1c+nFGOwnbPryBMCuNip=q-Ykg@mail.gmail.com>

John, Thanks for the feedback and your thoughts on support for web sockets.
I will update the node.js client code once the  date/time implementation is
changed.

Best,

Chetan Karande

On Sun, Apr 6, 2014 at 11:57 PM, John Melton <jtmelton at gmail.com> wrote:

> Chetan,
>
> This looks awesome - thanks! It looks like the main points are definitely
> covered. There is an "add attack" function exposed, but most client
> applications won't need that feature (more used for WAFs and the like). So
> .. the only thing needed additionally is probably response handling. That
> may be possible generically in Node or may be application-specific through
> some adapter, but looks like it's well on it's way. Side note, I'm going to
> change the date/time implementation based on a comment by Colin, so the
> code will have to be updated slightly, but should be a pretty trivial
> change.
>
> As for the websocket question, yes I built and will support a websocket
> implementation that can push responses down to the client. Because of the
> choice of using a web server -> app server architecture where the web
> server does authentication and sends a trusted request header down (reverse
> proxy mode), the web server will need to be able to proxy web sockets.
> Nginx added this feature late last year and Apache added it early this
> year. Both of these are relatively new features and will probably have some
> bugs. One of the important things for us to do is to document how to use
> these features for users. That means part of the 2.0 documentation set will
> be "how do I setup apache/nginx/XYZ as a reverse proxy?"
>
> Although websockets will make sense in many circumstances, most of the
> enterprise folks I talk to say their policies won't allow the server to
> talk back out to the client, so there will still be many users of the
> polling option as well. Want to do as many things to support different
> usage models as we can while having high quality implementations.
>
> Thanks,
> John
>
>
>
> On Sun, Apr 6, 2014 at 12:13 AM, Chetan Karande <chetan.karande at owasp.org>wrote:
>
>> John,
>>
>> Based on the sample apps you have added (which were very helpful), I
>> attempted to build initial version of nodejs client in a forked repository:
>>
>>
>> https://github.com/ckarande/appsensor/tree/master/sample-apps/simple-nodejs-ws-rest-client
>>
>> I didn't verify end-to-end behavior yet, but thought of sharing it to get
>> your feedback and to know if I am on the right track.
>>
>> Also, I noticed webSocket is used for sample dashboard implementation. Do
>> you plan for using webSockets even on AppSensor server as an alternate
>> option to REST APIs, so that responses can be pushed without client polling
>> for it?
>>
>> Best,
>>
>> Chetan
>>
>> On Mon, Mar 17, 2014 at 1:25 AM, John Melton <jtmelton at gmail.com> wrote:
>>
>>> Chetan,
>>> Replying to this on list since Colin had asked for an example json
>>> snippet at one point. A sample JSON string for adding a new event is below.
>>>
>>> {"user":{"username":"SOME_END_USERNAME"},"detectionPoint":{"id":"SOME_DETECTION_POINT_ID"},"timestamp":
>>> SOME_UNIX_TIMESTAMP }
>>>
>>> The only additional point to note is that you have to make the request
>>> with an http request header. The default key for that header is 'X-Appsensor-Client-Application-Name'
>>> and the value would be the name of the client application being used.
>>>
>>> For further info check the addRecord method at
>>> https://github.com/jtmelton/appsensor/blob/master/sample-apps/simple-dashboard/src/main/webapp/index.jsp.
>>> Thanks,
>>> John
>>>
>>>
>>> On Sun, Mar 16, 2014 at 11:40 PM, Chetan Karande <
>>> chetan.karande at owasp.org> wrote:
>>>
>>>> Great. Thank you  John.
>>>> On Mar 16, 2014 11:37 PM, "John Melton" <jtmelton at gmail.com> wrote:
>>>>
>>>>> Chetan,
>>>>> Good question. I've been working on the code. I'm actually pushing
>>>>> some code right now, then I'll send out a group email with some updates. I
>>>>> haven't pulled out the JSON structure yet, but I'll try to get some basic
>>>>> examples together and documented and send it to the list in the next couple
>>>>> days.
>>>>>
>>>>> Thanks,
>>>>> John
>>>>>
>>>>>
>>>>> On Sun, Mar 16, 2014 at 10:57 PM, Chetan Karande <
>>>>> chetan.karande at owasp.org> wrote:
>>>>>
>>>>>> Hi John,
>>>>>>
>>>>>> I was side tracked due to other priorities for a while, and wanted to
>>>>>> resume working in AppSensor reference implementation in Node.js.
>>>>>>
>>>>>> As per our last conversation, you were going to work on adding a
>>>>>> sample app and include minimum required json message structure as part the
>>>>>> tech documentation. Just wanted to check if you had chance to do any
>>>>>> progress on that.
>>>>>>
>>>>>> Thank you.
>>>>>>
>>>>>>
>>>>>> Best Regards,
>>>>>>
>>>>>> Chetan Karande
>>>>>>
>>>>>> chetan.karande at owasp.org
>>>>>>
>>>>>> OWASP NYC Local Chapter <https://www.owasp.org/index.php/NYC>
>>>>>>
>>>>>> Open Web Application Security Project<https://www.owasp.org/index.php/Main_Page>
>>>>>>
>>>>>>
>>>>>> On Mon, Dec 9, 2013 at 2:42 AM, John Melton <jtmelton at gmail.com>wrote:
>>>>>>
>>>>>>> Chetan,
>>>>>>> Awesome to see what you're coming up with.
>>>>>>>
>>>>>>> With respect to your questions, I responded inline below, but also
>>>>>>> wanted to mention that one task I have for Colin is to give him the minimum
>>>>>>> json structure needed so it can be documented. I'll also put that in the
>>>>>>> tech documentation as well.
>>>>>>>
>>>>>>> Thanks,
>>>>>>> John
>>>>>>>
>>>>>>>
>>>>>>> On Sun, Dec 8, 2013 at 6:07 PM, Chetan Karande <
>>>>>>> chetan.karande at owasp.org> wrote:
>>>>>>>
>>>>>>>> Hi John,
>>>>>>>>
>>>>>>>> I started exploring the AppSensor code on github and went over the
>>>>>>>> AppSensor Guide document. It helped me in getting more idea about AppSensor
>>>>>>>> in general. I have a few questions for you specifically about approaching
>>>>>>>> Node.js demonstration implementation. Please answer when you get chance:
>>>>>>>>
>>>>>>>> Question 1. As per on our earlier email conversation, I explored
>>>>>>>> more on implementing addEvent() and getResponses() methods in Node.js
>>>>>>>> app. Based on the AppSensor REST Service code on github, I think
>>>>>>>> the service expects client using following endpoints and JSON
>>>>>>>> message structures. Can you please confirm if I am on right track, and
>>>>>>>> answer question highlighted.
>>>>>>>>
>>>>>>>> *addEvent() Implementation:*
>>>>>>>> *======================*
>>>>>>>>
>>>>>>>> *Invoke REST Endpoint:* /api/v1.0/events
>>>>>>>>
>>>>>>>> *Sample Event JSON Object to be sent from the Node.js  App:*
>>>>>>>>
>>>>>>>> {
>>>>>>>> user: {
>>>>>>>> username: ""
>>>>>>>>  ipAddress: ""
>>>>>>>> },
>>>>>>>> detectionPoint : {  // ??? Does Node.js client need to populate
>>>>>>>> this object? If yes, what goes in responses, how to decide threshold?
>>>>>>>>
>>>>>>>
>>>>>>> All that is needed in the detectionPoint object field is the "id"
>>>>>>> field. The rest is found server-side.
>>>>>>>
>>>>>>>  id: "",
>>>>>>>> threshold: "",
>>>>>>>> responses: []
>>>>>>>>  },
>>>>>>>> timestamp: "",
>>>>>>>> detectionSystemId: "",
>>>>>>>>  resource: "",
>>>>>>>> eventType: ""
>>>>>>>>
>>>>>>>> }
>>>>>>>>
>>>>>>>>
>>>>>>>> *getResponses() Implementation:*
>>>>>>>> *=========================*
>>>>>>>>
>>>>>>>> *Poll REST EndPoint URL:* /api/v1.0/responses
>>>>>>>>
>>>>>>>> *Expected Response object from AppSensor REST service:*
>>>>>>>>
>>>>>>>> {
>>>>>>>> id: "",
>>>>>>>> threshold: "",
>>>>>>>>  responses: [
>>>>>>>> {
>>>>>>>> user: {
>>>>>>>> username: "",
>>>>>>>>  ipAddress: ""
>>>>>>>> },
>>>>>>>> action: "",
>>>>>>>>  detectionPoint: {}, //???. It contains responses array again.
>>>>>>>> What to expect in it?
>>>>>>>>
>>>>>>>
>>>>>>> The detection point really shouldn't be part of the response - I'll
>>>>>>> try to remove this from being serialized.
>>>>>>>
>>>>>>>
>>>>>>>>  timestamp: "",
>>>>>>>>  detectionSystemId: "",
>>>>>>>> interval : {
>>>>>>>> duration: "",
>>>>>>>>  unit: 0 //number
>>>>>>>> }
>>>>>>>> },
>>>>>>>> {
>>>>>>>>  //another response
>>>>>>>> }
>>>>>>>> ]
>>>>>>>> }
>>>>>>>>
>>>>>>>> 2. In case multiple responses received as result of invoking
>>>>>>>> *getResponses()*, does order in which actions are performed matter?
>>>>>>>>
>>>>>>>
>>>>>>> Good question that I don't think has been considered before. It
>>>>>>> shouldn't in our case in the reference implementation (unless we add some
>>>>>>> new features), but the timestamp is available, so it's likely best practice
>>>>>>> to execute them in order. I'll add this point to the documentation.
>>>>>>>
>>>>>>>
>>>>>>>>
>>>>>>>> 3. Can I set AppSensor REST Server on my machine and use it for
>>>>>>>> testing Node.js demo implementation? If so, can you please provide me steps
>>>>>>>> to set it up.
>>>>>>>>
>>>>>>>
>>>>>>> Yep, but there's not a project setup to do it yet. I'll try to add a
>>>>>>> sample app for that soon. If you'd like to use it before I get that done,
>>>>>>> have a look at the appsensor-ws-rest-server project and the
>>>>>>> RestRequestHandlerTest class. There is a helper method at the bottom of the
>>>>>>> class (startServer) that runs the service on grizzly. You can call that in
>>>>>>> a main method to get a small simple server going for testing.
>>>>>>>
>>>>>>>
>>>>>>>> Just to share, I am exploring to retrofit ghost<https://ghost.org/>,
>>>>>>>> an open-source Node.js based blogging platform for AppSensor demonstration
>>>>>>>> implementation. I am working on getting familiar with its code and identify
>>>>>>>> detection points.
>>>>>>>>
>>>>>>>
>>>>>>> That's an awesome project. Adding security to existing popular
>>>>>>> platforms has been a goal for OWASP for some time - nice to see progress
>>>>>>> here.
>>>>>>>
>>>>>>>
>>>>>>>>
>>>>>>>> Best Regards,
>>>>>>>>
>>>>>>>> Chetan Karande
>>>>>>>>
>>>>>>>> chetan.karande at owasp.org
>>>>>>>>
>>>>>>>> OWASP NYC Local Chapter <https://www.owasp.org/index.php/NYC>
>>>>>>>>
>>>>>>>> Open Web Application Security Project<https://www.owasp.org/index.php/Main_Page>
>>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>
>>>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140408/bb36544f/attachment-0001.html>

From dennis.groves at owasp.org  Tue Apr  8 20:07:54 2014
From: dennis.groves at owasp.org (Dennis Groves)
Date: Tue, 8 Apr 2014 13:07:54 -0700
Subject: [Owasp-appsensor-project] AppSensor Guide v2.0 - Last call for
 "whole section" contributions
In-Reply-To: <CAAxdBBnNYX0mVfsoYuka96za2LgdD9K5g=C48zBaJUPum=rpsA@mail.gmail.com>
References: <CAAxdBBku2bXQ4=hE=L0YjyCAVmj6TqFWdZ3+vX96VwLik33fgg@mail.gmail.com>
	<CAJL+Z04mOBi-TBw=1wAY517Ys_=RV3d=5pYjjU9KFv3roB3c=w@mail.gmail.com>
	<CAAxdBBnNYX0mVfsoYuka96za2LgdD9K5g=C48zBaJUPum=rpsA@mail.gmail.com>
Message-ID: <CADWsQ8QOCswG+3XC_Gi9wBOAJcW8yLfotRuqLi7FeB5YOMYsxQ@mail.gmail.com>

Hi Colin,

I will add it to my todo list, and I think that is a great idea.

Unfortunately, like many volunteers my 'freetime' is my OWASP time; and
currently my 'free-time' is very occupied.

For example: my Grandfathers care taker beat him nearly to death, and left
him for dead<http://www.king5.com/news/crime/91-year-old-man-hospitalized-after-violent-attack-251148131.html>.
The care taker now has full financial control of his assets (it is called
power of attorney here in the USA) as Grandfather no doubt signed them over
during the beatings hoping she would stop.
Anyhow, I have very little free time, as my family requires me at this time.


My apologies,

Dennis



On Tue, Apr 8, 2014 at 7:14 AM, Colin Watson <colin.watson at owasp.org> wrote:

> Dennis
>
> If the chapter on statistical detection points will not be written,
> the preamble may also need some adjustment to match. But could you do
> even a page or two for the statistical detection points chapter, even
> as a teaser for v2.1, v3.0 or a separate document entirely?
>
> Colin
>
>
>
>
> On 4 April 2014 16:01, Dennis Groves <dennis.groves at owasp.org> wrote:
> > Hello Colin,
> >
> > I have a new preamble. But due to the work I have been doing I am
> doubtful
> > that I will have my sections completed by the deadline you have set. I am
> > unable to even get the new preamble up on Google docs right now. I am
> 100%
> > travel. :(  however given the push I will try to get something done.
> >
> > Dennis
> >
> > Sent from my phone, apologies for the brevity and spelling errors.
> >
> > On Apr 4, 2014 7:51 AM, "Colin Watson" <colin.watson at owasp.org> wrote:
> >>
> >> Dear all
> >>
> >> Further to Jim's perfectly reasonable "cage rattling" a couple of
> >> weeks ago, here is an update.
> >>
> >> Since the start of this push, 10 days ago, to publish I have added
> >> more new content to v1.38. In numbers this means the book has grown by
> >> in total 26 extra pages:
> >>
> >> - 5,000 new words
> >> - 22 new figures
> >> - 5 new tables
> >> - 2 additional contributors listed (Josh and Erlend)
> >>
> >> I went through the version on Google Docs today, but cannot see any
> >> actual edits and new additional text. I only see a score or so
> >> comments. BTW apart from the Preamble, most of the text was drafted by
> >> me alone, so Josh, some of your questions directed at Ryan about use
> >> of a WAF, are really my misunderstandings, mistakes or lack of
> >> clarity.
> >>
> >> Version v1.45 is in the usual place linked from the project wiki. I
> >> have also tried to check all the applied styles, and created new
> >> styles for URLs and code samples.
> >>
> >> https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
> >>
> >> The following sections appear to be largely incomplete (and by whom!).
> >> Please forward on any contributions for these, otherwise they will be
> >> dropped from the version for review in a couple of weeks time, when
> >> bulk content addition will then be frozen. If anyone else is able to
> >> write these, perhaps with the exception of the Foreword, that would be
> >> fine too. These sections can of course be added back into a later
> >> edition if they are written subsequently.
> >>
> >> [MC] Foreword
> >> [DG] Preamble - About This Guide
> >> [DG] Preamble - How To Use This Book
> >> [CW] Part III - Chapter 16: Software Acquisition Process
> >> [DG] Part III - Chapter 20: Statistical Detection Points
> >> [CW] Part IV - Utilizing Web Analytics
> >> [CW] Reference - File Data Logging Format
> >> [CW] Reference - Index
> >>
> >> I am hoping to get the Web Analytics and File Data Logging Format
> >> sections written. But the other two sections with my initials will not
> >> be done in time for this edition.
> >>
> >> ************
> >> If any of these sections will be written by the end of 17th April,
> >> please let me know and we can defer them to a later edition, and
> >> perhaps progress to the final review period sooner.
> >> ************
> >>
> >> Can anyone update the Google Docs version? I don't know how to
> >> import/merge/add the changes from v1.45. BTW there are erroneous
> >> artefacts in the Google Doc version that do not exist in the Word
> >> version that was previously uploaded (e.g. the extra "h" at the end of
> >> Chapter 27), in case a difference check is used.
> >>
> >> As a reminder, the review period is between the 18th and 30th April.
> >> We will then publish the v2.0 book by 7th May 2014. This will be as a
> >> PDF, in Word, in Google Docs and also as a Lulu print on demand book.
> >>
> >> Regards
> >>
> >> Colin
> >> _______________________________________________
> >> Owasp-appsensor-project mailing list
> >> Owasp-appsensor-project at lists.owasp.org
> >> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>



-- 
Dennis Groves <http://about.me/dennis.groves>, MSc
Email me, <dennis.groves at owasp.org> or schedule a meeting<http://goo.gl/8sPIy>
.
*This email is licensed under a CC BY-ND 3.0
<http://creativecommons.org/licenses/by-nd/3.0/deed.en_GB> license.*
Stand up for your freedom to install free
software.<http://www.fsf.org/campaigns/secure-boot/statement>
Please do not send me Microsoft Office/Apple iWork documents.
Send OpenDocument <http://fsf.org/campaigns/opendocument/> instead!

<http://www.owasp.org/>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140408/88811976/attachment.html>

From colin.watson at owasp.org  Wed Apr  9 12:50:29 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Wed, 9 Apr 2014 13:50:29 +0100
Subject: [Owasp-appsensor-project] AppSensor Guide v2.0 - Last call for
 "whole section" contributions
In-Reply-To: <CADWsQ8QOCswG+3XC_Gi9wBOAJcW8yLfotRuqLi7FeB5YOMYsxQ@mail.gmail.com>
References: <CAAxdBBku2bXQ4=hE=L0YjyCAVmj6TqFWdZ3+vX96VwLik33fgg@mail.gmail.com>
	<CAJL+Z04mOBi-TBw=1wAY517Ys_=RV3d=5pYjjU9KFv3roB3c=w@mail.gmail.com>
	<CAAxdBBnNYX0mVfsoYuka96za2LgdD9K5g=C48zBaJUPum=rpsA@mail.gmail.com>
	<CADWsQ8QOCswG+3XC_Gi9wBOAJcW8yLfotRuqLi7FeB5YOMYsxQ@mail.gmail.com>
Message-ID: <CAAxdBBm-jM=JpK=3VcwYrZLXrKMPKMXgAW+BmXzW30NQsBZMpQ@mail.gmail.com>

Dennis

On 8 April 2014 21:07, Dennis Groves <dennis.groves at owasp.org> wrote:

> Grandfathers care taker beat him nearly to death, and left him for dead


Very sad news, our thoughts are with you and your family.

Colin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140409/0b0d4581/attachment.html>

From jtmelton at gmail.com  Wed Apr  9 18:34:51 2014
From: jtmelton at gmail.com (John Melton)
Date: Wed, 9 Apr 2014 14:34:51 -0400
Subject: [Owasp-appsensor-project] ensnare project
Message-ID: <CAM8z=yLrjXGVHisg7LX5SEwwmEqwZ9PBBidMbR9Uk4bezBmemw@mail.gmail.com>

All,

I thought this was worth sharing, particularly for any ruby devs on list.
There is a new project called Ensnare that was just presented/released at
Source Boston. The project is similar to AppSensor in many ways and is
worth checking out.

The link to the project is here: https://github.com/ahoernecke/ensnare with
documentation here: https://github.com/ahoernecke/ensnare/wiki .

They mentioned drawing much inspiration from Ryan Barnett's excellent work
on Honey Traps:
http://blog.spiderlabs.com/2011/08/detecting-malice-with-modsecurity-honeytraps.htmlas
well as AppSensor.

Thanks,
John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140409/af9cbec0/attachment.html>

From colin.watson at owasp.org  Wed Apr  9 18:58:39 2014
From: colin.watson at owasp.org (=?utf-8?B?Y29saW4ud2F0c29uQG93YXNwLm9yZw==?=)
Date: Wed, 09 Apr 2014 19:58:39 +0100
Subject: [Owasp-appsensor-project] =?utf-8?q?ensnare_project?=
Message-ID: <534598be.6103c20a.767b.7647@mx.google.com>

That's excellent!
Colin

----- Reply message -----
From: "John Melton" <jtmelton at gmail.com>
To: "owasp-appsensor-project" <owasp-appsensor-project at lists.owasp.org>
Subject: [Owasp-appsensor-project] ensnare project
Date: Wed, Apr 9, 2014 19:34

All, 

I thought this was worth sharing, particularly for any ruby devs on list. There is a new project called Ensnare that was just presented/released at Source Boston. The project is similar to AppSensor in many ways and is worth checking out. 



The link to the project is here: https://github.com/ahoernecke/ensnare with documentation here: https://github.com/ahoernecke/ensnare/wiki .



They mentioned drawing much inspiration from Ryan Barnett's excellent work on Honey Traps: http://blog.spiderlabs.com/2011/08/detecting-malice-with-modsecurity-honeytraps.html as well as AppSensor. 



Thanks,
John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140409/d3b27236/attachment.html>

From jtmelton at gmail.com  Tue Apr 15 04:43:04 2014
From: jtmelton at gmail.com (John Melton)
Date: Tue, 15 Apr 2014 00:43:04 -0400
Subject: [Owasp-appsensor-project] modsecurity appsensor demo project(s)
Message-ID: <CAM8z=yJL35CfzW-x1Uu2=LO-pM217-VXw5fzGQXFK2xSXWe3VQ@mail.gmail.com>

Ryan,

You've certainly been one of the biggest contributors to the project, and
we've talked in the past about doing some demos with modsecurity and
appsensor together. I was hoping we could get those going now.

V2 of the code (https://github.com/jtmelton/appsensor) is not done by any
stretch, but is far enough along that we're creating sample projects. I'm
hoping we can do 1 or more using modsecurity to show off some of the slick
ideas you have.

When you have time, I was hoping you could come up with a few ideas, maybe
of varying complexity to show what can be done with the tools combined.
That being said, these will still likely be demo/POC level for now. If
there's a lot of value, we can make them more robust.

I'm happy to work with you and/or others on it, but I have effectively zero
practical deployment and operational knowledge of modsecurity. I can
obviously help out with the appsensor side and integration.

Not sure if modsecurity for Java might be a good fit here? I know you've
mentioned this before, but just throwing it out there.

Thanks,
John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140415/0c4d66c1/attachment.html>

From ryan.barnett at owasp.org  Tue Apr 15 13:28:33 2014
From: ryan.barnett at owasp.org (Ryan Barnett)
Date: Tue, 15 Apr 2014 09:28:33 -0400
Subject: [Owasp-appsensor-project] Prevoty
Message-ID: <8CA8CE0A-10B3-4EFD-B730-36095256DD1E@owasp.org>

Anyone seen this before? 

https://www.prevoty.com/how-it-works

Sounds like AppSensor to me. 

Ryan Barnett

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140415/a70d2ff9/attachment.html>

From ryan.barnett at owasp.org  Tue Apr 15 13:30:09 2014
From: ryan.barnett at owasp.org (Ryan Barnett)
Date: Tue, 15 Apr 2014 09:30:09 -0400
Subject: [Owasp-appsensor-project] modsecurity appsensor demo project(s)
In-Reply-To: <CAM8z=yJL35CfzW-x1Uu2=LO-pM217-VXw5fzGQXFK2xSXWe3VQ@mail.gmail.com>
References: <CAM8z=yJL35CfzW-x1Uu2=LO-pM217-VXw5fzGQXFK2xSXWe3VQ@mail.gmail.com>
Message-ID: <B1D8832F-E87A-453E-91F1-680B7583D688@owasp.org>

Good idea. Need to think how to make this into a "demo". We already have a bunch of rules that map to AppSensor detection points. We need to see about how to send alerts to the dashboard/API. 

Ryan Barnett
OWASP ModSecurity CRS Project Leader

> On Apr 15, 2014, at 12:43 AM, John Melton <jtmelton at gmail.com> wrote:
> 
> Ryan, 
> 
> You've certainly been one of the biggest contributors to the project, and we've talked in the past about doing some demos with modsecurity and appsensor together. I was hoping we could get those going now. 
> 
> V2 of the code (https://github.com/jtmelton/appsensor) is not done by any stretch, but is far enough along that we're creating sample projects. I'm hoping we can do 1 or more using modsecurity to show off some of the slick ideas you have. 
> 
> When you have time, I was hoping you could come up with a few ideas, maybe of varying complexity to show what can be done with the tools combined. That being said, these will still likely be demo/POC level for now. If there's a lot of value, we can make them more robust. 
> 
> I'm happy to work with you and/or others on it, but I have effectively zero practical deployment and operational knowledge of modsecurity. I can obviously help out with the appsensor side and integration. 
> 
> Not sure if modsecurity for Java might be a good fit here? I know you've mentioned this before, but just throwing it out there.
> 
> Thanks,
> John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140415/291e3cd4/attachment.html>

From jtmelton at gmail.com  Tue Apr 15 15:51:03 2014
From: jtmelton at gmail.com (John Melton)
Date: Tue, 15 Apr 2014 11:51:03 -0400
Subject: [Owasp-appsensor-project] Prevoty
In-Reply-To: <8CA8CE0A-10B3-4EFD-B730-36095256DD1E@owasp.org>
References: <8CA8CE0A-10B3-4EFD-B730-36095256DD1E@owasp.org>
Message-ID: <CAM8z=yL_Z1fpZLEQKa2uV0BM2JS-KpZ2WhF=4ZDs3bFE-x4gDQ@mail.gmail.com>

First time seeing it. Not sure about the exact tech, but the idea sounds
pretty familiar :>. There's even a very similar snippet of code to one from
Michael's original demo app in the "how it works" section (see "quick brown
fox" line.

Sounds pretty impressive though:
"And if you add Prevoty to your existing applications, remediation is
immediate since all XSS, SQLi and CSRF vulnerabilities are fixed
automatically."

That's a pretty bold statement - we'll see if the tech lives up to it.

Thanks,
John


On Tue, Apr 15, 2014 at 9:28 AM, Ryan Barnett <ryan.barnett at owasp.org>wrote:

> Anyone seen this before?
>
> https://www.prevoty.com/how-it-works
>
> Sounds like AppSensor to me.
>
> *Ryan Barnett*
>
>
>
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140415/ed0523c2/attachment.html>

From jtmelton at gmail.com  Tue Apr 15 15:52:15 2014
From: jtmelton at gmail.com (John Melton)
Date: Tue, 15 Apr 2014 11:52:15 -0400
Subject: [Owasp-appsensor-project] modsecurity appsensor demo project(s)
In-Reply-To: <B1D8832F-E87A-453E-91F1-680B7583D688@owasp.org>
References: <CAM8z=yJL35CfzW-x1Uu2=LO-pM217-VXw5fzGQXFK2xSXWe3VQ@mail.gmail.com>
	<B1D8832F-E87A-453E-91F1-680B7583D688@owasp.org>
Message-ID: <CAM8z=yKYNg84aODDg95UOi8Ee9wnh_sTbTQ1EnYxGN2-awEsYg@mail.gmail.com>

To send alerts (events or attacks), I'm assuming the easiest will be to
send JSON over REST. I can help get things going whenever you're ready.
Thanks,
John


On Tue, Apr 15, 2014 at 9:30 AM, Ryan Barnett <ryan.barnett at owasp.org>wrote:

> Good idea. Need to think how to make this into a "demo". We already have a
> bunch of rules that map to AppSensor detection points. We need to see about
> how to send alerts to the dashboard/API.
>
> *Ryan Barnett*
>
> OWASP ModSecurity CRS Project Leader
>
> On Apr 15, 2014, at 12:43 AM, John Melton <jtmelton at gmail.com> wrote:
>
> Ryan,
>
> You've certainly been one of the biggest contributors to the project, and
> we've talked in the past about doing some demos with modsecurity and
> appsensor together. I was hoping we could get those going now.
>
> V2 of the code (https://github.com/jtmelton/appsensor) is not done by any
> stretch, but is far enough along that we're creating sample projects. I'm
> hoping we can do 1 or more using modsecurity to show off some of the slick
> ideas you have.
>
> When you have time, I was hoping you could come up with a few ideas, maybe
> of varying complexity to show what can be done with the tools combined.
> That being said, these will still likely be demo/POC level for now. If
> there's a lot of value, we can make them more robust.
>
> I'm happy to work with you and/or others on it, but I have effectively
> zero practical deployment and operational knowledge of modsecurity. I can
> obviously help out with the appsensor side and integration.
>
> Not sure if modsecurity for Java might be a good fit here? I know you've
> mentioned this before, but just throwing it out there.
>
> Thanks,
> John
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140415/0c6418fa/attachment.html>

From ryan.barnett at owasp.org  Tue Apr 15 15:58:15 2014
From: ryan.barnett at owasp.org (Ryan Barnett)
Date: Tue, 15 Apr 2014 11:58:15 -0400
Subject: [Owasp-appsensor-project] Prevoty
In-Reply-To: <CAM8z=yL_Z1fpZLEQKa2uV0BM2JS-KpZ2WhF=4ZDs3bFE-x4gDQ@mail.gmail.com>
References: <8CA8CE0A-10B3-4EFD-B730-36095256DD1E@owasp.org>
	<CAM8z=yL_Z1fpZLEQKa2uV0BM2JS-KpZ2WhF=4ZDs3bFE-x4gDQ@mail.gmail.com>
Message-ID: <CF72CE03.ED721%ryan.barnett@owasp.org>

It looks like they are focusing on these threee attack/vulns ? XSS, SQLi and
CSRF mapped to these different products/modules -
* Trusted Content - https://www.prevoty.com/product/prevoty-trusted-content
? which looks to me like they are using server-side DOM inspection. Perhaps
using something like PhantomJS, SpiderMonkey/V8 to eval code before allowing
it through to the back-end app.  This is similar to the PoC I did with
ModSecurity + PhantomJS -
http://blog.spiderlabs.com/2013/02/server-site-xss-attack-detection-with-mod
security-and-phantomjs.html
* Trusted Query - https://www.prevoty.com/product/prevoty-trusted-query ?
which looks sort of like a libinjection module -
https://libinjection.client9.com/
* Trusted Token - https://www.prevoty.com/product/prevoty-trusted-token ?
which looks like CSRF tokens.
I could be wrong here but it looks like they have taken existing defenses
and essentially bundled them up into a commercial grade system.

-Ryan

From:  John Melton <jtmelton at gmail.com>
Date:  Tuesday, April 15, 2014 11:51 AM
To:  Ryan Barnett <ryan.barnett at owasp.org>
Cc:  "owasp-appsensor-project at lists.owasp.org"
<owasp-appsensor-project at lists.owasp.org>
Subject:  Re: [Owasp-appsensor-project] Prevoty

> First time seeing it. Not sure about the exact tech, but the idea sounds
> pretty familiar :>. There's even a very similar snippet of code to one from
> Michael's original demo app in the "how it works" section (see "quick brown
> fox" line. 
> 
> Sounds pretty impressive though:
> "And if you add Prevoty to your existing applications, remediation is
> immediate since all XSS, SQLi and CSRF vulnerabilities are fixed
> automatically."
> 
> That's a pretty bold statement - we'll see if the tech lives up to it.
> 
> Thanks,
> John
> 
> 
> On Tue, Apr 15, 2014 at 9:28 AM, Ryan Barnett <ryan.barnett at owasp.org> wrote:
>> Anyone seen this before?
>> 
>> https://www.prevoty.com/how-it-works
>> 
>> Sounds like AppSensor to me.
>> 
>> 
>> Ryan Barnett
>> 
>> 
>> _______________________________________________
>> Owasp-appsensor-project mailing list
>> Owasp-appsensor-project at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>> 
> 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140415/8fa3ec7b/attachment-0001.html>

From ryan.barnett at owasp.org  Tue Apr 15 16:03:00 2014
From: ryan.barnett at owasp.org (Ryan Barnett)
Date: Tue, 15 Apr 2014 12:03:00 -0400
Subject: [Owasp-appsensor-project] modsecurity appsensor demo project(s)
In-Reply-To: <CAM8z=yKYNg84aODDg95UOi8Ee9wnh_sTbTQ1EnYxGN2-awEsYg@mail.gmail.com>
References: <CAM8z=yJL35CfzW-x1Uu2=LO-pM217-VXw5fzGQXFK2xSXWe3VQ@mail.gmail.com>
	<B1D8832F-E87A-453E-91F1-680B7583D688@owasp.org>
	<CAM8z=yKYNg84aODDg95UOi8Ee9wnh_sTbTQ1EnYxGN2-awEsYg@mail.gmail.com>
Message-ID: <CF72CF6E.ED73E%ryan.barnett@owasp.org>

I am CC'ing Felipe here as he is the lead ModSecurity Dev.  He and I have
discussed some feature updates for logs to make them more "machine" friendly
to SIEM, etc..  https://github.com/SpiderLabs/ModSecurity/issues/656

The format of the data is one element but we also need to think about the
transport.  John ? what about using the two Mitre projects -
* Format - http://stix.mitre.org/
* Transport - http://taxii.mitre.org/
I agree that Restful API/JSON is a popular choice however I am thining that
using these Mitre project may help with a "standard" approach and adoption
by users.

Let me know what you think.

-Ryan

From:  John Melton <jtmelton at gmail.com>
Date:  Tuesday, April 15, 2014 11:52 AM
To:  Ryan Barnett <ryan.barnett at owasp.org>
Cc:  owasp-appsensor-project <owasp-appsensor-project at lists.owasp.org>
Subject:  Re: modsecurity appsensor demo project(s)

> To send alerts (events or attacks), I'm assuming the easiest will be to send
> JSON over REST. I can help get things going whenever you're ready.
> Thanks,
> John
> 
> 
> On Tue, Apr 15, 2014 at 9:30 AM, Ryan Barnett <ryan.barnett at owasp.org> wrote:
>> Good idea. Need to think how to make this into a "demo". We already have a
>> bunch of rules that map to AppSensor detection points. We need to see about
>> how to send alerts to the dashboard/API.
>> 
>> 
>> Ryan Barnett
>> OWASP ModSecurity CRS Project Leader
>> 
>> 
>> On Apr 15, 2014, at 12:43 AM, John Melton <jtmelton at gmail.com> wrote:
>> 
>>> Ryan, 
>>> 
>>> You've certainly been one of the biggest contributors to the project, and
>>> we've talked in the past about doing some demos with modsecurity and
>>> appsensor together. I was hoping we could get those going now.
>>> 
>>> V2 of the code (https://github.com/jtmelton/appsensor) is not done by any
>>> stretch, but is far enough along that we're creating sample projects. I'm
>>> hoping we can do 1 or more using modsecurity to show off some of the slick
>>> ideas you have.
>>> 
>>> When you have time, I was hoping you could come up with a few ideas, maybe
>>> of varying complexity to show what can be done with the tools combined. That
>>> being said, these will still likely be demo/POC level for now. If there's a
>>> lot of value, we can make them more robust.
>>> 
>>> I'm happy to work with you and/or others on it, but I have effectively zero
>>> practical deployment and operational knowledge of modsecurity. I can
>>> obviously help out with the appsensor side and integration.
>>> 
>>> Not sure if modsecurity for Java might be a good fit here? I know you've
>>> mentioned this before, but just throwing it out there.
>>> 
>>> Thanks,
>>> John
> 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140415/0f81ed77/attachment.html>

From jtmelton at gmail.com  Tue Apr 15 16:12:17 2014
From: jtmelton at gmail.com (John Melton)
Date: Tue, 15 Apr 2014 12:12:17 -0400
Subject: [Owasp-appsensor-project] modsecurity appsensor demo project(s)
In-Reply-To: <CF72CF6E.ED73E%ryan.barnett@owasp.org>
References: <CAM8z=yJL35CfzW-x1Uu2=LO-pM217-VXw5fzGQXFK2xSXWe3VQ@mail.gmail.com>
	<B1D8832F-E87A-453E-91F1-680B7583D688@owasp.org>
	<CAM8z=yKYNg84aODDg95UOi8Ee9wnh_sTbTQ1EnYxGN2-awEsYg@mail.gmail.com>
	<CF72CF6E.ED73E%ryan.barnett@owasp.org>
Message-ID: <CAM8z=yLSXhg1kj3w4JQcnOicrSjyUJNCgPWDG0pZp-CJTOBGNA@mail.gmail.com>

I'll try to take a look at these in more detail when I have a chance, but
I'll say that since the primary goal is to integrate quickly and easily and
our primary integration "partner" will be standard applications, I think
REST/JSON makes sense.

That being said, exposing another front-end for other formats is
approximately equal to the amount of work to support the given format (ie.
SOAP/XML was pretty easy b/c the Java tooling supports it well). A brief
look at these shows that currently the only implementation is a POC and in
python/django. We could build our own, but we'd be the trailblazers.
Something to think about for sure, especially if the standard becomes
popular.


On Tue, Apr 15, 2014 at 12:03 PM, Ryan Barnett <ryan.barnett at owasp.org>wrote:

> I am CC'ing Felipe here as he is the lead ModSecurity Dev.  He and I have
> discussed some feature updates for logs to make them more "machine"
> friendly to SIEM, etc..
> https://github.com/SpiderLabs/ModSecurity/issues/656
>
> The format of the data is one element but we also need to think about the
> transport.  John ? what about using the two Mitre projects -
>
>    - Format - http://stix.mitre.org/
>    - Transport - http://taxii.mitre.org/
>
> I agree that Restful API/JSON is a popular choice however I am thining
> that using these Mitre project may help with a "standard" approach and
> adoption by users.
>
> Let me know what you think.
>
> -Ryan
>
> From: John Melton <jtmelton at gmail.com>
> Date: Tuesday, April 15, 2014 11:52 AM
> To: Ryan Barnett <ryan.barnett at owasp.org>
> Cc: owasp-appsensor-project <owasp-appsensor-project at lists.owasp.org>
> Subject: Re: modsecurity appsensor demo project(s)
>
> To send alerts (events or attacks), I'm assuming the easiest will be to
> send JSON over REST. I can help get things going whenever you're ready.
> Thanks,
> John
>
>
> On Tue, Apr 15, 2014 at 9:30 AM, Ryan Barnett <ryan.barnett at owasp.org>wrote:
>
>> Good idea. Need to think how to make this into a "demo". We already have
>> a bunch of rules that map to AppSensor detection points. We need to see
>> about how to send alerts to the dashboard/API.
>>
>> *Ryan Barnett*
>>
>> OWASP ModSecurity CRS Project Leader
>>
>> On Apr 15, 2014, at 12:43 AM, John Melton <jtmelton at gmail.com> wrote:
>>
>> Ryan,
>>
>> You've certainly been one of the biggest contributors to the project, and
>> we've talked in the past about doing some demos with modsecurity and
>> appsensor together. I was hoping we could get those going now.
>>
>> V2 of the code (https://github.com/jtmelton/appsensor) is not done by
>> any stretch, but is far enough along that we're creating sample projects.
>> I'm hoping we can do 1 or more using modsecurity to show off some of the
>> slick ideas you have.
>>
>> When you have time, I was hoping you could come up with a few ideas,
>> maybe of varying complexity to show what can be done with the tools
>> combined. That being said, these will still likely be demo/POC level for
>> now. If there's a lot of value, we can make them more robust.
>>
>> I'm happy to work with you and/or others on it, but I have effectively
>> zero practical deployment and operational knowledge of modsecurity. I can
>> obviously help out with the appsensor side and integration.
>>
>> Not sure if modsecurity for Java might be a good fit here? I know you've
>> mentioned this before, but just throwing it out there.
>>
>> Thanks,
>> John
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140415/abab7960/attachment.html>

From colin.watson at owasp.org  Wed Apr 16 07:06:29 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Wed, 16 Apr 2014 08:06:29 +0100
Subject: [Owasp-appsensor-project] Prevoty
In-Reply-To: <CF72CE03.ED721%ryan.barnett@owasp.org>
References: <8CA8CE0A-10B3-4EFD-B730-36095256DD1E@owasp.org>
	<CAM8z=yL_Z1fpZLEQKa2uV0BM2JS-KpZ2WhF=4ZDs3bFE-x4gDQ@mail.gmail.com>
	<CF72CE03.ED721%ryan.barnett@owasp.org>
Message-ID: <CAAxdBB=LwjsJJURYBKr7YqJ3ZxFVC1tsjV37ndTN32bifq_Pog@mail.gmail.com>

Do we think commercial products like Prevoty and Fortify Runtime
should be mentioned at all in the guide? Perhaps they add weight to
the argument that the concept is "enterprise ready".

Colin

On 15 April 2014 16:58, Ryan Barnett <ryan.barnett at owasp.org> wrote:
> It looks like they are focusing on these threee attack/vulns ? XSS, SQLi and
> CSRF mapped to these different products/modules -
>
> Trusted Content - https://www.prevoty.com/product/prevoty-trusted-content ?
> which looks to me like they are using server-side DOM inspection. Perhaps
> using something like PhantomJS, SpiderMonkey/V8 to eval code before allowing
> it through to the back-end app.  This is similar to the PoC I did with
> ModSecurity + PhantomJS -
> http://blog.spiderlabs.com/2013/02/server-site-xss-attack-detection-with-modsecurity-and-phantomjs.html
> Trusted Query - https://www.prevoty.com/product/prevoty-trusted-query ?
> which looks sort of like a libinjection module -
> https://libinjection.client9.com/
> Trusted Token - https://www.prevoty.com/product/prevoty-trusted-token ?
> which looks like CSRF tokens.
>
> I could be wrong here but it looks like they have taken existing defenses
> and essentially bundled them up into a commercial grade system.
>
> -Ryan
>
> From: John Melton <jtmelton at gmail.com>
> Date: Tuesday, April 15, 2014 11:51 AM
> To: Ryan Barnett <ryan.barnett at owasp.org>
> Cc: "owasp-appsensor-project at lists.owasp.org"
> <owasp-appsensor-project at lists.owasp.org>
> Subject: Re: [Owasp-appsensor-project] Prevoty
>
> First time seeing it. Not sure about the exact tech, but the idea sounds
> pretty familiar :>. There's even a very similar snippet of code to one from
> Michael's original demo app in the "how it works" section (see "quick brown
> fox" line.
>
> Sounds pretty impressive though:
> "And if you add Prevoty to your existing applications, remediation is
> immediate since all XSS, SQLi and CSRF vulnerabilities are fixed
> automatically."
>
> That's a pretty bold statement - we'll see if the tech lives up to it.
>
> Thanks,
> John
>
>
> On Tue, Apr 15, 2014 at 9:28 AM, Ryan Barnett <ryan.barnett at owasp.org>
> wrote:
>>
>> Anyone seen this before?
>>
>> https://www.prevoty.com/how-it-works
>>
>> Sounds like AppSensor to me.
>>
>> Ryan Barnett
>>
>>
>>
>> _______________________________________________
>> Owasp-appsensor-project mailing list
>> Owasp-appsensor-project at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>>
>
>
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>

From jtmelton at gmail.com  Wed Apr 16 15:33:41 2014
From: jtmelton at gmail.com (John Melton)
Date: Wed, 16 Apr 2014 11:33:41 -0400
Subject: [Owasp-appsensor-project] Prevoty
In-Reply-To: <CAAxdBB=LwjsJJURYBKr7YqJ3ZxFVC1tsjV37ndTN32bifq_Pog@mail.gmail.com>
References: <8CA8CE0A-10B3-4EFD-B730-36095256DD1E@owasp.org>
	<CAM8z=yL_Z1fpZLEQKa2uV0BM2JS-KpZ2WhF=4ZDs3bFE-x4gDQ@mail.gmail.com>
	<CF72CE03.ED721%ryan.barnett@owasp.org>
	<CAAxdBB=LwjsJJURYBKr7YqJ3ZxFVC1tsjV37ndTN32bifq_Pog@mail.gmail.com>
Message-ID: <CAM8z=y+5CLGFJ1bQ_C+9V5r_urxcqX3n3Be=BNXXJNFAtWzsQA@mail.gmail.com>

I say yes. Some people will want commercial implementations and/or support.
As you said, it also lends credence to the concept.


On Wed, Apr 16, 2014 at 3:06 AM, Colin Watson <colin.watson at owasp.org>wrote:

> Do we think commercial products like Prevoty and Fortify Runtime
> should be mentioned at all in the guide? Perhaps they add weight to
> the argument that the concept is "enterprise ready".
>
> Colin
>
> On 15 April 2014 16:58, Ryan Barnett <ryan.barnett at owasp.org> wrote:
> > It looks like they are focusing on these threee attack/vulns ? XSS, SQLi
> and
> > CSRF mapped to these different products/modules -
> >
> > Trusted Content -
> https://www.prevoty.com/product/prevoty-trusted-content ?
> > which looks to me like they are using server-side DOM inspection. Perhaps
> > using something like PhantomJS, SpiderMonkey/V8 to eval code before
> allowing
> > it through to the back-end app.  This is similar to the PoC I did with
> > ModSecurity + PhantomJS -
> >
> http://blog.spiderlabs.com/2013/02/server-site-xss-attack-detection-with-modsecurity-and-phantomjs.html
> > Trusted Query - https://www.prevoty.com/product/prevoty-trusted-query ?
> > which looks sort of like a libinjection module -
> > https://libinjection.client9.com/
> > Trusted Token - https://www.prevoty.com/product/prevoty-trusted-token ?
> > which looks like CSRF tokens.
> >
> > I could be wrong here but it looks like they have taken existing defenses
> > and essentially bundled them up into a commercial grade system.
> >
> > -Ryan
> >
> > From: John Melton <jtmelton at gmail.com>
> > Date: Tuesday, April 15, 2014 11:51 AM
> > To: Ryan Barnett <ryan.barnett at owasp.org>
> > Cc: "owasp-appsensor-project at lists.owasp.org"
> > <owasp-appsensor-project at lists.owasp.org>
> > Subject: Re: [Owasp-appsensor-project] Prevoty
> >
> > First time seeing it. Not sure about the exact tech, but the idea sounds
> > pretty familiar :>. There's even a very similar snippet of code to one
> from
> > Michael's original demo app in the "how it works" section (see "quick
> brown
> > fox" line.
> >
> > Sounds pretty impressive though:
> > "And if you add Prevoty to your existing applications, remediation is
> > immediate since all XSS, SQLi and CSRF vulnerabilities are fixed
> > automatically."
> >
> > That's a pretty bold statement - we'll see if the tech lives up to it.
> >
> > Thanks,
> > John
> >
> >
> > On Tue, Apr 15, 2014 at 9:28 AM, Ryan Barnett <ryan.barnett at owasp.org>
> > wrote:
> >>
> >> Anyone seen this before?
> >>
> >> https://www.prevoty.com/how-it-works
> >>
> >> Sounds like AppSensor to me.
> >>
> >> Ryan Barnett
> >>
> >>
> >>
> >> _______________________________________________
> >> Owasp-appsensor-project mailing list
> >> Owasp-appsensor-project at lists.owasp.org
> >> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
> >>
> >
> >
> > _______________________________________________
> > Owasp-appsensor-project mailing list
> > Owasp-appsensor-project at lists.owasp.org
> > https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140416/f6f44f09/attachment.html>

From colin.watson at owasp.org  Wed Apr 16 17:42:01 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Wed, 16 Apr 2014 18:42:01 +0100
Subject: [Owasp-appsensor-project] Prevoty
In-Reply-To: <CAM8z=y+5CLGFJ1bQ_C+9V5r_urxcqX3n3Be=BNXXJNFAtWzsQA@mail.gmail.com>
References: <8CA8CE0A-10B3-4EFD-B730-36095256DD1E@owasp.org>
	<CAM8z=yL_Z1fpZLEQKa2uV0BM2JS-KpZ2WhF=4ZDs3bFE-x4gDQ@mail.gmail.com>
	<CF72CE03.ED721%ryan.barnett@owasp.org>
	<CAAxdBB=LwjsJJURYBKr7YqJ3ZxFVC1tsjV37ndTN32bifq_Pog@mail.gmail.com>
	<CAM8z=y+5CLGFJ1bQ_C+9V5r_urxcqX3n3Be=BNXXJNFAtWzsQA@mail.gmail.com>
Message-ID: <CAAxdBBmHmaEE8o7ULtbn4JmHt0dxAm5MEwqEWu0fMF_jv08xrA@mail.gmail.com>

I tend to agree. I didn't like it when I just had Fortify mentioned,
but if we have two or more I think that's reasonable.

Colin



On 16 April 2014 16:33, John Melton <jtmelton at gmail.com> wrote:
> I say yes. Some people will want commercial implementations and/or support.
> As you said, it also lends credence to the concept.
>
>
> On Wed, Apr 16, 2014 at 3:06 AM, Colin Watson <colin.watson at owasp.org>
> wrote:
>>
>> Do we think commercial products like Prevoty and Fortify Runtime
>> should be mentioned at all in the guide? Perhaps they add weight to
>> the argument that the concept is "enterprise ready".
>>
>> Colin
>>
>> On 15 April 2014 16:58, Ryan Barnett <ryan.barnett at owasp.org> wrote:
>> > It looks like they are focusing on these threee attack/vulns ? XSS, SQLi
>> > and
>> > CSRF mapped to these different products/modules -
>> >
>> > Trusted Content -
>> > https://www.prevoty.com/product/prevoty-trusted-content ?
>> > which looks to me like they are using server-side DOM inspection.
>> > Perhaps
>> > using something like PhantomJS, SpiderMonkey/V8 to eval code before
>> > allowing
>> > it through to the back-end app.  This is similar to the PoC I did with
>> > ModSecurity + PhantomJS -
>> >
>> > http://blog.spiderlabs.com/2013/02/server-site-xss-attack-detection-with-modsecurity-and-phantomjs.html
>> > Trusted Query - https://www.prevoty.com/product/prevoty-trusted-query ?
>> > which looks sort of like a libinjection module -
>> > https://libinjection.client9.com/
>> > Trusted Token - https://www.prevoty.com/product/prevoty-trusted-token ?
>> > which looks like CSRF tokens.
>> >
>> > I could be wrong here but it looks like they have taken existing
>> > defenses
>> > and essentially bundled them up into a commercial grade system.
>> >
>> > -Ryan
>> >
>> > From: John Melton <jtmelton at gmail.com>
>> > Date: Tuesday, April 15, 2014 11:51 AM
>> > To: Ryan Barnett <ryan.barnett at owasp.org>
>> > Cc: "owasp-appsensor-project at lists.owasp.org"
>> > <owasp-appsensor-project at lists.owasp.org>
>> > Subject: Re: [Owasp-appsensor-project] Prevoty
>> >
>> > First time seeing it. Not sure about the exact tech, but the idea sounds
>> > pretty familiar :>. There's even a very similar snippet of code to one
>> > from
>> > Michael's original demo app in the "how it works" section (see "quick
>> > brown
>> > fox" line.
>> >
>> > Sounds pretty impressive though:
>> > "And if you add Prevoty to your existing applications, remediation is
>> > immediate since all XSS, SQLi and CSRF vulnerabilities are fixed
>> > automatically."
>> >
>> > That's a pretty bold statement - we'll see if the tech lives up to it.
>> >
>> > Thanks,
>> > John
>> >
>> >
>> > On Tue, Apr 15, 2014 at 9:28 AM, Ryan Barnett <ryan.barnett at owasp.org>
>> > wrote:
>> >>
>> >> Anyone seen this before?
>> >>
>> >> https://www.prevoty.com/how-it-works
>> >>
>> >> Sounds like AppSensor to me.
>> >>
>> >> Ryan Barnett
>> >>
>> >>
>> >>
>> >> _______________________________________________
>> >> Owasp-appsensor-project mailing list
>> >> Owasp-appsensor-project at lists.owasp.org
>> >> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>> >>
>> >
>> >
>> > _______________________________________________
>> > Owasp-appsensor-project mailing list
>> > Owasp-appsensor-project at lists.owasp.org
>> > https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>> >
>
>

From jtmelton at gmail.com  Thu Apr 17 06:11:21 2014
From: jtmelton at gmail.com (John Melton)
Date: Thu, 17 Apr 2014 02:11:21 -0400
Subject: [Owasp-appsensor-project] AppSensor API Questions (Node.js
	Demonstration Implementation)
In-Reply-To: <CACHuFzY1EX+2PuZkmufTFmM_1c+nFGOwnbPryBMCuNip=q-Ykg@mail.gmail.com>
References: <CACHuFzb10mOWsQz_4e-YsKTOEPDRhJv=8Qt3fYdDmQNZcfO26A@mail.gmail.com>
	<CAM8z=yLgm-z7+TbFZarE-qyFMj_QJQPbkhS-Ad36-xmv8iVYkg@mail.gmail.com>
	<CACHuFzYZ4shDarq7ZCGyrbYfr25PDy54-4i-P6i2Lz+H5=+t0Q@mail.gmail.com>
	<CAM8z=yJMS1nSdRvJs-BFCh-GOHiGGv7c=nrx1_Hqg-MiAYL-4Q@mail.gmail.com>
	<CACHuFzYmDdtWe6mKxp-Kt7=iQm6UyK-dETthv5huqWDWznH2AQ@mail.gmail.com>
	<CAM8z=yKoqn0-jDv+jjTrfn_v9hdbqByVo8+Lcdand3Ezodis5Q@mail.gmail.com>
	<CACHuFzaL7SpW54h=E32Zvd5=9h1nQrssay31KuAYk8=nTwjZsQ@mail.gmail.com>
	<CAM8z=yJhJUxPQLkU5mr2+X8Q4K9kYNhTya6B-VFzcrS0T-pm5w@mail.gmail.com>
	<CACHuFzY1EX+2PuZkmufTFmM_1c+nFGOwnbPryBMCuNip=q-Ykg@mail.gmail.com>
Message-ID: <CAM8z=yK4LyqM6PsQ5w-iVqEhpDSAJHfF1Ze+Xnn-N26YeRPEHg@mail.gmail.com>

All,

The code has now been changed to use rfc3339 style date-time format. As
Colin pointed out above, this should help us be more compliant with
standards.

Thanks,
John


On Tue, Apr 8, 2014 at 12:06 PM, Chetan Karande <chetan.karande at owasp.org>wrote:

> John, Thanks for the feedback and your thoughts on support for web sockets.
> I will update the node.js client code once the  date/time implementation
> is changed.
>
> Best,
>
> Chetan Karande
>
> On Sun, Apr 6, 2014 at 11:57 PM, John Melton <jtmelton at gmail.com> wrote:
>
>> Chetan,
>>
>> This looks awesome - thanks! It looks like the main points are definitely
>> covered. There is an "add attack" function exposed, but most client
>> applications won't need that feature (more used for WAFs and the like). So
>> .. the only thing needed additionally is probably response handling. That
>> may be possible generically in Node or may be application-specific through
>> some adapter, but looks like it's well on it's way. Side note, I'm going to
>> change the date/time implementation based on a comment by Colin, so the
>> code will have to be updated slightly, but should be a pretty trivial
>> change.
>>
>> As for the websocket question, yes I built and will support a websocket
>> implementation that can push responses down to the client. Because of the
>> choice of using a web server -> app server architecture where the web
>> server does authentication and sends a trusted request header down (reverse
>> proxy mode), the web server will need to be able to proxy web sockets.
>> Nginx added this feature late last year and Apache added it early this
>> year. Both of these are relatively new features and will probably have some
>> bugs. One of the important things for us to do is to document how to use
>> these features for users. That means part of the 2.0 documentation set will
>> be "how do I setup apache/nginx/XYZ as a reverse proxy?"
>>
>> Although websockets will make sense in many circumstances, most of the
>> enterprise folks I talk to say their policies won't allow the server to
>> talk back out to the client, so there will still be many users of the
>> polling option as well. Want to do as many things to support different
>> usage models as we can while having high quality implementations.
>>
>> Thanks,
>> John
>>
>>
>>
>> On Sun, Apr 6, 2014 at 12:13 AM, Chetan Karande <chetan.karande at owasp.org
>> > wrote:
>>
>>> John,
>>>
>>> Based on the sample apps you have added (which were very helpful), I
>>> attempted to build initial version of nodejs client in a forked repository:
>>>
>>>
>>> https://github.com/ckarande/appsensor/tree/master/sample-apps/simple-nodejs-ws-rest-client
>>>
>>> I didn't verify end-to-end behavior yet, but thought of sharing it to
>>> get your feedback and to know if I am on the right track.
>>>
>>> Also, I noticed webSocket is used for sample dashboard implementation.
>>> Do you plan for using webSockets even on AppSensor server as an alternate
>>> option to REST APIs, so that responses can be pushed without client polling
>>> for it?
>>>
>>> Best,
>>>
>>> Chetan
>>>
>>> On Mon, Mar 17, 2014 at 1:25 AM, John Melton <jtmelton at gmail.com> wrote:
>>>
>>>> Chetan,
>>>> Replying to this on list since Colin had asked for an example json
>>>> snippet at one point. A sample JSON string for adding a new event is below.
>>>>
>>>> {"user":{"username":"SOME_END_USERNAME"},"detectionPoint":{"id":"SOME_DETECTION_POINT_ID"},"timestamp":
>>>> SOME_UNIX_TIMESTAMP }
>>>>
>>>> The only additional point to note is that you have to make the request
>>>> with an http request header. The default key for that header is 'X-Appsensor-Client-Application-Name'
>>>> and the value would be the name of the client application being used.
>>>>
>>>> For further info check the addRecord method at
>>>> https://github.com/jtmelton/appsensor/blob/master/sample-apps/simple-dashboard/src/main/webapp/index.jsp.
>>>> Thanks,
>>>> John
>>>>
>>>>
>>>> On Sun, Mar 16, 2014 at 11:40 PM, Chetan Karande <
>>>> chetan.karande at owasp.org> wrote:
>>>>
>>>>> Great. Thank you  John.
>>>>> On Mar 16, 2014 11:37 PM, "John Melton" <jtmelton at gmail.com> wrote:
>>>>>
>>>>>> Chetan,
>>>>>> Good question. I've been working on the code. I'm actually pushing
>>>>>> some code right now, then I'll send out a group email with some updates. I
>>>>>> haven't pulled out the JSON structure yet, but I'll try to get some basic
>>>>>> examples together and documented and send it to the list in the next couple
>>>>>> days.
>>>>>>
>>>>>> Thanks,
>>>>>> John
>>>>>>
>>>>>>
>>>>>> On Sun, Mar 16, 2014 at 10:57 PM, Chetan Karande <
>>>>>> chetan.karande at owasp.org> wrote:
>>>>>>
>>>>>>> Hi John,
>>>>>>>
>>>>>>> I was side tracked due to other priorities for a while, and wanted
>>>>>>> to resume working in AppSensor reference implementation in Node.js.
>>>>>>>
>>>>>>> As per our last conversation, you were going to work on adding a
>>>>>>> sample app and include minimum required json message structure as part the
>>>>>>> tech documentation. Just wanted to check if you had chance to do any
>>>>>>> progress on that.
>>>>>>>
>>>>>>> Thank you.
>>>>>>>
>>>>>>>
>>>>>>> Best Regards,
>>>>>>>
>>>>>>> Chetan Karande
>>>>>>>
>>>>>>> chetan.karande at owasp.org
>>>>>>>
>>>>>>> OWASP NYC Local Chapter <https://www.owasp.org/index.php/NYC>
>>>>>>>
>>>>>>> Open Web Application Security Project<https://www.owasp.org/index.php/Main_Page>
>>>>>>>
>>>>>>>
>>>>>>> On Mon, Dec 9, 2013 at 2:42 AM, John Melton <jtmelton at gmail.com>wrote:
>>>>>>>
>>>>>>>> Chetan,
>>>>>>>> Awesome to see what you're coming up with.
>>>>>>>>
>>>>>>>> With respect to your questions, I responded inline below, but also
>>>>>>>> wanted to mention that one task I have for Colin is to give him the minimum
>>>>>>>> json structure needed so it can be documented. I'll also put that in the
>>>>>>>> tech documentation as well.
>>>>>>>>
>>>>>>>> Thanks,
>>>>>>>> John
>>>>>>>>
>>>>>>>>
>>>>>>>> On Sun, Dec 8, 2013 at 6:07 PM, Chetan Karande <
>>>>>>>> chetan.karande at owasp.org> wrote:
>>>>>>>>
>>>>>>>>> Hi John,
>>>>>>>>>
>>>>>>>>> I started exploring the AppSensor code on github and went over the
>>>>>>>>> AppSensor Guide document. It helped me in getting more idea about AppSensor
>>>>>>>>> in general. I have a few questions for you specifically about approaching
>>>>>>>>> Node.js demonstration implementation. Please answer when you get chance:
>>>>>>>>>
>>>>>>>>> Question 1. As per on our earlier email conversation, I explored
>>>>>>>>> more on implementing addEvent() and getResponses() methods in Node.js
>>>>>>>>> app. Based on the AppSensor REST Service code on github, I think
>>>>>>>>> the service expects client using following endpoints and JSON
>>>>>>>>> message structures. Can you please confirm if I am on right track, and
>>>>>>>>> answer question highlighted.
>>>>>>>>>
>>>>>>>>> *addEvent() Implementation:*
>>>>>>>>> *======================*
>>>>>>>>>
>>>>>>>>> *Invoke REST Endpoint:* /api/v1.0/events
>>>>>>>>>
>>>>>>>>> *Sample Event JSON Object to be sent from the Node.js  App:*
>>>>>>>>>
>>>>>>>>> {
>>>>>>>>> user: {
>>>>>>>>> username: ""
>>>>>>>>>  ipAddress: ""
>>>>>>>>> },
>>>>>>>>> detectionPoint : {  // ??? Does Node.js client need to populate
>>>>>>>>> this object? If yes, what goes in responses, how to decide threshold?
>>>>>>>>>
>>>>>>>>
>>>>>>>> All that is needed in the detectionPoint object field is the "id"
>>>>>>>> field. The rest is found server-side.
>>>>>>>>
>>>>>>>>  id: "",
>>>>>>>>> threshold: "",
>>>>>>>>> responses: []
>>>>>>>>>  },
>>>>>>>>> timestamp: "",
>>>>>>>>> detectionSystemId: "",
>>>>>>>>>  resource: "",
>>>>>>>>> eventType: ""
>>>>>>>>>
>>>>>>>>> }
>>>>>>>>>
>>>>>>>>>
>>>>>>>>> *getResponses() Implementation:*
>>>>>>>>> *=========================*
>>>>>>>>>
>>>>>>>>> *Poll REST EndPoint URL:* /api/v1.0/responses
>>>>>>>>>
>>>>>>>>> *Expected Response object from AppSensor REST service:*
>>>>>>>>>
>>>>>>>>> {
>>>>>>>>> id: "",
>>>>>>>>> threshold: "",
>>>>>>>>>  responses: [
>>>>>>>>> {
>>>>>>>>> user: {
>>>>>>>>> username: "",
>>>>>>>>>  ipAddress: ""
>>>>>>>>> },
>>>>>>>>> action: "",
>>>>>>>>>  detectionPoint: {}, //???. It contains responses array again.
>>>>>>>>> What to expect in it?
>>>>>>>>>
>>>>>>>>
>>>>>>>> The detection point really shouldn't be part of the response - I'll
>>>>>>>> try to remove this from being serialized.
>>>>>>>>
>>>>>>>>
>>>>>>>>>  timestamp: "",
>>>>>>>>>  detectionSystemId: "",
>>>>>>>>> interval : {
>>>>>>>>> duration: "",
>>>>>>>>>  unit: 0 //number
>>>>>>>>> }
>>>>>>>>> },
>>>>>>>>> {
>>>>>>>>>  //another response
>>>>>>>>> }
>>>>>>>>> ]
>>>>>>>>> }
>>>>>>>>>
>>>>>>>>> 2. In case multiple responses received as result of invoking
>>>>>>>>> *getResponses()*, does order in which actions are performed
>>>>>>>>> matter?
>>>>>>>>>
>>>>>>>>
>>>>>>>> Good question that I don't think has been considered before. It
>>>>>>>> shouldn't in our case in the reference implementation (unless we add some
>>>>>>>> new features), but the timestamp is available, so it's likely best practice
>>>>>>>> to execute them in order. I'll add this point to the documentation.
>>>>>>>>
>>>>>>>>
>>>>>>>>>
>>>>>>>>> 3. Can I set AppSensor REST Server on my machine and use it for
>>>>>>>>> testing Node.js demo implementation? If so, can you please provide me steps
>>>>>>>>> to set it up.
>>>>>>>>>
>>>>>>>>
>>>>>>>> Yep, but there's not a project setup to do it yet. I'll try to add
>>>>>>>> a sample app for that soon. If you'd like to use it before I get that done,
>>>>>>>> have a look at the appsensor-ws-rest-server project and the
>>>>>>>> RestRequestHandlerTest class. There is a helper method at the bottom of the
>>>>>>>> class (startServer) that runs the service on grizzly. You can call that in
>>>>>>>> a main method to get a small simple server going for testing.
>>>>>>>>
>>>>>>>>
>>>>>>>>> Just to share, I am exploring to retrofit ghost<https://ghost.org/>,
>>>>>>>>> an open-source Node.js based blogging platform for AppSensor demonstration
>>>>>>>>> implementation. I am working on getting familiar with its code and identify
>>>>>>>>> detection points.
>>>>>>>>>
>>>>>>>>
>>>>>>>> That's an awesome project. Adding security to existing popular
>>>>>>>> platforms has been a goal for OWASP for some time - nice to see progress
>>>>>>>> here.
>>>>>>>>
>>>>>>>>
>>>>>>>>>
>>>>>>>>> Best Regards,
>>>>>>>>>
>>>>>>>>> Chetan Karande
>>>>>>>>>
>>>>>>>>> chetan.karande at owasp.org
>>>>>>>>>
>>>>>>>>> OWASP NYC Local Chapter <https://www.owasp.org/index.php/NYC>
>>>>>>>>>
>>>>>>>>> Open Web Application Security Project<https://www.owasp.org/index.php/Main_Page>
>>>>>>>>>
>>>>>>>>
>>>>>>>>
>>>>>>>
>>>>>>
>>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140417/52f29d71/attachment-0001.html>

From chetan.karande at owasp.org  Thu Apr 17 13:05:40 2014
From: chetan.karande at owasp.org (Chetan Karande)
Date: Thu, 17 Apr 2014 09:05:40 -0400
Subject: [Owasp-appsensor-project] AppSensor API Questions (Node.js
	Demonstration Implementation)
In-Reply-To: <CAM8z=yK4LyqM6PsQ5w-iVqEhpDSAJHfF1Ze+Xnn-N26YeRPEHg@mail.gmail.com>
References: <CACHuFzb10mOWsQz_4e-YsKTOEPDRhJv=8Qt3fYdDmQNZcfO26A@mail.gmail.com>
	<CAM8z=yLgm-z7+TbFZarE-qyFMj_QJQPbkhS-Ad36-xmv8iVYkg@mail.gmail.com>
	<CACHuFzYZ4shDarq7ZCGyrbYfr25PDy54-4i-P6i2Lz+H5=+t0Q@mail.gmail.com>
	<CAM8z=yJMS1nSdRvJs-BFCh-GOHiGGv7c=nrx1_Hqg-MiAYL-4Q@mail.gmail.com>
	<CACHuFzYmDdtWe6mKxp-Kt7=iQm6UyK-dETthv5huqWDWznH2AQ@mail.gmail.com>
	<CAM8z=yKoqn0-jDv+jjTrfn_v9hdbqByVo8+Lcdand3Ezodis5Q@mail.gmail.com>
	<CACHuFzaL7SpW54h=E32Zvd5=9h1nQrssay31KuAYk8=nTwjZsQ@mail.gmail.com>
	<CAM8z=yJhJUxPQLkU5mr2+X8Q4K9kYNhTya6B-VFzcrS0T-pm5w@mail.gmail.com>
	<CACHuFzY1EX+2PuZkmufTFmM_1c+nFGOwnbPryBMCuNip=q-Ykg@mail.gmail.com>
	<CAM8z=yK4LyqM6PsQ5w-iVqEhpDSAJHfF1Ze+Xnn-N26YeRPEHg@mail.gmail.com>
Message-ID: <CACHuFzbDo7HDHxUtSTGuExmEL2QuxFMQ+1k3+Czdzk_p5u-2fg@mail.gmail.com>

Thanks for the update John. This change makes sense. I will update the node
client code.

Chetan
On Apr 17, 2014 2:11 AM, "John Melton" <jtmelton at gmail.com> wrote:

> All,
>
> The code has now been changed to use rfc3339 style date-time format. As
> Colin pointed out above, this should help us be more compliant with
> standards.
>
> Thanks,
> John
>
>
> On Tue, Apr 8, 2014 at 12:06 PM, Chetan Karande <chetan.karande at owasp.org>wrote:
>
>> John, Thanks for the feedback and your thoughts on support for web
>> sockets.
>> I will update the node.js client code once the  date/time implementation
>> is changed.
>>
>> Best,
>>
>> Chetan Karande
>>
>> On Sun, Apr 6, 2014 at 11:57 PM, John Melton <jtmelton at gmail.com> wrote:
>>
>>> Chetan,
>>>
>>> This looks awesome - thanks! It looks like the main points are
>>> definitely covered. There is an "add attack" function exposed, but most
>>> client applications won't need that feature (more used for WAFs and the
>>> like). So .. the only thing needed additionally is probably response
>>> handling. That may be possible generically in Node or may be
>>> application-specific through some adapter, but looks like it's well on it's
>>> way. Side note, I'm going to change the date/time implementation based on a
>>> comment by Colin, so the code will have to be updated slightly, but should
>>> be a pretty trivial change.
>>>
>>> As for the websocket question, yes I built and will support a websocket
>>> implementation that can push responses down to the client. Because of the
>>> choice of using a web server -> app server architecture where the web
>>> server does authentication and sends a trusted request header down (reverse
>>> proxy mode), the web server will need to be able to proxy web sockets.
>>> Nginx added this feature late last year and Apache added it early this
>>> year. Both of these are relatively new features and will probably have some
>>> bugs. One of the important things for us to do is to document how to use
>>> these features for users. That means part of the 2.0 documentation set will
>>> be "how do I setup apache/nginx/XYZ as a reverse proxy?"
>>>
>>> Although websockets will make sense in many circumstances, most of the
>>> enterprise folks I talk to say their policies won't allow the server to
>>> talk back out to the client, so there will still be many users of the
>>> polling option as well. Want to do as many things to support different
>>> usage models as we can while having high quality implementations.
>>>
>>> Thanks,
>>> John
>>>
>>>
>>>
>>> On Sun, Apr 6, 2014 at 12:13 AM, Chetan Karande <
>>> chetan.karande at owasp.org> wrote:
>>>
>>>> John,
>>>>
>>>> Based on the sample apps you have added (which were very helpful), I
>>>> attempted to build initial version of nodejs client in a forked repository:
>>>>
>>>>
>>>> https://github.com/ckarande/appsensor/tree/master/sample-apps/simple-nodejs-ws-rest-client
>>>>
>>>> I didn't verify end-to-end behavior yet, but thought of sharing it to
>>>> get your feedback and to know if I am on the right track.
>>>>
>>>> Also, I noticed webSocket is used for sample dashboard implementation.
>>>> Do you plan for using webSockets even on AppSensor server as an alternate
>>>> option to REST APIs, so that responses can be pushed without client polling
>>>> for it?
>>>>
>>>> Best,
>>>>
>>>> Chetan
>>>>
>>>> On Mon, Mar 17, 2014 at 1:25 AM, John Melton <jtmelton at gmail.com>wrote:
>>>>
>>>>> Chetan,
>>>>> Replying to this on list since Colin had asked for an example json
>>>>> snippet at one point. A sample JSON string for adding a new event is below.
>>>>>
>>>>> {"user":{"username":"SOME_END_USERNAME"},"detectionPoint":{"id":"SOME_DETECTION_POINT_ID"},"timestamp":
>>>>> SOME_UNIX_TIMESTAMP }
>>>>>
>>>>> The only additional point to note is that you have to make the request
>>>>> with an http request header. The default key for that header is 'X-Appsensor-Client-Application-Name'
>>>>> and the value would be the name of the client application being used.
>>>>>
>>>>> For further info check the addRecord method at
>>>>> https://github.com/jtmelton/appsensor/blob/master/sample-apps/simple-dashboard/src/main/webapp/index.jsp.
>>>>> Thanks,
>>>>> John
>>>>>
>>>>>
>>>>> On Sun, Mar 16, 2014 at 11:40 PM, Chetan Karande <
>>>>> chetan.karande at owasp.org> wrote:
>>>>>
>>>>>> Great. Thank you  John.
>>>>>> On Mar 16, 2014 11:37 PM, "John Melton" <jtmelton at gmail.com> wrote:
>>>>>>
>>>>>>> Chetan,
>>>>>>> Good question. I've been working on the code. I'm actually pushing
>>>>>>> some code right now, then I'll send out a group email with some updates. I
>>>>>>> haven't pulled out the JSON structure yet, but I'll try to get some basic
>>>>>>> examples together and documented and send it to the list in the next couple
>>>>>>> days.
>>>>>>>
>>>>>>> Thanks,
>>>>>>> John
>>>>>>>
>>>>>>>
>>>>>>> On Sun, Mar 16, 2014 at 10:57 PM, Chetan Karande <
>>>>>>> chetan.karande at owasp.org> wrote:
>>>>>>>
>>>>>>>> Hi John,
>>>>>>>>
>>>>>>>> I was side tracked due to other priorities for a while, and wanted
>>>>>>>> to resume working in AppSensor reference implementation in Node.js.
>>>>>>>>
>>>>>>>> As per our last conversation, you were going to work on adding a
>>>>>>>> sample app and include minimum required json message structure as part the
>>>>>>>> tech documentation. Just wanted to check if you had chance to do any
>>>>>>>> progress on that.
>>>>>>>>
>>>>>>>> Thank you.
>>>>>>>>
>>>>>>>>
>>>>>>>> Best Regards,
>>>>>>>>
>>>>>>>> Chetan Karande
>>>>>>>>
>>>>>>>> chetan.karande at owasp.org
>>>>>>>>
>>>>>>>> OWASP NYC Local Chapter <https://www.owasp.org/index.php/NYC>
>>>>>>>>
>>>>>>>> Open Web Application Security Project<https://www.owasp.org/index.php/Main_Page>
>>>>>>>>
>>>>>>>>
>>>>>>>> On Mon, Dec 9, 2013 at 2:42 AM, John Melton <jtmelton at gmail.com>wrote:
>>>>>>>>
>>>>>>>>> Chetan,
>>>>>>>>> Awesome to see what you're coming up with.
>>>>>>>>>
>>>>>>>>> With respect to your questions, I responded inline below, but also
>>>>>>>>> wanted to mention that one task I have for Colin is to give him the minimum
>>>>>>>>> json structure needed so it can be documented. I'll also put that in the
>>>>>>>>> tech documentation as well.
>>>>>>>>>
>>>>>>>>> Thanks,
>>>>>>>>> John
>>>>>>>>>
>>>>>>>>>
>>>>>>>>> On Sun, Dec 8, 2013 at 6:07 PM, Chetan Karande <
>>>>>>>>> chetan.karande at owasp.org> wrote:
>>>>>>>>>
>>>>>>>>>> Hi John,
>>>>>>>>>>
>>>>>>>>>> I started exploring the AppSensor code on github and went over
>>>>>>>>>> the AppSensor Guide document. It helped me in getting more idea about
>>>>>>>>>> AppSensor in general. I have a few questions for you specifically about
>>>>>>>>>> approaching Node.js demonstration implementation. Please answer when you
>>>>>>>>>> get chance:
>>>>>>>>>>
>>>>>>>>>> Question 1. As per on our earlier email conversation, I explored
>>>>>>>>>> more on implementing addEvent() and getResponses() methods in Node.js
>>>>>>>>>> app. Based on the AppSensor REST Service code on github, I think
>>>>>>>>>> the service expects client using following endpoints and JSON
>>>>>>>>>> message structures. Can you please confirm if I am on right track, and
>>>>>>>>>> answer question highlighted.
>>>>>>>>>>
>>>>>>>>>> *addEvent() Implementation:*
>>>>>>>>>> *======================*
>>>>>>>>>>
>>>>>>>>>> *Invoke REST Endpoint:* /api/v1.0/events
>>>>>>>>>>
>>>>>>>>>> *Sample Event JSON Object to be sent from the Node.js  App:*
>>>>>>>>>>
>>>>>>>>>> {
>>>>>>>>>> user: {
>>>>>>>>>> username: ""
>>>>>>>>>>  ipAddress: ""
>>>>>>>>>> },
>>>>>>>>>> detectionPoint : {  // ??? Does Node.js client need to populate
>>>>>>>>>> this object? If yes, what goes in responses, how to decide threshold?
>>>>>>>>>>
>>>>>>>>>
>>>>>>>>> All that is needed in the detectionPoint object field is the "id"
>>>>>>>>> field. The rest is found server-side.
>>>>>>>>>
>>>>>>>>>  id: "",
>>>>>>>>>> threshold: "",
>>>>>>>>>> responses: []
>>>>>>>>>>  },
>>>>>>>>>> timestamp: "",
>>>>>>>>>> detectionSystemId: "",
>>>>>>>>>>  resource: "",
>>>>>>>>>> eventType: ""
>>>>>>>>>>
>>>>>>>>>> }
>>>>>>>>>>
>>>>>>>>>>
>>>>>>>>>> *getResponses() Implementation:*
>>>>>>>>>> *=========================*
>>>>>>>>>>
>>>>>>>>>> *Poll REST EndPoint URL:* /api/v1.0/responses
>>>>>>>>>>
>>>>>>>>>> *Expected Response object from AppSensor REST service:*
>>>>>>>>>>
>>>>>>>>>> {
>>>>>>>>>> id: "",
>>>>>>>>>> threshold: "",
>>>>>>>>>>  responses: [
>>>>>>>>>> {
>>>>>>>>>> user: {
>>>>>>>>>> username: "",
>>>>>>>>>>  ipAddress: ""
>>>>>>>>>> },
>>>>>>>>>> action: "",
>>>>>>>>>>  detectionPoint: {}, //???. It contains responses array again.
>>>>>>>>>> What to expect in it?
>>>>>>>>>>
>>>>>>>>>
>>>>>>>>> The detection point really shouldn't be part of the response -
>>>>>>>>> I'll try to remove this from being serialized.
>>>>>>>>>
>>>>>>>>>
>>>>>>>>>>  timestamp: "",
>>>>>>>>>>  detectionSystemId: "",
>>>>>>>>>> interval : {
>>>>>>>>>> duration: "",
>>>>>>>>>>  unit: 0 //number
>>>>>>>>>> }
>>>>>>>>>> },
>>>>>>>>>> {
>>>>>>>>>>  //another response
>>>>>>>>>> }
>>>>>>>>>> ]
>>>>>>>>>> }
>>>>>>>>>>
>>>>>>>>>> 2. In case multiple responses received as result of invoking
>>>>>>>>>> *getResponses()*, does order in which actions are performed
>>>>>>>>>> matter?
>>>>>>>>>>
>>>>>>>>>
>>>>>>>>> Good question that I don't think has been considered before. It
>>>>>>>>> shouldn't in our case in the reference implementation (unless we add some
>>>>>>>>> new features), but the timestamp is available, so it's likely best practice
>>>>>>>>> to execute them in order. I'll add this point to the documentation.
>>>>>>>>>
>>>>>>>>>
>>>>>>>>>>
>>>>>>>>>> 3. Can I set AppSensor REST Server on my machine and use it for
>>>>>>>>>> testing Node.js demo implementation? If so, can you please provide me steps
>>>>>>>>>> to set it up.
>>>>>>>>>>
>>>>>>>>>
>>>>>>>>> Yep, but there's not a project setup to do it yet. I'll try to add
>>>>>>>>> a sample app for that soon. If you'd like to use it before I get that done,
>>>>>>>>> have a look at the appsensor-ws-rest-server project and the
>>>>>>>>> RestRequestHandlerTest class. There is a helper method at the bottom of the
>>>>>>>>> class (startServer) that runs the service on grizzly. You can call that in
>>>>>>>>> a main method to get a small simple server going for testing.
>>>>>>>>>
>>>>>>>>>
>>>>>>>>>> Just to share, I am exploring to retrofit ghost<https://ghost.org/>,
>>>>>>>>>> an open-source Node.js based blogging platform for AppSensor demonstration
>>>>>>>>>> implementation. I am working on getting familiar with its code and identify
>>>>>>>>>> detection points.
>>>>>>>>>>
>>>>>>>>>
>>>>>>>>> That's an awesome project. Adding security to existing popular
>>>>>>>>> platforms has been a goal for OWASP for some time - nice to see progress
>>>>>>>>> here.
>>>>>>>>>
>>>>>>>>>
>>>>>>>>>>
>>>>>>>>>> Best Regards,
>>>>>>>>>>
>>>>>>>>>> Chetan Karande
>>>>>>>>>>
>>>>>>>>>> chetan.karande at owasp.org
>>>>>>>>>>
>>>>>>>>>> OWASP NYC Local Chapter <https://www.owasp.org/index.php/NYC>
>>>>>>>>>>
>>>>>>>>>> Open Web Application Security Project<https://www.owasp.org/index.php/Main_Page>
>>>>>>>>>>
>>>>>>>>>
>>>>>>>>>
>>>>>>>>
>>>>>>>
>>>>>
>>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140417/144f0d65/attachment-0001.html>

From colin.watson at owasp.org  Fri Apr 18 11:16:31 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Fri, 18 Apr 2014 12:16:31 +0100
Subject: [Owasp-appsensor-project] AppSensor API Questions (Node.js
	Demonstration Implementation)
In-Reply-To: <CACHuFzbDo7HDHxUtSTGuExmEL2QuxFMQ+1k3+Czdzk_p5u-2fg@mail.gmail.com>
References: <CACHuFzb10mOWsQz_4e-YsKTOEPDRhJv=8Qt3fYdDmQNZcfO26A@mail.gmail.com>
	<CAM8z=yLgm-z7+TbFZarE-qyFMj_QJQPbkhS-Ad36-xmv8iVYkg@mail.gmail.com>
	<CACHuFzYZ4shDarq7ZCGyrbYfr25PDy54-4i-P6i2Lz+H5=+t0Q@mail.gmail.com>
	<CAM8z=yJMS1nSdRvJs-BFCh-GOHiGGv7c=nrx1_Hqg-MiAYL-4Q@mail.gmail.com>
	<CACHuFzYmDdtWe6mKxp-Kt7=iQm6UyK-dETthv5huqWDWznH2AQ@mail.gmail.com>
	<CAM8z=yKoqn0-jDv+jjTrfn_v9hdbqByVo8+Lcdand3Ezodis5Q@mail.gmail.com>
	<CACHuFzaL7SpW54h=E32Zvd5=9h1nQrssay31KuAYk8=nTwjZsQ@mail.gmail.com>
	<CAM8z=yJhJUxPQLkU5mr2+X8Q4K9kYNhTya6B-VFzcrS0T-pm5w@mail.gmail.com>
	<CACHuFzY1EX+2PuZkmufTFmM_1c+nFGOwnbPryBMCuNip=q-Ykg@mail.gmail.com>
	<CAM8z=yK4LyqM6PsQ5w-iVqEhpDSAJHfF1Ze+Xnn-N26YeRPEHg@mail.gmail.com>
	<CACHuFzbDo7HDHxUtSTGuExmEL2QuxFMQ+1k3+Czdzk_p5u-2fg@mail.gmail.com>
Message-ID: <CAAxdBBk=s+NOyHT4Kk6qFkHAzgA0Nf4bdviGmCt07mOnZr=soA@mail.gmail.com>

Chetan and John

v1.46 guide has been updated to match.

Colin

From colin.watson at owasp.org  Fri Apr 18 12:24:39 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Fri, 18 Apr 2014 13:24:39 +0100
Subject: [Owasp-appsensor-project] Prevoty
In-Reply-To: <CAAxdBBmHmaEE8o7ULtbn4JmHt0dxAm5MEwqEWu0fMF_jv08xrA@mail.gmail.com>
References: <8CA8CE0A-10B3-4EFD-B730-36095256DD1E@owasp.org>
	<CAM8z=yL_Z1fpZLEQKa2uV0BM2JS-KpZ2WhF=4ZDs3bFE-x4gDQ@mail.gmail.com>
	<CF72CE03.ED721%ryan.barnett@owasp.org>
	<CAAxdBB=LwjsJJURYBKr7YqJ3ZxFVC1tsjV37ndTN32bifq_Pog@mail.gmail.com>
	<CAM8z=y+5CLGFJ1bQ_C+9V5r_urxcqX3n3Be=BNXXJNFAtWzsQA@mail.gmail.com>
	<CAAxdBBmHmaEE8o7ULtbn4JmHt0dxAm5MEwqEWu0fMF_jv08xrA@mail.gmail.com>
Message-ID: <CAAxdBBkh7tM03B+cPcjn0sfn1Wxp0cMZ6ECfmpe6tRkP32mJ6g@mail.gmail.com>

Added to v1.47 of the guide.

Colin

On 16 April 2014 18:42, Colin Watson <colin.watson at owasp.org> wrote:
> I tend to agree. I didn't like it when I just had Fortify mentioned,
> but if we have two or more I think that's reasonable.
>
> Colin
>
>
>
> On 16 April 2014 16:33, John Melton <jtmelton at gmail.com> wrote:
>> I say yes. Some people will want commercial implementations and/or support.
>> As you said, it also lends credence to the concept.
>>
>>
>> On Wed, Apr 16, 2014 at 3:06 AM, Colin Watson <colin.watson at owasp.org>
>> wrote:
>>>
>>> Do we think commercial products like Prevoty and Fortify Runtime
>>> should be mentioned at all in the guide? Perhaps they add weight to
>>> the argument that the concept is "enterprise ready".
>>>
>>> Colin
>>>
>>> On 15 April 2014 16:58, Ryan Barnett <ryan.barnett at owasp.org> wrote:
>>> > It looks like they are focusing on these threee attack/vulns ? XSS, SQLi
>>> > and
>>> > CSRF mapped to these different products/modules -
>>> >
>>> > Trusted Content -
>>> > https://www.prevoty.com/product/prevoty-trusted-content ?
>>> > which looks to me like they are using server-side DOM inspection.
>>> > Perhaps
>>> > using something like PhantomJS, SpiderMonkey/V8 to eval code before
>>> > allowing
>>> > it through to the back-end app.  This is similar to the PoC I did with
>>> > ModSecurity + PhantomJS -
>>> >
>>> > http://blog.spiderlabs.com/2013/02/server-site-xss-attack-detection-with-modsecurity-and-phantomjs.html
>>> > Trusted Query - https://www.prevoty.com/product/prevoty-trusted-query ?
>>> > which looks sort of like a libinjection module -
>>> > https://libinjection.client9.com/
>>> > Trusted Token - https://www.prevoty.com/product/prevoty-trusted-token ?
>>> > which looks like CSRF tokens.
>>> >
>>> > I could be wrong here but it looks like they have taken existing
>>> > defenses
>>> > and essentially bundled them up into a commercial grade system.
>>> >
>>> > -Ryan
>>> >
>>> > From: John Melton <jtmelton at gmail.com>
>>> > Date: Tuesday, April 15, 2014 11:51 AM
>>> > To: Ryan Barnett <ryan.barnett at owasp.org>
>>> > Cc: "owasp-appsensor-project at lists.owasp.org"
>>> > <owasp-appsensor-project at lists.owasp.org>
>>> > Subject: Re: [Owasp-appsensor-project] Prevoty
>>> >
>>> > First time seeing it. Not sure about the exact tech, but the idea sounds
>>> > pretty familiar :>. There's even a very similar snippet of code to one
>>> > from
>>> > Michael's original demo app in the "how it works" section (see "quick
>>> > brown
>>> > fox" line.
>>> >
>>> > Sounds pretty impressive though:
>>> > "And if you add Prevoty to your existing applications, remediation is
>>> > immediate since all XSS, SQLi and CSRF vulnerabilities are fixed
>>> > automatically."
>>> >
>>> > That's a pretty bold statement - we'll see if the tech lives up to it.
>>> >
>>> > Thanks,
>>> > John
>>> >
>>> >
>>> > On Tue, Apr 15, 2014 at 9:28 AM, Ryan Barnett <ryan.barnett at owasp.org>
>>> > wrote:
>>> >>
>>> >> Anyone seen this before?
>>> >>
>>> >> https://www.prevoty.com/how-it-works
>>> >>
>>> >> Sounds like AppSensor to me.
>>> >>
>>> >> Ryan Barnett
>>> >>
>>> >>
>>> >>
>>> >> _______________________________________________
>>> >> Owasp-appsensor-project mailing list
>>> >> Owasp-appsensor-project at lists.owasp.org
>>> >> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>>> >>
>>> >
>>> >
>>> > _______________________________________________
>>> > Owasp-appsensor-project mailing list
>>> > Owasp-appsensor-project at lists.owasp.org
>>> > https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>>> >
>>
>>

From colin.watson at owasp.org  Fri Apr 18 13:22:20 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Fri, 18 Apr 2014 14:22:20 +0100
Subject: [Owasp-appsensor-project] modsecurity appsensor demo project(s)
In-Reply-To: <CAM8z=yLSXhg1kj3w4JQcnOicrSjyUJNCgPWDG0pZp-CJTOBGNA@mail.gmail.com>
References: <CAM8z=yJL35CfzW-x1Uu2=LO-pM217-VXw5fzGQXFK2xSXWe3VQ@mail.gmail.com>
	<B1D8832F-E87A-453E-91F1-680B7583D688@owasp.org>
	<CAM8z=yKYNg84aODDg95UOi8Ee9wnh_sTbTQ1EnYxGN2-awEsYg@mail.gmail.com>
	<CF72CF6E.ED73E%ryan.barnett@owasp.org>
	<CAM8z=yLSXhg1kj3w4JQcnOicrSjyUJNCgPWDG0pZp-CJTOBGNA@mail.gmail.com>
Message-ID: <CAAxdBBkURxLHFuiuftE5DZnVZ62PBOfo7-9BJ4CBtsNUHBPBNA@mail.gmail.com>

STIX added to discussion of signalling data in v1.48 of the guide.
Already mentioned were CEF, IODEF, X-ARF, CybOX, ANSI C12.22 and
VERIS.

Colin

On 15 April 2014 17:12, John Melton <jtmelton at gmail.com> wrote:
> I'll try to take a look at these in more detail when I have a chance, but
> I'll say that since the primary goal is to integrate quickly and easily and
> our primary integration "partner" will be standard applications, I think
> REST/JSON makes sense.
>
> That being said, exposing another front-end for other formats is
> approximately equal to the amount of work to support the given format (ie.
> SOAP/XML was pretty easy b/c the Java tooling supports it well). A brief
> look at these shows that currently the only implementation is a POC and in
> python/django. We could build our own, but we'd be the trailblazers.
> Something to think about for sure, especially if the standard becomes
> popular.
>
>
> On Tue, Apr 15, 2014 at 12:03 PM, Ryan Barnett <ryan.barnett at owasp.org>
> wrote:
>>
>> I am CC'ing Felipe here as he is the lead ModSecurity Dev.  He and I have
>> discussed some feature updates for logs to make them more "machine" friendly
>> to SIEM, etc..  https://github.com/SpiderLabs/ModSecurity/issues/656
>>
>> The format of the data is one element but we also need to think about the
>> transport.  John ? what about using the two Mitre projects -
>>
>> Format - http://stix.mitre.org/
>> Transport - http://taxii.mitre.org/
>>
>> I agree that Restful API/JSON is a popular choice however I am thining
>> that using these Mitre project may help with a "standard" approach and
>> adoption by users.
>>
>> Let me know what you think.
>>
>> -Ryan
>>
>> From: John Melton <jtmelton at gmail.com>
>> Date: Tuesday, April 15, 2014 11:52 AM
>> To: Ryan Barnett <ryan.barnett at owasp.org>
>> Cc: owasp-appsensor-project <owasp-appsensor-project at lists.owasp.org>
>> Subject: Re: modsecurity appsensor demo project(s)
>>
>> To send alerts (events or attacks), I'm assuming the easiest will be to
>> send JSON over REST. I can help get things going whenever you're ready.
>> Thanks,
>> John
>>
>>
>> On Tue, Apr 15, 2014 at 9:30 AM, Ryan Barnett <ryan.barnett at owasp.org>
>> wrote:
>>>
>>> Good idea. Need to think how to make this into a "demo". We already have
>>> a bunch of rules that map to AppSensor detection points. We need to see
>>> about how to send alerts to the dashboard/API.
>>>
>>> Ryan Barnett
>>>
>>> OWASP ModSecurity CRS Project Leader
>>>
>>>
>>> On Apr 15, 2014, at 12:43 AM, John Melton <jtmelton at gmail.com> wrote:
>>>
>>> Ryan,
>>>
>>> You've certainly been one of the biggest contributors to the project, and
>>> we've talked in the past about doing some demos with modsecurity and
>>> appsensor together. I was hoping we could get those going now.
>>>
>>> V2 of the code (https://github.com/jtmelton/appsensor) is not done by any
>>> stretch, but is far enough along that we're creating sample projects. I'm
>>> hoping we can do 1 or more using modsecurity to show off some of the slick
>>> ideas you have.
>>>
>>> When you have time, I was hoping you could come up with a few ideas,
>>> maybe of varying complexity to show what can be done with the tools
>>> combined. That being said, these will still likely be demo/POC level for
>>> now. If there's a lot of value, we can make them more robust.
>>>
>>> I'm happy to work with you and/or others on it, but I have effectively
>>> zero practical deployment and operational knowledge of modsecurity. I can
>>> obviously help out with the appsensor side and integration.
>>>
>>> Not sure if modsecurity for Java might be a good fit here? I know you've
>>> mentioned this before, but just throwing it out there.
>>>
>>> Thanks,
>>> John
>>
>>
>
>
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>

From colin.watson at owasp.org  Fri Apr 18 14:15:10 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Fri, 18 Apr 2014 15:15:10 +0100
Subject: [Owasp-appsensor-project] ensnare project
In-Reply-To: <CAM8z=yLrjXGVHisg7LX5SEwwmEqwZ9PBBidMbR9Uk4bezBmemw@mail.gmail.com>
References: <CAM8z=yLrjXGVHisg7LX5SEwwmEqwZ9PBBidMbR9Uk4bezBmemw@mail.gmail.com>
Message-ID: <CAAxdBBk0jnGOp_Q0YXL2Yh7kAC-rYxrhajcJ40YDe9bO+UKZ3A@mail.gmail.com>

Added to v1.48 guide.

Colin

On 9 April 2014 19:34, John Melton <jtmelton at gmail.com> wrote:
> All,
>
> I thought this was worth sharing, particularly for any ruby devs on list.
> There is a new project called Ensnare that was just presented/released at
> Source Boston. The project is similar to AppSensor in many ways and is worth
> checking out.
>
> The link to the project is here: https://github.com/ahoernecke/ensnare with
> documentation here: https://github.com/ahoernecke/ensnare/wiki .
>
> They mentioned drawing much inspiration from Ryan Barnett's excellent work
> on Honey Traps:
> http://blog.spiderlabs.com/2011/08/detecting-malice-with-modsecurity-honeytraps.html
> as well as AppSensor.
>
> Thanks,
> John
>
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>

From colin.watson at owasp.org  Fri Apr 18 16:52:15 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Fri, 18 Apr 2014 17:52:15 +0100
Subject: [Owasp-appsensor-project] AppSensor Guide v2 - Final Review Version
	Available
Message-ID: <CAAxdBBmtGse6Qg4nCKgUjbq3oAr2AdBGt-kBLfWz3QUxyax=Kw@mail.gmail.com>

Dear all

Further to the schedule announced to this list a month ago, I am
pleased to release the final review version. This is currently called
v1.5 and is available as usual at:

   https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc

I have incorporated everything into this v1.5 that I could find that
had changed in the current (18 April) Google Docs file which was based
on v1.39.


Missing parts
-------------------

I am hoping MC will write the foreword. I will complete the empty file
logging format chapter, and replace some of the earlier diagrams with
more legible versions.

Perhaps someone could write the "About This Guide", and "How To Use
This Guide", otherwise they will be dropped.

We are aware that DG may not be able to update his introduction, so
perhaps need to decide whether to review/edit it or not. I have not
reviewed it at all.


Review process
----------------------

You can download the Word document and edit it individually with track
changes on. Or send comments, edits, feedback and additions by email,
post or in some other format. You can send thigs to me directly or via
this list. I will aggregate all review feedback on 1st May.

If someone is able to incorporate/merge/update changes into the Google
Docs version, maybe that can also be used for review?

Chapter 1 has been reviewed by some people already, and it would be
nice if people could begin their efforts elsewhere in the document. If
someone wants to create a review log or wiki page to track who looked
at what, that would be very welcome. A lot of the text is mine, and
just because I wrote it, it doesn't mean it is true, accurate,
sensible, understandable or correct. Some parts really do need some
critical review.

Please let me know if you would like me to email you directly with an
alternative format of the document.


Release plan
-------------------

The review period will end on 1st May. I will then publish the v2.0
book by 7th May 2014. This will be as a PDF, in Word and also as a
Lulu book. Further additions and improvements can be made after that
in future versions.


Colin

From colin.watson at owasp.org  Sat Apr 19 06:57:01 2014
From: colin.watson at owasp.org (=?utf-8?B?Y29saW4ud2F0c29uQG93YXNwLm9yZw==?=)
Date: Sat, 19 Apr 2014 07:57:01 +0100
Subject: [Owasp-appsensor-project]
 =?utf-8?q?AppSensor_Guide_v2_-_Final_Re?=
 =?utf-8?q?view_Version_Available?=
Message-ID: <53521eac.8276c20a.5f0c.5921@mx.google.com>

PS
I will correct pagination, headers and footers, and refresh all fields, once the review is complete.

Colin

----- Reply message -----
From: "Colin Watson" <colin.watson at owasp.org>
To: "owasp-appsensor-project" <owasp-appsensor-project at lists.owasp.org>
Subject: AppSensor Guide v2 - Final Review Version Available
Date: Fri, Apr 18, 2014 17:52

Dear all

Further to the schedule announced to this list a month ago, I am
pleased to release the final review version. This is currently called
v1.5 and is available as usual at:

https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc

I have incorporated everything into this v1.5 that I could find that
had changed in the current (18 April) Google Docs file which was based
on v1.39.


Missing parts
-------------------

I am hoping MC will write the foreword. I will complete the empty file
logging format chapter, and replace some of the earlier diagrams with
more legible versions.

Perhaps someone could write the "About This Guide", and "How To Use
This Guide", otherwise they will be dropped.

We are aware that DG may not be able to update his introduction, so
perhaps need to decide whether to review/edit it or not. I have not
reviewed it at all.


Review process
----------------------

You can download the Word document and edit it individually with track
changes on. Or send comments, edits, feedback and additions by email,
post or in some other format. You can send thigs to me directly or via
this list. I will aggregate all review feedback on 1st May.

If someone is able to incorporate/merge/update changes into the Google
Docs version, maybe that can also be used for review?

Chapter 1 has been reviewed by some people already, and it would be
nice if people could begin their efforts elsewhere in the document. If
someone wants to create a review log or wiki page to track who looked
at what, that would be very welcome. A lot of the text is mine, and
just because I wrote it, it doesn't mean it is true, accurate,
sensible, understandable or correct. Some parts really do need some
critical review.

Please let me know if you would like me to email you directly with an
alternative format of the document.


Release plan
-------------------

The review period will end on 1st May. I will then publish the v2.0
book by 7th May 2014. This will be as a PDF, in Word and also as a
Lulu book. Further additions and improvements can be made after that
in future versions.


Colin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20140419/acb66442/attachment-0001.html>

From colin.watson at owasp.org  Mon Apr 28 06:46:34 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Mon, 28 Apr 2014 07:46:34 +0100
Subject: [Owasp-appsensor-project] AppSensor Guide v2 - Final Review
	Version Available
In-Reply-To: <53521eac.8276c20a.5f0c.5921@mx.google.com>
References: <53521eac.8276c20a.5f0c.5921@mx.google.com>
Message-ID: <CAAxdBB=RSeHuL+s-q2bVmVy1k+byE-F-aoY6G5OP_tnsi0_now@mail.gmail.com>

And, that same v1.5 is available as a PDF here:

   https://www.owasp.org/index.php/File:Owasp-appsensor-guide-v2.pdf

Colin

On 19 April 2014 07:57, colin.watson at owasp.org <colin.watson at owasp.org> wrote:
> PS
>
> I will correct pagination, headers and footers, and refresh all fields, once
> the review is complete.
>
> Colin
>
> ----- Reply message -----
> From: "Colin Watson" <colin.watson at owasp.org>
> To: "owasp-appsensor-project" <owasp-appsensor-project at lists.owasp.org>
> Subject: AppSensor Guide v2 - Final Review Version Available
> Date: Fri, Apr 18, 2014 17:52
>
> Dear all
>
> Further to the schedule announced to this list a month ago, I am
> pleased to release the final review version. This is currently called
> v1.5 and is available as usual at:
>
>    https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
>
> I have incorporated everything into this v1.5 that I could find that
> had changed in the current (18 April) Google Docs file which was based
> on v1.39.
>
>
> Missing parts
> -------------------
>
> I am hoping MC will write the foreword. I will complete the empty file
> logging format chapter, and replace some of the earlier diagrams with
> more legible versions.
>
> Perhaps someone could write the "About This Guide", and "How To Use
> This Guide", otherwise they will be dropped.
>
> We are aware that DG may not be able to update his introduction, so
> perhaps need to decide whether to review/edit it or not. I have not
> reviewed it at all.
>
>
> Review process
> ----------------------
>
> You can download the Word document and edit it individually with track
> changes on. Or send comments, edits, feedback and additions by email,
> post or in some other format. You can send thigs to me directly or via
> this list. I will aggregate all review feedback on 1st May.
>
> If someone is able to incorporate/merge/update changes into the Google
> Docs version, maybe that can also be used for review?
>
> Chapter 1 has been reviewed by some people already, and it would be
> nice if people could begin their efforts elsewhere in the document. If
> someone wants to create a review log or wiki page to track who looked
> at what, that would be very welcome. A lot of the text is mine, and
> just because I wrote it, it doesn't mean it is true, accurate,
> sensible, understandable or correct. Some parts really do need some
> critical review.
>
> Please let me know if you would like me to email you directly with an
> alternative format of the document.
>
>
> Release plan
> -------------------
>
> The review period will end on 1st May. I will then publish the v2.0
> book by 7th May 2014. This will be as a PDF, in Word and also as a
> Lulu book. Further additions and improvements can be made after that
> in future versions.
>
>
> Colin

From colin.watson at owasp.org  Tue Apr 29 16:58:39 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Tue, 29 Apr 2014 17:58:39 +0100
Subject: [Owasp-appsensor-project] AppSensor Guide v2 - Final Review
	Version Available
In-Reply-To: <CAAxdBB=RSeHuL+s-q2bVmVy1k+byE-F-aoY6G5OP_tnsi0_now@mail.gmail.com>
References: <53521eac.8276c20a.5f0c.5921@mx.google.com>
	<CAAxdBB=RSeHuL+s-q2bVmVy1k+byE-F-aoY6G5OP_tnsi0_now@mail.gmail.com>
Message-ID: <CAAxdBB==_mo1Ba4ppzJQvGUK+mO6iWQzJXXx0fhg53x-tzQitw@mail.gmail.com>

Thank you to Josh Amishav-Zlatin for his review, sent directly to me.

Colin




On 28 April 2014 07:46, Colin Watson <colin.watson at owasp.org> wrote:
> And, that same v1.5 is available as a PDF here:
>
>    https://www.owasp.org/index.php/File:Owasp-appsensor-guide-v2.pdf
>
> Colin
>
> On 19 April 2014 07:57, colin.watson at owasp.org <colin.watson at owasp.org> wrote:
>> PS
>>
>> I will correct pagination, headers and footers, and refresh all fields, once
>> the review is complete.
>>
>> Colin
>>
>> ----- Reply message -----
>> From: "Colin Watson" <colin.watson at owasp.org>
>> To: "owasp-appsensor-project" <owasp-appsensor-project at lists.owasp.org>
>> Subject: AppSensor Guide v2 - Final Review Version Available
>> Date: Fri, Apr 18, 2014 17:52
>>
>> Dear all
>>
>> Further to the schedule announced to this list a month ago, I am
>> pleased to release the final review version. This is currently called
>> v1.5 and is available as usual at:
>>
>>    https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
>>
>> I have incorporated everything into this v1.5 that I could find that
>> had changed in the current (18 April) Google Docs file which was based
>> on v1.39.
>>
>>
>> Missing parts
>> -------------------
>>
>> I am hoping MC will write the foreword. I will complete the empty file
>> logging format chapter, and replace some of the earlier diagrams with
>> more legible versions.
>>
>> Perhaps someone could write the "About This Guide", and "How To Use
>> This Guide", otherwise they will be dropped.
>>
>> We are aware that DG may not be able to update his introduction, so
>> perhaps need to decide whether to review/edit it or not. I have not
>> reviewed it at all.
>>
>>
>> Review process
>> ----------------------
>>
>> You can download the Word document and edit it individually with track
>> changes on. Or send comments, edits, feedback and additions by email,
>> post or in some other format. You can send thigs to me directly or via
>> this list. I will aggregate all review feedback on 1st May.
>>
>> If someone is able to incorporate/merge/update changes into the Google
>> Docs version, maybe that can also be used for review?
>>
>> Chapter 1 has been reviewed by some people already, and it would be
>> nice if people could begin their efforts elsewhere in the document. If
>> someone wants to create a review log or wiki page to track who looked
>> at what, that would be very welcome. A lot of the text is mine, and
>> just because I wrote it, it doesn't mean it is true, accurate,
>> sensible, understandable or correct. Some parts really do need some
>> critical review.
>>
>> Please let me know if you would like me to email you directly with an
>> alternative format of the document.
>>
>>
>> Release plan
>> -------------------
>>
>> The review period will end on 1st May. I will then publish the v2.0
>> book by 7th May 2014. This will be as a PDF, in Word and also as a
>> Lulu book. Further additions and improvements can be made after that
>> in future versions.
>>
>>
>> Colin

From colin.watson at owasp.org  Wed Apr 30 15:56:34 2014
From: colin.watson at owasp.org (Colin Watson)
Date: Wed, 30 Apr 2014 16:56:34 +0100
Subject: [Owasp-appsensor-project] AppSensor Guide v2 - Final Review
	Version Available
In-Reply-To: <CAAxdBB==_mo1Ba4ppzJQvGUK+mO6iWQzJXXx0fhg53x-tzQitw@mail.gmail.com>
References: <53521eac.8276c20a.5f0c.5921@mx.google.com>
	<CAAxdBB=RSeHuL+s-q2bVmVy1k+byE-F-aoY6G5OP_tnsi0_now@mail.gmail.com>
	<CAAxdBB==_mo1Ba4ppzJQvGUK+mO6iWQzJXXx0fhg53x-tzQitw@mail.gmail.com>
Message-ID: <CAAxdBBkJV6R1D64yLO4yaoezjHRg98w5isfmd3g5YTuutVp+fQ@mail.gmail.com>

And thank you to John Melton for his review of Chapter 13 onwards,
sent directly to me.

Colin


On 29 April 2014 17:58, Colin Watson <colin.watson at owasp.org> wrote:
> Thank you to Josh Amishav-Zlatin for his review, sent directly to me.
>
> Colin
>
>
>
>
> On 28 April 2014 07:46, Colin Watson <colin.watson at owasp.org> wrote:
>> And, that same v1.5 is available as a PDF here:
>>
>>    https://www.owasp.org/index.php/File:Owasp-appsensor-guide-v2.pdf
>>
>> Colin
>>
>> On 19 April 2014 07:57, colin.watson at owasp.org <colin.watson at owasp.org> wrote:
>>> PS
>>>
>>> I will correct pagination, headers and footers, and refresh all fields, once
>>> the review is complete.
>>>
>>> Colin
>>>
>>> ----- Reply message -----
>>> From: "Colin Watson" <colin.watson at owasp.org>
>>> To: "owasp-appsensor-project" <owasp-appsensor-project at lists.owasp.org>
>>> Subject: AppSensor Guide v2 - Final Review Version Available
>>> Date: Fri, Apr 18, 2014 17:52
>>>
>>> Dear all
>>>
>>> Further to the schedule announced to this list a month ago, I am
>>> pleased to release the final review version. This is currently called
>>> v1.5 and is available as usual at:
>>>
>>>    https://www.owasp.org/index.php/File:Owasp-appensor-guide-v2.doc
>>>
>>> I have incorporated everything into this v1.5 that I could find that
>>> had changed in the current (18 April) Google Docs file which was based
>>> on v1.39.
>>>
>>>
>>> Missing parts
>>> -------------------
>>>
>>> I am hoping MC will write the foreword. I will complete the empty file
>>> logging format chapter, and replace some of the earlier diagrams with
>>> more legible versions.
>>>
>>> Perhaps someone could write the "About This Guide", and "How To Use
>>> This Guide", otherwise they will be dropped.
>>>
>>> We are aware that DG may not be able to update his introduction, so
>>> perhaps need to decide whether to review/edit it or not. I have not
>>> reviewed it at all.
>>>
>>>
>>> Review process
>>> ----------------------
>>>
>>> You can download the Word document and edit it individually with track
>>> changes on. Or send comments, edits, feedback and additions by email,
>>> post or in some other format. You can send thigs to me directly or via
>>> this list. I will aggregate all review feedback on 1st May.
>>>
>>> If someone is able to incorporate/merge/update changes into the Google
>>> Docs version, maybe that can also be used for review?
>>>
>>> Chapter 1 has been reviewed by some people already, and it would be
>>> nice if people could begin their efforts elsewhere in the document. If
>>> someone wants to create a review log or wiki page to track who looked
>>> at what, that would be very welcome. A lot of the text is mine, and
>>> just because I wrote it, it doesn't mean it is true, accurate,
>>> sensible, understandable or correct. Some parts really do need some
>>> critical review.
>>>
>>> Please let me know if you would like me to email you directly with an
>>> alternative format of the document.
>>>
>>>
>>> Release plan
>>> -------------------
>>>
>>> The review period will end on 1st May. I will then publish the v2.0
>>> book by 7th May 2014. This will be as a PDF, in Word and also as a
>>> Lulu book. Further additions and improvements can be made after that
>>> in future versions.
>>>
>>>
>>> Colin

