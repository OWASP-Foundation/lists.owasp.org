From colin.watson at owasp.org  Thu Jul  4 12:35:03 2013
From: colin.watson at owasp.org (Colin Watson)
Date: Thu, 4 Jul 2013 13:35:03 +0100
Subject: [Owasp-appsensor-project] New Detection Point Candidate: AE13:
 Deviation from normal GEO location during login
In-Reply-To: <CAAB58F3.3676A%ryan.barnett@owasp.org>
References: <CAAB58F3.3676A%ryan.barnett@owasp.org>
Message-ID: <CAAxdBBnR5kFEBfrLVz-9Dpf0QGjXSovpGGJvGtL9j1Pe1Yhafw@mail.gmail.com>

Added:

https://www.owasp.org/index.php/AppSensor_DetectionPoints#AE13:_Deviation_from_Normal_GEO_Location

Colin

On 30 September 2011 16:30, Ryan Barnett <ryan.barnett at owasp.org> wrote:
> Most users normally log into an application from 1 or a few Geographic
> locations.  If the application learns these GeoIP locations, it can then
> detect when a user is logging into the application from a different
> location.  This would help to identify possible account hijacking attacks
> (from phishing, banking trojans).
>
> --
> Ryan Barnett
>
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>

From colin.watson at owasp.org  Thu Jul  4 12:38:18 2013
From: colin.watson at owasp.org (Colin Watson)
Date: Thu, 4 Jul 2013 13:38:18 +0100
Subject: [Owasp-appsensor-project] New Detection Point Candidate: UT5:
 Inter-Request Latency Threshold Violation
In-Reply-To: <CAAB5B0B.3677D%ryan.barnett@owasp.org>
References: <CAAB5B0B.3677D%ryan.barnett@owasp.org>
Message-ID: <CAAxdBBnUk0E4EAArg-qM=1s4WBRaohND1NhC7n59G_-3=bfaYQ@mail.gmail.com>

Examples 5 and 6 added to UT2

https://www.owasp.org/index.php/AppSensor_DetectionPoints#UT2

Colin

On 30 September 2011 16:39, Ryan Barnett <ryan.barnett at owasp.org> wrote:
> This detection point may be related to UT2 however it isn't specifically
> covered:
> https://www.owasp.org/index.php/AppSensor_DetectionPoints#UT2:_Speed_of_Application_Use
>
> The concept is that normal/real users have an amount of delay between
> requesting dynamic resources as they need time to read the pages and fill in
> FORM elements, etc? So this detection point would be measuring the time
> interval between the application sending back a web page with form elements
> and when the application then receives a follow-up request with parameters.
>
> I have conducted some minimal testing with this concept and ModSecurity and
> have found that it also catches many CSRF attacks as it forces the user's
> browser to send an immediate request back to the server once the html page
> loads and the user's browser is tricked into executing the CSRF code.  See
> the last section here -
> http://blog.spiderlabs.com/2011/01/detecting-malice-with-modsecurity-csrf-attacks.html
>
> Thoughts?  Should this be a stand-alone detection point or perhaps listed as
> a subsection of UT2?
>
> --
> Ryan Barnett
>
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>

From colin.watson at owasp.org  Thu Jul  4 13:06:12 2013
From: colin.watson at owasp.org (Colin Watson)
Date: Thu, 4 Jul 2013 14:06:12 +0100
Subject: [Owasp-appsensor-project] Recommend New Detection Point: IE7:
 Detect Abnormal Quantity of Returned Scripts
In-Reply-To: <3CF5E2E4-836E-40ED-B386-CAB287634BB2@owasp.org>
References: <CA864005.31657%ryan.barnett@owasp.org>
	<CAAxdBB=Y2RjoAx7gTZmbziTJ9vt+CRwMG1Rmpqjms1=V3ANi7Q@mail.gmail.com>
	<3CF5E2E4-836E-40ED-B386-CAB287634BB2@owasp.org>
Message-ID: <CAAxdBB=teUiChhfr=GNSBvf1686YP+p5Wm9wAT0=GW2GSeerWQ@mail.gmail.com>

Added:

https://www.owasp.org/index.php?title=AppSensor_DetectionPoints&action=submit#IE7

Colin

On 8 September 2011 12:17, Ryan Barnett <ryan.barnett at owasp.org> wrote:
> Agreed that the scope and text could be widened. In the CRS we are profiling the expected number of scripts, iframes and image tags as those are the top 3 HTML attack vectors that we see for both XSS and malicious drive-by-download infections.
>
> Looking forward to the AppSensor Summit as well.  I am flying in that morning and should be there by the first coffee break :)
>
> Ryan
>
> On Sep 8, 2011, at 7:13 AM, Colin Watson <colin.watson at owasp.org> wrote:
>
>> Ryan
>>
>> Probably a good idea.  Would it be worth making it more generic than
>> "Detect Abnormal Quantity of Returned Scripts" since it could be a
>> text change to the content or the creation of an extra form etc.  And
>> it might not just be HTML outputs?  Maybe:
>>
>>   Detect Abnormal Content Output Structure
>>
>> or something that matches IE 4 Violation of Input Data Integrity like:
>>
>>   Violation of Output Data Integrity
>>
>> See you at the AppSensor Summit on the 21st September.
>>
>> Colin
>>
>> On 2 September 2011 13:10, Ryan Barnett <ryan.barnett at owasp.org> wrote:
>>> Consider the following two CommandInjectionException detection points -
>>>
>>> * 2.7.1 CIE1: Blacklist Inspection for Common SQL Injection Values
>>> * 2.7.2 CIE2: Detect Abnormal Quantity of Returned Records
>>>
>>> There is an obvious correlation between these two as oftentimes SQL
>>> Injection attacks result in bulk extraction of DB data within the returned
>>> html page.
>>>
>>> If we take this same concept and apply it to XSS, we should have a similar
>>> detection point for -
>>>
>>>  * 2.5.1 IE1: Cross Site Scripting Attempt
>>>
>>> The new detection point will check for an abnormal # of scripts (and
>>> iframes) returned in the html page as this can help to flag successful XSS
>>> injections.  I suggest the following be added to the InputException
>>> category -
>>>
>>>  * 2.5.7 IE7: Detect Abnormal Quantity of Returned Scripts
>>>
>>> -Ryan
>>>
>>>
>>>
>>> _______________________________________________
>>> Owasp-appsensor-project mailing list
>>> Owasp-appsensor-project at lists.owasp.org
>>> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>>>

From colin.watson at owasp.org  Tue Jul  9 07:55:30 2013
From: colin.watson at owasp.org (Colin Watson)
Date: Tue, 9 Jul 2013 08:55:30 +0100
Subject: [Owasp-appsensor-project] RASP
Message-ID: <CAAxdBBn1gPd56qhVjgY-GNpxv8tN=LZbSyTvxac_NkZs+O0_Qg@mail.gmail.com>

Does anyone have contacts at Gartner, especially Joseph Feiman?

  Runtime Application Self-Protection: A Must-Have, Emerging Security Technology
  http://www.gartner.com/id=1994816

  "Runtime application self-protection (RASP): This is an emerging security
   technology that is built or linked into an application or application runtime
   environment, and is capable of controlling application execution and
   detecting and preventing real-time attacks"

It might be nice to know what they've written and referenced?  As
usual its pay to read.

Colin

From kevin.w.wall at gmail.com  Thu Jul 11 05:07:58 2013
From: kevin.w.wall at gmail.com (Kevin W. Wall)
Date: Thu, 11 Jul 2013 01:07:58 -0400
Subject: [Owasp-appsensor-project] New Detection Point Candidate: AE13:
 Deviation from normal GEO location during login
In-Reply-To: <CAAxdBBnR5kFEBfrLVz-9Dpf0QGjXSovpGGJvGtL9j1Pe1Yhafw@mail.gmail.com>
References: <CAAB58F3.3676A%ryan.barnett@owasp.org>
	<CAAxdBBnR5kFEBfrLVz-9Dpf0QGjXSovpGGJvGtL9j1Pe1Yhafw@mail.gmail.com>
Message-ID: <CAOPE6Ph6qK+SpPBbrDyjm2LDk+5q12PkXUBRQ3G=NE5An5Wjkg@mail.gmail.com>

On Thu, Jul 4, 2013 at 8:35 AM, Colin Watson <colin.watson at owasp.org> wrote:
> Added:
>
> https://www.owasp.org/index.php/AppSensor_DetectionPoints#AE13:_Deviation_from_Normal_GEO_Location

All,

Hate to be a fly in the ointment, but I think we need to think
this through a bit more.

I think one question that ought to be asked if a person is normally
using a phone or other mobile device with GPS or other location
info made available and then all of a sudden, that information
stops coming, how would / should this detection point react?
Would it even be triggered? Might we consider it a normal thing
that someone disables their GPS? (I do that all the time to save
battery. Even more often since the Snowden leaks, but I digress.)
But if the geo-location information is based on something like
GPS or the courser-grained cell-tower triangulation and then an
app stops getting that? Do we flag it or not? How do we recommend
an application using this detection point in AppSensor proceed
if that information suddenly becomes unavailable?  Note that
having an answer for this is important. If we simply say "okay,
it is normal for people to disable these services to save batteries
or whatever", then an attacker can just not send that information.
On the other hand, if you try to locate this simply based on
information for IP addresses, that is liable to have a lot of false
positives. For instance, if I login to my company VPN from home
and access your site, it puts me at one location. However, if I
access your site from the same PC directly (while still at my home),
it may look like I'm instantly a thousand miles or more away.

The other issue that I have with basing location solely on IP
addresses is I'm not sure how well that is actually going to work
once (someday!) we all regularly start using IPv6.

-kevin
--
Blog: http://off-the-wall-security.blogspot.com/
"The most likely way for the world to be destroyed, most experts agree,
is by accident. That's where we come in; we're computer professionals.
We *cause* accidents."        -- Nathaniel Borenstein

From jtmelton at gmail.com  Thu Jul 11 05:44:39 2013
From: jtmelton at gmail.com (John Melton)
Date: Thu, 11 Jul 2013 01:44:39 -0400
Subject: [Owasp-appsensor-project] New Detection Point Candidate: AE13:
 Deviation from normal GEO location during login
In-Reply-To: <CAOPE6Ph6qK+SpPBbrDyjm2LDk+5q12PkXUBRQ3G=NE5An5Wjkg@mail.gmail.com>
References: <CAAB58F3.3676A%ryan.barnett@owasp.org>
	<CAAxdBBnR5kFEBfrLVz-9Dpf0QGjXSovpGGJvGtL9j1Pe1Yhafw@mail.gmail.com>
	<CAOPE6Ph6qK+SpPBbrDyjm2LDk+5q12PkXUBRQ3G=NE5An5Wjkg@mail.gmail.com>
Message-ID: <CAM8z=yJ4zauDq7Fe8XY2pGb2yQVB3zY4yZLfgNC5o_ZGNwzMzw@mail.gmail.com>

I'm trying to think of use cases here. The couple of examples listed are
banks authenticating a new IP or a site accessed from a new country. Banks
have several mechanisms they use to try and determine if a user is coming
from a trusted machine including geolocation, reusing an IP address, a
token on the host, etc. Some sites might only allow access from a given IP
block presumably (example being your vpn/non-vpn access or something like
it) You might only be allowed to login if you came over the VPN IP
address/geolocation. I can also see the usage of limiting site access by
country. Maybe you are doing something based on language
internationalization or you want to naively restrict certain countries
visitors from seeing your information.

One of the examples I can see based on what you mentioned is that a user
logs in from Western Europe to site X, then logs out. They then hop on the
VPN and are routed through central US and then log back onto site X within
a few minutes. There is no logical way a user could move that quickly that
fast, and that _may_ point to their session being hijacked.

I think the crucial thing here is "some" applications. I think as a general
rule, geolocation is only useful as a single indicator, not as the sole
decision point. There are just too many technical reasons it could be
invalid. If you have a specific use case where you know you can use it as
the determining factor and not adversely affect your users, then by all
means. I just don't think that's a common situation for geolocation.



On Thu, Jul 11, 2013 at 1:07 AM, Kevin W. Wall <kevin.w.wall at gmail.com>wrote:

> On Thu, Jul 4, 2013 at 8:35 AM, Colin Watson <colin.watson at owasp.org>
> wrote:
> > Added:
> >
> >
> https://www.owasp.org/index.php/AppSensor_DetectionPoints#AE13:_Deviation_from_Normal_GEO_Location
>
> All,
>
> Hate to be a fly in the ointment, but I think we need to think
> this through a bit more.
>
> I think one question that ought to be asked if a person is normally
> using a phone or other mobile device with GPS or other location
> info made available and then all of a sudden, that information
> stops coming, how would / should this detection point react?
> Would it even be triggered? Might we consider it a normal thing
> that someone disables their GPS? (I do that all the time to save
> battery. Even more often since the Snowden leaks, but I digress.)
> But if the geo-location information is based on something like
> GPS or the courser-grained cell-tower triangulation and then an
> app stops getting that? Do we flag it or not? How do we recommend
> an application using this detection point in AppSensor proceed
> if that information suddenly becomes unavailable?  Note that
> having an answer for this is important. If we simply say "okay,
> it is normal for people to disable these services to save batteries
> or whatever", then an attacker can just not send that information.
> On the other hand, if you try to locate this simply based on
> information for IP addresses, that is liable to have a lot of false
> positives. For instance, if I login to my company VPN from home
> and access your site, it puts me at one location. However, if I
> access your site from the same PC directly (while still at my home),
> it may look like I'm instantly a thousand miles or more away.
>
> The other issue that I have with basing location solely on IP
> addresses is I'm not sure how well that is actually going to work
> once (someday!) we all regularly start using IPv6.
>
> -kevin
> --
> Blog: http://off-the-wall-security.blogspot.com/
> "The most likely way for the world to be destroyed, most experts agree,
> is by accident. That's where we come in; we're computer professionals.
> We *cause* accidents."        -- Nathaniel Borenstein
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20130711/635ed8ac/attachment.html>

From junior.lazuardi at owasp.org  Thu Jul 11 08:26:58 2013
From: junior.lazuardi at owasp.org (Junior Lazuardi)
Date: Thu, 11 Jul 2013 15:26:58 +0700
Subject: [Owasp-appsensor-project] Detection or protection from web scraping
Message-ID: <CAC3vNw+fZdLxb9HvXJMwWNBwe35ovbWCv+W124WYM=myHyCS5g@mail.gmail.com>

Hello project members,

I'm curious about web scraping, and can't find many on OWASP website, or on
available projects.

Some characteristics of web scraping might have been covered already in
AppSensor Detection Points, but the word/phrase itself is so rarely
mentioned.
I found that some commercial products (WAF) sell web scraping protection as
a feature, and they even have specific whitepaper on it.

Please let me know what you think of it, and whether it fits on appsensor
document.

best regards,

Junior
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20130711/72ec8467/attachment.html>

From ryan.barnett at owasp.org  Thu Jul 11 09:12:35 2013
From: ryan.barnett at owasp.org (Ryan Barnett)
Date: Thu, 11 Jul 2013 05:12:35 -0400
Subject: [Owasp-appsensor-project] New Detection Point Candidate: AE13:
 Deviation from normal GEO location during login
In-Reply-To: <CAM8z=yJ4zauDq7Fe8XY2pGb2yQVB3zY4yZLfgNC5o_ZGNwzMzw@mail.gmail.com>
Message-ID: <CE03EC14.ADC88%ryan.barnett@owasp.org>

Kevin/John,
You both bring up valid use-case points for consideration.  John, I agree
with your last paragraph in that this should be used as a potential fraud
indicator and not something that you would just start blocking on its own.
While the issues of mobile/VPN usage are valid, I am also looking at fact
that there are a large percentage of banking users that never use mobile
devices and only bank from their home computer system.  For these users,
have some type of GeoLocation validation works great for them and would
allow securty systems to quickly identify an anomalous event if their source
location changes.  

For implementation purposes, I would think that this type of Detection Point
would have some type of learning model that would be able to learn which
GeoLocations are considered "normal".  For your VPN scenario ? if this was
applied against myself, then the protect app would learn that I normally
login from either "Fairfax, VA" or "Chicago, IL".  If it is any other
location, then raise a fraud detection flag.  This of course is more
granular to the Geo City level.  Another easier scenario would be to flag
only if the Geo Country Code changes.  As you stated, maybe I always login
from US but then suddently there is a login from a .RU location? This is
often seen when Banking Trojans phish or form-grab login creds or sessionIDs
and then send them to the criminals who immediately then login to the
session.

-Ryan

From:  John Melton <jtmelton at gmail.com>
Date:  Thursday, July 11, 2013 1:44 AM
To:  "Kevin W. Wall" <kevin.w.wall at gmail.com>
Cc:  owasp-appsensor-project <owasp-appsensor-project at lists.owasp.org>
Subject:  Re: [Owasp-appsensor-project] New Detection Point Candidate: AE13:
Deviation from normal GEO location during login

> I'm trying to think of use cases here. The couple of examples listed are banks
> authenticating a new IP or a site accessed from a new country. Banks have
> several mechanisms they use to try and determine if a user is coming from a
> trusted machine including geolocation, reusing an IP address, a token on the
> host, etc. Some sites might only allow access from a given IP block presumably
> (example being your vpn/non-vpn access or something like it) You might only be
> allowed to login if you came over the VPN IP address/geolocation. I can also
> see the usage of limiting site access by country. Maybe you are doing
> something based on language internationalization or you want to naively
> restrict certain countries visitors from seeing your information.
> 
> One of the examples I can see based on what you mentioned is that a user logs
> in from Western Europe to site X, then logs out. They then hop on the VPN and
> are routed through central US and then log back onto site X within a few
> minutes. There is no logical way a user could move that quickly that fast, and
> that _may_ point to their session being hijacked.
> 
> I think the crucial thing here is "some" applications. I think as a general
> rule, geolocation is only useful as a single indicator, not as the sole
> decision point. There are just too many technical reasons it could be invalid.
> If you have a specific use case where you know you can use it as the
> determining factor and not adversely affect your users, then by all means. I
> just don't think that's a common situation for geolocation.
> 
> 
> 
> On Thu, Jul 11, 2013 at 1:07 AM, Kevin W. Wall <kevin.w.wall at gmail.com> wrote:
>> On Thu, Jul 4, 2013 at 8:35 AM, Colin Watson <colin.watson at owasp.org> wrote:
>>> > Added:
>>> >
>>> > 
>>> https://www.owasp.org/index.php/AppSensor_DetectionPoints#AE13:_Deviation_fr
>>> om_Normal_GEO_Location
>> 
>> All,
>> 
>> Hate to be a fly in the ointment, but I think we need to think
>> this through a bit more.
>> 
>> I think one question that ought to be asked if a person is normally
>> using a phone or other mobile device with GPS or other location
>> info made available and then all of a sudden, that information
>> stops coming, how would / should this detection point react?
>> Would it even be triggered? Might we consider it a normal thing
>> that someone disables their GPS? (I do that all the time to save
>> battery. Even more often since the Snowden leaks, but I digress.)
>> But if the geo-location information is based on something like
>> GPS or the courser-grained cell-tower triangulation and then an
>> app stops getting that? Do we flag it or not? How do we recommend
>> an application using this detection point in AppSensor proceed
>> if that information suddenly becomes unavailable?  Note that
>> having an answer for this is important. If we simply say "okay,
>> it is normal for people to disable these services to save batteries
>> or whatever", then an attacker can just not send that information.
>> On the other hand, if you try to locate this simply based on
>> information for IP addresses, that is liable to have a lot of false
>> positives. For instance, if I login to my company VPN from home
>> and access your site, it puts me at one location. However, if I
>> access your site from the same PC directly (while still at my home),
>> it may look like I'm instantly a thousand miles or more away.
>> 
>> The other issue that I have with basing location solely on IP
>> addresses is I'm not sure how well that is actually going to work
>> once (someday!) we all regularly start using IPv6.
>> 
>> -kevin
>> --
>> Blog: http://off-the-wall-security.blogspot.com/
>> "The most likely way for the world to be destroyed, most experts agree,
>> is by accident. That's where we come in; we're computer professionals.
>> We *cause* accidents."        -- Nathaniel Borenstein
>> _______________________________________________
>> Owasp-appsensor-project mailing list
>> Owasp-appsensor-project at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
> 
> _______________________________________________ Owasp-appsensor-project
> mailing list Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20130711/d83e6f4b/attachment-0001.html>

From ryan.barnett at owasp.org  Thu Jul 11 09:27:07 2013
From: ryan.barnett at owasp.org (Ryan Barnett)
Date: Thu, 11 Jul 2013 05:27:07 -0400
Subject: [Owasp-appsensor-project] Recommend a new reference link for RP3:
 Suspicious Client-Side Behavior
Message-ID: <CE03F2AB.ADCF9%ryan.barnett@owasp.org>

I wanted to share a blog post I did yesterday that would be a good reference
for Example 5 of RP3: Suspicious Client-side Behavior -
https://www.owasp.org/index.php/AppSensor_DetectionPoints#RP3:_Suspicious_Cl
ient-Side_Behavior

Here is the blog post -
http://blog.spiderlabs.com/2013/07/modsecurity-advanced-topic-of-the-week-de
tecting-banking-trojan-page-modifications.html

It uses ModSecurity to send down defensive JS code when banking clients
access the login page.  The JS code will then initiate an XHR request back
to the app for the same page.  This time, however, ModSecurity creates a
Hash of the valid response body and adds this as a new response header
called "WebTripWireHash".  When the XHR response is received, the JS code
then locally calculates another Hash and compares it with the
WebTripWireHash value sent by ModSecurity.  If a baning trojan has modified
the login page HTML to attempt to phish extra data from the user then this
will catch it.  The JS code then issues an alert pop-up warning the user and
sends another XHR request back to the web server/ModSecurity to notify of
the issue.  This is somewhat similar in theory to a CSP violation report
request.

This may be a good reference link to include for Example 5.

Thoughts/Comments?

-Ryan



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20130711/a9672584/attachment.html>

From dennis.groves at gmail.com  Thu Jul 11 11:49:35 2013
From: dennis.groves at gmail.com (Dennis Groves)
Date: Thu, 11 Jul 2013 04:49:35 -0700
Subject: [Owasp-appsensor-project] New Detection Point Candidate: AE13:
 Deviation from normal GEO location during login
In-Reply-To: <CE03EC14.ADC88%ryan.barnett@owasp.org>
References: <CE03EC14.ADC88%ryan.barnett@owasp.org>
Message-ID: <642BA453-C020-4145-9C6F-93AC31DEFE63@gmail.com>

On 11 Jul 2013, at 2:12, Ryan Barnett wrote:

> Kevin/John,
> You both bring up valid use-case points for consideration.  John, I 
> agree
> with your last paragraph in that this should be used as a potential 
> fraud
> indicator and not something that you would just start blocking on its 
> own.
> While the issues of mobile/VPN usage are valid, I am also looking at 
> fact
> that there are a large percentage of banking users that never use 
> mobile
> devices and only bank from their home computer system.  For these 
> users,
> have some type of GeoLocation validation works great for them and 
> would
> allow securty systems to quickly identify an anomalous event if their 
> source
> location changes.

This is one reason why we require baysian statistics in security. On of 
the issues created by the Zeus banking trojans is that the botnet 
actually knows which computer it compromised and keeps the ip within the 
same geo-location. So Geo-Location as proposed by John will fail to stop 
banking fraud, and will prevent legitimate mobile users from accessing 
the site.

What we require is behavioural profiling of legitimate users, which is 
exactly what your credit card companies do when they see an 'statistical 
deviation' due to a certain purchase; which prompts them to call you and 
verify the purchase (and what is suggested by Ryan).

I think the geo location sensor is useful for just this reason - we can 
'profile' 'normal' activity and flag 'statistical deviation.' If you 
normally log in via mobile, perhaps I should be concerned about your 
geoIP which indicates your are home or visa versa.

We are now at a point where we can grow beyond the original static 
sensors; this is an important juncture - we now realise that there is 
useful meta-data that can be used as information in conjunction with 
other sensors! This is an important juncture.

I'll share an example I used at the bank. For every AppSensor, there is 
a random function that  may or may not allow an attack to continue 
instead of neutralise it. So every single detection point becomes a 
'random' honey pot. The attacker can not predict the success of the 
attack, nor can anybody on the red-team will know. The application 
decides at random, at the bank we allowed 1% of all attacks to turn into 
honey-pots. I don't know if that is sufficient; it was what I was 
allowed.

However, it allows you to see what the attacker is going to do after a 
seemingly successful attack, and this provides you with additional 
information you would have otherwise lost! (not unlike AppSensor 
itself!)

Because it is random, you can keep the loss threshold at an acceptable 
level (in my case 1%), while still gaining additional information about 
the attack for later mitigation or prosecution. Geo-IP would allow this 
to operate even more precisely because the random could be triggered 
where the confidence of fraud was greater that the probability of 
anomaly.

The next level of 'AppSensor' is a randomly activated honey-pot. Instead 
of neutralising the successful attack, it allows it, and watches it; 
while keeping continuing to keep the attack benign.




Dennis
-- 
[Dennis Groves](http://about.me/dennis.groves), MSc
[Email me](mailto:dennis.groves at owasp.org) or [schedule a 
meeting](http://goo.gl/8sPIy).

     Unless someone like you...cares a whole awful lot...
     nothing is going to get better...It's not."
                                             -- The Lorax

From dennis.groves at gmail.com  Thu Jul 11 11:55:22 2013
From: dennis.groves at gmail.com (Dennis Groves)
Date: Thu, 11 Jul 2013 04:55:22 -0700
Subject: [Owasp-appsensor-project] Detection or protection from web
 scraping
In-Reply-To: <CAC3vNw+fZdLxb9HvXJMwWNBwe35ovbWCv+W124WYM=myHyCS5g@mail.gmail.com>
References: <CAC3vNw+fZdLxb9HvXJMwWNBwe35ovbWCv+W124WYM=myHyCS5g@mail.gmail.com>
Message-ID: <DFED9DD8-8206-4269-B1A9-D8BDF1B3AB50@gmail.com>

FYI: The ESAPI project prevents scraping through its API.

AppSensor is an operations tool - we would pride ourselves on the 
detection and response to  a forbidden scarping, where as ESAIP is 
focused on a development framework or API you can can consume to prevent 
it.

So, I guess it all depends on what you want to achieve or prevent by 
scraping? AppSensor is an application level IDS/IPS; ESAPI is a 
development API that you can use to prevent scraping. Each project 
differs quite in their goals and approach.

Cheers,

On 11 Jul 2013, at 1:26, Junior Lazuardi wrote:

> Hello project members,
>
> I'm curious about web scraping, and can't find many on OWASP website, 
> or on
> available projects.
>
> Some characteristics of web scraping might have been covered already 
> in
> AppSensor Detection Points, but the word/phrase itself is so rarely
> mentioned.
> I found that some commercial products (WAF) sell web scraping 
> protection as
> a feature, and they even have specific whitepaper on it.
>
> Please let me know what you think of it, and whether it fits on 
> appsensor
> document.
>
> best regards,
>
> Junior
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project


Dennis
-- 
[Dennis Groves](http://about.me/dennis.groves), MSc
[Email me](mailto:dennis.groves at owasp.org) or [schedule a 
meeting](http://goo.gl/8sPIy).

     Unless someone like you...cares a whole awful lot...
     nothing is going to get better...It's not."
                                             -- The Lorax

From ryan.barnett at owasp.org  Thu Jul 11 12:26:16 2013
From: ryan.barnett at owasp.org (Ryan Barnett)
Date: Thu, 11 Jul 2013 08:26:16 -0400
Subject: [Owasp-appsensor-project] Detection or protection from web
 scraping
In-Reply-To: <CAC3vNw+fZdLxb9HvXJMwWNBwe35ovbWCv+W124WYM=myHyCS5g@mail.gmail.com>
Message-ID: <CE041C48.ADEBE%ryan.barnett@owasp.org>

Web Scraping would be covered by this AppSensor Detection Point -
https://www.owasp.org/index.php/AppSensor_DetectionPoints#UT2:_Speed_of_Appl
ication_Use

-Ryan

From:  Junior Lazuardi <junior.lazuardi at owasp.org>
Date:  Thursday, July 11, 2013 4:26 AM
To:  <owasp-appsensor-project at lists.owasp.org>
Subject:  [Owasp-appsensor-project] Detection or protection from web
scraping

> Hello project members,
> 
> I'm curious about web scraping, and can't find many on OWASP website, or on
> available projects.
> 
> Some characteristics of web scraping might have been covered already in
> AppSensor Detection Points, but the word/phrase itself is so rarely mentioned.
> I found that some commercial products (WAF) sell web scraping protection as a
> feature, and they even have specific whitepaper on it.
> 
> Please let me know what you think of it, and whether it fits on appsensor
> document.
> 
> best regards,
> 
> Junior
> 
> 
>   
> _______________________________________________ Owasp-appsensor-project
> mailing list Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20130711/b056687a/attachment.html>

From junior.lazuardi at owasp.org  Fri Jul 12 04:16:51 2013
From: junior.lazuardi at owasp.org (Junior Lazuardi)
Date: Fri, 12 Jul 2013 11:16:51 +0700
Subject: [Owasp-appsensor-project] Detection or protection from web
	scraping
In-Reply-To: <CE041C48.ADEBE%ryan.barnett@owasp.org>
References: <CAC3vNw+fZdLxb9HvXJMwWNBwe35ovbWCv+W124WYM=myHyCS5g@mail.gmail.com>
	<CE041C48.ADEBE%ryan.barnett@owasp.org>
Message-ID: <CAC3vNwKdxdgsdFAWe4NX1X6W9rDzqCX9o4m5uQKMcda0dE1izw@mail.gmail.com>

Hi Dennis and Ryan,

thanks for the info, i see some of them are covered already, also on
AppSensor cheat sheet
Just curious that it's not "easy" to search on scraping explicitly,
compared to those commercial ones.
People might not be informed of it.

Anyway, is scraping classified as an attack?
and websites allowing scraping to be having vulnerabilities?

a couple of search results at www.owasp.org

https://www.owasp.org/index.php/AppSensor_Cheat_Sheet
"Unacceptable behavior could include unauthorized scraping of content,
searching for vulnerabilities, and attempts undertake fraud."

https://www.owasp.org/index.php/Los_Angeles/2010_Meetings/November_24
"But signatures have become less effective at detecting threats over time,
and aren?t sufficient to address the sophisticated abusive behavior that
large, publicly exposed Web applications are subject to, including page
scraping, logic abuse, malicious automation, phishing, and malware
distribution."


maybe add "content scraping / abuse" in UT2? or unnecessary (inclusive)?

UT2: Speed of Application Use
The speed of requests from a user indicates that an automated tool is being
used to access the site. The use of a tool undertaking a high number of
requests quickly may indicate reconnaissance for an attack or attempts to
identify vulnerabilities in the site.

Thanks,

Junior


On Thu, Jul 11, 2013 at 7:26 PM, Ryan Barnett <ryan.barnett at owasp.org>wrote:

> Web Scraping would be covered by this AppSensor Detection Point -
>
> https://www.owasp.org/index.php/AppSensor_DetectionPoints#UT2:_Speed_of_Application_Use
>
> -Ryan
>
> From: Junior Lazuardi <junior.lazuardi at owasp.org>
> Date: Thursday, July 11, 2013 4:26 AM
> To: <owasp-appsensor-project at lists.owasp.org>
> Subject: [Owasp-appsensor-project] Detection or protection from web
> scraping
>
> Hello project members,
>
> I'm curious about web scraping, and can't find many on OWASP website, or
> on available projects.
>
> Some characteristics of web scraping might have been covered already in
> AppSensor Detection Points, but the word/phrase itself is so rarely
> mentioned.
> I found that some commercial products (WAF) sell web scraping protection
> as a feature, and they even have specific whitepaper on it.
>
> Please let me know what you think of it, and whether it fits on appsensor
> document.
>
> best regards,
>
> Junior
>
>
>
> _______________________________________________ Owasp-appsensor-project
> mailing list Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20130712/eced3eed/attachment.html>

From colin.watson at owasp.org  Fri Jul 12 07:40:44 2013
From: colin.watson at owasp.org (Colin Watson)
Date: Fri, 12 Jul 2013 08:40:44 +0100
Subject: [Owasp-appsensor-project] New Detection Point Candidate: AE13:
 Deviation from normal GEO location during login
In-Reply-To: <642BA453-C020-4145-9C6F-93AC31DEFE63@gmail.com>
References: <CE03EC14.ADC88%ryan.barnett@owasp.org>
	<642BA453-C020-4145-9C6F-93AC31DEFE63@gmail.com>
Message-ID: <CAAxdBBm0SZyY9_9G0dipASZGhH5DjNNu1ODokSnMsEwfbRKbXA@mail.gmail.com>

Dennis

I feel a new book chapter emerging ;-)

I hope this is an extract from it, or some draft notes to start it!

Colin

On 11 July 2013 12:49, Dennis Groves <dennis.groves at gmail.com> wrote:
> On 11 Jul 2013, at 2:12, Ryan Barnett wrote:
>
>> Kevin/John,
>> You both bring up valid use-case points for consideration.  John, I agree
>> with your last paragraph in that this should be used as a potential fraud
>> indicator and not something that you would just start blocking on its own.
>> While the issues of mobile/VPN usage are valid, I am also looking at fact
>> that there are a large percentage of banking users that never use mobile
>> devices and only bank from their home computer system.  For these users,
>> have some type of GeoLocation validation works great for them and would
>> allow securty systems to quickly identify an anomalous event if their
>> source
>> location changes.
>
>
> This is one reason why we require baysian statistics in security. On of the
> issues created by the Zeus banking trojans is that the botnet actually knows
> which computer it compromised and keeps the ip within the same geo-location.
> So Geo-Location as proposed by John will fail to stop banking fraud, and
> will prevent legitimate mobile users from accessing the site.
>
> What we require is behavioural profiling of legitimate users, which is
> exactly what your credit card companies do when they see an 'statistical
> deviation' due to a certain purchase; which prompts them to call you and
> verify the purchase (and what is suggested by Ryan).
>
> I think the geo location sensor is useful for just this reason - we can
> 'profile' 'normal' activity and flag 'statistical deviation.' If you
> normally log in via mobile, perhaps I should be concerned about your geoIP
> which indicates your are home or visa versa.
>
> We are now at a point where we can grow beyond the original static sensors;
> this is an important juncture - we now realise that there is useful
> meta-data that can be used as information in conjunction with other sensors!
> This is an important juncture.
>
> I'll share an example I used at the bank. For every AppSensor, there is a
> random function that  may or may not allow an attack to continue instead of
> neutralise it. So every single detection point becomes a 'random' honey pot.
> The attacker can not predict the success of the attack, nor can anybody on
> the red-team will know. The application decides at random, at the bank we
> allowed 1% of all attacks to turn into honey-pots. I don't know if that is
> sufficient; it was what I was allowed.
>
> However, it allows you to see what the attacker is going to do after a
> seemingly successful attack, and this provides you with additional
> information you would have otherwise lost! (not unlike AppSensor itself!)
>
> Because it is random, you can keep the loss threshold at an acceptable level
> (in my case 1%), while still gaining additional information about the attack
> for later mitigation or prosecution. Geo-IP would allow this to operate even
> more precisely because the random could be triggered where the confidence of
> fraud was greater that the probability of anomaly.
>
> The next level of 'AppSensor' is a randomly activated honey-pot. Instead of
> neutralising the successful attack, it allows it, and watches it; while
> keeping continuing to keep the attack benign.
>
>
>
>
> Dennis
> --
> [Dennis Groves](http://about.me/dennis.groves), MSc
> [Email me](mailto:dennis.groves at owasp.org) or [schedule a
> meeting](http://goo.gl/8sPIy).
>
>     Unless someone like you...cares a whole awful lot...
>     nothing is going to get better...It's not."
>                                             -- The Lorax
>
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project

From dennis.groves at gmail.com  Fri Jul 12 08:01:46 2013
From: dennis.groves at gmail.com (Dennis Groves)
Date: Fri, 12 Jul 2013 01:01:46 -0700
Subject: [Owasp-appsensor-project] New Detection Point Candidate: AE13:
 Deviation from normal GEO location during login
In-Reply-To: <CAAxdBBm0SZyY9_9G0dipASZGhH5DjNNu1ODokSnMsEwfbRKbXA@mail.gmail.com>
References: <CE03EC14.ADC88%ryan.barnett@owasp.org>
	<642BA453-C020-4145-9C6F-93AC31DEFE63@gmail.com>
	<CAAxdBBm0SZyY9_9G0dipASZGhH5DjNNu1ODokSnMsEwfbRKbXA@mail.gmail.com>
Message-ID: <1889E65E-DF84-4AD4-8542-143C985EDE2A@gmail.com>

On 12 Jul 2013, at 0:40, Colin Watson wrote:

> Dennis
>
> I feel a new book chapter emerging ;-)
>
> I hope this is an extract from it, or some draft notes to start it!

This will happen, it is one of the reasons I have pulled apart the text. 
I will go ahead and start writing based upon the framework you have put 
together. I have a que of work to contribute, now I just need to sit 
down and work through it. :-)


Dennis
-- 
[Dennis Groves](http://about.me/dennis.groves), MSc
[Email me](mailto:dennis.groves at owasp.org) or [schedule a 
meeting](http://goo.gl/8sPIy).

     Unless someone like you...cares a whole awful lot...
     nothing is going to get better...It's not."
                                             -- The Lorax

From colin.watson at owasp.org  Fri Jul 12 08:43:54 2013
From: colin.watson at owasp.org (Colin Watson)
Date: Fri, 12 Jul 2013 09:43:54 +0100
Subject: [Owasp-appsensor-project] Recommend a new reference link for
 RP3: Suspicious Client-Side Behavior
In-Reply-To: <CE03F2AB.ADCF9%ryan.barnett@owasp.org>
References: <CE03F2AB.ADCF9%ryan.barnett@owasp.org>
Message-ID: <CAAxdBBkGmqwaOCmVTcyxuFox11bB-7UicHCJLEDWy3TV8fyPYg@mail.gmail.com>

Ryan

Yes, clever technique. I think this should be mentioned, but maybe
better as a new "Example 6".

Colin

On 11 July 2013 10:27, Ryan Barnett <ryan.barnett at owasp.org> wrote:
> I wanted to share a blog post I did yesterday that would be a good reference
> for Example 5 of RP3: Suspicious Client-side Behavior -
> https://www.owasp.org/index.php/AppSensor_DetectionPoints#RP3:_Suspicious_Client-Side_Behavior
>
> Here is the blog post -
> http://blog.spiderlabs.com/2013/07/modsecurity-advanced-topic-of-the-week-detecting-banking-trojan-page-modifications.html
>
> It uses ModSecurity to send down defensive JS code when banking clients
> access the login page.  The JS code will then initiate an XHR request back
> to the app for the same page.  This time, however, ModSecurity creates a
> Hash of the valid response body and adds this as a new response header
> called "WebTripWireHash".  When the XHR response is received, the JS code
> then locally calculates another Hash and compares it with the
> WebTripWireHash value sent by ModSecurity.  If a baning trojan has modified
> the login page HTML to attempt to phish extra data from the user then this
> will catch it.  The JS code then issues an alert pop-up warning the user and
> sends another XHR request back to the web server/ModSecurity to notify of
> the issue.  This is somewhat similar in theory to a CSP violation report
> request.
>
> This may be a good reference link to include for Example 5.
>
> Thoughts/Comments?
>
> -Ryan
>
>
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>

From rodelfmiguel at gmail.com  Mon Jul 22 12:58:11 2013
From: rodelfmiguel at gmail.com (Rodel Miguel)
Date: Mon, 22 Jul 2013 20:58:11 +0800
Subject: [Owasp-appsensor-project] Independent AppSensor
Message-ID: <4F5083C0-EEB4-4CBE-8169-ECBD34C72905@gmail.com>

Hi AppSensor Team,

My name is Rodel Miguel and I am a researcher here at Data Storage Institute in Singapore.  I would like to know if AppSensor code can be made independent with ESAPI?  Are there branched-out projects from the trunk that removes dependency with ESAPI and just provides library for intrusion/attack exceptions (probably having hooks for logging and other actions for specific attacks)?  

Thank you very much for your help!

Kind Regards,
Rodel Miguel
Senior Research Engineer
Data Storage Institute
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20130722/56d64cd9/attachment.html>

From jtmelton at gmail.com  Mon Jul 22 16:26:33 2013
From: jtmelton at gmail.com (John Melton)
Date: Mon, 22 Jul 2013 12:26:33 -0400
Subject: [Owasp-appsensor-project] Independent AppSensor
In-Reply-To: <4F5083C0-EEB4-4CBE-8169-ECBD34C72905@gmail.com>
References: <4F5083C0-EEB4-4CBE-8169-ECBD34C72905@gmail.com>
Message-ID: <CAM8z=yLRxvRZkMveN9JSw70cX5L63atPvNQ+dwGVPNV_bHHzzw@mail.gmail.com>

Hi Rodel,

There are actually 2 answers to this question:

1. In the current version, it would be difficult if not impossible without
source changes. The main areas would be in the AppSensorException's,
ASUtilities, and AppSensorIntrusionDetector classes. You could get by with
it if you don't mind setting up ESAPI but only using the intrusion detector
control. If you don't want to use the ESAPI jar, then you need some source
changes.

There are also currently no projects that do this that you can use as an
example - I haven't even gone down the path of trying it to be honest.
AppSensor was originally written to be a drop-in replacement for the
intrusion detector control in ESAPI, so that's where the dependency comes
from.

2. I am currently working on v2 of the code, which is a complete re-design
and re-write. One of the design goals was to be able to use appsensor by
itself from the beginning. Using it with ESAPI will be completely optional.

Thanks,
John


On Mon, Jul 22, 2013 at 8:58 AM, Rodel Miguel <rodelfmiguel at gmail.com>wrote:

> Hi AppSensor Team,
>
> My name is Rodel Miguel and I am a researcher here at Data Storage
> Institute in Singapore.  I would like to know if AppSensor code can be made
> independent with ESAPI?  Are there branched-out projects from the trunk
> that removes dependency with ESAPI and just provides library for
> intrusion/attack exceptions (probably having hooks for logging and other
> actions for specific attacks)?
>
> Thank you very much for your help!
>
> Kind Regards,
> Rodel Miguel
> Senior Research Engineer
> Data Storage Institute
>
> _______________________________________________
> Owasp-appsensor-project mailing list
> Owasp-appsensor-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20130722/5677f866/attachment.html>

