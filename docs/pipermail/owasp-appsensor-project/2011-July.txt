From cfpt at securitybyte.org  Sat Jul 23 11:29:47 2011
From: cfpt at securitybyte.org (Papers, Call For)
Date: Sat, 23 Jul 2011 20:59:47 +0530
Subject: [Owasp-appsensor-project] CFP securitybyte India
Message-ID: <CAKDYTU1Dbx+S58y72ChtuGpj8WJ4E0dnY+Ak_GY1y-SsxhdcSg@mail.gmail.com>

Hi All,


 The first round of speakers have been selected for Securitybyte, please
follow us on twitter @securitybyte to get the latest updates on speakers and
event.



Deral Heiland, From Printer to Owned: Leveraging Multifunction Printers
During Penetration Testing

Nithya Raman, Security threats on social networks

Alexander Polyakov, A Crushing Blow At the Heart of SAP J2EE Engine

Bishan Singh, Enabling Un-trusted Mashups

Krzysztof Kotowicz, HTML5: Something Wicked This Way Comes

John McColl, Hacking Corporate Telephony

Aseem Jakhar, Runtime thread injection and execution in Linux processes

George Nicolaou, Alternative Exploitation Vectors (A study of CVE-3333)

Michele Orru, Securing the Browser

Kanwal K. Mookhey, The Data Theft Epidemic in India

Vivek Ramachandran, Enterprise Wi-Fi Worms, Backdoors and Botnets for Fun
and Profit



The 2nd round of CFP is out



CFP/CTP



Securitybyte is proud to announce its Second Annual International
Information Security Conference, "Securitybyte 2011" in Bangalore, India.
This 4-day event features two days of conferences and two days of
post-conference hands-on Trainings & Certifications covering every aspect of
Information Security. The Securitybyte conference features some of the most
respected names in the Security space and is focused around new research and
innovation. The Securitybyte Conference 2011 is planned for Sept 6th through
9th, 2011 at The Taj Hotel in Bangalore, India.



The two-day conference (Sept 6th & 7th) will have the following three
tracks:



    Deep Technical

   Government & Governance

    Management



Submission Deadline: The first round of submission of papers for conference
talks and trainings should be done no later than August 5th, 2011. Please
send all your submissions to cfp at securitybyte.org, keeping subject line as
"SB 2011 CFP Submission".



TOPICS



Got a new attack against any technology or device? We want to see it.



Topics of interest include, but are not limited to, the following:



Management

                Case studies around any of the topics above of how the
implementation was done and what were some of the lessons learned.



Technology-Focused



                Cloud Security

                Electronic Device Security (Cell Phones / PDA's)

                Defeating Biometrics

                WLAN, RFID and Bluetooth Security

                Data Recovery and Incident Response

                Virtualization Security

                Database Security

                Forensic & Cyber security



Regulatory & Law



                Copyright infringement and anti-copyright infringement
enforcement technologies

                Critical infrastructure issues

                Data security and privacy issues

                Identity theft, identity creation & identity fraud

                Corporate Espionage





National Security



    Cyber forensics

    Cyber warfare

    Cyber Espionage

    Next hyphenGen Cyber threats

    Critical Infrastructure protection

    Surveillance & counter-surveillance



Speaker Submission:



Please use the following submission form template to respond:



    Name, title, address, email, and phone/contact number

    Short biography, qualifications, occupation, achievements, and
affiliations (limit 250 words.)

    Summary or abstract of your presentation (limit 1250 words.)

    Technical requirements (video, internet, wireless, audio, etc.)

    References (Contact name, title, and email address of two conferences
you have spoken at or comparable references.)



Please note, product or vendor pitches are not accepted. If your talk
involves an advertisement for a new product or service your company is
offering, please do not submit a proposal.


Regards
SecurityBytes
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-appsensor-project/attachments/20110723/48aa75d9/attachment.html 

From colin.watson at owasp.org  Tue Jul 26 13:01:01 2011
From: colin.watson at owasp.org (Colin Watson)
Date: Tue, 26 Jul 2011 18:01:01 +0100
Subject: [Owasp-appsensor-project] AppSensor vs (Very) Intelligent
	Adversaries
Message-ID: <CAAxdBBkXQzGcnHN_20jMW76PbH2vvqSFhaHxnRgK70DCf0fXXg@mail.gmail.com>

I just read Ryan Barnett 's post about "ModSecurity SQL Injection
Challenge: Lessons Learned" at
http://blog.spiderlabs.com/2011/07/modsecurity-sql-injection-challenge-lessons-learned.html
 Towards the end in "Hacking Resistance (Time-to-Hack)" there are some
statistics including:

     "Shortest # of Requests to find an evasion: 118"

That is a lot higher than 3 or 4 which we hope a tuned AppSensor
implementation might be able to spot.  I wonder if we might be able to
analyse how the participants approached this challenge:

- what do they do at steps 1-3?
- what do they do in steps 1-20 typically?
- what after that?

And thus, would a "blatant SQLi string detector" have detected these probings?

Colin

From ryan.barnett at owasp.org  Tue Jul 26 13:38:55 2011
From: ryan.barnett at owasp.org (Ryan Barnett)
Date: Tue, 26 Jul 2011 13:38:55 -0400
Subject: [Owasp-appsensor-project] AppSensor vs (Very) Intelligent
 Adversaries
In-Reply-To: <CAAxdBBkXQzGcnHN_20jMW76PbH2vvqSFhaHxnRgK70DCf0fXXg@mail.gmail.com>
Message-ID: <CA547303.2D848%ryan.barnett@owasp.org>

Hey Colin,
I think that you may be comparing apples to oranges here.  Just to clarify
- what we were showing with those statistics is that the attackers were
iterating through SQL permutations trying to evade the OWASP ModSecurity
CRS protections.  Those averages/shortest data means that all of the
previous attempts were caught by the filters and triggered alerts.  In the
case of AppSensor mapping, we are talking about CIE1 -
https://www.owasp.org/index.php/AppSensor_DetectionPoints#CIE1:_Blacklist_I
nspection_for_Common_SQL_Injection_Values


So, if the CRS SQLi rules were used, then they would have easily alerted
during the initial probings/testing before a working evasion was found and
would thus have allowed AppSensor responses to be utilized.

-Ryan

On 7/26/11 1:01 PM, "Colin Watson" <colin.watson at owasp.org> wrote:

>I just read Ryan Barnett 's post about "ModSecurity SQL Injection
>Challenge: Lessons Learned" at
>http://blog.spiderlabs.com/2011/07/modsecurity-sql-injection-challenge-les
>sons-learned.html
> Towards the end in "Hacking Resistance (Time-to-Hack)" there are some
>statistics including:
>
>     "Shortest # of Requests to find an evasion: 118"
>
>That is a lot higher than 3 or 4 which we hope a tuned AppSensor
>implementation might be able to spot.  I wonder if we might be able to
>analyse how the participants approached this challenge:
>
>- what do they do at steps 1-3?
>- what do they do in steps 1-20 typically?
>- what after that?
>
>And thus, would a "blatant SQLi string detector" have detected these
>probings?
>
>Colin
>_______________________________________________
>Owasp-appsensor-project mailing list
>Owasp-appsensor-project at lists.owasp.org
>https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project



From colin.watson at owasp.org  Wed Jul 27 10:11:32 2011
From: colin.watson at owasp.org (Colin Watson)
Date: Wed, 27 Jul 2011 15:11:32 +0100
Subject: [Owasp-appsensor-project] AppSensor vs (Very) Intelligent
	Adversaries
In-Reply-To: <CA547303.2D848%ryan.barnett@owasp.org>
References: <CAAxdBBkXQzGcnHN_20jMW76PbH2vvqSFhaHxnRgK70DCf0fXXg@mail.gmail.com>
	<CA547303.2D848%ryan.barnett@owasp.org>
Message-ID: <CAAxdBBk5AnVTL1nPnsamAk982wMu9ucU=Xqs7J8ddmw1S69-mw@mail.gmail.com>

Ryan

Yes I may have misunderstood, or may not have explained myself well
enough, or both!

I realise the previous attempts were detected by ModSecurity, but I
wondered what the early attempts were.  Your exercise had applications
with known vulnerabilities, an open source WAF and a parallel online
ModSecurity test environment.  So lots of ways to plan attacks
carefully before using your applications.  I am interested in the
approach the "attackers" took i.e. anything we could learn to help
defend an application which did not have a (ModSecurity) WAF in front
of it.

- what SQLi payloads did they try first?
- did they check the existence of the vulnerability first, and
thereafter attempt obfuscation, etc?
- was there any other suspicious behaviour at the same time as the
particular SQLi attempts?
- did anyone set up their own environments first so that their first
payload was a successful attack (presumably not)

Maybe I'm still missing the point?

Colin

On 26 July 2011 18:38, Ryan Barnett <ryan.barnett at owasp.org> wrote:
> Hey Colin,
> I think that you may be comparing apples to oranges here. ?Just to clarify
> - what we were showing with those statistics is that the attackers were
> iterating through SQL permutations trying to evade the OWASP ModSecurity
> CRS protections. ?Those averages/shortest data means that all of the
> previous attempts were caught by the filters and triggered alerts. ?In the
> case of AppSensor mapping, we are talking about CIE1 -
> https://www.owasp.org/index.php/AppSensor_DetectionPoints#CIE1:_Blacklist_I
> nspection_for_Common_SQL_Injection_Values
>
>
> So, if the CRS SQLi rules were used, then they would have easily alerted
> during the initial probings/testing before a working evasion was found and
> would thus have allowed AppSensor responses to be utilized.
>
> -Ryan
>
> On 7/26/11 1:01 PM, "Colin Watson" <colin.watson at owasp.org> wrote:
>
>>I just read Ryan Barnett 's post about "ModSecurity SQL Injection
>>Challenge: Lessons Learned" at
>>http://blog.spiderlabs.com/2011/07/modsecurity-sql-injection-challenge-les
>>sons-learned.html
>> Towards the end in "Hacking Resistance (Time-to-Hack)" there are some
>>statistics including:
>>
>> ? ? "Shortest # of Requests to find an evasion: 118"
>>
>>That is a lot higher than 3 or 4 which we hope a tuned AppSensor
>>implementation might be able to spot. ?I wonder if we might be able to
>>analyse how the participants approached this challenge:
>>
>>- what do they do at steps 1-3?
>>- what do they do in steps 1-20 typically?
>>- what after that?
>>
>>And thus, would a "blatant SQLi string detector" have detected these
>>probings?
>>
>>Colin
>>_______________________________________________
>>Owasp-appsensor-project mailing list
>>Owasp-appsensor-project at lists.owasp.org
>>https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>
>
>

From ryan.barnett at owasp.org  Wed Jul 27 10:15:43 2011
From: ryan.barnett at owasp.org (Ryan Barnett)
Date: Wed, 27 Jul 2011 10:15:43 -0400
Subject: [Owasp-appsensor-project] AppSensor vs (Very) Intelligent
 Adversaries
In-Reply-To: <CAAxdBBk5AnVTL1nPnsamAk982wMu9ucU=Xqs7J8ddmw1S69-mw@mail.gmail.com>
Message-ID: <CA55958B.2D9BF%ryan.barnett@owasp.org>

Colin,
Great points regarding "Attack Methodology Profiling."  I have not yet had
time to conduct that type of analysis but you bring up some good
questions.  I will think on this a bit and see what I can come up with.

Cheers,
Ryan

On 7/27/11 10:11 AM, "Colin Watson" <colin.watson at owasp.org> wrote:

>Ryan
>
>Yes I may have misunderstood, or may not have explained myself well
>enough, or both!
>
>I realise the previous attempts were detected by ModSecurity, but I
>wondered what the early attempts were.  Your exercise had applications
>with known vulnerabilities, an open source WAF and a parallel online
>ModSecurity test environment.  So lots of ways to plan attacks
>carefully before using your applications.  I am interested in the
>approach the "attackers" took i.e. anything we could learn to help
>defend an application which did not have a (ModSecurity) WAF in front
>of it.
>
>- what SQLi payloads did they try first?
>- did they check the existence of the vulnerability first, and
>thereafter attempt obfuscation, etc?
>- was there any other suspicious behaviour at the same time as the
>particular SQLi attempts?
>- did anyone set up their own environments first so that their first
>payload was a successful attack (presumably not)
>
>Maybe I'm still missing the point?
>
>Colin
>
>On 26 July 2011 18:38, Ryan Barnett <ryan.barnett at owasp.org> wrote:
>> Hey Colin,
>> I think that you may be comparing apples to oranges here.  Just to
>>clarify
>> - what we were showing with those statistics is that the attackers were
>> iterating through SQL permutations trying to evade the OWASP ModSecurity
>> CRS protections.  Those averages/shortest data means that all of the
>> previous attempts were caught by the filters and triggered alerts.  In
>>the
>> case of AppSensor mapping, we are talking about CIE1 -
>> 
>>https://www.owasp.org/index.php/AppSensor_DetectionPoints#CIE1:_Blacklist
>>_I
>> nspection_for_Common_SQL_Injection_Values
>>
>>
>> So, if the CRS SQLi rules were used, then they would have easily alerted
>> during the initial probings/testing before a working evasion was found
>>and
>> would thus have allowed AppSensor responses to be utilized.
>>
>> -Ryan
>>
>> On 7/26/11 1:01 PM, "Colin Watson" <colin.watson at owasp.org> wrote:
>>
>>>I just read Ryan Barnett 's post about "ModSecurity SQL Injection
>>>Challenge: Lessons Learned" at
>>>http://blog.spiderlabs.com/2011/07/modsecurity-sql-injection-challenge-l
>>>es
>>>sons-learned.html
>>> Towards the end in "Hacking Resistance (Time-to-Hack)" there are some
>>>statistics including:
>>>
>>>     "Shortest # of Requests to find an evasion: 118"
>>>
>>>That is a lot higher than 3 or 4 which we hope a tuned AppSensor
>>>implementation might be able to spot.  I wonder if we might be able to
>>>analyse how the participants approached this challenge:
>>>
>>>- what do they do at steps 1-3?
>>>- what do they do in steps 1-20 typically?
>>>- what after that?
>>>
>>>And thus, would a "blatant SQLi string detector" have detected these
>>>probings?
>>>
>>>Colin
>>>_______________________________________________
>>>Owasp-appsensor-project mailing list
>>>Owasp-appsensor-project at lists.owasp.org
>>>https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>>
>>
>>



From colin.watson at owasp.org  Wed Jul 27 10:54:38 2011
From: colin.watson at owasp.org (Colin Watson)
Date: Wed, 27 Jul 2011 15:54:38 +0100
Subject: [Owasp-appsensor-project] AppSensor vs (Very) Intelligent
	Adversaries
In-Reply-To: <CA55958B.2D9BF%ryan.barnett@owasp.org>
References: <CAAxdBBk5AnVTL1nPnsamAk982wMu9ucU=Xqs7J8ddmw1S69-mw@mail.gmail.com>
	<CA55958B.2D9BF%ryan.barnett@owasp.org>
Message-ID: <CAAxdBBnDqCurPvgps8+gAx_eSJBwA-QcQ4cF8y2=wvcmEugjBg@mail.gmail.com>

Ryan

No rush!  It was just my first thought when I read your post. "AMP"
sounds like a good name for it.

Colin


On 27 July 2011 15:15, Ryan Barnett <ryan.barnett at owasp.org> wrote:
> Colin,
> Great points regarding "Attack Methodology Profiling." ?I have not yet had
> time to conduct that type of analysis but you bring up some good
> questions. ?I will think on this a bit and see what I can come up with.
>
> Cheers,
> Ryan
>
> On 7/27/11 10:11 AM, "Colin Watson" <colin.watson at owasp.org> wrote:
>
>>Ryan
>>
>>Yes I may have misunderstood, or may not have explained myself well
>>enough, or both!
>>
>>I realise the previous attempts were detected by ModSecurity, but I
>>wondered what the early attempts were. ?Your exercise had applications
>>with known vulnerabilities, an open source WAF and a parallel online
>>ModSecurity test environment. ?So lots of ways to plan attacks
>>carefully before using your applications. ?I am interested in the
>>approach the "attackers" took i.e. anything we could learn to help
>>defend an application which did not have a (ModSecurity) WAF in front
>>of it.
>>
>>- what SQLi payloads did they try first?
>>- did they check the existence of the vulnerability first, and
>>thereafter attempt obfuscation, etc?
>>- was there any other suspicious behaviour at the same time as the
>>particular SQLi attempts?
>>- did anyone set up their own environments first so that their first
>>payload was a successful attack (presumably not)
>>
>>Maybe I'm still missing the point?
>>
>>Colin
>>
>>On 26 July 2011 18:38, Ryan Barnett <ryan.barnett at owasp.org> wrote:
>>> Hey Colin,
>>> I think that you may be comparing apples to oranges here. ?Just to
>>>clarify
>>> - what we were showing with those statistics is that the attackers were
>>> iterating through SQL permutations trying to evade the OWASP ModSecurity
>>> CRS protections. ?Those averages/shortest data means that all of the
>>> previous attempts were caught by the filters and triggered alerts. ?In
>>>the
>>> case of AppSensor mapping, we are talking about CIE1 -
>>>
>>>https://www.owasp.org/index.php/AppSensor_DetectionPoints#CIE1:_Blacklist
>>>_I
>>> nspection_for_Common_SQL_Injection_Values
>>>
>>>
>>> So, if the CRS SQLi rules were used, then they would have easily alerted
>>> during the initial probings/testing before a working evasion was found
>>>and
>>> would thus have allowed AppSensor responses to be utilized.
>>>
>>> -Ryan
>>>
>>> On 7/26/11 1:01 PM, "Colin Watson" <colin.watson at owasp.org> wrote:
>>>
>>>>I just read Ryan Barnett 's post about "ModSecurity SQL Injection
>>>>Challenge: Lessons Learned" at
>>>>http://blog.spiderlabs.com/2011/07/modsecurity-sql-injection-challenge-l
>>>>es
>>>>sons-learned.html
>>>> Towards the end in "Hacking Resistance (Time-to-Hack)" there are some
>>>>statistics including:
>>>>
>>>> ? ? "Shortest # of Requests to find an evasion: 118"
>>>>
>>>>That is a lot higher than 3 or 4 which we hope a tuned AppSensor
>>>>implementation might be able to spot. ?I wonder if we might be able to
>>>>analyse how the participants approached this challenge:
>>>>
>>>>- what do they do at steps 1-3?
>>>>- what do they do in steps 1-20 typically?
>>>>- what after that?
>>>>
>>>>And thus, would a "blatant SQLi string detector" have detected these
>>>>probings?
>>>>
>>>>Colin
>>>>_______________________________________________
>>>>Owasp-appsensor-project mailing list
>>>>Owasp-appsensor-project at lists.owasp.org
>>>>https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
>>>
>>>
>>>
>
>
>

From Michael.Coates at owasp.org  Thu Jul 28 08:42:53 2011
From: Michael.Coates at owasp.org (Michael Coates)
Date: Thu, 28 Jul 2011 12:42:53 -0000
Subject: [Owasp-appsensor-project] Fwd: AppSensor & ESAPI
In-Reply-To: <4CCF8011.3040906@owasp.org>
References: <4CCDA61A.3070707@owasp.org>
	<AANLkTi=Vs5DuKZMJEPxv2vjJetiUq+2Breb06mSBe-io@mail.gmail.com>
	<4CCE6520.6000305@owasp.org>
	<AANLkTikd+8WU39PwnHVgONEqUsNFogMAdPJwAd80PEXE@mail.gmail.com>
	<1043295925-1288658616-cardhu_decombobulator_blackberry.rim.net-642151923-@bda649.bisx.prod.on.blackberry>
	<4CCF61EE.40503@owasp.org>
	<AANLkTimL5Nm00L0bde5Qeq3T6xt+iE_PDCV3EivTqsSk@mail.gmail.com>
	<4CCF8011.3040906@owasp.org>
Message-ID: <4CD023B8.3040909@owasp.org>

"Has anyone given this a try? Using AppSensor inside of a full-on ESAPI 
implementation?"

Yes, take a look at the AppSensor-Tutorial code in the google repository. It is exactly that.

-Michael




On 11/1/10 8:05 PM, Jim Manico wrote:
> Looks very reasonable, John.
>
> The issue that worries me is, if the AppSensor jar is complied against ESAPI 2.0 
> rc10, and then we want to use it in say ESAPI 2.0 rc13, problems might arise. 
> But that might be an undue concern. I don't have the answer yet, but I think we 
> need to be more "version organized". And John, I appreciate you taking the time 
> to explain all of this to me.
>
> Has anyone given this a try? Using AppSensor inside of a full-on ESAPI 
> implementation?
>
> - Jim
>
> > Jim,
> > From my perspective, it should be pretty easy. If you had a webapp w/ esapi 
> > and wanted to add appsensor, here are the steps as of the current release.
> > 1. get appsensor jar and add to project
> > 2. modify esapi.properties file to point to appsensor intrusion detector 
> > instead of default
> > 3. add appsensor.properties file
> > ... and ...
> > 4. modify your code and/or the properties files to add new detection points 
> > and their associated threshold configurations (this step is optional, technically)
> >
> > If you want to add appsensor to a project that's not using esapi, you'd have a 
> > couple extra steps, but it's still possible.
> > Thanks,
> > John
> >
> > On Mon, Nov 1, 2010 at 8:57 PM, Jim Manico <jim.manico at owasp.org 
> > <mailto:jim.manico at owasp.org>> wrote:
> >
> >
> >     John and August,
> >
> >     My goal is to make it easy for ESAPI users to enable AppSensor as an
> >     IntrusionDetection option when using ESAPI. I'm open to any possibility to
> >     make that happen....
> >
> >
> >     > Or do you mean to simply make it the default intrusion detector in
> >     ESAPI.properties? In that case you risk adding a whole bunch of new
> >     dependencies -I thought we were trying to keep those down...
> >
> >     Well, maybe not default - but an /option /as the ESAPI intrusion detector.
> >     AppSensor is absolutely perfect for ESAPI intrusion detection - but we
> >     have a circular dependency issue...
> >
> >     So let me just ask, you all know how ESAPI's IntrusionDetector works - how
> >     tough is it going to be to make AppSensor an option, or are we already
> >     very close to being there? It sounds like you have done much of the work
> >     already (*use the logger through an adapter *use the authenticator through
> >     an adapter) so I'm hoping this might be a lot simpler than I think it will
> >     be....
> >
> >     And I'm sorry I'm a bit distracted and on vacation - I'll dig into the
> >     code much deeper starting this Monday.
> >
> >     - Jim
> >
> >
> >
> >
> >
> >>     Jim are you talking about pulling the AppSensor codebase directly within
> >>     ESAPI? In that case you would definitely want to use the same log factory
> >>     as configured in ESAPI.properties.
> >>
> >>     Or do you mean to simply make it the default intrusion detector in
> >>     ESAPI.properties? In that case you risk adding a whole bunch of new
> >>     dependencies -I thought we were trying to keep those down...
> >>
> >>     -August
> >>
> >>     Sent via BlackBerry by AT&T
> >>
> >>     *From: * John Melton <jtmelton at gmail.com> <mailto:jtmelton at gmail.com>
> >>     *Date: *Mon, 1 Nov 2010 13:08:32 -0400
> >>     *To: *Jim Manico<jim.manico at owasp.org> <mailto:jim.manico at owasp.org>
> >>     *Cc: *Michael Coates<michael.coates at owasp.org>
> >>     <mailto:michael.coates at owasp.org>; Kevin W. Wall<kevin.w.wall at gmail.com>
> >>     <mailto:kevin.w.wall at gmail.com>;
> >>     owasp-appsensor-project<owasp-appsensor-project at lists.owasp.org>
> >>     <mailto:owasp-appsensor-project at lists.owasp.org>; August
> >>     Detlefsen<augustd at codemagi.com> <mailto:augustd at codemagi.com>; Chris
> >>     Schmidt<chrisisbeef at gmail.com> <mailto:chrisisbeef at gmail.com>;
> >>     Jeff.Williams at aspectsecurity.com
> >>     <mailto:Jeff.Williams at aspectsecurity.com><jeff.williams at aspectsecurity.com>
> >>     <mailto:jeff.williams at aspectsecurity.com>
> >>     *Subject: *Re: [Owasp-appsensor-project] Fwd: AppSensor & ESAPI
> >>
> >>     Jim,
> >>     Not sure I agree with #1 - not sure why we need to stop using ESAPI. I'm
> >>     not sure how maven deals w/ circular dependencies, but ESAPI's
> >>     interaction w/ appsensor for the most part would be through the intrusion
> >>     detector mechanism ... ESAPI.intrusionDetector().addException(this),
> >>     which is already implemented in the EnterpriseSecurityException
> >>     constructor and maybe 1 or 2 other exceptions. I admit, though, I'm not
> >>     sure how maven deals w/ the dependencies so that could certainly be an
> >>     issue - any maven experts can you chime in?
> >>
> >>     We do use a few of the esapi classes.
> >>     - IntrusionDetector interface
> >>     - SecurityConfiguration class
> >>     - I think we might use the StringUtilities in a place or 2, but we could
> >>     remove these if need be
> >>     - use the logger through an adapter
> >>     - use the authenticator through an adapter.
> >>
> >>     We've planned ahead for integration w/ ESAPI or w/ other frameworks. In
> >>     the current incarnation of AppSensor, we do depend on ESAPI, but you
> >>     don't have to *use* ESAPI. You can use a different mechanism for all the
> >>     controls that ESAPI would normally cover, but if you use AppSensor, we're
> >>     still gonna use some ESAPI code behind the scenes. Having said that, our
> >>     only implementations for certain pieces are written for ESAPI integration
> >>     (logger/authenticator), but an app could easily implement their own.
> >>
> >>     I'm also curious about what "ESAPI can build a AppSensor implementation"
> >>     means from your perspective? Are you saying ...
> >>     1. use our code, and implement your own detection points and threshold
> >>     configurations
> >>     2. implement your own ground-up code/detection/response engine, as well
> >>     as the detection points and threshold configs -or-
> >>     3. something else
> >>     ?
> >>
> >>     Thanks,
> >>     John
> >>
> >>     On Mon, Nov 1, 2010 at 2:58 AM, Jim Manico <jim.manico at owasp.org
> >>     <mailto:jim.manico at owasp.org>> wrote:
> >>
> >>         I'd like to include AppSensor as the default intrusion detector for
> >>         ESAPI via maven integration. It's way more powerful that our WAF. But
> >>         the two do not complete, they are complimentary.
> >>
> >>         I think we also want AppSensor to use the ESAPI logging methodology
> >>         if we choose. This is difficult, and a little out of my league.
> >>         (Circular dependency injection?).
> >>
> >>         So I think...
> >>
> >>         1) AppSensor first stops using ESAPI...
> >>         2) AppSensor provides a pluggable logging mechanism so we can still
> >>         force it to use ESAPI logging...
> >>         3) THEN ESAPI can build a AppSensor implementation and include it in
> >>         the project
> >>
> >>         Does this make sense? Any thoughts Chris/August - I know you both
> >>         have a lot more experience with this kind of integration.
> >>
> >>         - Jim
> >>
> >>
> >>
> >>>         Kevin,
> >>>         Hi, Glad you are considering AppSensor. I attempted answers inline -
> >>>         if you have further questions, let me know.
> >>>         Thanks,
> >>>         John
> >>>
> >>>         On Sun, Oct 31, 2010 at 1:23 PM, Michael Coates
> >>>         <michael.coates at owasp.org <mailto:michael.coates at owasp.org>> wrote:
> >>>
> >>>             Forwarding to AppSensor mailing list. I think John will have the
> >>>             most current info for several of these questions.
> >>>
> >>>             But, we do need to get the appsensor.jar as a feature download.
> >>>             We don't want people to build from scratch if they don't want to.
> >>>
> >>>             -------- Original Message --------
> >>>             Subject: 	AppSensor & ESAPI
> >>>             Date: 	Sun, 31 Oct 2010 09:37:31 -0400
> >>>             From: 	Kevin W. Wall <kevin.w.wall at gmail.com>
> >>>             <mailto:kevin.w.wall at gmail.com>
> >>>             Organization: 	Qwest IT - Application Security Team
> >>>             To: 	Michael Coates <michael.coates at owasp.org>
> >>>             <mailto:michael.coates at owasp.org>
> >>>
> >>>
> >>>
> >>>             Michael,
> >>>
> >>>             I just watched your AppSec USA 2010 video presentation about AppSensor&  ESAPI
> >>>             yesterday. (Thanks for the credit as contributor BTW. Totally unexpected.)
> >>>
> >>>             In it, you mentioned that it was planned to have appsensor.jar bundled with
> >>>             ESAPI as of ESAPI 2.0rc8. Since I don't see it in ESAPI even in 2.0rc10,
> >>>             I'm guessing that there was a delay for some reason.
> >>>
> >>>         I copied Jim on this email b/c he was discussing this with us. I
> >>>         personally am not sure what's required on the ESAPI side to get
> >>>         AppSensor bundled. I can say AppSensor depends on ESAPI in some of
> >>>         it's code (ESAPI is a maven dependency of AppSensor). I would be
> >>>         happy to do whatever I can to get it included in the bundle. Jim,
> >>>         any thoughts?
> >>>
> >>>             So then I go to look for the AppSensor tutorial and the AppSensor jar file
> >>>             at the AppSensor Google Code site and I don't find either. (The tutorial is
> >>>             under '/' of the trunk under the svn/trunk though, so I did get it.) But
> >>>             surprisingly (to me, at least) was the fact that I could not find appsensor.jar
> >>>             anywhere under the featured or previous Downloads. (Do you expect people to
> >>>             build it from scratch?)
> >>>
> >>>         Right now, there are 3 ways to get the jar, and I agree this should
> >>>         be reorganized ... we all admit documentation is our next hurdle.
> >>>         The first is to build from scratch as you mentioned, unpalatable to
> >>>         most. The second is to grab the jar from the link on
> >>>         http://www.owasp.org/index.php/AppSensor_Developer_Guide. The third
> >>>         is to add it as a maven dependency - AppSensor is in Maven central
> >>>         (same as ESAPI as of 2.0RC10. We really do need to move towards
> >>>         producing a deliverable similar to ESAPI that is a zip w/ the
> >>>         jar/dependencies/javadoc/config files, etc. in a zip or something
> >>>         like that, but we're not there yet.
> >>>
> >>>             Anyway, the reason that I am bringing this up is that I am about ready to
> >>>             start working on the ESAPI crypto for the 2.1 branch and I see many places
> >>>             where I'd like to wire-in AppSensor detection points into either JavaEncryptor
> >>>             or perhaps even EncryptionException. If AppSensor was truly bundled as part of
> >>>             ESAPI that would be fairly easy to do. OTOH, if it is not, I may need to
> >>>             rethink this because I don't want to create yet another dependency on an
> >>>             external class library. (ESAPI already has something like 30+ jars that it
> >>>             is dependent upon.)
> >>>
> >>>         Glad you're thinking of going this way, again, I'd need to talk to
> >>>         Jim about bundling.
> >>>
> >>>             Lastly, from your AppSec USA 2010 video, I recall you stating that that the
> >>>             way that AppSensor would be enabled in ESAPI would be to set
> >>>
> >>>             ESAPI.IntrusionDetector=org.owasp.appsensor.intrusiondetection.AppSensorIntrusionDetector
> >>>
> >>>             in the ESAPI.properties file. However, I also vaguely recall discussion
> >>>             as to how that property should not be used as that would disable
> >>>             ESAPI's built-in WAF and I thought that I remember Jeff Williams arguing that
> >>>             AppSensor and the ESAPI WAF were_complimentary_ rather than_competing_
> >>>             technologies so therefore they should use different properties in ESAPI.
> >>>             Anyway, I am not sure that this has been resolved or not, so would appreciate
> >>>             an update in this area as well.
> >>>
> >>>         This will probably have to be cleared up with Jeff and/or Jim. I
> >>>         haven't seen anything in the intrusion detector code that says
> >>>         anything about the WAF, but I could be wrong. I agree with Jeff's
> >>>         core point, but if that configuration is true, then I think the
> >>>         current setup is confusing. The WAF should have separate
> >>>         configuration. I wouldn't necessarily hook the WAF into the
> >>>         intrusion detection config, since some folks would want to use one
> >>>         or the other.
> >>>         Also wanted to point out that in addition to changing that 1-line
> >>>         config, you do need to add the appsensor.properties file (goes in
> >>>         the same folder as the esapi.properties), and make sure the config
> >>>         is right there. That config file is in svn.
> >>>
> >>>             Thanks,
> >>>             -kevin
> >>>             P.S.- If you wish to reply to the OWASP-AppSensor-Project mailing list, that's
> >>>                    fine as I subscribe to that. Just wasn't sure if this was to appropriate
> >>>                    to ask this there as I'm not sure if that's a developers list or a users
> >>>                    list.
> >>>             -- 
> >>>             Kevin W. Wall
> >>>             "The most likely way for the world to be destroyed, most experts agree,
> >>>             is by accident. That's where we come in; we're computer professionals.
> >>>             We cause accidents."        -- Nathaniel Borenstein, co-creator of MIME
> >>>
> >>>
> >>>             _______________________________________________
> >>>             Owasp-appsensor-project mailing list
> >>>             Owasp-appsensor-project at lists.owasp.org
> >>>             <mailto:Owasp-appsensor-project at lists.owasp.org>
> >>>             https://lists.owasp.org/mailman/listinfo/owasp-appsensor-project
> >>>
> >>>
> >>
> >>
> >
> >
>

