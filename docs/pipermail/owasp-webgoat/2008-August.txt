From irongeek at irongeek.com  Mon Aug 11 21:52:15 2008
From: irongeek at irongeek.com (Adrian Crenshaw)
Date: Mon, 11 Aug 2008 21:52:15 -0400
Subject: [Owasp-webgoat] Removing Basic Authentication
Message-ID: <edd2c9bd0808111852k341cd39cqec334a5bf51b81a1@mail.gmail.com>

Hi All,
     I'm wanting to do some more videos on WebGoat, specifically using
various SQL Injection tools against it. Unfortunately, many of these tools
do not support BASIC authentication and
http://guest:guest at localhost:8080/WebGoat/attack
is not working in them. I'm very new to Tomcat, how can I remove BASIC
athentication? I'm running it on my own private NATed LAN so security is not
so big an issue.


Thanks,

Adrian

From marc.rennhard at zhaw.ch  Wed Aug 13 12:27:40 2008
From: marc.rennhard at zhaw.ch (Marc Rennhard)
Date: Wed, 13 Aug 2008 18:27:40 +0200
Subject: [Owasp-webgoat] Screen parameter values change for every new session
Message-ID: <48A30B7C.6040800@zhaw.ch>

Dear list,

I'm using WebGoat in a university-level course to demonstrate several 
types of web application attacks. I have just prepared a 
session-hijacking XSS attack that exploits the vulnerability in the 
"Phishing with XSS" lession (the search field). To make the exploit as 
realistic as possible, I prepared a web document with an accordingly 
prepared link, which sends the JavaScript to WebGoat when clicking it.

This requires of course to hard-code the URL (e.g. 
http://127.0.0.1:8080/WebGoat/attack?Screen=285&menu=900) in that web 
document. The problem is now that it seems that the identifiers used for 
the Screen parameter change whenever a new session is initiated. So the 
Screen value for the "Phishing with XSS" is 285 now but may be, e.e. 327 
during the next session. This of course doesn't work together at all 
with the fixed link in the web document I prepared.

My question is the following: is there any easy way to avoid these 
identifier changes for the Screen parameter values? I'd like to have the 
same identifiers for the same lessons in different sessions all the time.

Thanks for any help,
Marc


From stephencraig.evans at gmail.com  Fri Aug 15 00:23:03 2008
From: stephencraig.evans at gmail.com (Stephen Craig Evans)
Date: Fri, 15 Aug 2008 12:23:03 +0800
Subject: [Owasp-webgoat] Screen parameter values change for every new
	session
In-Reply-To: <48A30B7C.6040800@zhaw.ch>
References: <48A30B7C.6040800@zhaw.ch>
Message-ID: <930fd0230808142123r7e4b7ab6x1fcb89ef0d7c8101@mail.gmail.com>

Hi Marc,

The source code is there if you wish to change it on your own; not a good
answer and I think Bruce is one of the few people that can point you in the
right direction.

>From my experience, the screen parameter is a random number. The menu
parameter is hard-coded for each lesson, but you are going to have more
problems if you want to point to a particular sub-lesson within a lesson
because there is no distinguishing parameter for a sub-lesson within a
lesson.

Somehow - which I haven't needed to figure out yet - WebGoat stores the last
sub-lesson visited so if you close the browser (and still stayed logged in),
and open it again, then you will be directed automatically to the same
sub-lesson.

I hope this helps but I don't think you'll be able to hardcode paths to
sub-lessons. And if you haven't previously logged in using Basic
Authentication, you'll have to do that too.

I don't have access to WebGoat at this moment, but have you tried leaving
the screen parameter blank or omitting it altogether?


Stephen

On Thu, Aug 14, 2008 at 12:27 AM, Marc Rennhard <marc.rennhard at zhaw.ch>wrote:

> Dear list,
>
> I'm using WebGoat in a university-level course to demonstrate several
> types of web application attacks. I have just prepared a
> session-hijacking XSS attack that exploits the vulnerability in the
> "Phishing with XSS" lession (the search field). To make the exploit as
> realistic as possible, I prepared a web document with an accordingly
> prepared link, which sends the JavaScript to WebGoat when clicking it.
>
> This requires of course to hard-code the URL (e.g.
> http://127.0.0.1:8080/WebGoat/attack?Screen=285&menu=900) in that web
> document. The problem is now that it seems that the identifiers used for
> the Screen parameter change whenever a new session is initiated. So the
> Screen value for the "Phishing with XSS" is 285 now but may be, e.e. 327
> during the next session. This of course doesn't work together at all
> with the fixed link in the web document I prepared.
>
> My question is the following: is there any easy way to avoid these
> identifier changes for the Screen parameter values? I'd like to have the
> same identifiers for the same lessons in different sessions all the time.
>
> Thanks for any help,
> Marc
>
> _______________________________________________
> Owasp-webgoat mailing list
> Owasp-webgoat at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-webgoat
>

From marc.rennhard at zhaw.ch  Fri Aug 15 01:47:43 2008
From: marc.rennhard at zhaw.ch (Marc Rennhard)
Date: Fri, 15 Aug 2008 07:47:43 +0200
Subject: [Owasp-webgoat] Screen parameter values change for every new
 session
In-Reply-To: <930fd0230808142123r7e4b7ab6x1fcb89ef0d7c8101@mail.gmail.com>
References: <48A30B7C.6040800@zhaw.ch>
	<930fd0230808142123r7e4b7ab6x1fcb89ef0d7c8101@mail.gmail.com>
Message-ID: <48A5187F.70603@zhaw.ch>

Hi Stephen,

thanks for your comment.

I actually found a solution that seems to work. I "fixed" the developer
version for myself so it always uses the same Screen-IDs for different
sessions and users. The ID depends on a hash over the classname and is
therefore not dependant on the sequence the lessions are parsed (e.g. if
lessons are added or removed). Attached you find code:

public AbstractLesson()
{
    //id = new Integer(++count);
    /*
     * Create the id based on a hash over the class name so we have
     * always the same id in every session
     */
    try {
        String className = getClass().getName();
        byte[] classNameBytes = className.getBytes();
        MessageDigest md = MessageDigest.getInstance("SHA-1");
        byte[] sha1hash = new byte[40];
        md.update(classNameBytes);
        sha1hash = md.digest();

        // Set leading bit to zero and convert first 4 bytes to int
        sha1hash[0] &= 127;
        id = sha1hash[0] * 256 * 256 * 256 + sha1hash[1] * 256 * 256 +
sha1hash[2] * 256 + sha1hash[3];
        //System.out.println(className + ", " + id);
    } catch (Exception e) {
    }
}

In theory, there's a small chance of a collision as the first four bytes
in the hash may be equal for two different lessons. Since it was no
issue with the current WebGoat release, I didn't address that.

Thanks,
Marc

From lists at dawes.za.net  Fri Aug 15 02:02:00 2008
From: lists at dawes.za.net (Rogan Dawes)
Date: Fri, 15 Aug 2008 08:02:00 +0200
Subject: [Owasp-webgoat] Screen parameter values change for every new
 session
In-Reply-To: <48A5187F.70603@zhaw.ch>
References: <48A30B7C.6040800@zhaw.ch>	<930fd0230808142123r7e4b7ab6x1fcb89ef0d7c8101@mail.gmail.com>
	<48A5187F.70603@zhaw.ch>
Message-ID: <48A51BD8.7080106@dawes.za.net>

Marc Rennhard wrote:
> Hi Stephen,
> 
> thanks for your comment.
> 
> I actually found a solution that seems to work. I "fixed" the developer
> version for myself so it always uses the same Screen-IDs for different
> sessions and users. The ID depends on a hash over the classname and is
> therefore not dependant on the sequence the lessions are parsed (e.g. if
> lessons are added or removed). Attached you find code:
> 
> public AbstractLesson()
> {
>     //id = new Integer(++count);
>     /*
>      * Create the id based on a hash over the class name so we have
>      * always the same id in every session
>      */
>     try {
>         String className = getClass().getName();
>         byte[] classNameBytes = className.getBytes();
>         MessageDigest md = MessageDigest.getInstance("SHA-1");
>         byte[] sha1hash = new byte[40];
>         md.update(classNameBytes);
>         sha1hash = md.digest();
> 
>         // Set leading bit to zero and convert first 4 bytes to int
>         sha1hash[0] &= 127;
>         id = sha1hash[0] * 256 * 256 * 256 + sha1hash[1] * 256 * 256 +
> sha1hash[2] * 256 + sha1hash[3];
>         //System.out.println(className + ", " + id);
>     } catch (Exception e) {
>     }
> }
> 
> In theory, there's a small chance of a collision as the first four bytes
> in the hash may be equal for two different lessons. Since it was no
> issue with the current WebGoat release, I didn't address that.
> 
> Thanks,
> Marc

Not a bad solution.

Your other alternative is to make the HTML page a JSP, and get the 
lesson ID by iterating over the lessons until you find the right one, 
then calling its getID() method.

Shout if you need any help with this.

Rogan


From Bruce.Mayhew at OunceLabs.com  Fri Aug 15 12:13:48 2008
From: Bruce.Mayhew at OunceLabs.com (Bruce Mayhew)
Date: Fri, 15 Aug 2008 12:13:48 -0400
Subject: [Owasp-webgoat] Removing Basic Authentication
In-Reply-To: <edd2c9bd0808111852k341cd39cqec334a5bf51b81a1@mail.gmail.com>
References: <edd2c9bd0808111852k341cd39cqec334a5bf51b81a1@mail.gmail.com>
Message-ID: <9DF4DCB48693534A986B344B0BF89DDB0341CC9B@ligament.Ounce.local>

Do you have the ability to set any HTTP Headers?

-----Original Message-----
From: owasp-webgoat-bounces at lists.owasp.org
[mailto:owasp-webgoat-bounces at lists.owasp.org] On Behalf Of Adrian
Crenshaw
Sent: Monday, August 11, 2008 9:52 PM
To: owasp-webgoat at lists.owasp.org
Subject: [Owasp-webgoat] Removing Basic Authentication

Hi All,
     I'm wanting to do some more videos on WebGoat, specifically using
various SQL Injection tools against it. Unfortunately, many of these
tools
do not support BASIC authentication and
http://guest:guest at localhost:8080/WebGoat/attack
is not working in them. I'm very new to Tomcat, how can I remove BASIC
athentication? I'm running it on my own private NATed LAN so security is
not
so big an issue.


Thanks,

Adrian
_______________________________________________
Owasp-webgoat mailing list
Owasp-webgoat at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-webgoat

From yzhou at medplus.com  Fri Aug 22 09:00:32 2008
From: yzhou at medplus.com (Zhou, Yan)
Date: Fri, 22 Aug 2008 09:00:32 -0400
Subject: [Owasp-webgoat] Log spoofing attack in WebGoat
Message-ID: <DA235E4D5FD3CE4C8B77382F0837274C600F61@EXCHMAIL01.corp.medplus.com>

Hi there, 

 

I just completed Log Spoofing test in Web Goat 5.2. 

 

Am I correct to say that the new line and script working only because we
display the log in Web page? In other words, for someone reading the log
from a command line shell (not via browser), there is no harm with the
extra new line and script tag?

 

Thanks, 

Yan Zhou

 











Confidentiality Notice: The information contained in this electronic transmission is confidential and may be legally privileged. It is intended only for the addressee(s) named above. If you are not an intended recipient, be aware that any disclosure, copying, distribution or use of the information contained in this transmission is prohibited and may be unlawful. If you have received this transmission in error, please notify us by telephone (513) 229-5500 or by email (postmaster at MedPlus.com). After replying, please erase it from your computer system.




From yzhou at medplus.com  Tue Aug 26 10:05:24 2008
From: yzhou at medplus.com (Zhou, Yan)
Date: Tue, 26 Aug 2008 10:05:24 -0400
Subject: [Owasp-webgoat] how to sniff HTTPs (WebGoat insecure login)
Message-ID: <DA235E4D5FD3CE4C8B77382F0837274C676CF5@EXCHMAIL01.corp.medplus.com>

Hi there, 

 

I do not know how to get HTTPS working with WebGoat Insecure Login
lesson. 

 

I completed stage 1 with HTTP, and used HTTPS to do stage 2, but got the
following error in WebScarab. I then went into WebScarab started the
listener at port 443, but got a "Page Not Found" error. 

 

Did I miss anything?

 

 

WebScarab encountered an error trying to retrieve 

GET https://localhost:443/WebGoat/attack?Screen=39&menu=1300 HTTP/1.1
Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg,
application/vnd.ms-excel, application/vnd.ms-powerpoint,
application/msword, application/x-shockwave-flash,
application/ag-plugin, application/xaml+xml,
application/vnd.ms-xpsdocument, application/x-ms-xbap,
application/x-ms-application, */*
Accept-Encoding: gzip, deflate
Cookie: JSESSIONID=C5E08C8B70210C7FEAEBE406D332F846
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET
CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30)
Host: localhost
Connection: Keep-Alive
Accept-Language: en-us
 

The error was : 

Connection refused: connect
        at java.net.PlainSocketImpl.socketConnect(Native Method)
        at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333)
        at
java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195)
        at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182)
        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366)
        at java.net.Socket.connect(Socket.java:519)
        at
org.owasp.webscarab.httpclient.URLFetcher.connect(URLFetcher.java:412)
        at
org.owasp.webscarab.httpclient.URLFetcher.fetchResponse(URLFetcher.java:
229)
        at
org.owasp.webscarab.plugin.proxy.CookieTracker$Plugin.fetchResponse(Cook
ieTracker.java:130)
        at
org.owasp.webscarab.plugin.proxy.BrowserCache$Plugin.fetchResponse(Brows
erCache.java:101)
        at
org.owasp.webscarab.plugin.proxy.RevealHidden$Plugin.fetchResponse(Revea
lHidden.java:100)
       at
org.owasp.webscarab.plugin.proxy.BeanShell$Plugin.fetchResponse(BeanShel
l.java:229)
        at
org.owasp.webscarab.plugin.proxy.ManualEdit$Plugin.fetchResponse(ManualE
dit.java:243)
        at
org.owasp.webscarab.plugin.proxy.ConnectionHandler.run(ConnectionHandler
.java:233)
        at java.lang.Thread.run(Thread.java:619)

 

 

Thanks, 

Yan Zhou

 











Confidentiality Notice: The information contained in this electronic transmission is confidential and may be legally privileged. It is intended only for the addressee(s) named above. If you are not an intended recipient, be aware that any disclosure, copying, distribution or use of the information contained in this transmission is prohibited and may be unlawful. If you have received this transmission in error, please notify us by telephone (513) 229-5500 or by email (postmaster at MedPlus.com). After replying, please erase it from your computer system.




