From madhavikulks at gmail.com  Fri Apr 10 06:56:40 2009
From: madhavikulks at gmail.com (Madhavi Yami)
Date: Fri, 10 Apr 2009 16:26:40 +0530
Subject: [Owasp-webgoat] please let me know
Message-ID: <7f48585f0904100356u37543aaes534b048f4eb043ed@mail.gmail.com>

Hey All,

I am trying to install webgoat on my machine , i took the zip file from
owasp  WebGoat-OWASP_Standard-5.2 , unzipped it , and started the tomcat ,
then i am trying to hit http://localhost/WebGoat/attack , i get page cannot
be found.
Then i tried giving my ip address in tomcat / conf server_80 xml file with
that also i ahve the same result.
                                 Next i tried what is given in the readme
like renaming  the war file  and deleting the webgoat folder, nothing is
working
Actually i had tried this two months back and was able to succesfully do
most of the lessons , suddenly when i am trying after 2 months i am not able
to set up webgoat.
Please let me know what might be the problem.

Thanks,
Madhavi

From Bruce.Mayhew at OunceLabs.com  Fri Apr 10 07:34:24 2009
From: Bruce.Mayhew at OunceLabs.com (Bruce Mayhew)
Date: Fri, 10 Apr 2009 07:34:24 -0400
Subject: [Owasp-webgoat] please let me know
In-Reply-To: <7f48585f0904100356u37543aaes534b048f4eb043ed@mail.gmail.com>
References: <7f48585f0904100356u37543aaes534b048f4eb043ed@mail.gmail.com>
Message-ID: <9DF4DCB48693534A986B344B0BF89DDB03BDF200@ligament.Ounce.local>

Madhavi, look at the output from the tomcat startup window.  Are there
any errors in the startup of Tomcat?

Try browsing to http://localhost/  to see if tomcat is running

Bruce


-----Original Message-----
From: owasp-webgoat-bounces at lists.owasp.org
[mailto:owasp-webgoat-bounces at lists.owasp.org] On Behalf Of Madhavi Yami
Sent: Friday, April 10, 2009 6:57 AM
To: owasp-webgoat at lists.owasp.org
Subject: [Owasp-webgoat] please let me know

Hey All,

I am trying to install webgoat on my machine , i took the zip file from
owasp  WebGoat-OWASP_Standard-5.2 , unzipped it , and started the tomcat
,
then i am trying to hit http://localhost/WebGoat/attack , i get page
cannot
be found.
Then i tried giving my ip address in tomcat / conf server_80 xml file
with
that also i ahve the same result.
                                 Next i tried what is given in the
readme
like renaming  the war file  and deleting the webgoat folder, nothing is
working
Actually i had tried this two months back and was able to succesfully do
most of the lessons , suddenly when i am trying after 2 months i am not
able
to set up webgoat.
Please let me know what might be the problem.

Thanks,
Madhavi
_______________________________________________
Owasp-webgoat mailing list
Owasp-webgoat at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-webgoat

From Bruce.Mayhew at OunceLabs.com  Fri Apr 10 07:46:30 2009
From: Bruce.Mayhew at OunceLabs.com (Bruce Mayhew)
Date: Fri, 10 Apr 2009 07:46:30 -0400
Subject: [Owasp-webgoat] please let me know
In-Reply-To: <7f48585f0904100441r683c4f88p97b62674f5396821@mail.gmail.com>
References: <7f48585f0904100356u37543aaes534b048f4eb043ed@mail.gmail.com>
	<9DF4DCB48693534A986B344B0BF89DDB03BDF200@ligament.Ounce.local>
	<7f48585f0904100441r683c4f88p97b62674f5396821@mail.gmail.com>
Message-ID: <9DF4DCB48693534A986B344B0BF89DDB03BDF204@ligament.Ounce.local>

You have another process running on port 80.  It is most likely IIS.
You can run the webgoat_8080.bat to start WebGoat on port 8080.  Browse
to http://localhost:8080/WebGoat/attack to access WebGoat.  The other
alternative is to stop the server running on port 80.

 

From: Madhavi Yami [mailto:madhavikulks at gmail.com] 
Sent: Friday, April 10, 2009 7:41 AM
To: Bruce Mayhew
Cc: owasp-webgoat at lists.owasp.org
Subject: Re: [Owasp-webgoat] please let me know

 

Hi Bruce,

Thanks for the reply
Have attached screen shot of what it shows after starting tomcat.
If i browse http://localhost/  i get 403 forbidden
So that means tomcat is not running properly right , how can i fix this?

thanks,
Madhavi

On Fri, Apr 10, 2009 at 5:04 PM, Bruce Mayhew
<Bruce.Mayhew at ouncelabs.com> wrote:

Madhavi, look at the output from the tomcat startup window.  Are there
any errors in the startup of Tomcat?

Try browsing to http://localhost/  to see if tomcat is running

Bruce



-----Original Message-----
From: owasp-webgoat-bounces at lists.owasp.org
[mailto:owasp-webgoat-bounces at lists.owasp.org] On Behalf Of Madhavi Yami
Sent: Friday, April 10, 2009 6:57 AM
To: owasp-webgoat at lists.owasp.org
Subject: [Owasp-webgoat] please let me know

Hey All,

I am trying to install webgoat on my machine , i took the zip file from
owasp  WebGoat-OWASP_Standard-5.2 , unzipped it , and started the tomcat
,
then i am trying to hit http://localhost/WebGoat/attack , i get page
cannot
be found.
Then i tried giving my ip address in tomcat / conf server_80 xml file
with
that also i ahve the same result.
                                Next i tried what is given in the
readme
like renaming  the war file  and deleting the webgoat folder, nothing is
working
Actually i had tried this two months back and was able to succesfully do
most of the lessons , suddenly when i am trying after 2 months i am not
able
to set up webgoat.
Please let me know what might be the problem.

Thanks,
Madhavi

_______________________________________________
Owasp-webgoat mailing list
Owasp-webgoat at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-webgoat

 


From madhavikulks at gmail.com  Fri Apr 10 07:49:44 2009
From: madhavikulks at gmail.com (Madhavi Yami)
Date: Fri, 10 Apr 2009 17:19:44 +0530
Subject: [Owasp-webgoat] please let me know
In-Reply-To: <9DF4DCB48693534A986B344B0BF89DDB03BDF204@ligament.Ounce.local>
References: <7f48585f0904100356u37543aaes534b048f4eb043ed@mail.gmail.com>
	<9DF4DCB48693534A986B344B0BF89DDB03BDF200@ligament.Ounce.local>
	<7f48585f0904100441r683c4f88p97b62674f5396821@mail.gmail.com>
	<9DF4DCB48693534A986B344B0BF89DDB03BDF204@ligament.Ounce.local>
Message-ID: <7f48585f0904100449l2e36e289sa26565d204139fda@mail.gmail.com>

Hey Bruce,

Thanks so much it worked i got it, i spent so much time almost half day .
Will ping back if i get some other problems

thanks,
Madhavi

On Fri, Apr 10, 2009 at 5:16 PM, Bruce Mayhew <Bruce.Mayhew at ouncelabs.com>wrote:

>  You have another process running on port 80.  It is most likely IIS.  You
> can run the webgoat_8080.bat to start WebGoat on port 8080.  Browse to
> http://localhost:8080/WebGoat/attack to access WebGoat.  The other
> alternative is to stop the server running on port 80.
>
>
>
> *From:* Madhavi Yami [mailto:madhavikulks at gmail.com]
> *Sent:* Friday, April 10, 2009 7:41 AM
> *To:* Bruce Mayhew
> *Cc:* owasp-webgoat at lists.owasp.org
> *Subject:* Re: [Owasp-webgoat] please let me know
>
>
>
> Hi Bruce,
>
> Thanks for the reply
> Have attached screen shot of what it shows after starting tomcat.
> If i browse http://localhost/  i get 403 forbidden
> So that means tomcat is not running properly right , how can i fix this?
>
> thanks,
> Madhavi
>
> On Fri, Apr 10, 2009 at 5:04 PM, Bruce Mayhew <Bruce.Mayhew at ouncelabs.com>
> wrote:
>
> Madhavi, look at the output from the tomcat startup window.  Are there
> any errors in the startup of Tomcat?
>
> Try browsing to http://localhost/  to see if tomcat is running
>
> Bruce
>
>
>
> -----Original Message-----
> From: owasp-webgoat-bounces at lists.owasp.org
> [mailto:owasp-webgoat-bounces at lists.owasp.org] On Behalf Of Madhavi Yami
> Sent: Friday, April 10, 2009 6:57 AM
> To: owasp-webgoat at lists.owasp.org
> Subject: [Owasp-webgoat] please let me know
>
> Hey All,
>
> I am trying to install webgoat on my machine , i took the zip file from
> owasp  WebGoat-OWASP_Standard-5.2 , unzipped it , and started the tomcat
> ,
> then i am trying to hit http://localhost/WebGoat/attack , i get page
> cannot
> be found.
> Then i tried giving my ip address in tomcat / conf server_80 xml file
> with
> that also i ahve the same result.
>                                 Next i tried what is given in the
> readme
> like renaming  the war file  and deleting the webgoat folder, nothing is
> working
> Actually i had tried this two months back and was able to succesfully do
> most of the lessons , suddenly when i am trying after 2 months i am not
> able
> to set up webgoat.
> Please let me know what might be the problem.
>
> Thanks,
> Madhavi
>
> _______________________________________________
> Owasp-webgoat mailing list
> Owasp-webgoat at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-webgoat
>
>
>

From longyin20051764 at gmail.com  Sun Apr 12 22:57:32 2009
From: longyin20051764 at gmail.com (long yin)
Date: Mon, 13 Apr 2009 10:57:32 +0800
Subject: [Owasp-webgoat] HOW CAN I DO?
Message-ID: <d9ea96ba0904121957x7ccf87eeh69a53c2bb7e5833b@mail.gmail.com>

I  want to change the WebGoat programe's language into chinese .How can i do
that????

-- 
NEVER GIVE UP NEVER SAY DIE

From benjamin.ernst at unifr.ch  Tue Apr 14 08:48:07 2009
From: benjamin.ernst at unifr.ch (Benjamin Ernst)
Date: Tue, 14 Apr 2009 14:48:07 +0200
Subject: [Owasp-webgoat] Tomcat server doesn't start properly
Message-ID: <49E48607.1000100@unifr.ch>

I have a "little" issue with WebGoat and running the Tomcat server. 
Eventhough everything worked perfectly in the past suddenly I got the 
error messages posted below.
Trying to copy the keystore file to the location supplied in the error 
message didn't solve the problem either.
The server seems to start properly and I can use the WebGoat as long as 
the timeout hasn't been reached.
Does anyone of you know the solution to my problem?

Error:

Apr 14, 2009 2:34:50 PM org.apache.coyote.http11.Http11Protocol init
INFO: Initializing Coyote HTTP/1.1 on http-127.0.0.1-80
Apr 14, 2009 2:34:50 PM org.apache.coyote.http11.Http11Protocol init
SEVERE: Error initializing endpoint
java.io.FileNotFoundException: 
C:\WebGoat-5.2\WebGoat_5_2_workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\.keystore 
(The system cannot find the file specified)
    at java.io.FileInputStream.open(Native Method)
    at java.io.FileInputStream.<init>(FileInputStream.java:106)
    at 
org.apache.tomcat.util.net.jsse.JSSESocketFactory.getStore(JSSESocketFactory.java:278)
    at 
org.apache.tomcat.util.net.jsse.JSSESocketFactory.getKeystore(JSSESocketFactory.java:222)
    at 
org.apache.tomcat.util.net.jsse.JSSE14SocketFactory.getKeyManagers(JSSE14SocketFactory.java:141)
    at 
org.apache.tomcat.util.net.jsse.JSSE14SocketFactory.init(JSSE14SocketFactory.java:109)
    at 
org.apache.tomcat.util.net.jsse.JSSESocketFactory.createSocket(JSSESocketFactory.java:98)
    at 
org.apache.tomcat.util.net.PoolTcpEndpoint.initEndpoint(PoolTcpEndpoint.java:294)
    at org.apache.coyote.http11.Http11Protocol.init(Http11Protocol.java:137)
    at 
org.apache.catalina.connector.Connector.initialize(Connector.java:920)
    at 
org.apache.catalina.core.StandardService.initialize(StandardService.java:579)
    at 
org.apache.catalina.core.StandardServer.initialize(StandardServer.java:2091)
    at org.apache.catalina.startup.Catalina.load(Catalina.java:490)
    at org.apache.catalina.startup.Catalina.load(Catalina.java:509)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at 
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at 
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at org.apache.catalina.startup.Bootstrap.load(Bootstrap.java:243)
    at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:408)
Apr 14, 2009 2:34:50 PM org.apache.catalina.startup.Catalina load
SEVERE: Catalina.start
LifecycleException:  Protocol handler initialization failed: 
java.io.FileNotFoundException: 
C:\WebGoat-5.2\WebGoat_5_2_workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\.keystore 
(The system cannot find the file specified)
    at 
org.apache.catalina.connector.Connector.initialize(Connector.java:922)
    at 
org.apache.catalina.core.StandardService.initialize(StandardService.java:579)
    at 
org.apache.catalina.core.StandardServer.initialize(StandardServer.java:2091)
    at org.apache.catalina.startup.Catalina.load(Catalina.java:490)
    at org.apache.catalina.startup.Catalina.load(Catalina.java:509)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at 
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at 
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at org.apache.catalina.startup.Bootstrap.load(Bootstrap.java:243)
    at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:408)
Apr 14, 2009 2:34:50 PM org.apache.catalina.startup.Catalina load
INFO: Initialization processed in 375 ms
Apr 14, 2009 2:34:50 PM org.apache.catalina.core.StandardService start
INFO: Starting service Catalina
Apr 14, 2009 2:34:50 PM org.apache.catalina.core.StandardEngine start
INFO: Starting Servlet Engine: Apache Tomcat/5.5.4
Apr 14, 2009 2:34:50 PM org.apache.catalina.core.StandardHost start
INFO: XML validation disabled
Apr 14, 2009 2:34:51 PM org.apache.coyote.http11.Http11Protocol start
INFO: Starting Coyote HTTP/1.1 on http-127.0.0.1-80
Apr 14, 2009 2:34:51 PM org.apache.coyote.http11.Http11Protocol start
SEVERE: Error starting endpoint
java.io.FileNotFoundException: 
C:\WebGoat-5.2\WebGoat_5_2_workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\.keystore 
(The system cannot find the file specified)
    at java.io.FileInputStream.open(Native Method)
    at java.io.FileInputStream.<init>(FileInputStream.java:106)
    at 
org.apache.tomcat.util.net.jsse.JSSESocketFactory.getStore(JSSESocketFactory.java:278)
    at 
org.apache.tomcat.util.net.jsse.JSSESocketFactory.getKeystore(JSSESocketFactory.java:222)
    at 
org.apache.tomcat.util.net.jsse.JSSE14SocketFactory.getKeyManagers(JSSE14SocketFactory.java:141)
    at 
org.apache.tomcat.util.net.jsse.JSSE14SocketFactory.init(JSSE14SocketFactory.java:109)
    at 
org.apache.tomcat.util.net.jsse.JSSESocketFactory.createSocket(JSSESocketFactory.java:98)
    at 
org.apache.tomcat.util.net.PoolTcpEndpoint.initEndpoint(PoolTcpEndpoint.java:294)
    at 
org.apache.tomcat.util.net.PoolTcpEndpoint.startEndpoint(PoolTcpEndpoint.java:312)
    at 
org.apache.coyote.http11.Http11Protocol.start(Http11Protocol.java:176)
    at org.apache.catalina.connector.Connector.start(Connector.java:992)
    at 
org.apache.catalina.core.StandardService.start(StandardService.java:459)
    at 
org.apache.catalina.core.StandardServer.start(StandardServer.java:2010)
    at org.apache.catalina.startup.Catalina.start(Catalina.java:537)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at 
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at 
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:271)
    at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:409)
Apr 14, 2009 2:34:51 PM org.apache.catalina.startup.Catalina start
SEVERE: Catalina.start:
LifecycleException:  Protocol handler start failed: 
java.io.FileNotFoundException: 
C:\WebGoat-5.2\WebGoat_5_2_workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\.keystore 
(The system cannot find the file specified)
    at org.apache.catalina.connector.Connector.start(Connector.java:994)
    at 
org.apache.catalina.core.StandardService.start(StandardService.java:459)
    at 
org.apache.catalina.core.StandardServer.start(StandardServer.java:2010)
    at org.apache.catalina.startup.Catalina.start(Catalina.java:537)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at 
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at 
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:271)
    at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:409)
Apr 14, 2009 2:34:51 PM org.apache.catalina.startup.Catalina start
INFO: Server startup in 920 ms

From gregory at is.naist.jp  Wed Apr 15 04:16:00 2009
From: gregory at is.naist.jp (gregory at is.naist.jp)
Date: Wed, 15 Apr 2009 17:16:00 +0900
Subject: [Owasp-webgoat] stealthy client-side DOM-based cross-site scripting
Message-ID: <f6c9c86f2272.49e61650@naist.jp>

Hello,

I am currently using the version 5.2 of OWASP WebGoat.
I am particularly interested in AJAX security and one major XSS threat
is the DOM-based one. However, I wanted to discuss the way the scenario
is presented in the lesson AJAX Security/LAB: DOM-based cross-site scripting"

First, because I do not understand the point of this lesson in the way
it is explained. It remains unclear how such an attack could occur given the
initial parsing of the webserver (removes every <,>," characters and some others).
Usually, DOM-based XSS is particularly prone to be triggered by a fished victim.
In this lesson, however, it seems that one should input already the JavaScript code
within the browser.

Second, because of that unclear scenario, a beginner may not be able to grab the idea
of DOM-based XSS.

Maybe, I am wrong somewhere but I was unable to provide the JavaScript payload without
specific characters (such as <,>) and was not able to inject it on the browser, preventing
the server side from seeing it, on top of that without the victim doing a thing.

I tried submitting a link which would get parsed by the server removing specific characters.
I tried embedding it in an iframe and consequently inject it using JavaScript which does
not work since my crafted webpage was not allowed to grab the iframe contents.

I may miss some skills. Can anyone show me a way to conduct such an attack on the WebGoat
server in order to illustrate the DOM-based XSS attack since even the yehg.net solution video
is merely copy/pasting the payload in the input field (sounds a high level of social engineering
for subverting the user into inputting such an obvious payload...).

Regards,

Gregory BLANC.

From stephencraig.evans at gmail.com  Wed Apr 15 05:56:31 2009
From: stephencraig.evans at gmail.com (Stephen Craig Evans)
Date: Wed, 15 Apr 2009 17:56:31 +0800
Subject: [Owasp-webgoat] stealthy client-side DOM-based cross-site
	scripting
In-Reply-To: <f6c9c86f2272.49e61650@naist.jp>
References: <f6c9c86f2272.49e61650@naist.jp>
Message-ID: <930fd0230904150256v28e1d211u980b7b31c9c8531a@mail.gmail.com>

Hi Gregory,

You might check the WebGoat section of my project,  Securing WebGoat
using ModSecurity, at:
http://www.owasp.org/index.php/OWASP_Securing_WebGoat_using_ModSecurity_Project.

I give some detailed explanations that might supplement what you've seen so far.

(The project page is at:
https://www.owasp.org/index.php/Category:OWASP_Securing_WebGoat_using_ModSecurity_Project)

Don't worry, I am not getting paid for page hits :-)

Off the top of my head, some of the WebGoat lessons simulate the
demonstration of an attack, mainly because it's necessary, and some
IMHO take shortcuts - which I documented. In particular, there's a
lesson with the solution of typing in javascript in the browser's
address field, which simulates a user that clicks on a malicious link
in the web page.

It's impossible for WebGoat to accommodate every browser and browser
version, so there are going to be some quirks and you have to
experiment. One good habit is to erase the WebGoat cookies when
re-trying a lesson, and it's always good practice to switch back and
forth between at least 2 browsers; e.g. the AJAX lessons worked best
for me on Windows XP using Opera rather than IE and Firefox.

Stephen


On Wed, Apr 15, 2009 at 4:16 PM,  <gregory at is.naist.jp> wrote:
> Hello,
>
> I am currently using the version 5.2 of OWASP WebGoat.
> I am particularly interested in AJAX security and one major XSS threat
> is the DOM-based one. However, I wanted to discuss the way the scenario
> is presented in the lesson AJAX Security/LAB: DOM-based cross-site scripting"
>
> First, because I do not understand the point of this lesson in the way
> it is explained. It remains unclear how such an attack could occur given the
> initial parsing of the webserver (removes every <,>," characters and some others).
> Usually, DOM-based XSS is particularly prone to be triggered by a fished victim.
> In this lesson, however, it seems that one should input already the JavaScript code
> within the browser.
>
> Second, because of that unclear scenario, a beginner may not be able to grab the idea
> of DOM-based XSS.
>
> Maybe, I am wrong somewhere but I was unable to provide the JavaScript payload without
> specific characters (such as <,>) and was not able to inject it on the browser, preventing
> the server side from seeing it, on top of that without the victim doing a thing.
>
> I tried submitting a link which would get parsed by the server removing specific characters.
> I tried embedding it in an iframe and consequently inject it using JavaScript which does
> not work since my crafted webpage was not allowed to grab the iframe contents.
>
> I may miss some skills. Can anyone show me a way to conduct such an attack on the WebGoat
> server in order to illustrate the DOM-based XSS attack since even the yehg.net solution video
> is merely copy/pasting the payload in the input field (sounds a high level of social engineering
> for subverting the user into inputting such an obvious payload...).
>
> Regards,
>
> Gregory BLANC.
> _______________________________________________
> Owasp-webgoat mailing list
> Owasp-webgoat at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-webgoat
>



-- 
http://www.linkedin.com/in/stephencraigevans

From gregory at is.naist.jp  Wed Apr 15 08:36:41 2009
From: gregory at is.naist.jp (gregory at is.naist.jp)
Date: Wed, 15 Apr 2009 21:36:41 +0900
Subject: [Owasp-webgoat] stealthy client-side DOM-based
	cross-site	scripting
In-Reply-To: <930fd0230904150256v28e1d211u980b7b31c9c8531a@mail.gmail.com>
References: <f6c9c86f2272.49e61650@naist.jp>
	<930fd0230904150256v28e1d211u980b7b31c9c8531a@mail.gmail.com>
Message-ID: <f66cf98a2898.49e65369@naist.jp>

Hi Stephan,

I actually I read the paper of Ryan Barnett published at BH-DC09 on your work. It was
very inspiring for me as I am researching on the subject. Actually, I understand the fact
that it is difficult to provide a realistic environment and that is why I try as much as possible
creating attack websites with links that a victim would click in order to carry out  attacks on
WebGoat. 

However, my point here is that the incriminated lesson (AJAX security/Lab: DOM-based Cross-site
scripting) might be difficult to understand. The whole idea of DOM-based XSS is summarized
as an user inputting malicious payload to own herself. That is why one can get confused.
And it confuses me because it suggests that DOM-based is ultimately stealthy as it never
reaches the server. Is it true? I have never encountered such flavor though you can
find some circumvention techniques that would truncate some of the payload (usually the most
characteristic part) using characters such as #. 
(see http://www.thespanner.co.uk/2008/12/01/location-based-xss-attacks/ )

IMHO, if there were outside such stealthy DOM-based XSS attacks, there will be no way to mitigate
these on the server side or using a WAF. Maybe someone can enlighten me with some knowledge
I definitely do not have at the moment and that may have gone undetected to my research so far.

Sorry also for the length of my emails, it made these really difficult to understand. Next time I will
make it shorter.

Regards,

Gregory

----- Original Message -----
From: Stephen Craig Evans <stephencraig.evans at gmail.com>
Date: Wednesday, April 15, 2009 6:56 pm
Subject: Re: [Owasp-webgoat] stealthy client-side DOM-based cross-site	scripting

> Hi Gregory,
> 
> You might check the WebGoat section of my project,  Securing WebGoat
> using ModSecurity, at:
> http://www.owasp.org/index.php/OWASP_Securing_WebGoat_using_ModSecurity_Project.
> 
> I give some detailed explanations that might supplement what you've 
> seen so far.
> 
> (The project page is at:
> https://www.owasp.org/index.php/Category:OWASP_Securing_WebGoat_using_ModSecurity_Project)
> 
> Don't worry, I am not getting paid for page hits :-)
> 
> Off the top of my head, some of the WebGoat lessons simulate the
> demonstration of an attack, mainly because it's necessary, and some
> IMHO take shortcuts - which I documented. In particular, there's a
> lesson with the solution of typing in javascript in the browser's
> address field, which simulates a user that clicks on a malicious link
> in the web page.
> 
> It's impossible for WebGoat to accommodate every browser and browser
> version, so there are going to be some quirks and you have to
> experiment. One good habit is to erase the WebGoat cookies when
> re-trying a lesson, and it's always good practice to switch back and
> forth between at least 2 browsers; e.g. the AJAX lessons worked best
> for me on Windows XP using Opera rather than IE and Firefox.
> 
> Stephen
> 
> 
> On Wed, Apr 15, 2009 at 4:16 PM,  <gregory at is.naist.jp> wrote:
> > Hello,
> >
> > I am currently using the version 5.2 of OWASP WebGoat.
> > I am particularly interested in AJAX security and one major XSS 
> threat> is the DOM-based one. However, I wanted to discuss the way 
> the scenario
> > is presented in the lesson AJAX Security/LAB: DOM-based cross-
> site scripting"
> >
> > First, because I do not understand the point of this lesson in 
> the way
> > it is explained. It remains unclear how such an attack could 
> occur given the
> > initial parsing of the webserver (removes every <,>," characters 
> and some others).
> > Usually, DOM-based XSS is particularly prone to be triggered by a 
> fished victim.
> > In this lesson, however, it seems that one should input already 
> the JavaScript code
> > within the browser.
> >
> > Second, because of that unclear scenario, a beginner may not be 
> able to grab the idea
> > of DOM-based XSS.
> >
> > Maybe, I am wrong somewhere but I was unable to provide the 
> JavaScript payload without
> > specific characters (such as <,>) and was not able to inject it 
> on the browser, preventing
> > the server side from seeing it, on top of that without the victim 
> doing a thing.
> >
> > I tried submitting a link which would get parsed by the server 
> removing specific characters.
> > I tried embedding it in an iframe and consequently inject it 
> using JavaScript which does
> > not work since my crafted webpage was not allowed to grab the 
> iframe contents.
> >
> > I may miss some skills. Can anyone show me a way to conduct such 
> an attack on the WebGoat
> > server in order to illustrate the DOM-based XSS attack since even 
> the yehg.net solution video
> > is merely copy/pasting the payload in the input field (sounds a 
> high level of social engineering
> > for subverting the user into inputting such an obvious payload...).
> >
> > Regards,
> >
> > Gregory BLANC.
> > _______________________________________________
> > Owasp-webgoat mailing list
> > Owasp-webgoat at lists.owasp.org
> > https://lists.owasp.org/mailman/listinfo/owasp-webgoat
> >
> 
> 
> 
> -- 
> http://www.linkedin.com/in/stephencraigevans
> 

From Bruce.Mayhew at OunceLabs.com  Wed Apr 15 09:12:25 2009
From: Bruce.Mayhew at OunceLabs.com (Bruce Mayhew)
Date: Wed, 15 Apr 2009 09:12:25 -0400
Subject: [Owasp-webgoat] stealthy client-side
	DOM-basedcross-site	scripting
In-Reply-To: <f66cf98a2898.49e65369@naist.jp>
References: <f6c9c86f2272.49e61650@naist.jp><930fd0230904150256v28e1d211u980b7b31c9c8531a@mail.gmail.com>
	<f66cf98a2898.49e65369@naist.jp>
Message-ID: <9DF4DCB48693534A986B344B0BF89DDB03BDF65B@ligament.Ounce.local>

Gents,  When your done working out the merits or undesirable features of
the lesson, I encourage you to modify the lesson so the next person will
have an easier time of it.  This is what makes WebGoat better...  

The example I've seen the most for DOM-based XSS is the document.write
of parsed text from the URL string usually in an error handling feature.
I believe by definition the mitigation of DOM-based attacks has to occur
on the client since there is no "reflected" data communication to the
server for the attack to succeed.  The other mitigation alternative is
for the "server" side application to never send script that could be
used in a DOM-based XSS attack.  

Bruce

-----Original Message-----
From: owasp-webgoat-bounces at lists.owasp.org
[mailto:owasp-webgoat-bounces at lists.owasp.org] On Behalf Of
gregory at is.naist.jp
Sent: Wednesday, April 15, 2009 8:37 AM
To: owasp-webgoat at lists.owasp.org
Subject: Re: [Owasp-webgoat] stealthy client-side DOM-basedcross-site
scripting

Hi Stephan,

I actually I read the paper of Ryan Barnett published at BH-DC09 on your
work. It was
very inspiring for me as I am researching on the subject. Actually, I
understand the fact
that it is difficult to provide a realistic environment and that is why
I try as much as possible
creating attack websites with links that a victim would click in order
to carry out  attacks on
WebGoat. 

However, my point here is that the incriminated lesson (AJAX
security/Lab: DOM-based Cross-site
scripting) might be difficult to understand. The whole idea of DOM-based
XSS is summarized
as an user inputting malicious payload to own herself. That is why one
can get confused.
And it confuses me because it suggests that DOM-based is ultimately
stealthy as it never
reaches the server. Is it true? I have never encountered such flavor
though you can
find some circumvention techniques that would truncate some of the
payload (usually the most
characteristic part) using characters such as #. 
(see http://www.thespanner.co.uk/2008/12/01/location-based-xss-attacks/
)

IMHO, if there were outside such stealthy DOM-based XSS attacks, there
will be no way to mitigate
these on the server side or using a WAF. Maybe someone can enlighten me
with some knowledge
I definitely do not have at the moment and that may have gone undetected
to my research so far.

Sorry also for the length of my emails, it made these really difficult
to understand. Next time I will
make it shorter.

Regards,

Gregory

----- Original Message -----
From: Stephen Craig Evans <stephencraig.evans at gmail.com>
Date: Wednesday, April 15, 2009 6:56 pm
Subject: Re: [Owasp-webgoat] stealthy client-side DOM-based cross-site
scripting

> Hi Gregory,
> 
> You might check the WebGoat section of my project,  Securing WebGoat
> using ModSecurity, at:
>
http://www.owasp.org/index.php/OWASP_Securing_WebGoat_using_ModSecurity_
Project.
> 
> I give some detailed explanations that might supplement what you've 
> seen so far.
> 
> (The project page is at:
>
https://www.owasp.org/index.php/Category:OWASP_Securing_WebGoat_using_Mo
dSecurity_Project)
> 
> Don't worry, I am not getting paid for page hits :-)
> 
> Off the top of my head, some of the WebGoat lessons simulate the
> demonstration of an attack, mainly because it's necessary, and some
> IMHO take shortcuts - which I documented. In particular, there's a
> lesson with the solution of typing in javascript in the browser's
> address field, which simulates a user that clicks on a malicious link
> in the web page.
> 
> It's impossible for WebGoat to accommodate every browser and browser
> version, so there are going to be some quirks and you have to
> experiment. One good habit is to erase the WebGoat cookies when
> re-trying a lesson, and it's always good practice to switch back and
> forth between at least 2 browsers; e.g. the AJAX lessons worked best
> for me on Windows XP using Opera rather than IE and Firefox.
> 
> Stephen
> 
> 
> On Wed, Apr 15, 2009 at 4:16 PM,  <gregory at is.naist.jp> wrote:
> > Hello,
> >
> > I am currently using the version 5.2 of OWASP WebGoat.
> > I am particularly interested in AJAX security and one major XSS 
> threat> is the DOM-based one. However, I wanted to discuss the way 
> the scenario
> > is presented in the lesson AJAX Security/LAB: DOM-based cross-
> site scripting"
> >
> > First, because I do not understand the point of this lesson in 
> the way
> > it is explained. It remains unclear how such an attack could 
> occur given the
> > initial parsing of the webserver (removes every <,>," characters 
> and some others).
> > Usually, DOM-based XSS is particularly prone to be triggered by a 
> fished victim.
> > In this lesson, however, it seems that one should input already 
> the JavaScript code
> > within the browser.
> >
> > Second, because of that unclear scenario, a beginner may not be 
> able to grab the idea
> > of DOM-based XSS.
> >
> > Maybe, I am wrong somewhere but I was unable to provide the 
> JavaScript payload without
> > specific characters (such as <,>) and was not able to inject it 
> on the browser, preventing
> > the server side from seeing it, on top of that without the victim 
> doing a thing.
> >
> > I tried submitting a link which would get parsed by the server 
> removing specific characters.
> > I tried embedding it in an iframe and consequently inject it 
> using JavaScript which does
> > not work since my crafted webpage was not allowed to grab the 
> iframe contents.
> >
> > I may miss some skills. Can anyone show me a way to conduct such 
> an attack on the WebGoat
> > server in order to illustrate the DOM-based XSS attack since even 
> the yehg.net solution video
> > is merely copy/pasting the payload in the input field (sounds a 
> high level of social engineering
> > for subverting the user into inputting such an obvious payload...).
> >
> > Regards,
> >
> > Gregory BLANC.
> > _______________________________________________
> > Owasp-webgoat mailing list
> > Owasp-webgoat at lists.owasp.org
> > https://lists.owasp.org/mailman/listinfo/owasp-webgoat
> >
> 
> 
> 
> -- 
> http://www.linkedin.com/in/stephencraigevans
> 
_______________________________________________
Owasp-webgoat mailing list
Owasp-webgoat at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-webgoat

From benjamin.ernst at unifr.ch  Wed Apr 15 09:23:03 2009
From: benjamin.ernst at unifr.ch (Benjamin Ernst)
Date: Wed, 15 Apr 2009 15:23:03 +0200
Subject: [Owasp-webgoat] stealthy client-side
	DOM-based	cross-site	scripting
In-Reply-To: <f66cf98a2898.49e65369@naist.jp>
References: <f6c9c86f2272.49e61650@naist.jp>	<930fd0230904150256v28e1d211u980b7b31c9c8531a@mail.gmail.com>
	<f66cf98a2898.49e65369@naist.jp>
Message-ID: <49E5DFB7.6080001@unifr.ch>

Hey gregory,

You are totally right with the assumption that DOM-based XSS are never 
reaching the server. Basically what this type of XSS exploits is the 
fact that
the AJAX code supplied by the application is vulnerable. Amit Klein has 
written a great paper on DOM XSS (link below)
Take for instance this code (also in Amit's paper) where the name 
parameter is supplied in the URL. Using the DOM the value is retrieved 
and passed
without filtration to the html part of the document. Now you can change 
the name to <script>alert('foo')</script> and there you go with your DOM 
based XSS.

<HTML>
<TITLE>Welcome!</TITLE>
Hi
<SCRIPT>
var pos=document.URL.indexOf(?name=?)+5;
document.write(document.URL.substring(pos,document.URL.length));
</SCRIPT>
<BR>
Welcome to our system
?
</HTML>

Since all the manipulation was done within the client, the server is 
never notified.
DOM XSS are "stealthy" because the server doesn't pick up any trace of 
the attack (there is nothing to log if there is no client request)

Client makes a page request to the server -> Server sends response page 
(including the vulnerable Ajax part. For instance parsing some URL value 
without sanitizing the input) -> DOM makes the client side magic (here 
getting the URL name parameter) -> the page is displayed with the 
exploit code triggering the XSS attack.

I suck at explaining but I hope you get the point :)

As for your problem with the way WebGoat explains DOM based XSS.
It's true that the explanation is kind of weird but you'll find that the 
function used in order to display the name is actually executed only by 
client.
Which makes it a DOM based XSS...

function displayGreeting(name) {

	if (name != ''){

		document.getElementById("greeting").innerHTML="Hello, " + escapeHTML(name)+ "!";

	}

}


If you want a nice explanation on DOM based XSS
Here is Amit Klein's paper: 
http://www.webappsec.org/projects/articles/071105.shtml
And I can also highly recommend the book "Cross Site Scripting Attacks 
and Defense" or something like that (Syngress)

Hope I could help

Benjamin


gregory at is.naist.jp wrote:
> Hi Stephan,
>
> I actually I read the paper of Ryan Barnett published at BH-DC09 on your work. It was
> very inspiring for me as I am researching on the subject. Actually, I understand the fact
> that it is difficult to provide a realistic environment and that is why I try as much as possible
> creating attack websites with links that a victim would click in order to carry out  attacks on
> WebGoat. 
>
> However, my point here is that the incriminated lesson (AJAX security/Lab: DOM-based Cross-site
> scripting) might be difficult to understand. The whole idea of DOM-based XSS is summarized
> as an user inputting malicious payload to own herself. That is why one can get confused.
> And it confuses me because it suggests that DOM-based is ultimately stealthy as it never
> reaches the server. Is it true? I have never encountered such flavor though you can
> find some circumvention techniques that would truncate some of the payload (usually the most
> characteristic part) using characters such as #. 
> (see http://www.thespanner.co.uk/2008/12/01/location-based-xss-attacks/ )
>
> IMHO, if there were outside such stealthy DOM-based XSS attacks, there will be no way to mitigate
> these on the server side or using a WAF. Maybe someone can enlighten me with some knowledge
> I definitely do not have at the moment and that may have gone undetected to my research so far.
>
> Sorry also for the length of my emails, it made these really difficult to understand. Next time I will
> make it shorter.
>
> Regards,
>
> Gregory
>
> ----- Original Message -----
> From: Stephen Craig Evans <stephencraig.evans at gmail.com>
> Date: Wednesday, April 15, 2009 6:56 pm
> Subject: Re: [Owasp-webgoat] stealthy client-side DOM-based cross-site	scripting
>
>   
>> Hi Gregory,
>>
>> You might check the WebGoat section of my project,  Securing WebGoat
>> using ModSecurity, at:
>> http://www.owasp.org/index.php/OWASP_Securing_WebGoat_using_ModSecurity_Project.
>>
>> I give some detailed explanations that might supplement what you've 
>> seen so far.
>>
>> (The project page is at:
>> https://www.owasp.org/index.php/Category:OWASP_Securing_WebGoat_using_ModSecurity_Project)
>>
>> Don't worry, I am not getting paid for page hits :-)
>>
>> Off the top of my head, some of the WebGoat lessons simulate the
>> demonstration of an attack, mainly because it's necessary, and some
>> IMHO take shortcuts - which I documented. In particular, there's a
>> lesson with the solution of typing in javascript in the browser's
>> address field, which simulates a user that clicks on a malicious link
>> in the web page.
>>
>> It's impossible for WebGoat to accommodate every browser and browser
>> version, so there are going to be some quirks and you have to
>> experiment. One good habit is to erase the WebGoat cookies when
>> re-trying a lesson, and it's always good practice to switch back and
>> forth between at least 2 browsers; e.g. the AJAX lessons worked best
>> for me on Windows XP using Opera rather than IE and Firefox.
>>
>> Stephen
>>
>>
>> On Wed, Apr 15, 2009 at 4:16 PM,  <gregory at is.naist.jp> wrote:
>>     
>>> Hello,
>>>
>>> I am currently using the version 5.2 of OWASP WebGoat.
>>> I am particularly interested in AJAX security and one major XSS 
>>>       
>> threat> is the DOM-based one. However, I wanted to discuss the way 
>> the scenario
>>     
>>> is presented in the lesson AJAX Security/LAB: DOM-based cross-
>>>       
>> site scripting"
>>     
>>> First, because I do not understand the point of this lesson in 
>>>       
>> the way
>>     
>>> it is explained. It remains unclear how such an attack could 
>>>       
>> occur given the
>>     
>>> initial parsing of the webserver (removes every <,>," characters 
>>>       
>> and some others).
>>     
>>> Usually, DOM-based XSS is particularly prone to be triggered by a 
>>>       
>> fished victim.
>>     
>>> In this lesson, however, it seems that one should input already 
>>>       
>> the JavaScript code
>>     
>>> within the browser.
>>>
>>> Second, because of that unclear scenario, a beginner may not be 
>>>       
>> able to grab the idea
>>     
>>> of DOM-based XSS.
>>>
>>> Maybe, I am wrong somewhere but I was unable to provide the 
>>>       
>> JavaScript payload without
>>     
>>> specific characters (such as <,>) and was not able to inject it 
>>>       
>> on the browser, preventing
>>     
>>> the server side from seeing it, on top of that without the victim 
>>>       
>> doing a thing.
>>     
>>> I tried submitting a link which would get parsed by the server 
>>>       
>> removing specific characters.
>>     
>>> I tried embedding it in an iframe and consequently inject it 
>>>       
>> using JavaScript which does
>>     
>>> not work since my crafted webpage was not allowed to grab the 
>>>       
>> iframe contents.
>>     
>>> I may miss some skills. Can anyone show me a way to conduct such 
>>>       
>> an attack on the WebGoat
>>     
>>> server in order to illustrate the DOM-based XSS attack since even 
>>>       
>> the yehg.net solution video
>>     
>>> is merely copy/pasting the payload in the input field (sounds a 
>>>       
>> high level of social engineering
>>     
>>> for subverting the user into inputting such an obvious payload...).
>>>
>>> Regards,
>>>
>>> Gregory BLANC.
>>> _______________________________________________
>>> Owasp-webgoat mailing list
>>> Owasp-webgoat at lists.owasp.org
>>> https://lists.owasp.org/mailman/listinfo/owasp-webgoat
>>>
>>>       
>>
>> -- 
>> http://www.linkedin.com/in/stephencraigevans
>>
>>     
> _______________________________________________
> Owasp-webgoat mailing list
> Owasp-webgoat at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-webgoat
>
>   


From gregory at is.naist.jp  Wed Apr 15 10:14:17 2009
From: gregory at is.naist.jp (gregory at is.naist.jp)
Date: Wed, 15 Apr 2009 23:14:17 +0900
Subject: [Owasp-webgoat] stealthy client-side
	DOM-based	cross-site	scripting
In-Reply-To: <49E5DFB7.6080001@unifr.ch>
References: <f6c9c86f2272.49e61650@naist.jp>
	<930fd0230904150256v28e1d211u980b7b31c9c8531a@mail.gmail.com>
	<f66cf98a2898.49e65369@naist.jp> <49E5DFB7.6080001@unifr.ch>
Message-ID: <f6d5d1ab6576.49e66a49@naist.jp>

Hello everyone,

thank you for your replies. Actually Benjamin you made it clear to me. Of course I also
came across Amit Klein's paper and noticed that the WebGoat's DOM-based XSS
vulnerability was similar to the sample you provided from Klein's paper.

Actually, it is the fact that I failed to reproduce such an attack that made me to doubt
from the stealthiness of such attacks.

Also, the lesson is well designed and there is no problem with it since it has all
the essential features that make a DOM-based XSS vulnerability.

Moreover, as Bruce highlighted, the mitigation has to be done on the server side,
though it is still vulnerable to JavaScript clobbering. The lesson actually shows it
very well in the second part in which I think the novice user would get the idea.

As for the first part, it is just that the user is made to always input malicious data
to own herself which is confusing. On a few other lessons, it is specified that such
kind of attacks do occur due to a user clicking on a maliciously crafted link or provided
with malicious scripts while visiting a malicious website. Here is not the case.
This is not undesirable feature but a lack of explanation IMHO. 

Anyway, all your replies helped me greatly.

Thank you very much.

Gregory

----- Original Message -----
From: Benjamin Ernst <benjamin.ernst at unifr.ch>
Date: Wednesday, April 15, 2009 10:23 pm
Subject: Re: [Owasp-webgoat] stealthy client-side DOM-based	cross-site	scripting

> Hey gregory,
> 
> You are totally right with the assumption that DOM-based XSS are 
> never 
> reaching the server. Basically what this type of XSS exploits is 
> the 
> fact that
> the AJAX code supplied by the application is vulnerable. Amit Klein 
> has 
> written a great paper on DOM XSS (link below)
> Take for instance this code (also in Amit's paper) where the name 
> parameter is supplied in the URL. Using the DOM the value is 
> retrieved 
> and passed
> without filtration to the html part of the document. Now you can 
> change 
> the name to <script>alert('foo')</script> and there you go with 
> your DOM 
> based XSS.
> 
> <HTML>
> <TITLE>Welcome!</TITLE>
> Hi
> <SCRIPT>
> var pos=document.URL.indexOf(?name=?)+5;
> document.write(document.URL.substring(pos,document.URL.length));
> </SCRIPT>
> <BR>
> Welcome to our system
> ?
> </HTML>
> 
> Since all the manipulation was done within the client, the server 
> is 
> never notified.
> DOM XSS are "stealthy" because the server doesn't pick up any trace 
> of 
> the attack (there is nothing to log if there is no client request)
> 
> Client makes a page request to the server -> Server sends response 
> page 
> (including the vulnerable Ajax part. For instance parsing some URL 
> value 
> without sanitizing the input) -> DOM makes the client side magic 
> (here 
> getting the URL name parameter) -> the page is displayed with the 
> exploit code triggering the XSS attack.
> 
> I suck at explaining but I hope you get the point :)
> 
> As for your problem with the way WebGoat explains DOM based XSS.
> It's true that the explanation is kind of weird but you'll find 
> that the 
> function used in order to display the name is actually executed 
> only by 
> client.
> Which makes it a DOM based XSS...
> 
> function displayGreeting(name) {
> 
> 	if (name != ''){
> 
>        	document.getElementById("greeting").innerHTML="Hello, " + 
> escapeHTML(name)+ "!";
> 
> 	}
> 
> }
> 
> 
> If you want a nice explanation on DOM based XSS
> Here is Amit Klein's paper: 
> http://www.webappsec.org/projects/articles/071105.shtml
> And I can also highly recommend the book "Cross Site Scripting 
> Attacks 
> and Defense" or something like that (Syngress)
> 
> Hope I could help
> 
> Benjamin
> 
> 
> gregory at is.naist.jp wrote:
> > Hi Stephan,
> >
> > I actually I read the paper of Ryan Barnett published at BH-DC09 
> on your work. It was
> > very inspiring for me as I am researching on the subject. 
> Actually, I understand the fact
> > that it is difficult to provide a realistic environment and that 
> is why I try as much as possible
> > creating attack websites with links that a victim would click in 
> order to carry out  attacks on
> > WebGoat. 
> >
> > However, my point here is that the incriminated lesson (AJAX 
> security/Lab: DOM-based Cross-site
> > scripting) might be difficult to understand. The whole idea of 
> DOM-based XSS is summarized
> > as an user inputting malicious payload to own herself. That is 
> why one can get confused.
> > And it confuses me because it suggests that DOM-based is 
> ultimately stealthy as it never
> > reaches the server. Is it true? I have never encountered such 
> flavor though you can
> > find some circumvention techniques that would truncate some of 
> the payload (usually the most
> > characteristic part) using characters such as #. 
> > (see http://www.thespanner.co.uk/2008/12/01/location-based-xss-
> attacks/ )
> >
> > IMHO, if there were outside such stealthy DOM-based XSS attacks, 
> there will be no way to mitigate
> > these on the server side or using a WAF. Maybe someone can 
> enlighten me with some knowledge
> > I definitely do not have at the moment and that may have gone 
> undetected to my research so far.
> >
> > Sorry also for the length of my emails, it made these really 
> difficult to understand. Next time I will
> > make it shorter.
> >
> > Regards,
> >
> > Gregory
> >
> > ----- Original Message -----
> > From: Stephen Craig Evans <stephencraig.evans at gmail.com>
> > Date: Wednesday, April 15, 2009 6:56 pm
> > Subject: Re: [Owasp-webgoat] stealthy client-side DOM-based cross-
> site	scripting>
> >   
> >> Hi Gregory,
> >>
> >> You might check the WebGoat section of my project,  Securing 
> WebGoat>> using ModSecurity, at:
> >> 
> http://www.owasp.org/index.php/OWASP_Securing_WebGoat_using_ModSecurity_Project.>>
> >> I give some detailed explanations that might supplement what 
> you've 
> >> seen so far.
> >>
> >> (The project page is at:
> >> 
> https://www.owasp.org/index.php/Category:OWASP_Securing_WebGoat_using_ModSecurity_Project)>>
> >> Don't worry, I am not getting paid for page hits :-)
> >>
> >> Off the top of my head, some of the WebGoat lessons simulate the
> >> demonstration of an attack, mainly because it's necessary, and some
> >> IMHO take shortcuts - which I documented. In particular, there's a
> >> lesson with the solution of typing in javascript in the browser's
> >> address field, which simulates a user that clicks on a malicious 
> link>> in the web page.
> >>
> >> It's impossible for WebGoat to accommodate every browser and 
> browser>> version, so there are going to be some quirks and you 
> have to
> >> experiment. One good habit is to erase the WebGoat cookies when
> >> re-trying a lesson, and it's always good practice to switch back 
> and>> forth between at least 2 browsers; e.g. the AJAX lessons 
> worked best
> >> for me on Windows XP using Opera rather than IE and Firefox.
> >>
> >> Stephen
> >>
> >>
> >> On Wed, Apr 15, 2009 at 4:16 PM,  <gregory at is.naist.jp> wrote:
> >>     
> >>> Hello,
> >>>
> >>> I am currently using the version 5.2 of OWASP WebGoat.
> >>> I am particularly interested in AJAX security and one major XSS 
> >>>       
> >> threat> is the DOM-based one. However, I wanted to discuss the 
> way 
> >> the scenario
> >>     
> >>> is presented in the lesson AJAX Security/LAB: DOM-based cross-
> >>>       
> >> site scripting"
> >>     
> >>> First, because I do not understand the point of this lesson in 
> >>>       
> >> the way
> >>     
> >>> it is explained. It remains unclear how such an attack could 
> >>>       
> >> occur given the
> >>     
> >>> initial parsing of the webserver (removes every <,>," 
> characters 
> >>>       
> >> and some others).
> >>     
> >>> Usually, DOM-based XSS is particularly prone to be triggered by 
> a 
> >>>       
> >> fished victim.
> >>     
> >>> In this lesson, however, it seems that one should input already 
> >>>       
> >> the JavaScript code
> >>     
> >>> within the browser.
> >>>
> >>> Second, because of that unclear scenario, a beginner may not be 
> >>>       
> >> able to grab the idea
> >>     
> >>> of DOM-based XSS.
> >>>
> >>> Maybe, I am wrong somewhere but I was unable to provide the 
> >>>       
> >> JavaScript payload without
> >>     
> >>> specific characters (such as <,>) and was not able to inject it 
> >>>       
> >> on the browser, preventing
> >>     
> >>> the server side from seeing it, on top of that without the 
> victim 
> >>>       
> >> doing a thing.
> >>     
> >>> I tried submitting a link which would get parsed by the server 
> >>>       
> >> removing specific characters.
> >>     
> >>> I tried embedding it in an iframe and consequently inject it 
> >>>       
> >> using JavaScript which does
> >>     
> >>> not work since my crafted webpage was not allowed to grab the 
> >>>       
> >> iframe contents.
> >>     
> >>> I may miss some skills. Can anyone show me a way to conduct 
> such 
> >>>       
> >> an attack on the WebGoat
> >>     
> >>> server in order to illustrate the DOM-based XSS attack since 
> even 
> >>>       
> >> the yehg.net solution video
> >>     
> >>> is merely copy/pasting the payload in the input field (sounds a 
> >>>       
> >> high level of social engineering
> >>     
> >>> for subverting the user into inputting such an obvious 
> payload...).>>>
> >>> Regards,
> >>>
> >>> Gregory BLANC.
> >>> _______________________________________________
> >>> Owasp-webgoat mailing list
> >>> Owasp-webgoat at lists.owasp.org
> >>> https://lists.owasp.org/mailman/listinfo/owasp-webgoat
> >>>
> >>>       
> >>
> >> -- 
> >> http://www.linkedin.com/in/stephencraigevans
> >>
> >>     
> > _______________________________________________
> > Owasp-webgoat mailing list
> > Owasp-webgoat at lists.owasp.org
> > https://lists.owasp.org/mailman/listinfo/owasp-webgoat
> >
> >   
> 
> 

From Bruce.Mayhew at OunceLabs.com  Wed Apr 15 10:20:25 2009
From: Bruce.Mayhew at OunceLabs.com (Bruce Mayhew)
Date: Wed, 15 Apr 2009 10:20:25 -0400
Subject: [Owasp-webgoat] stealthy
	client-sideDOM-based	cross-site	scripting
In-Reply-To: <f6d5d1ab6576.49e66a49@naist.jp>
References: <f6c9c86f2272.49e61650@naist.jp><930fd0230904150256v28e1d211u980b7b31c9c8531a@mail.gmail.com><f66cf98a2898.49e65369@naist.jp>
	<49E5DFB7.6080001@unifr.ch> <f6d5d1ab6576.49e66a49@naist.jp>
Message-ID: <9DF4DCB48693534A986B344B0BF89DDB03BDF693@ligament.Ounce.local>

Hi Gregory

Just to clarify a bit.  The mitigation can occur on the client side by
performing positive validation on the parsed text before the
document.write() call.  The mitigation occurs on the server by not
allowing the application to have these exploits in the first place.

Bruce 

-----Original Message-----
From: owasp-webgoat-bounces at lists.owasp.org
[mailto:owasp-webgoat-bounces at lists.owasp.org] On Behalf Of
gregory at is.naist.jp
Sent: Wednesday, April 15, 2009 10:14 AM
To: owasp-webgoat at lists.owasp.org
Subject: Re: [Owasp-webgoat] stealthy client-sideDOM-based cross-site
scripting

Hello everyone,

thank you for your replies. Actually Benjamin you made it clear to me.
Of course I also
came across Amit Klein's paper and noticed that the WebGoat's DOM-based
XSS
vulnerability was similar to the sample you provided from Klein's paper.

Actually, it is the fact that I failed to reproduce such an attack that
made me to doubt
from the stealthiness of such attacks.

Also, the lesson is well designed and there is no problem with it since
it has all
the essential features that make a DOM-based XSS vulnerability.

Moreover, as Bruce highlighted, the mitigation has to be done on the
server side,
though it is still vulnerable to JavaScript clobbering. The lesson
actually shows it
very well in the second part in which I think the novice user would get
the idea.

As for the first part, it is just that the user is made to always input
malicious data
to own herself which is confusing. On a few other lessons, it is
specified that such
kind of attacks do occur due to a user clicking on a maliciously crafted
link or provided
with malicious scripts while visiting a malicious website. Here is not
the case.
This is not undesirable feature but a lack of explanation IMHO. 

Anyway, all your replies helped me greatly.

Thank you very much.

Gregory

----- Original Message -----
From: Benjamin Ernst <benjamin.ernst at unifr.ch>
Date: Wednesday, April 15, 2009 10:23 pm
Subject: Re: [Owasp-webgoat] stealthy client-side DOM-based
cross-site	scripting

> Hey gregory,
> 
> You are totally right with the assumption that DOM-based XSS are 
> never 
> reaching the server. Basically what this type of XSS exploits is 
> the 
> fact that
> the AJAX code supplied by the application is vulnerable. Amit Klein 
> has 
> written a great paper on DOM XSS (link below)
> Take for instance this code (also in Amit's paper) where the name 
> parameter is supplied in the URL. Using the DOM the value is 
> retrieved 
> and passed
> without filtration to the html part of the document. Now you can 
> change 
> the name to <script>alert('foo')</script> and there you go with 
> your DOM 
> based XSS.
> 
> <HTML>
> <TITLE>Welcome!</TITLE>
> Hi
> <SCRIPT>
> var pos=document.URL.indexOf("name=")+5;
> document.write(document.URL.substring(pos,document.URL.length));
> </SCRIPT>
> <BR>
> Welcome to our system
> ...
> </HTML>
> 
> Since all the manipulation was done within the client, the server 
> is 
> never notified.
> DOM XSS are "stealthy" because the server doesn't pick up any trace 
> of 
> the attack (there is nothing to log if there is no client request)
> 
> Client makes a page request to the server -> Server sends response 
> page 
> (including the vulnerable Ajax part. For instance parsing some URL 
> value 
> without sanitizing the input) -> DOM makes the client side magic 
> (here 
> getting the URL name parameter) -> the page is displayed with the 
> exploit code triggering the XSS attack.
> 
> I suck at explaining but I hope you get the point :)
> 
> As for your problem with the way WebGoat explains DOM based XSS.
> It's true that the explanation is kind of weird but you'll find 
> that the 
> function used in order to display the name is actually executed 
> only by 
> client.
> Which makes it a DOM based XSS...
> 
> function displayGreeting(name) {
> 
> 	if (name != ''){
> 
>        	document.getElementById("greeting").innerHTML="Hello, "
+ 
> escapeHTML(name)+ "!";
> 
> 	}
> 
> }
> 
> 
> If you want a nice explanation on DOM based XSS
> Here is Amit Klein's paper: 
> http://www.webappsec.org/projects/articles/071105.shtml
> And I can also highly recommend the book "Cross Site Scripting 
> Attacks 
> and Defense" or something like that (Syngress)
> 
> Hope I could help
> 
> Benjamin
> 
> 
> gregory at is.naist.jp wrote:
> > Hi Stephan,
> >
> > I actually I read the paper of Ryan Barnett published at BH-DC09 
> on your work. It was
> > very inspiring for me as I am researching on the subject. 
> Actually, I understand the fact
> > that it is difficult to provide a realistic environment and that 
> is why I try as much as possible
> > creating attack websites with links that a victim would click in 
> order to carry out  attacks on
> > WebGoat. 
> >
> > However, my point here is that the incriminated lesson (AJAX 
> security/Lab: DOM-based Cross-site
> > scripting) might be difficult to understand. The whole idea of 
> DOM-based XSS is summarized
> > as an user inputting malicious payload to own herself. That is 
> why one can get confused.
> > And it confuses me because it suggests that DOM-based is 
> ultimately stealthy as it never
> > reaches the server. Is it true? I have never encountered such 
> flavor though you can
> > find some circumvention techniques that would truncate some of 
> the payload (usually the most
> > characteristic part) using characters such as #. 
> > (see http://www.thespanner.co.uk/2008/12/01/location-based-xss-
> attacks/ )
> >
> > IMHO, if there were outside such stealthy DOM-based XSS attacks, 
> there will be no way to mitigate
> > these on the server side or using a WAF. Maybe someone can 
> enlighten me with some knowledge
> > I definitely do not have at the moment and that may have gone 
> undetected to my research so far.
> >
> > Sorry also for the length of my emails, it made these really 
> difficult to understand. Next time I will
> > make it shorter.
> >
> > Regards,
> >
> > Gregory
> >
> > ----- Original Message -----
> > From: Stephen Craig Evans <stephencraig.evans at gmail.com>
> > Date: Wednesday, April 15, 2009 6:56 pm
> > Subject: Re: [Owasp-webgoat] stealthy client-side DOM-based cross-
> site	scripting>
> >   
> >> Hi Gregory,
> >>
> >> You might check the WebGoat section of my project,  Securing 
> WebGoat>> using ModSecurity, at:
> >> 
>
http://www.owasp.org/index.php/OWASP_Securing_WebGoat_using_ModSecurity_
Project.>>
> >> I give some detailed explanations that might supplement what 
> you've 
> >> seen so far.
> >>
> >> (The project page is at:
> >> 
>
https://www.owasp.org/index.php/Category:OWASP_Securing_WebGoat_using_Mo
dSecurity_Project)>>
> >> Don't worry, I am not getting paid for page hits :-)
> >>
> >> Off the top of my head, some of the WebGoat lessons simulate the
> >> demonstration of an attack, mainly because it's necessary, and some
> >> IMHO take shortcuts - which I documented. In particular, there's a
> >> lesson with the solution of typing in javascript in the browser's
> >> address field, which simulates a user that clicks on a malicious 
> link>> in the web page.
> >>
> >> It's impossible for WebGoat to accommodate every browser and 
> browser>> version, so there are going to be some quirks and you 
> have to
> >> experiment. One good habit is to erase the WebGoat cookies when
> >> re-trying a lesson, and it's always good practice to switch back 
> and>> forth between at least 2 browsers; e.g. the AJAX lessons 
> worked best
> >> for me on Windows XP using Opera rather than IE and Firefox.
> >>
> >> Stephen
> >>
> >>
> >> On Wed, Apr 15, 2009 at 4:16 PM,  <gregory at is.naist.jp> wrote:
> >>     
> >>> Hello,
> >>>
> >>> I am currently using the version 5.2 of OWASP WebGoat.
> >>> I am particularly interested in AJAX security and one major XSS 
> >>>       
> >> threat> is the DOM-based one. However, I wanted to discuss the 
> way 
> >> the scenario
> >>     
> >>> is presented in the lesson AJAX Security/LAB: DOM-based cross-
> >>>       
> >> site scripting"
> >>     
> >>> First, because I do not understand the point of this lesson in 
> >>>       
> >> the way
> >>     
> >>> it is explained. It remains unclear how such an attack could 
> >>>       
> >> occur given the
> >>     
> >>> initial parsing of the webserver (removes every <,>," 
> characters 
> >>>       
> >> and some others).
> >>     
> >>> Usually, DOM-based XSS is particularly prone to be triggered by 
> a 
> >>>       
> >> fished victim.
> >>     
> >>> In this lesson, however, it seems that one should input already 
> >>>       
> >> the JavaScript code
> >>     
> >>> within the browser.
> >>>
> >>> Second, because of that unclear scenario, a beginner may not be 
> >>>       
> >> able to grab the idea
> >>     
> >>> of DOM-based XSS.
> >>>
> >>> Maybe, I am wrong somewhere but I was unable to provide the 
> >>>       
> >> JavaScript payload without
> >>     
> >>> specific characters (such as <,>) and was not able to inject it 
> >>>       
> >> on the browser, preventing
> >>     
> >>> the server side from seeing it, on top of that without the 
> victim 
> >>>       
> >> doing a thing.
> >>     
> >>> I tried submitting a link which would get parsed by the server 
> >>>       
> >> removing specific characters.
> >>     
> >>> I tried embedding it in an iframe and consequently inject it 
> >>>       
> >> using JavaScript which does
> >>     
> >>> not work since my crafted webpage was not allowed to grab the 
> >>>       
> >> iframe contents.
> >>     
> >>> I may miss some skills. Can anyone show me a way to conduct 
> such 
> >>>       
> >> an attack on the WebGoat
> >>     
> >>> server in order to illustrate the DOM-based XSS attack since 
> even 
> >>>       
> >> the yehg.net solution video
> >>     
> >>> is merely copy/pasting the payload in the input field (sounds a 
> >>>       
> >> high level of social engineering
> >>     
> >>> for subverting the user into inputting such an obvious 
> payload...).>>>
> >>> Regards,
> >>>
> >>> Gregory BLANC.
> >>> _______________________________________________
> >>> Owasp-webgoat mailing list
> >>> Owasp-webgoat at lists.owasp.org
> >>> https://lists.owasp.org/mailman/listinfo/owasp-webgoat
> >>>
> >>>       
> >>
> >> -- 
> >> http://www.linkedin.com/in/stephencraigevans
> >>
> >>     
> > _______________________________________________
> > Owasp-webgoat mailing list
> > Owasp-webgoat at lists.owasp.org
> > https://lists.owasp.org/mailman/listinfo/owasp-webgoat
> >
> >   
> 
> 
_______________________________________________
Owasp-webgoat mailing list
Owasp-webgoat at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-webgoat

From stephencraig.evans at gmail.com  Wed Apr 15 11:42:45 2009
From: stephencraig.evans at gmail.com (Stephen Craig Evans)
Date: Wed, 15 Apr 2009 23:42:45 +0800
Subject: [Owasp-webgoat] stealthy client-sideDOM-based cross-site
	scripting
In-Reply-To: <9DF4DCB48693534A986B344B0BF89DDB03BDF693@ligament.Ounce.local>
References: <f6c9c86f2272.49e61650@naist.jp>
	<930fd0230904150256v28e1d211u980b7b31c9c8531a@mail.gmail.com>
	<f66cf98a2898.49e65369@naist.jp> <49E5DFB7.6080001@unifr.ch>
	<f6d5d1ab6576.49e66a49@naist.jp>
	<9DF4DCB48693534A986B344B0BF89DDB03BDF693@ligament.Ounce.local>
Message-ID: <930fd0230904150842i1c87b2efhfe32035c2eee9439@mail.gmail.com>

If the source code can't be changed, ModSecurity can prepend and
append Javascript code to an HTTP response; I show how Javascript
functions can override and extend existing JS custom-built functions.

I haven't tried it with document.write, but perhaps something like
this will work if prepended (in pseudo-code):

<SCRIPT>
oldDocument.write = document.write;

function document.write (parameter list) {

    // insert validation code here

    oldDocument.write (parameter list);
    return;
}
</SCRIPT>


Stephen


On Wed, Apr 15, 2009 at 10:20 PM, Bruce Mayhew
<Bruce.Mayhew at ouncelabs.com> wrote:
> Hi Gregory
>
> Just to clarify a bit.  The mitigation can occur on the client side by
> performing positive validation on the parsed text before the
> document.write() call.  The mitigation occurs on the server by not
> allowing the application to have these exploits in the first place.
>
> Bruce
>
> -----Original Message-----
> From: owasp-webgoat-bounces at lists.owasp.org
> [mailto:owasp-webgoat-bounces at lists.owasp.org] On Behalf Of
> gregory at is.naist.jp
> Sent: Wednesday, April 15, 2009 10:14 AM
> To: owasp-webgoat at lists.owasp.org
> Subject: Re: [Owasp-webgoat] stealthy client-sideDOM-based cross-site
> scripting
>
> Hello everyone,
>
> thank you for your replies. Actually Benjamin you made it clear to me.
> Of course I also
> came across Amit Klein's paper and noticed that the WebGoat's DOM-based
> XSS
> vulnerability was similar to the sample you provided from Klein's paper.
>
> Actually, it is the fact that I failed to reproduce such an attack that
> made me to doubt
> from the stealthiness of such attacks.
>
> Also, the lesson is well designed and there is no problem with it since
> it has all
> the essential features that make a DOM-based XSS vulnerability.
>
> Moreover, as Bruce highlighted, the mitigation has to be done on the
> server side,
> though it is still vulnerable to JavaScript clobbering. The lesson
> actually shows it
> very well in the second part in which I think the novice user would get
> the idea.
>
> As for the first part, it is just that the user is made to always input
> malicious data
> to own herself which is confusing. On a few other lessons, it is
> specified that such
> kind of attacks do occur due to a user clicking on a maliciously crafted
> link or provided
> with malicious scripts while visiting a malicious website. Here is not
> the case.
> This is not undesirable feature but a lack of explanation IMHO.
>
> Anyway, all your replies helped me greatly.
>
> Thank you very much.
>
> Gregory
>
> ----- Original Message -----
> From: Benjamin Ernst <benjamin.ernst at unifr.ch>
> Date: Wednesday, April 15, 2009 10:23 pm
> Subject: Re: [Owasp-webgoat] stealthy client-side DOM-based
> cross-site      scripting
>
>> Hey gregory,
>>
>> You are totally right with the assumption that DOM-based XSS are
>> never
>> reaching the server. Basically what this type of XSS exploits is
>> the
>> fact that
>> the AJAX code supplied by the application is vulnerable. Amit Klein
>> has
>> written a great paper on DOM XSS (link below)
>> Take for instance this code (also in Amit's paper) where the name
>> parameter is supplied in the URL. Using the DOM the value is
>> retrieved
>> and passed
>> without filtration to the html part of the document. Now you can
>> change
>> the name to <script>alert('foo')</script> and there you go with
>> your DOM
>> based XSS.
>>
>> <HTML>
>> <TITLE>Welcome!</TITLE>
>> Hi
>> <SCRIPT>
>> var pos=document.URL.indexOf("name=")+5;
>> document.write(document.URL.substring(pos,document.URL.length));
>> </SCRIPT>
>> <BR>
>> Welcome to our system
>> ...
>> </HTML>
>>
>> Since all the manipulation was done within the client, the server
>> is
>> never notified.
>> DOM XSS are "stealthy" because the server doesn't pick up any trace
>> of
>> the attack (there is nothing to log if there is no client request)
>>
>> Client makes a page request to the server -> Server sends response
>> page
>> (including the vulnerable Ajax part. For instance parsing some URL
>> value
>> without sanitizing the input) -> DOM makes the client side magic
>> (here
>> getting the URL name parameter) -> the page is displayed with the
>> exploit code triggering the XSS attack.
>>
>> I suck at explaining but I hope you get the point :)
>>
>> As for your problem with the way WebGoat explains DOM based XSS.
>> It's true that the explanation is kind of weird but you'll find
>> that the
>> function used in order to display the name is actually executed
>> only by
>> client.
>> Which makes it a DOM based XSS...
>>
>> function displayGreeting(name) {
>>
>>       if (name != ''){
>>
>>               document.getElementById("greeting").innerHTML="Hello, "
> +
>> escapeHTML(name)+ "!";
>>
>>       }
>>
>> }
>>
>>
>> If you want a nice explanation on DOM based XSS
>> Here is Amit Klein's paper:
>> http://www.webappsec.org/projects/articles/071105.shtml
>> And I can also highly recommend the book "Cross Site Scripting
>> Attacks
>> and Defense" or something like that (Syngress)
>>
>> Hope I could help
>>
>> Benjamin
>>
>>
>> gregory at is.naist.jp wrote:
>> > Hi Stephan,
>> >
>> > I actually I read the paper of Ryan Barnett published at BH-DC09
>> on your work. It was
>> > very inspiring for me as I am researching on the subject.
>> Actually, I understand the fact
>> > that it is difficult to provide a realistic environment and that
>> is why I try as much as possible
>> > creating attack websites with links that a victim would click in
>> order to carry out  attacks on
>> > WebGoat.
>> >
>> > However, my point here is that the incriminated lesson (AJAX
>> security/Lab: DOM-based Cross-site
>> > scripting) might be difficult to understand. The whole idea of
>> DOM-based XSS is summarized
>> > as an user inputting malicious payload to own herself. That is
>> why one can get confused.
>> > And it confuses me because it suggests that DOM-based is
>> ultimately stealthy as it never
>> > reaches the server. Is it true? I have never encountered such
>> flavor though you can
>> > find some circumvention techniques that would truncate some of
>> the payload (usually the most
>> > characteristic part) using characters such as #.
>> > (see http://www.thespanner.co.uk/2008/12/01/location-based-xss-
>> attacks/ )
>> >
>> > IMHO, if there were outside such stealthy DOM-based XSS attacks,
>> there will be no way to mitigate
>> > these on the server side or using a WAF. Maybe someone can
>> enlighten me with some knowledge
>> > I definitely do not have at the moment and that may have gone
>> undetected to my research so far.
>> >
>> > Sorry also for the length of my emails, it made these really
>> difficult to understand. Next time I will
>> > make it shorter.
>> >
>> > Regards,
>> >
>> > Gregory
>> >
>> > ----- Original Message -----
>> > From: Stephen Craig Evans <stephencraig.evans at gmail.com>
>> > Date: Wednesday, April 15, 2009 6:56 pm
>> > Subject: Re: [Owasp-webgoat] stealthy client-side DOM-based cross-
>> site  scripting>
>> >
>> >> Hi Gregory,
>> >>
>> >> You might check the WebGoat section of my project,  Securing
>> WebGoat>> using ModSecurity, at:
>> >>
>>
> http://www.owasp.org/index.php/OWASP_Securing_WebGoat_using_ModSecurity_
> Project.>>
>> >> I give some detailed explanations that might supplement what
>> you've
>> >> seen so far.
>> >>
>> >> (The project page is at:
>> >>
>>
> https://www.owasp.org/index.php/Category:OWASP_Securing_WebGoat_using_Mo
> dSecurity_Project)>>
>> >> Don't worry, I am not getting paid for page hits :-)
>> >>
>> >> Off the top of my head, some of the WebGoat lessons simulate the
>> >> demonstration of an attack, mainly because it's necessary, and some
>> >> IMHO take shortcuts - which I documented. In particular, there's a
>> >> lesson with the solution of typing in javascript in the browser's
>> >> address field, which simulates a user that clicks on a malicious
>> link>> in the web page.
>> >>
>> >> It's impossible for WebGoat to accommodate every browser and
>> browser>> version, so there are going to be some quirks and you
>> have to
>> >> experiment. One good habit is to erase the WebGoat cookies when
>> >> re-trying a lesson, and it's always good practice to switch back
>> and>> forth between at least 2 browsers; e.g. the AJAX lessons
>> worked best
>> >> for me on Windows XP using Opera rather than IE and Firefox.
>> >>
>> >> Stephen
>> >>
>> >>
>> >> On Wed, Apr 15, 2009 at 4:16 PM,  <gregory at is.naist.jp> wrote:
>> >>
>> >>> Hello,
>> >>>
>> >>> I am currently using the version 5.2 of OWASP WebGoat.
>> >>> I am particularly interested in AJAX security and one major XSS
>> >>>
>> >> threat> is the DOM-based one. However, I wanted to discuss the
>> way
>> >> the scenario
>> >>
>> >>> is presented in the lesson AJAX Security/LAB: DOM-based cross-
>> >>>
>> >> site scripting"
>> >>
>> >>> First, because I do not understand the point of this lesson in
>> >>>
>> >> the way
>> >>
>> >>> it is explained. It remains unclear how such an attack could
>> >>>
>> >> occur given the
>> >>
>> >>> initial parsing of the webserver (removes every <,>,"
>> characters
>> >>>
>> >> and some others).
>> >>
>> >>> Usually, DOM-based XSS is particularly prone to be triggered by
>> a
>> >>>
>> >> fished victim.
>> >>
>> >>> In this lesson, however, it seems that one should input already
>> >>>
>> >> the JavaScript code
>> >>
>> >>> within the browser.
>> >>>
>> >>> Second, because of that unclear scenario, a beginner may not be
>> >>>
>> >> able to grab the idea
>> >>
>> >>> of DOM-based XSS.
>> >>>
>> >>> Maybe, I am wrong somewhere but I was unable to provide the
>> >>>
>> >> JavaScript payload without
>> >>
>> >>> specific characters (such as <,>) and was not able to inject it
>> >>>
>> >> on the browser, preventing
>> >>
>> >>> the server side from seeing it, on top of that without the
>> victim
>> >>>
>> >> doing a thing.
>> >>
>> >>> I tried submitting a link which would get parsed by the server
>> >>>
>> >> removing specific characters.
>> >>
>> >>> I tried embedding it in an iframe and consequently inject it
>> >>>
>> >> using JavaScript which does
>> >>
>> >>> not work since my crafted webpage was not allowed to grab the
>> >>>
>> >> iframe contents.
>> >>
>> >>> I may miss some skills. Can anyone show me a way to conduct
>> such
>> >>>
>> >> an attack on the WebGoat
>> >>
>> >>> server in order to illustrate the DOM-based XSS attack since
>> even
>> >>>
>> >> the yehg.net solution video
>> >>
>> >>> is merely copy/pasting the payload in the input field (sounds a
>> >>>
>> >> high level of social engineering
>> >>
>> >>> for subverting the user into inputting such an obvious
>> payload...).>>>
>> >>> Regards,
>> >>>
>> >>> Gregory BLANC.
>> >>> _______________________________________________
>> >>> Owasp-webgoat mailing list
>> >>> Owasp-webgoat at lists.owasp.org
>> >>> https://lists.owasp.org/mailman/listinfo/owasp-webgoat
>> >>>
>> >>>
>> >>
>> >> --
>> >> http://www.linkedin.com/in/stephencraigevans
>> >>
>> >>
>> > _______________________________________________
>> > Owasp-webgoat mailing list
>> > Owasp-webgoat at lists.owasp.org
>> > https://lists.owasp.org/mailman/listinfo/owasp-webgoat
>> >
>> >
>>
>>
> _______________________________________________
> Owasp-webgoat mailing list
> Owasp-webgoat at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-webgoat
> _______________________________________________
> Owasp-webgoat mailing list
> Owasp-webgoat at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-webgoat
>



-- 
http://www.linkedin.com/in/stephencraigevans

From changing005 at gmail.com  Thu Apr 30 09:16:58 2009
From: changing005 at gmail.com (jun gao)
Date: Thu, 30 Apr 2009 06:16:58 -0700
Subject: [Owasp-webgoat] =?gb2312?b?anVuIGdhbyDP67j6xPrBxMzs?=
Message-ID: <89443e990904300616t3ea62869q@mail.gmail.com>

??? Google Talk ??????????????????????????????????????????????? Google Talk?????

-----------------------------------------------------------------------
jun gao ???? Google ??????????????????

?????? Gmail ? Google Talk?????
http://mail.google.com/mail/b-5830de2010-2b57d69a30-0b70575417ac87a8
??????????? jun gao ???

??? Gmail?Google ????? 2,800 ??????????????????? jun gao ???????
http://mail.google.com/mail/a-5830de2010-2b57d69a30-0b70575417ac87a8

Gmail ???
- Gmail ????????
- ????????????
- ????????????????????????????????
- ???????????????? - ?????????????????????

????????????????? ???????????? ?? Gmail ????????? Google Talk?Google ?????????

http://www.google.com/talk/intl/zh-CN/

Google Talk ???
- ??????????????????
- ??? Gmail ??????????
- ?? Google Talk ??????????????? PC ? PC ????

Gmail ? Google Talk ???????? ????????????????????????????????????
????????????????????????

?????
Google ????

????? Gmail ? Google Talk ????????
http://mail.google.com/mail/help/intl/zh_CN/about.html
http://www.google.com/talk/intl/zh-CN/about.html

?????????????????????????????????????????

