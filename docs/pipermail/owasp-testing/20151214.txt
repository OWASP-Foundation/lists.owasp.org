From owasp at 31337.it  Mon Dec 14 11:40:19 2015
From: owasp at 31337.it (Simon)
Date: Mon, 14 Dec 2015 12:40:19 +0100
Subject: [Owasp-testing] Testing for logout functionality (OTG-SESS-006)
Message-ID: <566EAAA3.2070002@31337.it>

On  2014-09-16 10:46:01, Lode Vanstechelman wrote:
> Hello,
> 
> I'm not sure if it can still be added to the TestingGuide v4, but I have
> added a paragraph to the "Testing for logout functionality (OTG-SESS-006)"
> page.
> I find it important since the weakness described on this wiki page is
> present in all ASP.NET versions when using Form Authentication, what is
> commonly used in web applications.
> Therefore I think it would be good if it could still be added to v4.
> 
> For those interested: the weakness in ASP.NET is standard textbook: on
> logout, the cookie in the browser is removed, but the cookie value can be
> reused to gain access to the authenticated session. See links [1] and [2]
> below.
> 
> Kind regards,
> Lode
> 
> [1] "The FormsAuthentication.SignOut method does not prevent cookie reply
> attacks in ASP.NET applications" -
> http://support.microsoft.com/default.aspx?scid=kb;en-us;900111
> [2] "Cookie replay attacks in ASP.NET when using forms authentication" -
> http://goo.gl/b0Le1


Hello Lode and testing ML,

The cookie replay attack described here is only possible if an attacker
gets a hold of the cookie in first place, which is not possible if
- the cookie is transmitted over TLS
- the cookie is marked as secure
- the cookie is httpOnly

Keeping this paragraph worded like this in the testing guide makes every
web application that uses only cookies as a session store "insecure",
even when there are no vulnerabilities that would allow a theft of the
cookie. Using cookie-only session stores allows web application
developers to write highly scalable apps, and should in my opinion not
be ruled as insecure when they really are not.

I would propose to specify this at the end of this paragraph, or to
remove it entirely.

I would also propose to remove the paragraph "Testing for server-side
session termination"
If there is no session on the server side, it can not be terminated.




[1]https://www.owasp.org/index.php?title=Testing_for_logout_functionality_%28OTG-SESS-006%29&diff=182424&oldid=180243

From christer at swedakonsult.com  Mon Dec 14 15:20:09 2015
From: christer at swedakonsult.com (Christer)
Date: Mon, 14 Dec 2015 07:20:09 -0800
Subject: [Owasp-testing] Testing for logout functionality (OTG-SESS-006)
In-Reply-To: <566EAAA3.2070002@31337.it>
References: <566EAAA3.2070002@31337.it>
Message-ID: <E0B771EE-1968-4679-8CA9-AD970CE3E8D0@swedakonsult.com>

On Dec 14, 2015, at 03:40, Simon <owasp at 31337.it <mailto:owasp at 31337.it>> wrote:
> 
> On  2014-09-16 10:46:01, Lode Vanstechelman wrote:
>> Hello,
>> 
>> I'm not sure if it can still be added to the TestingGuide v4, but I have
>> added a paragraph to the "Testing for logout functionality (OTG-SESS-006)"
>> page.
>> I find it important since the weakness described on this wiki page is
>> present in all ASP.NET <http://asp.net/> versions when using Form Authentication, what is
>> commonly used in web applications.
>> Therefore I think it would be good if it could still be added to v4.
>> 
>> For those interested: the weakness in ASP.NET <http://asp.net/> is standard textbook: on
>> logout, the cookie in the browser is removed, but the cookie value can be
>> reused to gain access to the authenticated session. See links [1] and [2]
>> below.
>> 
>> Kind regards,
>> Lode
>> 
>> [1] "The FormsAuthentication.SignOut method does not prevent cookie reply
>> attacks in ASP.NET <http://asp.net/> applications" -
>> http://support.microsoft.com/default.aspx?scid=kb;en-us;900111 <http://support.microsoft.com/default.aspx?scid=kb;en-us;900111>
>> [2] "Cookie replay attacks in ASP.NET when using forms authentication" -
>> http://goo.gl/b0Le1
> 
> 
> Hello Lode and testing ML,
> 
> The cookie replay attack described here is only possible if an attacker
> gets a hold of the cookie in first place, which is not possible if
> - the cookie is transmitted over TLS
> - the cookie is marked as secure
> - the cookie is httpOnly
> 
> Keeping this paragraph worded like this in the testing guide makes every
> web application that uses only cookies as a session store "insecure",
> even when there are no vulnerabilities that would allow a theft of the
> cookie. Using cookie-only session stores allows web application
> developers to write highly scalable apps, and should in my opinion not
> be ruled as insecure when they really are not.
> 
> I would propose to specify this at the end of this paragraph, or to
> remove it entirely.
> 
> I would also propose to remove the paragraph "Testing for server-side
> session termination"
> If there is no session on the server side, it can not be terminated.
> 
> 
> 
> 
> [1]https://www.owasp.org/index.php?title=Testing_for_logout_functionality_%28OTG-SESS-006%29&diff=182424&oldid=180243 <https://www.owasp.org/index.php?title=Testing_for_logout_functionality_%28OTG-SESS-006%29&diff=182424&oldid=180243>
> _______________________________________________
> Owasp-testing mailing list
> Owasp-testing at lists.owasp.org <mailto:Owasp-testing at lists.owasp.org>
> https://lists.owasp.org/mailman/listinfo/owasp-testing <https://lists.owasp.org/mailman/listinfo/owasp-testing>

Simon,

The things you?ve listed are all valid improvements on the threat vector(s). However, I would recommend to treat them as mitigations to reduce the risks and not as guarantees to remove the attack vector(s). Did you by any chance use something like OWASP Cornucopia to show the need for the safeguards you?ve listed?

I?ve worked on websites that persist the sessions in cookies, rather than server-side, and this should always be treated as something that comes with risks that need to be assessed and accepted/rejected. Attack vectors/vulnerabilities should be treated separately from the acceptance of the risks they entail. So, a company might assess the risks as ?acceptable" and continue with solutions that don?t provide a ?server-side session termination?. However, having it in the testing guidelines is valid since it requires the company to make a conscious decision about the risk rather than not know about the vulnerability.

It can be dangerous (depending on your security requirements) to rely too heavily on TLS since there?s no clear understanding of how often it fails and there have been several zero-day vulnerabilities over the last couple of years.

Hope that all makes some sense.

Regards,

Christer
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-testing/attachments/20151214/30ff20ab/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2422 bytes
Desc: not available
URL: <http://lists.owasp.org/pipermail/owasp-testing/attachments/20151214/30ff20ab/attachment.bin>

From owasp at 31337.it  Mon Dec 14 15:48:07 2015
From: owasp at 31337.it (Simon)
Date: Mon, 14 Dec 2015 16:48:07 +0100
Subject: [Owasp-testing] Testing for logout functionality (OTG-SESS-006)
In-Reply-To: <E0B771EE-1968-4679-8CA9-AD970CE3E8D0@swedakonsult.com>
References: <566EAAA3.2070002@31337.it>
	<E0B771EE-1968-4679-8CA9-AD970CE3E8D0@swedakonsult.com>
Message-ID: <566EE4B7.6040500@31337.it>

Hi Christer,

On 14.12.2015 16:20, Christer wrote:
> The things you?ve listed are all valid improvements on the threat
> vector(s). However, I would recommend to treat them as mitigations to
> reduce the risks and not as guarantees to remove the attack vector(s).

well, I don't really see it as an attack vector, if you are not able to
steal the cookie.
Like OTG-INFO-010, being able to map the application architecture is not
a bug. If I know you use rails that's not a problem in and for itself:
it becomes a problem if the version of rails you are running has bugs
that can be exploited.
I see OTG-SESS-006 the same: IF (and only if) I can steal your cookie,
you have a problem.

> Did you by any chance use something like OWASP Cornucopia to show the
> need for the safeguards you?ve listed?

No, I did not know about its existence until now. I'll have a look on it
later.

> I?ve worked on websites that persist the sessions in cookies, rather
> than server-side, and this should always be treated as something that
> comes with risks that need to be assessed and accepted/rejected. Attack
> vectors/vulnerabilities should be treated separately from the acceptance
> of the risks they entail. So, a company might assess the risks as
> ?acceptable" and continue with solutions that don?t provide a
> ?server-side session termination?. However, having it in the testing
> guidelines is valid since it requires the company to make a conscious
> decision about the risk rather than not know about the vulnerability.

I agree. I would word it like this in OTG-SESS-006 to make this clear.
Using cookies only for the session is not a vulnerability in itself. It
becomes a problem if an attacker is able to steal the session cookie
(and if that becomes the case, there will be a lot of other problems in
the app as well).


I propose the following addition:
"Some web application frameworks rely solely on the session cookie to
identify the logged-on user. The user's ID is embedded in the
(encrypted) cookie value. The application server does not do any
tracking on the server-side of the session. When logging out, the
session cookie is removed from the browser. However, since the
application does not do any tracking, it does not know whether a session
is logged out or not. So by reusing a session cookie it is possible to
gain access to the authenticated session. A well-known example of this
is the Forms Authentication functionality in ASP.NET."
---[snip snip]---
If this is the case, it becomes really important that the cookie is
protected against theft, and should therefore be
- transmitted over https only
- marked as httpOnly
- marked as secure
---[snip snip]---


I see the part about "Testing for server-side session termination" as
problematic too: "If the log out function causes session cookies to be
set to a new value, restore the old value of the session cookies and
reload a page from the authenticated area of the application."
How is an attacker supposed to know the "old values"? If that is the
case, he could have used them prior to the "real" user logging out
anyway, so it user is compromised in any case if an attacker knows the
value of the session cookie.

So the real vulnerability would be the disclosure of the session cookie
- not the use of a cookie session store.

I think this should be made clear.


Regards,
Simon


From owasp at 31337.it  Mon Dec 14 19:51:05 2015
From: owasp at 31337.it (Simon)
Date: Mon, 14 Dec 2015 20:51:05 +0100
Subject: [Owasp-testing] Testing for logout functionality (OTG-SESS-006)
In-Reply-To: <566EE4B7.6040500@31337.it>
References: <566EAAA3.2070002@31337.it>
	<E0B771EE-1968-4679-8CA9-AD970CE3E8D0@swedakonsult.com>
	<566EE4B7.6040500@31337.it>
Message-ID: <566F1DA9.90000@31337.it>

On 12/14/2015 04:48 PM, Simon wrote:
> So the real vulnerability would be the disclosure of the session cookie
> - not the use of a cookie session store.
> 
> I think this should be made clear.

I'd like to add that webappsec (imho) correctly treats the cookie theft
as vulnerability, and does not create constraints on how the session
should be handled.

[1]
http://projects.webappsec.org/w/page/13246944/Insufficient%20Session%20Expiration

