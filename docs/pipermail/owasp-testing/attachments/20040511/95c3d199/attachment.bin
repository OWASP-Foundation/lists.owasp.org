Andrew, 


Thanks for the feedback, finally some :0)

Im in the process of updating it and will take all your points and
make them happen


Daniel



On 10 May 2004, at 16:42, Andrew van der Stock wrote:


<excerpt><fontfamily><param>Arial</param><x-tad-bigger>HI guys,</x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger> </x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger>I’ve now bench tested
the Pen Test draft checklist three times in my work (we do a lot of
short pen tests … 3-5 days). I’ve got a few notes for your
consideration for the final.</x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger> </x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger>The work flow chart
needs a little more regarding infrastructure information gathering. I
know it is an application level document, but it is useful to either
detail a reference to a good network pentest guide, or provide a
little guidance on using certain tools and techniques to gather
adequate information about the environment that the application runs
atop. I always like to have a good map of where my victims lay, so I
try firewalk and hping and ftp bounce attacks if I can to detail the
behind the firewall view.</x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger> </x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger>For example, in 1999, I
pen tested a finance reporting app, which I initially broke into by
using broadcast ping sweep to find the app servers, followed by using
a sniffer to get some usernames and passwords. Once I had a working
credential, not only did the app lift its skirts and expose last
week’s dirty laundry, it was eye opening how much more fun you could
have with a little credentialed access.</x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger>  </x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger>Back to the checklist…</x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger> </x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger>I think I spent a little
too much time on the authentication area’s parameter manipulation the
first time I used it, as I mistook this task as an invitation to
perform as much parameter manipulation as possible. I tend to find it
is easier to spider the entire app as I know it, and then have a go at
parameter manipulation first, and then play with session handling and
authentication once I have some decent bookmarked URLs to muck around
with. I also tend to re-spider when I know there’s Javascript HREFs
coming into play, as pretty much every single spider program out there
can’t work out JS popups and so on. I’m thinking that it may make more
sense to detail a few attack trees and then provide the checklist in
this order, walking the attack tree in a logical order which builds
atop previous work. Starting with authentication in this instance may
make sense, but we may also wish to wait for the data validation /
parameter manipulation section before attacking the authentication and
session management parameters.</x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger>  </x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger>The checklist misses
default accounts. These are rich sources of fun and profit, especially
for well-known applications and LDAP based authentication schemes.</x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger> </x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger>I also like to have a go
at using common paths… like /admin/, /images/ and /backup/ just to see
if there’s anything there. This is not mentioned as far as I can tell,
but it’s a good one to try if you don’t know much about the
application.</x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger> </x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger>Also, configuration is
not mentioned nearly enough*. Everyone knows (well, actually, they
don’t) that you should check for snoop.jsp / (various)Spy.jsp and so
on in J2EE environments to find out what is chewing juice and to
occasionally enumerate loaded modules. Each language and many
authoring solutions tend to stick to a few well worn patterns. The
pentest document should note this.</x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger>  </x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger>Thanks,</x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger>Andrew</x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger> </x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger>* In the last review
using this checklist, I couldn’t initially break into the application
because the authentication page was nice and robust… Shame about the
operating system not being patched and the web application server
being misconfigured.</x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger>  </x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger> </x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger> </x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger> </x-tad-bigger></fontfamily>


<fontfamily><param>Arial</param><x-tad-bigger> </x-tad-bigger></fontfamily>

</excerpt>