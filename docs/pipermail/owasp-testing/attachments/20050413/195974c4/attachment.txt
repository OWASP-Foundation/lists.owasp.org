XMl is used in some cases as the technology behind Internet services 
implementation. It is  considered as the substitute for CGI-based technology 
in web servers in the long run, however, it is also used as the technology
for document exchange in organisations.

Implementation of XML-based services (such as SOAP services) by organisations
provides means for an attacker to compromise remote servers through the 
manipulation of XML-encoded messages.

This module attempt is to verify the implementation of web services and
determine the security consequences of it. It does not describe tests related
to XML document interchange that might affect platforms not available
directly from the Internet (such as user's document processors which
might be attacked through e-mail document exchange), however, some of the
tests can be relevant to those cases too.

Outputs:

- list of web services or xml-based services are provided
- xml version in use
- xml encryption method in use
- public key infraestructure used for digital signatures
- flaws in XML input validation or parsing


Tasks:

- determine which services are based on XML messages exchange
- determine which XML version is used for message exchange

Encryption:
- analyse XML messages and derive encryption methods. This can be one of 
    * Block encryption
    * Stream encryption
    * Key transfer
    * Key agreement
    * Symmetric key wrap
    * Message digest
    * Message authentication

- determine if XML messages are fully encrypted 
- determine if some elements of XML messages are encrypted
- determine if contents of XML elemnents are encrypted

Digital signatures
- determine if XML messages are digitally signed
- determine if the XML-based services requires input to be digitally signed
- determine what certificate infraestructure is used and if it can be subverted
(false certificates) to send XML requests to XMl-based services
- analyse the distribution method of digitial signatures and revela trust weaknesses

Input manipulation:
- all other tests relevant to CGIs are relevant (after all an XML request
provides several inputs of different types/sizes that are going to be used by
the back-end processing engine) 
- send messages with external entities (DTDs) to check wether or not the parser will retrieve them
- determine if the parser can be subverted due to input manipulation

Authentication:
- determine there authorisation and/or entitlement policy for XML-based services 


References:

Relevant standards:
http://www.w3.org/TR/REC-xml
http://www.w3.org/TR/xmldsig-core/
http://www.ietf.org/rfc/rfc3275.txt
http://www.oasis-open.org/committees/security/ ( The OASIS technical comittee for XML:
)

Relevant articles:
http://www-106.ibm.com/developerworks/security/library/s-xmlsec.html?dwzone=security
http://www-106.ibm.com/developerworks/security/library/x-encrypt2/index.html?dwzone=security
http://www-106.ibm.com/developerworks/security/library/s-east.html?dwzone=security
http://www.nue.et-inf.uni-siegen.de/~geuer-pollmann/xml_security.html (A student's page on XML security)
http://home.earthlink.net/~fjhirsch/xml/xmlsec/starting-xml-security.html 
(An overview of XML security)

Known vulnerabilities:
- XXE (Xml eXternal Entity) attack: http://online.securityfocus.com/archive/1/297714
- Winamp XML parser buffer overflow: http://online.securityfocus.com/archive/1/293569
- Trillian XML parser buffer overflow: http://online.securityfocus.com/archive/1/290019
- SOAP::Lite access package reverse traversal: http://www.phrack.com/show.php?p=58&a=9