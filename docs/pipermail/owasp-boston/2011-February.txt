From Jim.Weiler at starwoodhotels.com  Tue Feb  1 23:21:51 2011
From: Jim.Weiler at starwoodhotels.com (Weiler, Jim)
Date: Tue, 1 Feb 2011 23:21:51 -0500
Subject: [Owasp-boston] OWASP discount to Source Boston 2011
Message-ID: <2EA0DC3E5B36A145A2136F264D4A1E128E6AF6@stcexcpmb03.corp.star>

Source Boston is providing a 20% discount if you use the registration
code OWASPSRC11 when you register.

 

Jim Weiler   CISSP  CSSLP  GSSP-Java

Starwood Hotels and Resorts

Sr. Mgr. Information Security Risk Assessment

Office - 781 356 0067

Cell - 781 654 6048

 



This electronic message transmission contains information from the Company that may be proprietary, confidential and/or privileged. 
The information is intended only for the use of the individual(s) or entity named above.  If you are not the intended recipient, be 
aware that any disclosure, copying or distribution or use of the contents of this information is prohibited.  If you have received 
this electronic transmission in error, please notify the sender immediately by replying to the address listed in the "From:" field. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-boston/attachments/20110201/125a77d0/attachment.html 

From Jim.Weiler at starwoodhotels.com  Tue Feb  8 12:02:13 2011
From: Jim.Weiler at starwoodhotels.com (Weiler, Jim)
Date: Tue, 8 Feb 2011 12:02:13 -0500
Subject: [Owasp-boston] Reminder - OWASp Boston Meeting Wed. Feb 8.
Message-ID: <2EA0DC3E5B36A145A2136F264D4A1E1297201D@stcexcpmb03.corp.star>

Rob Cheyne, CEO of Safelight Security - 

 

Security Leadership series: Delivering a successful security
presentation

Presentation and training skills are critical in any field, but are
especially important for security.  OWASP participants consist of
current and future information security leaders who absolutely must be
able to effectively communicate security topics to others in their
organizations.

 

Anyone can be an effective presenter, but few people take the time to
hone this critical skill.  Rob Cheyne, CEO, Safelight Security, will
present a special train-the-trainer session where he will divulge the
secrets of a successful security or technical presentation.  Come and
learn how to move beyond "death by powerpoint", and be ready to
challenge everything you know about giving a technical presentation.

 

Part 1 (6:30-7pm):

Rob will cover a basic information security topic using traditional
presentation and training methods and then he will re-teach the same
topic using modern accelerated learning techniques.  He's going to keep
the topic a secret until you get there, so you'll have to show up to see
what it is.  Hint: the topic itself is not the point.

 

Part 2 (7-9pm):

Accelerated learning debrief. Rob will teach you how to be a more
effective presenter by breaking down the key elements of a successful
presentation or training.  OWASP participants can directly use these
techniques to make their own security and technical presentations more
effective.   He will break down his security topic from part 1 and
explain the presentation and training techniques one by one.  This will
be like having the magician pull a rabbit out of the hat and then
explain in detail how he did the trick.

 

This is a special, pre-RSA warm-up talk that may never be repeated. If
you've ever struggled to give an effective technical presentation,
please make every effort to attend.  You will get the most value from
this talk if you can show up early to participate in both parts 1 and 2.
Please show up ready to have some fun and participate fully in an
interactive and entertaining discussion.  And there will be pizza.  What
more could you ask for?  :-)

 

FYI - it's possible (but not guaranteed) that a brave volunteer will be
chosen to present an arbitrary 5-minute technical topic that they are
familiar with for demonstration purposes. 

 

Bio:

Rob Cheyne speaks regularly at security conferences, and is a regular
presenter at the OWASP Boston chapter.  Over the years, he has trained
well over 10,000 people on various information security topics. He is a
former @stake hacker and co-founder who has been fortunate to work with
some really smart people and is passionate about sharing what he has
learned.  He is currently the CEO of Safelight Security, a leading
provider of custom information security education programs that
integrates deep security expertise with innovative approaches to
interactive learning.  Rob is also on the advisory boards for the
Source: Boston and Source: Seattle security conferences.

 

Pizza will be sponsored by Safelight Security.

 

Location - Microsoft offices at the Waltham Weston Corporate Center, 201
Jones Rd., Sixth Floor Waltham, MA. 

>From Rt. 128 North take exit 26 toward Waltham, East up the hill on Rt.
20. From Rt 128 South take exit 26 but go around the rotary to get

to 20 East to Waltham. Follow signs for Rt. 117 (left at the second
light). When you get to 117 turn left (West). 

You will cross back over Rt. 128. Jones Rd. (look for the Waltham Weston
Corporate Center sign) is the second left, at a blinking yellow light,
on Rt. 117

going west about 0.1 miles from Rt. 128 (I95). The office building is at
the bottom of Jones Rd. 

Best parking is to turn right just before the building and park in the
back. Knock on the door to get the security guard to open it. The room
is MPR C. 

 

 

Jim Weiler   CISSP  CSSLP  GSSP-Java

Starwood Hotels and Resorts

Sr. Mgr. Information Security Risk Assessment

Office - 781 356 0067

Cell - 781 654 6048

 



This electronic message transmission contains information from the Company that may be proprietary, confidential and/or privileged. 
The information is intended only for the use of the individual(s) or entity named above.  If you are not the intended recipient, be 
aware that any disclosure, copying or distribution or use of the contents of this information is prohibited.  If you have received 
this electronic transmission in error, please notify the sender immediately by replying to the address listed in the "From:" field. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-boston/attachments/20110208/10c669f5/attachment.html 

From Jim.Weiler at starwoodhotels.com  Tue Feb  8 16:55:22 2011
From: Jim.Weiler at starwoodhotels.com (Weiler, Jim)
Date: Tue, 8 Feb 2011 16:55:22 -0500
Subject: [Owasp-boston] OWASP Boston Meeting Wed. Feb 9, tomorrow
Message-ID: <2EA0DC3E5B36A145A2136F264D4A1E129721B1@stcexcpmb03.corp.star>

Right day, wrong date in previous email. Description is correct.

 

Jim Weiler   CISSP  CSSLP  GSSP-Java

Starwood Hotels and Resorts

Sr. Mgr. Information Security Risk Assessment

Office - 781 356 0067

Cell - 781 654 6048

 



This electronic message transmission contains information from the Company that may be proprietary, confidential and/or privileged. 
The information is intended only for the use of the individual(s) or entity named above.  If you are not the intended recipient, be 
aware that any disclosure, copying or distribution or use of the contents of this information is prohibited.  If you have received 
this electronic transmission in error, please notify the sender immediately by replying to the address listed in the "From:" field. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-boston/attachments/20110208/b552a7f5/attachment.html 

From brad.edmondson at gmail.com  Tue Feb 22 15:29:58 2011
From: brad.edmondson at gmail.com (Brad Edmondson)
Date: Tue, 22 Feb 2011 15:29:58 -0500
Subject: [Owasp-boston] =?windows-1252?q?Extend_html5_=93Access-Control-Al?=
	=?windows-1252?q?low-Origin=94_=3F?=
Message-ID: <AANLkTikfQ4tVKrNJ7FaeN0ba1w7gyyNMpuKnePY1NBmY@mail.gmail.com>

Hi all-
Since attending OWASP Boston in November, I have been wondering if we
are missing an opportunity to try and define an access-control header
that can do more to combat xss.


Specifically, access-control-allow-origin seems limited in scope
primarily to xmlhttprequest, or at most to a DOM object (though if I
am reading this spec incorrectly, call me out  :-). It also seems to
be focused on incoming xsrf, and to leave outgoing xss alone. Perhaps
another header, with two modifications, might make it much easier to
contain outbound xss. It could:

1) allow a page to provide a whitelist of authorized URIs which the
page's DOM may request (the whole DOM, not just a particular object).

For example, "access-control-authorized-request-uri" could define an
'origin list' of URIs that the page might possibly request. Any
request the DOM makes outside this origin list would be considered
malicious and would be dropped by the browser. This would allow
secure.banksite.com to make a promise to the browser that its pages
will never, ever request anything from anywhere other than
secure.banksite.com, www.banksite.com, and banksite.affiliate.cdn.com

2) extend the origin controls granted to xmlhttprequest via
"access-control-allow-origin", and to flash via "allow-access-from,"
and to other individual object types, UP one level to the entire page

3) allow browsers to report requests outside of this whitelist back to
the originating server

This is half in jest, but half serious: a browser could automatically
issue another http request indicating the problem URIs whenever a page
tells it to make a request outside its whitelist. This would allow
site administrators to detect xss, or (more often?) misconfigured URI
whitelists.

4) be optional; like Access-Control-Allow-Origin, would be optional
and would default to allow-all

5) not apply to traditional hyperlinks, unless the DOM contrives to
execute them - HTTP referer links would be left alone


What does everyone think? I am relatively new to OWASP and to web app
sec, but I haven't been able to think myself out of the belief that we
need something like this. It seems somewhat analogous to memory
randomization for compiled code, in that it doesn't combat the root
cause of insecure code, but it can offer a relatively low-cost control
to which applications could opt-in. And in that many applications seem
to be hurting without it.

All comment and thoughts are welcome.

Best,
Brad

From afbarstow at gmail.com  Tue Feb 22 15:50:12 2011
From: afbarstow at gmail.com (Arthur Barstow)
Date: Tue, 22 Feb 2011 15:50:12 -0500
Subject: [Owasp-boston]
	=?windows-1252?q?Extend_html5_=93Access-Control-Al?=
	=?windows-1252?q?low-Origin=94_=3F?=
In-Reply-To: <AANLkTikfQ4tVKrNJ7FaeN0ba1w7gyyNMpuKnePY1NBmY@mail.gmail.com>
References: <AANLkTikfQ4tVKrNJ7FaeN0ba1w7gyyNMpuKnePY1NBmY@mail.gmail.com>
Message-ID: <AANLkTimzwR-2YbUSBUjxTEVz4OmM73PmZJ6kFRVThpGL@mail.gmail.com>

Brad - FYI, discussions related to the CORS spec [CORS] and this header
occur on the public-webapps at w3.org which is archived at [WebApps]. The W3C's
public-web-security at w3.org mail list [WebSec] has also been used for some
related discussions.

-Regards, Art Barstow

[CORS] http://dev.w3.org/2006/waf/access-control/
[WebApps] http://lists.w3.org/Archives/Public/public-webapps/
[WebSec] http://lists.w3.org/Archives/Public/public-web-security/

On Tue, Feb 22, 2011 at 3:29 PM, Brad Edmondson <brad.edmondson at gmail.com>wrote:

> Hi all-
> Since attending OWASP Boston in November, I have been wondering if we
> are missing an opportunity to try and define an access-control header
> that can do more to combat xss.
>
>
> Specifically, access-control-allow-origin seems limited in scope
> primarily to xmlhttprequest, or at most to a DOM object (though if I
> am reading this spec incorrectly, call me out  :-). It also seems to
> be focused on incoming xsrf, and to leave outgoing xss alone. Perhaps
> another header, with two modifications, might make it much easier to
> contain outbound xss. It could:
>
> 1) allow a page to provide a whitelist of authorized URIs which the
> page's DOM may request (the whole DOM, not just a particular object).
>
> For example, "access-control-authorized-request-uri" could define an
> 'origin list' of URIs that the page might possibly request. Any
> request the DOM makes outside this origin list would be considered
> malicious and would be dropped by the browser. This would allow
> secure.banksite.com to make a promise to the browser that its pages
> will never, ever request anything from anywhere other than
> secure.banksite.com, www.banksite.com, and banksite.affiliate.cdn.com
>
> 2) extend the origin controls granted to xmlhttprequest via
> "access-control-allow-origin", and to flash via "allow-access-from,"
> and to other individual object types, UP one level to the entire page
>
> 3) allow browsers to report requests outside of this whitelist back to
> the originating server
>
> This is half in jest, but half serious: a browser could automatically
> issue another http request indicating the problem URIs whenever a page
> tells it to make a request outside its whitelist. This would allow
> site administrators to detect xss, or (more often?) misconfigured URI
> whitelists.
>
> 4) be optional; like Access-Control-Allow-Origin, would be optional
> and would default to allow-all
>
> 5) not apply to traditional hyperlinks, unless the DOM contrives to
> execute them - HTTP referer links would be left alone
>
>
> What does everyone think? I am relatively new to OWASP and to web app
> sec, but I haven't been able to think myself out of the belief that we
> need something like this. It seems somewhat analogous to memory
> randomization for compiled code, in that it doesn't combat the root
> cause of insecure code, but it can offer a relatively low-cost control
> to which applications could opt-in. And in that many applications seem
> to be hurting without it.
>
> All comment and thoughts are welcome.
>
> Best,
> Brad
> _______________________________________________
> Owasp-boston mailing list
> Owasp-boston at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-boston
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-boston/attachments/20110222/e43e5856/attachment.html 

From holger.dippel at umassd.edu  Tue Feb 22 17:38:19 2011
From: holger.dippel at umassd.edu (Holger Dippel)
Date: Tue, 22 Feb 2011 17:38:19 -0500 (EST)
Subject: [Owasp-boston] eCommerce Conference Speaker on eCommerce Security
	wanted
In-Reply-To: <70222861.1004401.1298414266803.JavaMail.root@zimbra-mb4.umassd.edu>
Message-ID: <1400720927.1004404.1298414299686.JavaMail.root@zimbra-mb4.umassd.edu>

Hi all, 

I am sending this inquiry on behalf of one of our professors, Dr. Fahri Karakaya. He is organizing a eCommerce Conference and looking for a volunteer speaker on "eCommerce Security". 

~~~~~~~~~~~~~~~~~~~~~~~~~ 

Please save the date, April 13, 2011 (full day), for our Southcoast eCommerce Conference. Many area businesses will be in attendance. Come learn about the most recent developments in eCommerce and share your experiences. Registration will begin March 1, 2011. 

Tentative Schedule: 

8:30 ? 9:00 A.M. Registration (coffee and pastries) 
9:00 ? 10:30 A.M. Presentations 
10:30 ? 11:00 Coffee Break and Networking 
11:00 ? 12:30 Presentations 
12:30- 1:45 Lunch and Networking 
1:45- 3:30 P.M. Presentations 

Some possible presentation topics include the following: 

Use of Facebook in Marketing 
Use of Linkedin in Marketing 
Web site usability 
Search engine optimization 
Building online trust 
Electronic word-of-mouth and online reviews 
eCommerce Security 
Online Advertising 
Online Marketing Research 
The relationship between assurance seals and customer satisfaction 
eCommerce pricing strategy 
Cultural and industrial differences in website design 


If you or your colleagues would like to present on one of the topics above or have a topic idea of your own, please e-mail Dr. Fahri Karakaya at f1karakaya at umassd.edu or call at 508-999-8745. 

He is also looking for companies to share their successful eCommerce experience by making presentations at this conference. 

The conference will be on our University of Massachusetts Dartmouth campus. 
~~~~~~~~~~~~~~~~~~~~~~~~~ 

Thank you, 


Holger 


Holger Dippel 
Assistant Director for Infrastructure Integration 
University of Massachusetts Dartmouth 
285 Old Westport Road ? North Dartmouth, MA 02747 


508-999-9181 ? holger.dippel at umassd.edu http://www.umassd.edu/ 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-boston/attachments/20110222/ea85863f/attachment.html 

From brad.edmondson at gmail.com  Sun Feb 27 16:24:27 2011
From: brad.edmondson at gmail.com (Brad Edmondson)
Date: Sun, 27 Feb 2011 16:24:27 -0500
Subject: [Owasp-boston]
	=?windows-1252?q?Extend_html5_=93Access-Control-Al?=
	=?windows-1252?q?low-Origin=94_=3F?=
In-Reply-To: <AANLkTikfQ4tVKrNJ7FaeN0ba1w7gyyNMpuKnePY1NBmY@mail.gmail.com>
References: <AANLkTikfQ4tVKrNJ7FaeN0ba1w7gyyNMpuKnePY1NBmY@mail.gmail.com>
Message-ID: <AANLkTikUOQVRBh9J+i_HkwFUzRhxryFbimHyvJQ0uKEH@mail.gmail.com>

For those inclined to keep score, I was pretty late to the game with
this idea. Mozilla has already proposed Content Security Policy (CSP),
which addresses everything I mentioned and more. It includes more than
ten policy directives allowing whitelisting for all kinds of resource
URIs. It even has a JSON-based XSS reporting capability like that
which I mentioned in my point 3. I'm a little embarrassed I didn't
find these resources before coming to the list:

http://people.mozilla.com/~bsterne/content-security-policy/index.html
https://wiki.mozilla.org/Security/CSP
https://developer.mozilla.org/en/Security/CSP/CSP_policy_directives
https://developer.mozilla.org/en/Introducing_Content_Security_Policy
http://www.w3.org/2010/07/appsecwg-charter#deliverables

Per link 4, Firefox 4 (and gecko 2.0) supports/will support CSP. Per
link 5, W3 is developing a working group to consider formalizing this
and other appsec issues.


Best,
Brad

On Tue, Feb 22, 2011 at 15:29, Brad Edmondson <brad.edmondson at gmail.com> wrote:
> Hi all-
> Since attending OWASP Boston in November, I have been wondering if we
> are missing an opportunity to try and define an access-control header
> that can do more to combat xss.
>
>
> Specifically, access-control-allow-origin seems limited in scope
> primarily to xmlhttprequest, or at most to a DOM object (though if I
> am reading this spec incorrectly, call me out ?:-). It also seems to
> be focused on incoming xsrf, and to leave outgoing xss alone. Perhaps
> another header, with two modifications, might make it much easier to
> contain outbound xss. It could:
>
> 1) allow a page to provide a whitelist of authorized URIs which the
> page's DOM may request (the whole DOM, not just a particular object).
>
> For example, "access-control-authorized-request-uri" could define an
> 'origin list' of URIs that the page might possibly request. Any
> request the DOM makes outside this origin list would be considered
> malicious and would be dropped by the browser. This would allow
> secure.banksite.com to make a promise to the browser that its pages
> will never, ever request anything from anywhere other than
> secure.banksite.com, www.banksite.com, and banksite.affiliate.cdn.com
>
> 2) extend the origin controls granted to xmlhttprequest via
> "access-control-allow-origin", and to flash via "allow-access-from,"
> and to other individual object types, UP one level to the entire page
>
> 3) allow browsers to report requests outside of this whitelist back to
> the originating server
>
> This is half in jest, but half serious: a browser could automatically
> issue another http request indicating the problem URIs whenever a page
> tells it to make a request outside its whitelist. This would allow
> site administrators to detect xss, or (more often?) misconfigured URI
> whitelists.
>
> 4) be optional; like Access-Control-Allow-Origin, would be optional
> and would default to allow-all
>
> 5) not apply to traditional hyperlinks, unless the DOM contrives to
> execute them - HTTP referer links would be left alone
>
>
> What does everyone think? I am relatively new to OWASP and to web app
> sec, but I haven't been able to think myself out of the belief that we
> need something like this. It seems somewhat analogous to memory
> randomization for compiled code, in that it doesn't combat the root
> cause of insecure code, but it can offer a relatively low-cost control
> to which applications could opt-in. And in that many applications seem
> to be hurting without it.
>
> All comment and thoughts are welcome.
>
> Best,
> Brad
>

