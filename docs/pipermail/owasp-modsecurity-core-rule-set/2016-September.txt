From ken at pumastudios.com  Sun Sep  4 15:08:53 2016
From: ken at pumastudios.com (Ken Brucker)
Date: Sun, 4 Sep 2016 08:08:53 -0700
Subject: [Owasp-modsecurity-core-rule-set] CRS Version 3.0 RC1 Rules 930100,
	930110 definitions
Message-ID: <BC23FCDA-CA51-440B-A1CB-7C798941110D@pumastudios.com>

[ Not sure my first try posting made it through, I see it in the archive, but have had no response which I find odd. ]

I have V3 rules running in a test environment playing with how it interacts with WordPress. My early investigation is showing a few rules that need to be addressed to allow code, sql examples etc. to be included in a post, nothing overly surprising.

I have a question about the construction of rules 930100 and 930110. These rules both examine REQUEST_BODY and REQUEST_HEADERS. Other rules, such as 930120 use ARGS and ARGS_NAMES, etc.

The result is it's not possible to disable 930100 and 930110 for specific ARGS where the patterns would be acceptable.

What is the motivation for the difference in how these rules are defined?

-- Ken
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20160904/d7725ca1/attachment.html>

From ken at pumastudios.com  Sun Sep  4 15:26:37 2016
From: ken at pumastudios.com (Ken Brucker)
Date: Sun, 4 Sep 2016 08:26:37 -0700
Subject: [Owasp-modsecurity-core-rule-set] OWASP CRS v3.0 False Positive
	rule 920120
Message-ID: <D7A71DF0-C75A-4E81-B02D-AFC85F43DD4B@pumastudios.com>

Playing with OWASP CRS v3.0 and have a false positive on rule 920120.

The application is Picasa (no longer available from Google). During file uploads it produces the failing pattern when communicating with the target website. I have no control over the application end of this and there's no hope for a fix from Google since they have dropped the product. It does still work however so I continue to use it.

I'm disabling this rule for this user agent using:

SecRule REQUEST_HEADERS:User-Agent "@beginsWith Picasa/3." "id:1010,phase:1,t:none,nolog,pass,ctl:ruleRemoveById=920120"


Here's the entry from the audit log:

--93ede52c-A--
[04/Sep/2016:07:57:20 --0700] V8w2UH8AAAEAADHQvy0AAABV 192.168.56.1 64619 192.16
8.56.101 80
--93ede52c-B--
POST /picasa_album_uploader/upload HTTP/1.1
Host: wpdev.local
Accept: */*
Accept-Encoding: gzip
Content-Length: 117779
Content-Type: multipart/form-data; boundary=---------------------------98E77E01B
348
Cookie: wordpress_logged_in_bdc5a801bed99bd8e2693412031c90e0=thor%7C1473173832%7
COzgZxmia5N6cIlq8cByzDuXNOUtUG8ksqAsyHg12XMA%7Cd70c349c19dfc0274e629711840a30937
a640e3c6f07362d76dab9bac3b58e68; wordpress_test_cookie=WP+Cookie+check
Connection: keep-alive
User-Agent: Picasa/3.9.141.306 (gzip)

--93ede52c-I--
picasa%2dalbum%2duploader%2dupload%2dimages=48fd37703c&%5fwp%5fhttp%5freferer=%2
fpicasa%5falbum%5fuploader%2fminibrowser&size=on&title%5b%5d=IMG%5f5306%2eJPG&ca
ption%5b%5d=&description%5b%5d=
--93ede52c-F--
HTTP/1.1 403 Forbidden
Content-Length: 237
Connection: close
Content-Type: text/html; charset=iso-8859-1

--93ede52c-E--

--93ede52c-H--
Message: Warning. Pattern match "['\";=]" at FILES_NAMES:http://localhost:63391/
d8edaf7f8a66068039906ecb9d04c451/image/7c2c6d05f122032b.jpg?size=1024. [file "/v
agrant/owasp-modsecurity-crs/rules/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line
 "108"] [id "920120"] [rev "1"] [msg "Attempted multipart/form-data bypass"] [da
ta "http://localhost:63391/d8edaf7f8a66068039906ecb9d04c451/image/7c2c6d05f12203
2b.jpg?size=1024"] [severity "CRITICAL"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] 
[accuracy "7"] [tag "application-multi"] [tag "language-multi"] [tag "platform-m
ulti"] [tag "attack-protocol"] [tag "OWASP_CRS/PROTOCOL_VIOLATION/INVALID_REQ"] 
[tag "CAPEC-272"]
Message: Access denied with code 403 (phase 2). Operator GE matched 5 at TX:anom
aly_score. [file "/vagrant/owasp-modsecurity-crs/rules/REQUEST-949-BLOCKING-EVAL
UATION.conf"] [line "53"] [id "949110"] [msg "Inbound Anomaly Score Exceeded (To
tal Score: 5)"] [severity "CRITICAL"] [tag "application-multi"] [tag "language-m
ulti"] [tag "platform-multi"] [tag "attack-generic"]
Message: Warning. Operator GE matched 5 at TX:inbound_anomaly_score. [file "/vag
rant/owasp-modsecurity-crs/rules/RESPONSE-980-CORRELATION.conf"] [line "73"] [id
 "980130"] [msg "Inbound Anomaly Score Exceeded (Total Inbound Score: 5 - SQLI=0
,XSS=0,RFI=0,LFI=0,RCE=0,PHPI=0,HTTP=0,SESS=0): Attempted multipart/form-data by
pass"] [tag "event-correlation"]
Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecuri
ty: %s%s [uri "%s"]%s
Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecuri
ty: %s%s [uri "%s"]%s
Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecuri
ty: %s%s [uri "%s"]%s
Action: Intercepted (phase 2)
Stopwatch: 1473001040658089 39084 (- - -)
Stopwatch2: 1473001040658089 39084; combined=2811, p1=201, p2=2420, p3=0, p4=0, 
p5=189, sr=27, sw=1, l=0, gc=0
Response-Body-Transformed: Dechunked
Producer: ModSecurity for Apache/2.9.1 (http://www.modsecurity.org/); OWASP_CRS/
3.0.0.
Server: Apache/2.4.23 (Ubuntu)
Engine-Mode: "ENABLED"

--93ede52c-J--
4,116587,"IMG_5306.JPG","<Unknown ContentType>"
Total,116587

--93ede52c-Z--

-- Ken
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20160904/3bfd8158/attachment.html>

From christian.folini at netnea.com  Sun Sep  4 17:08:24 2016
From: christian.folini at netnea.com (Christian Folini)
Date: Sun, 4 Sep 2016 19:08:24 +0200
Subject: [Owasp-modsecurity-core-rule-set] CRS Version 3.0 RC1 Rules
 930100, 930110 definitions
In-Reply-To: <BC23FCDA-CA51-440B-A1CB-7C798941110D@pumastudios.com>
References: <BC23FCDA-CA51-440B-A1CB-7C798941110D@pumastudios.com>
Message-ID: <20160904170824.GA17644@elias>

On Sun, Sep 04, 2016 at 08:08:53AM -0700, Ken Brucker wrote:
> [ Not sure my first try posting made it through, I see it in the archive, but have had no response which I find odd. ]

I do not think the first inquiry made it through. But this time it did.

Thanks for the report. We'll investigate.

Cheers,

Christian

> 
> I have V3 rules running in a test environment playing with how it interacts with WordPress. My early investigation is showing a few rules that need to be addressed to allow code, sql examples etc. to be included in a post, nothing overly surprising.
> 
> I have a question about the construction of rules 930100 and 930110. These rules both examine REQUEST_BODY and REQUEST_HEADERS. Other rules, such as 930120 use ARGS and ARGS_NAMES, etc.
> 
> The result is it's not possible to disable 930100 and 930110 for specific ARGS where the patterns would be acceptable.
> 
> What is the motivation for the difference in how these rules are defined?
> 
> -- Ken

> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set


-- 
https://www.feistyduck.com/training/modsecurity-training-course
mailto:christian.folini at netnea.com
twitter: @ChrFolini

From barry_pollard at hotmail.com  Sun Sep  4 17:43:30 2016
From: barry_pollard at hotmail.com (Barry Pollard)
Date: Sun, 4 Sep 2016 17:43:30 +0000
Subject: [Owasp-modsecurity-core-rule-set] CRS Version 3.0 RC1 Rules
 930100, 930110 definitions
In-Reply-To: <20160904170824.GA17644@elias>
References: <BC23FCDA-CA51-440B-A1CB-7C798941110D@pumastudios.com>,
	<20160904170824.GA17644@elias>
Message-ID: <VI1PR06MB147127F66859ED4BD035653782E70@VI1PR06MB1471.eurprd06.prod.outlook.com>

Been thinking about this and you've got me intrigued as to whether this was an intentional decision or not...

As far as I can see, you are right these could have been written using REQUEST_FILENAME and ARGS rather than REQUEST_URI and REQUEST_BODY.

ModSecurity is quite flexible and there are a few different ways of doing things. So it can depend on whoever writes the rules as to which version they use.

This is just a guess, but I wonder if the reason these variables were chosen is hinted at in this line in the manual ModSecurity manual (https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#REQUEST_BODY):

There are no default transformation functions, as there were in the first generation of ModSecurity (1.x).

and also lines like this:

Note : Please note that anti-evasion transformations are not used on REQUEST_URI, which means that you will have to specify them in the rules that use this variable.
I'm not sure what the default transformations were in ModSecurity 1.x, or if these were the anti-evasion transformations being discussed but wonder that was the reason - as it would prevent these rules from working if the ARGS were used and default transformations were applied?

If you need the ability to override these on certain ARGS (though I think that could be dangerous - and have personally never seen any false positives with these) you could replace them as you see fit - either directly in the file (not recommended as will be overwritten if you ever upgrade the CRS) or by altering the rules dynamically:

#Replace REQUEST_URI with REQUEST_FILENAME
SecRuleUpdateTargetById 930100 REQUEST_URI REQUEST_FILENAME

#Also add in ARGS
SecRuleUpdateTargetById 930100 ARGS

Or use ctl:ruleRemoveById version to only do this for certain URLs.

Thanks,
Barry

On 4 Sep 2016, at 18:25, Christian Folini <christian.folini at netnea.com<mailto:christian.folini at netnea.com>> wrote:

On Sun, Sep 04, 2016 at 08:08:53AM -0700, Ken Brucker wrote:
[ Not sure my first try posting made it through, I see it in the archive, but have had no response which I find odd. ]

I do not think the first inquiry made it through. But this time it did.

Thanks for the report. We'll investigate.

Cheers,

Christian


I have V3 rules running in a test environment playing with how it interacts with WordPress. My early investigation is showing a few rules that need to be addressed to allow code, sql examples etc. to be included in a post, nothing overly surprising.

I have a question about the construction of rules 930100 and 930110. These rules both examine REQUEST_BODY and REQUEST_HEADERS. Other rules, such as 930120 use ARGS and ARGS_NAMES, etc.

The result is it's not possible to disable 930100 and 930110 for specific ARGS where the patterns would be acceptable.

What is the motivation for the difference in how these rules are defined?

-- Ken

_______________________________________________
Owasp-modsecurity-core-rule-set mailing list
Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>
https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set


--
https://www.feistyduck.com/training/modsecurity-training-course
mailto:christian.folini at netnea.com
twitter: @ChrFolini
_______________________________________________
Owasp-modsecurity-core-rule-set mailing list
Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>
https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20160904/ad48b6ec/attachment.html>

From ken at pumastudios.com  Sun Sep  4 23:28:40 2016
From: ken at pumastudios.com (Ken Brucker)
Date: Sun, 4 Sep 2016 16:28:40 -0700
Subject: [Owasp-modsecurity-core-rule-set] CRS Version 3.0 RC1 Rules
	930100, 930110 definitions
In-Reply-To: <VI1PR06MB147127F66859ED4BD035653782E70@VI1PR06MB1471.eurprd06.prod.outlook.com>
References: <BC23FCDA-CA51-440B-A1CB-7C798941110D@pumastudios.com>
	<20160904170824.GA17644@elias>
	<VI1PR06MB147127F66859ED4BD035653782E70@VI1PR06MB1471.eurprd06.prod.outlook.com>
Message-ID: <BBAF4798-034D-40C5-8F93-E31F55F24495@pumastudios.com>

The false positive I get is on the WordPress backend.  If a post happens to include example path text that includes '../', it will trigger on these rules as the post is being saved.

I appreciate the hints on how to modify the rule locally. Much preferred over changing the rule set source.

In this case, I think the URI is OK and it's the REQUEST_BODY that I need to change. I don't recall which I saw in the audit log.

-- Ken

> On Sep 4, 2016, at 10:43 AM, Barry Pollard <barry_pollard at hotmail.com> wrote:
> 
> Been thinking about this and you've got me intrigued as to whether this was an intentional decision or not...
> 
> As far as I can see, you are right these could have been written using REQUEST_FILENAME and ARGS rather than REQUEST_URI and REQUEST_BODY.
> 
> ModSecurity is quite flexible and there are a few different ways of doing things. So it can depend on whoever writes the rules as to which version they use.
> 
> This is just a guess, but I wonder if the reason these variables were chosen is hinted at in this line in the manual ModSecurity manual (https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#REQUEST_BODY <https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#REQUEST_BODY>):
> 
> There are no default transformation functions, as there were in the first generation of ModSecurity (1.x).
> 
> and also lines like this:
> Note : Please note that anti-evasion transformations are not used on REQUEST_URI, which means that you will have to specify them in the rules that use this variable.
> I'm not sure what the default transformations were in ModSecurity 1.x, or if these were the anti-evasion transformations being discussed but wonder that was the reason - as it would prevent these rules from working if the ARGS were used and default transformations were applied?
> 
> If you need the ability to override these on certain ARGS (though I think that could be dangerous - and have personally never seen any false positives with these) you could replace them as you see fit - either directly in the file (not recommended as will be overwritten if you ever upgrade the CRS) or by altering the rules dynamically:
> 
> #Replace REQUEST_URI with REQUEST_FILENAME
> SecRuleUpdateTargetById 930100 REQUEST_URI REQUEST_FILENAME
> 
> #Also add in ARGS
> SecRuleUpdateTargetById 930100 ARGS
> 
> Or use ctl:ruleRemoveById version to only do this for certain URLs.
> 
> Thanks,
> Barry
> 
> On 4 Sep 2016, at 18:25, Christian Folini <christian.folini at netnea.com <mailto:christian.folini at netnea.com>> wrote:
> 
>> On Sun, Sep 04, 2016 at 08:08:53AM -0700, Ken Brucker wrote:
>>> [ Not sure my first try posting made it through, I see it in the archive, but have had no response which I find odd. ]
>> 
>> I do not think the first inquiry made it through. But this time it did.
>> 
>> Thanks for the report. We'll investigate.
>> 
>> Cheers,
>> 
>> Christian
>> 
>>> 
>>> I have V3 rules running in a test environment playing with how it interacts with WordPress. My early investigation is showing a few rules that need to be addressed to allow code, sql examples etc. to be included in a post, nothing overly surprising.
>>> 
>>> I have a question about the construction of rules 930100 and 930110. These rules both examine REQUEST_BODY and REQUEST_HEADERS. Other rules, such as 930120 use ARGS and ARGS_NAMES, etc.
>>> 
>>> The result is it's not possible to disable 930100 and 930110 for specific ARGS where the patterns would be acceptable.
>>> 
>>> What is the motivation for the difference in how these rules are defined?
>>> 
>>> -- Ken
>> 
>>> _______________________________________________
>>> Owasp-modsecurity-core-rule-set mailing list
>>> Owasp-modsecurity-core-rule-set at lists.owasp.org <mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>
>>> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set <https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set>
>> 
>> 
>> -- 
>> https://www.feistyduck.com/training/modsecurity-training-course <https://www.feistyduck.com/training/modsecurity-training-course>
>> mailto:christian.folini at netnea.com <mailto:christian.folini at netnea.com>
>> twitter: @ChrFolini
>> _______________________________________________
>> Owasp-modsecurity-core-rule-set mailing list
>> Owasp-modsecurity-core-rule-set at lists.owasp.org <mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>
>> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set <https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20160904/81fa0c44/attachment-0001.html>

From christian.folini at netnea.com  Mon Sep  5 11:02:25 2016
From: christian.folini at netnea.com (Christian Folini)
Date: Mon, 5 Sep 2016 13:02:25 +0200
Subject: [Owasp-modsecurity-core-rule-set] CRS Version 3.0 RC1 Rules
 930100, 930110 definitions
In-Reply-To: <BBAF4798-034D-40C5-8F93-E31F55F24495@pumastudios.com>
References: <BC23FCDA-CA51-440B-A1CB-7C798941110D@pumastudios.com>
	<20160904170824.GA17644@elias>
	<VI1PR06MB147127F66859ED4BD035653782E70@VI1PR06MB1471.eurprd06.prod.outlook.com>
	<BBAF4798-034D-40C5-8F93-E31F55F24495@pumastudios.com>
Message-ID: <20160905110225.GA14654@elias>

Hi Ken and Barry,

Thank you for reporting Ken. This is an interesting case.

As Barry has already laid down, these rules are somewhat historical
and we can not really guarantee everything was really, really
considered during the migration steps. At least a considerate
documentation of the reasoning behind the design decision was
not done.

My 2 cents:
- These are phase:2 rules. There are subtle implicit parameter
  transformation happening between phase 1 and 2. The use of
  REQUEST_URI_RAW (where these transformations are not happening)
  in 930100 could be a hint in this direction. However, 930110 does
  not use this. Actually I get a feeling, that REQUEST_URI won't
  necessarily catch "../" in the request uri on application server.
  But maybe I am wrong.
- Maybe there is a performance advantage in using regexes on 
  REQUEST_BODY over ARGS. With the disadvantage that you won't know
  where the hit occurred. So maybe this is an artefact. Maybe it is
  not. 
- 930100 is one of the optimized regexes, where we no longer have the
  source pattern list. If somebody could dis-assemble it, that would
  be neat.

So under the line, I do not have a lot to contribute. Sorry.

Christian


On Sun, Sep 04, 2016 at 04:28:40PM -0700, Ken Brucker wrote:
> The false positive I get is on the WordPress backend.  If a post happens to include example path text that includes '../', it will trigger on these rules as the post is being saved.
> 
> I appreciate the hints on how to modify the rule locally. Much preferred over changing the rule set source.
> 
> In this case, I think the URI is OK and it's the REQUEST_BODY that I need to change. I don't recall which I saw in the audit log.
> 
> -- Ken
> 
> > On Sep 4, 2016, at 10:43 AM, Barry Pollard <barry_pollard at hotmail.com> wrote:
> > 
> > Been thinking about this and you've got me intrigued as to whether this was an intentional decision or not...
> > 
> > As far as I can see, you are right these could have been written using REQUEST_FILENAME and ARGS rather than REQUEST_URI and REQUEST_BODY.
> > 
> > ModSecurity is quite flexible and there are a few different ways of doing things. So it can depend on whoever writes the rules as to which version they use.
> > 
> > This is just a guess, but I wonder if the reason these variables were chosen is hinted at in this line in the manual ModSecurity manual (https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#REQUEST_BODY <https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#REQUEST_BODY>):
> > 
> > There are no default transformation functions, as there were in the first generation of ModSecurity (1.x).
> > 
> > and also lines like this:
> > Note : Please note that anti-evasion transformations are not used on REQUEST_URI, which means that you will have to specify them in the rules that use this variable.
> > I'm not sure what the default transformations were in ModSecurity 1.x, or if these were the anti-evasion transformations being discussed but wonder that was the reason - as it would prevent these rules from working if the ARGS were used and default transformations were applied?
> > 
> > If you need the ability to override these on certain ARGS (though I think that could be dangerous - and have personally never seen any false positives with these) you could replace them as you see fit - either directly in the file (not recommended as will be overwritten if you ever upgrade the CRS) or by altering the rules dynamically:
> > 
> > #Replace REQUEST_URI with REQUEST_FILENAME
> > SecRuleUpdateTargetById 930100 REQUEST_URI REQUEST_FILENAME
> > 
> > #Also add in ARGS
> > SecRuleUpdateTargetById 930100 ARGS
> > 
> > Or use ctl:ruleRemoveById version to only do this for certain URLs.
> > 
> > Thanks,
> > Barry
> > 
> > On 4 Sep 2016, at 18:25, Christian Folini <christian.folini at netnea.com <mailto:christian.folini at netnea.com>> wrote:
> > 
> >> On Sun, Sep 04, 2016 at 08:08:53AM -0700, Ken Brucker wrote:
> >>> [ Not sure my first try posting made it through, I see it in the archive, but have had no response which I find odd. ]
> >> 
> >> I do not think the first inquiry made it through. But this time it did.
> >> 
> >> Thanks for the report. We'll investigate.
> >> 
> >> Cheers,
> >> 
> >> Christian
> >> 
> >>> 
> >>> I have V3 rules running in a test environment playing with how it interacts with WordPress. My early investigation is showing a few rules that need to be addressed to allow code, sql examples etc. to be included in a post, nothing overly surprising.
> >>> 
> >>> I have a question about the construction of rules 930100 and 930110. These rules both examine REQUEST_BODY and REQUEST_HEADERS. Other rules, such as 930120 use ARGS and ARGS_NAMES, etc.
> >>> 
> >>> The result is it's not possible to disable 930100 and 930110 for specific ARGS where the patterns would be acceptable.
> >>> 
> >>> What is the motivation for the difference in how these rules are defined?
> >>> 
> >>> -- Ken
> >> 
> >>> _______________________________________________
> >>> Owasp-modsecurity-core-rule-set mailing list
> >>> Owasp-modsecurity-core-rule-set at lists.owasp.org <mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>
> >>> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set <https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set>
> >> 
> >> 
> >> -- 
> >> https://www.feistyduck.com/training/modsecurity-training-course <https://www.feistyduck.com/training/modsecurity-training-course>
> >> mailto:christian.folini at netnea.com <mailto:christian.folini at netnea.com>
> >> twitter: @ChrFolini
> >> _______________________________________________
> >> Owasp-modsecurity-core-rule-set mailing list
> >> Owasp-modsecurity-core-rule-set at lists.owasp.org <mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>
> >> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set <https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set>
> 

> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set


-- 
https://www.feistyduck.com/training/modsecurity-training-course
mailto:christian.folini at netnea.com
twitter: @ChrFolini

From christian.folini at netnea.com  Mon Sep  5 11:09:59 2016
From: christian.folini at netnea.com (Christian Folini)
Date: Mon, 5 Sep 2016 13:09:59 +0200
Subject: [Owasp-modsecurity-core-rule-set] OWASP CRS v3.0 False Positive
 rule 920120
In-Reply-To: <D7A71DF0-C75A-4E81-B02D-AFC85F43DD4B@pumastudios.com>
References: <D7A71DF0-C75A-4E81-B02D-AFC85F43DD4B@pumastudios.com>
Message-ID: <20160905110959.GB14654@elias>

Hello Ken,

Classical False Positive.

You have your audit log parts configured to include only the I part.
I think the uploaded filename in question is
http://localhost:63391/d8edaf7f8a66068039906ecb9d04c451/image/7c2c6d05f122032b.jpg?size=1024

But could you please show us the C part - or dump the full traffic,
we this becomes visible.

And then, would you please open an issue on github for this?

Cheers,

Christian

On Sun, Sep 04, 2016 at 08:26:37AM -0700, Ken Brucker wrote:
> Playing with OWASP CRS v3.0 and have a false positive on rule 920120.
> 
> The application is Picasa (no longer available from Google). During file uploads it produces the failing pattern when communicating with the target website. I have no control over the application end of this and there's no hope for a fix from Google since they have dropped the product. It does still work however so I continue to use it.
> 
> I'm disabling this rule for this user agent using:
> 
> SecRule REQUEST_HEADERS:User-Agent "@beginsWith Picasa/3." "id:1010,phase:1,t:none,nolog,pass,ctl:ruleRemoveById=920120"
> 
> 
> Here's the entry from the audit log:
> 
> --93ede52c-A--
> [04/Sep/2016:07:57:20 --0700] V8w2UH8AAAEAADHQvy0AAABV 192.168.56.1 64619 192.16
> 8.56.101 80
> --93ede52c-B--
> POST /picasa_album_uploader/upload HTTP/1.1
> Host: wpdev.local
> Accept: */*
> Accept-Encoding: gzip
> Content-Length: 117779
> Content-Type: multipart/form-data; boundary=---------------------------98E77E01B
> 348
> Cookie: wordpress_logged_in_bdc5a801bed99bd8e2693412031c90e0=thor%7C1473173832%7
> COzgZxmia5N6cIlq8cByzDuXNOUtUG8ksqAsyHg12XMA%7Cd70c349c19dfc0274e629711840a30937
> a640e3c6f07362d76dab9bac3b58e68; wordpress_test_cookie=WP+Cookie+check
> Connection: keep-alive
> User-Agent: Picasa/3.9.141.306 (gzip)
> 
> --93ede52c-I--
> picasa%2dalbum%2duploader%2dupload%2dimages=48fd37703c&%5fwp%5fhttp%5freferer=%2
> fpicasa%5falbum%5fuploader%2fminibrowser&size=on&title%5b%5d=IMG%5f5306%2eJPG&ca
> ption%5b%5d=&description%5b%5d=
> --93ede52c-F--
> HTTP/1.1 403 Forbidden
> Content-Length: 237
> Connection: close
> Content-Type: text/html; charset=iso-8859-1
> 
> --93ede52c-E--
> 
> --93ede52c-H--
> Message: Warning. Pattern match "['\";=]" at FILES_NAMES:http://localhost:63391/
> d8edaf7f8a66068039906ecb9d04c451/image/7c2c6d05f122032b.jpg?size=1024. [file "/v
> agrant/owasp-modsecurity-crs/rules/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line
>  "108"] [id "920120"] [rev "1"] [msg "Attempted multipart/form-data bypass"] [da
> ta "http://localhost:63391/d8edaf7f8a66068039906ecb9d04c451/image/7c2c6d05f12203
> 2b.jpg?size=1024"] [severity "CRITICAL"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] 
> [accuracy "7"] [tag "application-multi"] [tag "language-multi"] [tag "platform-m
> ulti"] [tag "attack-protocol"] [tag "OWASP_CRS/PROTOCOL_VIOLATION/INVALID_REQ"] 
> [tag "CAPEC-272"]
> Message: Access denied with code 403 (phase 2). Operator GE matched 5 at TX:anom
> aly_score. [file "/vagrant/owasp-modsecurity-crs/rules/REQUEST-949-BLOCKING-EVAL
> UATION.conf"] [line "53"] [id "949110"] [msg "Inbound Anomaly Score Exceeded (To
> tal Score: 5)"] [severity "CRITICAL"] [tag "application-multi"] [tag "language-m
> ulti"] [tag "platform-multi"] [tag "attack-generic"]
> Message: Warning. Operator GE matched 5 at TX:inbound_anomaly_score. [file "/vag
> rant/owasp-modsecurity-crs/rules/RESPONSE-980-CORRELATION.conf"] [line "73"] [id
>  "980130"] [msg "Inbound Anomaly Score Exceeded (Total Inbound Score: 5 - SQLI=0
> ,XSS=0,RFI=0,LFI=0,RCE=0,PHPI=0,HTTP=0,SESS=0): Attempted multipart/form-data by
> pass"] [tag "event-correlation"]
> Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecuri
> ty: %s%s [uri "%s"]%s
> Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecuri
> ty: %s%s [uri "%s"]%s
> Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecuri
> ty: %s%s [uri "%s"]%s
> Action: Intercepted (phase 2)
> Stopwatch: 1473001040658089 39084 (- - -)
> Stopwatch2: 1473001040658089 39084; combined=2811, p1=201, p2=2420, p3=0, p4=0, 
> p5=189, sr=27, sw=1, l=0, gc=0
> Response-Body-Transformed: Dechunked
> Producer: ModSecurity for Apache/2.9.1 (http://www.modsecurity.org/); OWASP_CRS/
> 3.0.0.
> Server: Apache/2.4.23 (Ubuntu)
> Engine-Mode: "ENABLED"
> 
> --93ede52c-J--
> 4,116587,"IMG_5306.JPG","<Unknown ContentType>"
> Total,116587
> 
> --93ede52c-Z--
> 
> -- Ken

> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set


-- 
https://www.feistyduck.com/training/modsecurity-training-course
mailto:christian.folini at netnea.com
twitter: @ChrFolini

From ken at pumastudios.com  Mon Sep  5 15:05:51 2016
From: ken at pumastudios.com (Ken Brucker)
Date: Mon, 5 Sep 2016 08:05:51 -0700
Subject: [Owasp-modsecurity-core-rule-set] OWASP CRS v3.0 False Positive
	rule 920120
In-Reply-To: <20160905110959.GB14654@elias>
References: <D7A71DF0-C75A-4E81-B02D-AFC85F43DD4B@pumastudios.com>
	<20160905110959.GB14654@elias>
Message-ID: <1F8F8EA7-ECBA-4FC0-A6B8-1DD267E0389E@pumastudios.com>

Hi Christian,

Here's a redacted version that includes the C bit minus the content of the jpg file itself. I've added this to a github issue.

-- Ken

--0c41777f-A--
[05/Sep/2016:06:56:20 --0700] V815hH8AAAEAAFYB3d0AAABQ 192.168.56.1 62686 192.16
8.56.101 80
--0c41777f-B--
POST /picasa_album_uploader/upload HTTP/1.1
Host: wpdev.local
Accept: */*
Accept-Encoding: gzip
Content-Length: 134956
Content-Type: multipart/form-data; boundary=---------------------------482C81C09
614
Cookie: wordpress_logged_in_bdc5a801bed99bd8e2693412031c90e0=thor%7C1473256578%7
CqBvxoWnF7B59roUjZK1ypaRxJ6uqqhXJoKkgE1bUfGQ%7C0d1f9bd3868cf2a2df1330248d35e3689
623535f486e66910a9700ae4c2c16dd; wordpress_test_cookie=WP+Cookie+check
Connection: keep-alive
User-Agent: Picasa/3.9.141.306 (gzip)

--0c41777f-C--
-----------------------------482C81C09614
Content-Disposition: form-data; name="picasa-album-uploader-upload-images"
Content-Type: text/plain; charset=utf-8

0349e21fed
-----------------------------482C81C09614
Content-Disposition: form-data; name="_wp_http_referer"
Content-Type: text/plain; charset=utf-8

/picasa_album_uploader/minibrowser
-----------------------------482C81C09614
Content-Disposition: form-data; name="size"
Content-Type: text/plain; charset=utf-8

on
-----------------------------482C81C09614
Content-Disposition: form-data; name="http://localhost:62667/2d1afc4dac01219e865
92ecb3f4a9d8e/image/2fa2bc77befd46db.jpg?size=1024"; filename="IMG_6822.JPG"
Content-Type: image/jpeg
 
[ Redacted ]

-----------------------------482C81C09614
Content-Disposition: form-data; name="title[]"
Content-Type: text/plain; charset=utf-8

IMG_6822.JPG
-----------------------------482C81C09614
Content-Disposition: form-data; name="caption[]"
Content-Type: text/plain; charset=utf-8


-----------------------------482C81C09614
Content-Disposition: form-data; name="description[]"
Content-Type: text/plain; charset=utf-8

Deer in Austin
-----------------------------482C81C09614--

--0c41777f-F--
HTTP/1.1 403 Forbidden
Content-Length: 237
Connection: close
Content-Type: text/html; charset=iso-8859-1

--0c41777f-H--
Message: Warning. Pattern match "['\";=]" at FILES_NAMES:http://localhost:62667/
2d1afc4dac01219e86592ecb3f4a9d8e/image/2fa2bc77befd46db.jpg?size=1024. [file "/vagrant/owasp-modsecurity-crs/rules/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line "108"] [id "920120"] [rev "1"] [msg "Attempted multipart/form-data bypass"] [data "http://localhost:62667/2d1afc4dac01219e86592ecb3f4a9d8e/image/2fa2bc77befd46db.jpg?size=1024"] [severity "CRITICAL"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "7"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-protocol"] [tag "OWASP_CRS/PROTOCOL_VIOLATION/INVALID_REQ"] [tag "CAPEC-272"]
Message: Access denied with code 403 (phase 2). Operator GE matched 5 at TX:anomaly_score. [file "/vagrant/owasp-modsecurity-crs/rules/REQUEST-949-BLOCKING-EVALUATION.conf"] [line "53"] [id "949110"] [msg "Inbound Anomaly Score Exceeded (Total Score: 5)"] [severity "CRITICAL"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-generic"]
Message: Warning. Operator GE matched 5 at TX:inbound_anomaly_score. [file "/vagrant/owasp-modsecurity-crs/rules/RESPONSE-980-CORRELATION.conf"] [line "73"] [id "980130"] [msg "Inbound Anomaly Score Exceeded (Total Inbound Score: 5 - SQLI=0,XSS=0,RFI=0,LFI=0,RCE=0,PHPI=0,HTTP=0,SESS=0): Attempted multipart/form-data bypass"] [tag "event-correlation"]
Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecurity: %s%s [uri "%s"]%s
Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecurity: %s%s [uri "%s"]%s
Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecurity: %s%s [uri "%s"]%s
Action: Intercepted (phase 2)
Stopwatch: 1473083780329702 6475 (- - -)
Stopwatch2: 1473083780329702 6475; combined=2451, p1=208, p2=2078, p3=0, p4=0, p5=164, sr=26, sw=1, l=0, gc=0
Producer: ModSecurity for Apache/2.9.1 (http://www.modsecurity.org/); OWASP_CRS/3.0.0.
Server: Apache/2.4.23 (Ubuntu)
Engine-Mode: "ENABLED"

--0c41777f-J--
4,133750,"IMG_6822.JPG","<Unknown ContentType>"
Total,133750

--0c41777f-Z--


> On Sep 5, 2016, at 4:09 AM, Christian Folini <christian.folini at netnea.com> wrote:
> 
> Hello Ken,
> 
> Classical False Positive.
> 
> You have your audit log parts configured to include only the I part.
> I think the uploaded filename in question is
> http://localhost:63391/d8edaf7f8a66068039906ecb9d04c451/image/7c2c6d05f122032b.jpg?size=1024
> 
> But could you please show us the C part - or dump the full traffic,
> we this becomes visible.
> 
> And then, would you please open an issue on github for this?
> 
> Cheers,
> 
> Christian
> 
> On Sun, Sep 04, 2016 at 08:26:37AM -0700, Ken Brucker wrote:
>> Playing with OWASP CRS v3.0 and have a false positive on rule 920120.
>> 
>> The application is Picasa (no longer available from Google). During file uploads it produces the failing pattern when communicating with the target website. I have no control over the application end of this and there's no hope for a fix from Google since they have dropped the product. It does still work however so I continue to use it.
>> 
>> I'm disabling this rule for this user agent using:
>> 
>> SecRule REQUEST_HEADERS:User-Agent "@beginsWith Picasa/3." "id:1010,phase:1,t:none,nolog,pass,ctl:ruleRemoveById=920120"
>> 
>> 
>> Here's the entry from the audit log:
>> 
>> --93ede52c-A--
>> [04/Sep/2016:07:57:20 --0700] V8w2UH8AAAEAADHQvy0AAABV 192.168.56.1 64619 192.16
>> 8.56.101 80
>> --93ede52c-B--
>> POST /picasa_album_uploader/upload HTTP/1.1
>> Host: wpdev.local
>> Accept: */*
>> Accept-Encoding: gzip
>> Content-Length: 117779
>> Content-Type: multipart/form-data; boundary=---------------------------98E77E01B
>> 348
>> Cookie: wordpress_logged_in_bdc5a801bed99bd8e2693412031c90e0=thor%7C1473173832%7
>> COzgZxmia5N6cIlq8cByzDuXNOUtUG8ksqAsyHg12XMA%7Cd70c349c19dfc0274e629711840a30937
>> a640e3c6f07362d76dab9bac3b58e68; wordpress_test_cookie=WP+Cookie+check
>> Connection: keep-alive
>> User-Agent: Picasa/3.9.141.306 (gzip)
>> 
>> --93ede52c-I--
>> picasa%2dalbum%2duploader%2dupload%2dimages=48fd37703c&%5fwp%5fhttp%5freferer=%2
>> fpicasa%5falbum%5fuploader%2fminibrowser&size=on&title%5b%5d=IMG%5f5306%2eJPG&ca
>> ption%5b%5d=&description%5b%5d=
>> --93ede52c-F--
>> HTTP/1.1 403 Forbidden
>> Content-Length: 237
>> Connection: close
>> Content-Type: text/html; charset=iso-8859-1
>> 
>> --93ede52c-E--
>> 
>> --93ede52c-H--
>> Message: Warning. Pattern match "['\";=]" at FILES_NAMES:http://localhost:63391/
>> d8edaf7f8a66068039906ecb9d04c451/image/7c2c6d05f122032b.jpg?size=1024. [file "/v
>> agrant/owasp-modsecurity-crs/rules/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line
>> "108"] [id "920120"] [rev "1"] [msg "Attempted multipart/form-data bypass"] [da
>> ta "http://localhost:63391/d8edaf7f8a66068039906ecb9d04c451/image/7c2c6d05f12203
>> 2b.jpg?size=1024"] [severity "CRITICAL"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] 
>> [accuracy "7"] [tag "application-multi"] [tag "language-multi"] [tag "platform-m
>> ulti"] [tag "attack-protocol"] [tag "OWASP_CRS/PROTOCOL_VIOLATION/INVALID_REQ"] 
>> [tag "CAPEC-272"]
>> Message: Access denied with code 403 (phase 2). Operator GE matched 5 at TX:anom
>> aly_score. [file "/vagrant/owasp-modsecurity-crs/rules/REQUEST-949-BLOCKING-EVAL
>> UATION.conf"] [line "53"] [id "949110"] [msg "Inbound Anomaly Score Exceeded (To
>> tal Score: 5)"] [severity "CRITICAL"] [tag "application-multi"] [tag "language-m
>> ulti"] [tag "platform-multi"] [tag "attack-generic"]
>> Message: Warning. Operator GE matched 5 at TX:inbound_anomaly_score. [file "/vag
>> rant/owasp-modsecurity-crs/rules/RESPONSE-980-CORRELATION.conf"] [line "73"] [id
>> "980130"] [msg "Inbound Anomaly Score Exceeded (Total Inbound Score: 5 - SQLI=0
>> ,XSS=0,RFI=0,LFI=0,RCE=0,PHPI=0,HTTP=0,SESS=0): Attempted multipart/form-data by
>> pass"] [tag "event-correlation"]
>> Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecuri
>> ty: %s%s [uri "%s"]%s
>> Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecuri
>> ty: %s%s [uri "%s"]%s
>> Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecuri
>> ty: %s%s [uri "%s"]%s
>> Action: Intercepted (phase 2)
>> Stopwatch: 1473001040658089 39084 (- - -)
>> Stopwatch2: 1473001040658089 39084; combined=2811, p1=201, p2=2420, p3=0, p4=0, 
>> p5=189, sr=27, sw=1, l=0, gc=0
>> Response-Body-Transformed: Dechunked
>> Producer: ModSecurity for Apache/2.9.1 (http://www.modsecurity.org/); OWASP_CRS/
>> 3.0.0.
>> Server: Apache/2.4.23 (Ubuntu)
>> Engine-Mode: "ENABLED"
>> 
>> --93ede52c-J--
>> 4,116587,"IMG_5306.JPG","<Unknown ContentType>"
>> Total,116587
>> 
>> --93ede52c-Z--
>> 
>> -- Ken
> 
>> _______________________________________________
>> Owasp-modsecurity-core-rule-set mailing list
>> Owasp-modsecurity-core-rule-set at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
> 
> 
> -- 
> https://www.feistyduck.com/training/modsecurity-training-course
> mailto:christian.folini at netnea.com
> twitter: @ChrFolini

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20160905/b44e4fa9/attachment-0001.html>

From christian.folini at netnea.com  Mon Sep  5 15:18:24 2016
From: christian.folini at netnea.com (Christian Folini)
Date: Mon, 5 Sep 2016 17:18:24 +0200
Subject: [Owasp-modsecurity-core-rule-set] OWASP CRS v3.0 False Positive
 rule 920120
In-Reply-To: <1F8F8EA7-ECBA-4FC0-A6B8-1DD267E0389E@pumastudios.com>
References: <D7A71DF0-C75A-4E81-B02D-AFC85F43DD4B@pumastudios.com>
	<20160905110959.GB14654@elias>
	<1F8F8EA7-ECBA-4FC0-A6B8-1DD267E0389E@pumastudios.com>
Message-ID: <20160905151824.GA7941@elias>

Cool. Thanks.

On Mon, Sep 05, 2016 at 08:05:51AM -0700, Ken Brucker wrote:
> Hi Christian,
> 
> Here's a redacted version that includes the C bit minus the content of the jpg file itself. I've added this to a github issue.
> 
> -- Ken
> 
> --0c41777f-A--
> [05/Sep/2016:06:56:20 --0700] V815hH8AAAEAAFYB3d0AAABQ 192.168.56.1 62686 192.16
> 8.56.101 80
> --0c41777f-B--
> POST /picasa_album_uploader/upload HTTP/1.1
> Host: wpdev.local
> Accept: */*
> Accept-Encoding: gzip
> Content-Length: 134956
> Content-Type: multipart/form-data; boundary=---------------------------482C81C09
> 614
> Cookie: wordpress_logged_in_bdc5a801bed99bd8e2693412031c90e0=thor%7C1473256578%7
> CqBvxoWnF7B59roUjZK1ypaRxJ6uqqhXJoKkgE1bUfGQ%7C0d1f9bd3868cf2a2df1330248d35e3689
> 623535f486e66910a9700ae4c2c16dd; wordpress_test_cookie=WP+Cookie+check
> Connection: keep-alive
> User-Agent: Picasa/3.9.141.306 (gzip)
> 
> --0c41777f-C--
> -----------------------------482C81C09614
> Content-Disposition: form-data; name="picasa-album-uploader-upload-images"
> Content-Type: text/plain; charset=utf-8
> 
> 0349e21fed
> -----------------------------482C81C09614
> Content-Disposition: form-data; name="_wp_http_referer"
> Content-Type: text/plain; charset=utf-8
> 
> /picasa_album_uploader/minibrowser
> -----------------------------482C81C09614
> Content-Disposition: form-data; name="size"
> Content-Type: text/plain; charset=utf-8
> 
> on
> -----------------------------482C81C09614
> Content-Disposition: form-data; name="http://localhost:62667/2d1afc4dac01219e865
> 92ecb3f4a9d8e/image/2fa2bc77befd46db.jpg?size=1024"; filename="IMG_6822.JPG"
> Content-Type: image/jpeg
>  
> [ Redacted ]
> 
> -----------------------------482C81C09614
> Content-Disposition: form-data; name="title[]"
> Content-Type: text/plain; charset=utf-8
> 
> IMG_6822.JPG
> -----------------------------482C81C09614
> Content-Disposition: form-data; name="caption[]"
> Content-Type: text/plain; charset=utf-8
> 
> 
> -----------------------------482C81C09614
> Content-Disposition: form-data; name="description[]"
> Content-Type: text/plain; charset=utf-8
> 
> Deer in Austin
> -----------------------------482C81C09614--
> 
> --0c41777f-F--
> HTTP/1.1 403 Forbidden
> Content-Length: 237
> Connection: close
> Content-Type: text/html; charset=iso-8859-1
> 
> --0c41777f-H--
> Message: Warning. Pattern match "['\";=]" at FILES_NAMES:http://localhost:62667/
> 2d1afc4dac01219e86592ecb3f4a9d8e/image/2fa2bc77befd46db.jpg?size=1024. [file "/vagrant/owasp-modsecurity-crs/rules/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line "108"] [id "920120"] [rev "1"] [msg "Attempted multipart/form-data bypass"] [data "http://localhost:62667/2d1afc4dac01219e86592ecb3f4a9d8e/image/2fa2bc77befd46db.jpg?size=1024"] [severity "CRITICAL"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "7"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-protocol"] [tag "OWASP_CRS/PROTOCOL_VIOLATION/INVALID_REQ"] [tag "CAPEC-272"]
> Message: Access denied with code 403 (phase 2). Operator GE matched 5 at TX:anomaly_score. [file "/vagrant/owasp-modsecurity-crs/rules/REQUEST-949-BLOCKING-EVALUATION.conf"] [line "53"] [id "949110"] [msg "Inbound Anomaly Score Exceeded (Total Score: 5)"] [severity "CRITICAL"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-generic"]
> Message: Warning. Operator GE matched 5 at TX:inbound_anomaly_score. [file "/vagrant/owasp-modsecurity-crs/rules/RESPONSE-980-CORRELATION.conf"] [line "73"] [id "980130"] [msg "Inbound Anomaly Score Exceeded (Total Inbound Score: 5 - SQLI=0,XSS=0,RFI=0,LFI=0,RCE=0,PHPI=0,HTTP=0,SESS=0): Attempted multipart/form-data bypass"] [tag "event-correlation"]
> Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecurity: %s%s [uri "%s"]%s
> Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecurity: %s%s [uri "%s"]%s
> Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecurity: %s%s [uri "%s"]%s
> Action: Intercepted (phase 2)
> Stopwatch: 1473083780329702 6475 (- - -)
> Stopwatch2: 1473083780329702 6475; combined=2451, p1=208, p2=2078, p3=0, p4=0, p5=164, sr=26, sw=1, l=0, gc=0
> Producer: ModSecurity for Apache/2.9.1 (http://www.modsecurity.org/); OWASP_CRS/3.0.0.
> Server: Apache/2.4.23 (Ubuntu)
> Engine-Mode: "ENABLED"
> 
> --0c41777f-J--
> 4,133750,"IMG_6822.JPG","<Unknown ContentType>"
> Total,133750
> 
> --0c41777f-Z--
> 
> 
> > On Sep 5, 2016, at 4:09 AM, Christian Folini <christian.folini at netnea.com> wrote:
> > 
> > Hello Ken,
> > 
> > Classical False Positive.
> > 
> > You have your audit log parts configured to include only the I part.
> > I think the uploaded filename in question is
> > http://localhost:63391/d8edaf7f8a66068039906ecb9d04c451/image/7c2c6d05f122032b.jpg?size=1024
> > 
> > But could you please show us the C part - or dump the full traffic,
> > we this becomes visible.
> > 
> > And then, would you please open an issue on github for this?
> > 
> > Cheers,
> > 
> > Christian
> > 
> > On Sun, Sep 04, 2016 at 08:26:37AM -0700, Ken Brucker wrote:
> >> Playing with OWASP CRS v3.0 and have a false positive on rule 920120.
> >> 
> >> The application is Picasa (no longer available from Google). During file uploads it produces the failing pattern when communicating with the target website. I have no control over the application end of this and there's no hope for a fix from Google since they have dropped the product. It does still work however so I continue to use it.
> >> 
> >> I'm disabling this rule for this user agent using:
> >> 
> >> SecRule REQUEST_HEADERS:User-Agent "@beginsWith Picasa/3." "id:1010,phase:1,t:none,nolog,pass,ctl:ruleRemoveById=920120"
> >> 
> >> 
> >> Here's the entry from the audit log:
> >> 
> >> --93ede52c-A--
> >> [04/Sep/2016:07:57:20 --0700] V8w2UH8AAAEAADHQvy0AAABV 192.168.56.1 64619 192.16
> >> 8.56.101 80
> >> --93ede52c-B--
> >> POST /picasa_album_uploader/upload HTTP/1.1
> >> Host: wpdev.local
> >> Accept: */*
> >> Accept-Encoding: gzip
> >> Content-Length: 117779
> >> Content-Type: multipart/form-data; boundary=---------------------------98E77E01B
> >> 348
> >> Cookie: wordpress_logged_in_bdc5a801bed99bd8e2693412031c90e0=thor%7C1473173832%7
> >> COzgZxmia5N6cIlq8cByzDuXNOUtUG8ksqAsyHg12XMA%7Cd70c349c19dfc0274e629711840a30937
> >> a640e3c6f07362d76dab9bac3b58e68; wordpress_test_cookie=WP+Cookie+check
> >> Connection: keep-alive
> >> User-Agent: Picasa/3.9.141.306 (gzip)
> >> 
> >> --93ede52c-I--
> >> picasa%2dalbum%2duploader%2dupload%2dimages=48fd37703c&%5fwp%5fhttp%5freferer=%2
> >> fpicasa%5falbum%5fuploader%2fminibrowser&size=on&title%5b%5d=IMG%5f5306%2eJPG&ca
> >> ption%5b%5d=&description%5b%5d=
> >> --93ede52c-F--
> >> HTTP/1.1 403 Forbidden
> >> Content-Length: 237
> >> Connection: close
> >> Content-Type: text/html; charset=iso-8859-1
> >> 
> >> --93ede52c-E--
> >> 
> >> --93ede52c-H--
> >> Message: Warning. Pattern match "['\";=]" at FILES_NAMES:http://localhost:63391/
> >> d8edaf7f8a66068039906ecb9d04c451/image/7c2c6d05f122032b.jpg?size=1024. [file "/v
> >> agrant/owasp-modsecurity-crs/rules/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line
> >> "108"] [id "920120"] [rev "1"] [msg "Attempted multipart/form-data bypass"] [da
> >> ta "http://localhost:63391/d8edaf7f8a66068039906ecb9d04c451/image/7c2c6d05f12203
> >> 2b.jpg?size=1024"] [severity "CRITICAL"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] 
> >> [accuracy "7"] [tag "application-multi"] [tag "language-multi"] [tag "platform-m
> >> ulti"] [tag "attack-protocol"] [tag "OWASP_CRS/PROTOCOL_VIOLATION/INVALID_REQ"] 
> >> [tag "CAPEC-272"]
> >> Message: Access denied with code 403 (phase 2). Operator GE matched 5 at TX:anom
> >> aly_score. [file "/vagrant/owasp-modsecurity-crs/rules/REQUEST-949-BLOCKING-EVAL
> >> UATION.conf"] [line "53"] [id "949110"] [msg "Inbound Anomaly Score Exceeded (To
> >> tal Score: 5)"] [severity "CRITICAL"] [tag "application-multi"] [tag "language-m
> >> ulti"] [tag "platform-multi"] [tag "attack-generic"]
> >> Message: Warning. Operator GE matched 5 at TX:inbound_anomaly_score. [file "/vag
> >> rant/owasp-modsecurity-crs/rules/RESPONSE-980-CORRELATION.conf"] [line "73"] [id
> >> "980130"] [msg "Inbound Anomaly Score Exceeded (Total Inbound Score: 5 - SQLI=0
> >> ,XSS=0,RFI=0,LFI=0,RCE=0,PHPI=0,HTTP=0,SESS=0): Attempted multipart/form-data by
> >> pass"] [tag "event-correlation"]
> >> Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecuri
> >> ty: %s%s [uri "%s"]%s
> >> Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecuri
> >> ty: %s%s [uri "%s"]%s
> >> Apache-Error: [file "apache2_util.c"] [line 271] [level 3] [client %s] ModSecuri
> >> ty: %s%s [uri "%s"]%s
> >> Action: Intercepted (phase 2)
> >> Stopwatch: 1473001040658089 39084 (- - -)
> >> Stopwatch2: 1473001040658089 39084; combined=2811, p1=201, p2=2420, p3=0, p4=0, 
> >> p5=189, sr=27, sw=1, l=0, gc=0
> >> Response-Body-Transformed: Dechunked
> >> Producer: ModSecurity for Apache/2.9.1 (http://www.modsecurity.org/); OWASP_CRS/
> >> 3.0.0.
> >> Server: Apache/2.4.23 (Ubuntu)
> >> Engine-Mode: "ENABLED"
> >> 
> >> --93ede52c-J--
> >> 4,116587,"IMG_5306.JPG","<Unknown ContentType>"
> >> Total,116587
> >> 
> >> --93ede52c-Z--
> >> 
> >> -- Ken
> > 
> >> _______________________________________________
> >> Owasp-modsecurity-core-rule-set mailing list
> >> Owasp-modsecurity-core-rule-set at lists.owasp.org
> >> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
> > 
> > 
> > -- 
> > https://www.feistyduck.com/training/modsecurity-training-course
> > mailto:christian.folini at netnea.com
> > twitter: @ChrFolini
> 

From ken at pumastudios.com  Mon Sep  5 19:23:44 2016
From: ken at pumastudios.com (Ken Brucker)
Date: Mon, 5 Sep 2016 12:23:44 -0700
Subject: [Owasp-modsecurity-core-rule-set] CRS v3.0 Wordpress False Positives
Message-ID: <B542CEBC-D7BE-4E22-8A42-A1BB38F6823C@pumastudios.com>

I see a variety of false positives with WordPress and CRS v3.0.

In light of Issue 527 <https://github.com/SpiderLabs/owasp-modsecurity-crs/issues/527> (Policy for handling app specific FPs) should I be filing a github issue for each of them that I've seen? There are a number of easy to create FPs when creating post content that include example code, sql statements, embedded URLs, etc.

-- Ken
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20160905/85585adc/attachment.html>

From christian.folini at netnea.com  Mon Sep  5 20:10:33 2016
From: christian.folini at netnea.com (Christian Folini)
Date: Mon, 5 Sep 2016 22:10:33 +0200
Subject: [Owasp-modsecurity-core-rule-set] CRS v3.0 Wordpress False
 Positives
In-Reply-To: <B542CEBC-D7BE-4E22-8A42-A1BB38F6823C@pumastudios.com>
References: <B542CEBC-D7BE-4E22-8A42-A1BB38F6823C@pumastudios.com>
Message-ID: <20160905201033.GA4114@elias>

Ken,

Yes, there must be a few around. Maybe a systematic approach would be 
appropriate here. Maybe open an issue and list them within, grouped
by some useful criteria.

Also depends a bit on the amount of work you are willing to invest.

Ahoj,

Christian



On Mon, Sep 05, 2016 at 12:23:44PM -0700, Ken Brucker wrote:
> I see a variety of false positives with WordPress and CRS v3.0.
> 
> In light of Issue 527 <https://github.com/SpiderLabs/owasp-modsecurity-crs/issues/527> (Policy for handling app specific FPs) should I be filing a github issue for each of them that I've seen? There are a number of easy to create FPs when creating post content that include example code, sql statements, embedded URLs, etc.
> 
> -- Ken

> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set


-- 
https://www.feistyduck.com/training/modsecurity-training-course
mailto:christian.folini at netnea.com
twitter: @ChrFolini

From modsec at spam.lifeforms.nl  Mon Sep  5 20:11:19 2016
From: modsec at spam.lifeforms.nl (Walter Hop)
Date: Mon, 5 Sep 2016 22:11:19 +0200
Subject: [Owasp-modsecurity-core-rule-set] CRS v3.0 Wordpress False
	Positives
In-Reply-To: <B542CEBC-D7BE-4E22-8A42-A1BB38F6823C@pumastudios.com>
References: <B542CEBC-D7BE-4E22-8A42-A1BB38F6823C@pumastudios.com>
Message-ID: <A0099FF1-EFE6-4E8F-A309-854FBACBFDCE@spam.lifeforms.nl>

> On 05 Sep 2016, at 21:23, Ken Brucker <ken at pumastudios.com> wrote:
> 
> I see a variety of false positives with WordPress and CRS v3.0.
> 
> In light of Issue 527 <https://github.com/SpiderLabs/owasp-modsecurity-crs/issues/527> (Policy for handling app specific FPs) should I be filing a github issue for each of them that I've seen? There are a number of easy to create FPs when creating post content that include example code, sql statements, embedded URLs, etc.

I definitely want to address WordPress false positives in RC2. We still have to think a bit about the scope. Most WordPress plugins will probably be out of scope since there so many obscure ones, and also there are many concerns about their code quality (ubiquitous XSS and SQLi are the norm sadly). But WordPress core functions for editing post content should be supported without problem.

Your information will be very helpful. If you could create Github issues for your false positives, we?ll review them and if reasonably possible fix them in RC2.

-- 
Walter Hop | PGP key: https://lifeforms.nl/pgp

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20160905/22fde739/attachment.html>

From ken at pumastudios.com  Mon Sep  5 20:28:49 2016
From: ken at pumastudios.com (Ken Brucker)
Date: Mon, 5 Sep 2016 13:28:49 -0700
Subject: [Owasp-modsecurity-core-rule-set] CRS v3.0 Wordpress False
	Positives
In-Reply-To: <20160905201033.GA4114@elias>
References: <B542CEBC-D7BE-4E22-8A42-A1BB38F6823C@pumastudios.com>
	<20160905201033.GA4114@elias>
Message-ID: <581CBFD4-56F3-453C-A4CB-F97F58A272A1@pumastudios.com>

Christian,

I'll think about how to collect details. There's various classes of problems, some with core WP and others that are theme or plugin specific. 

Some default handling will be better than none to improve the out of box integration of WP with modsecurity.

-- Ken

> On Sep 5, 2016, at 1:10 PM, Christian Folini <christian.folini at netnea.com> wrote:
> 
> Ken,
> 
> Yes, there must be a few around. Maybe a systematic approach would be 
> appropriate here. Maybe open an issue and list them within, grouped
> by some useful criteria.
> 
> Also depends a bit on the amount of work you are willing to invest.
> 
> Ahoj,
> 
> Christian
> 
> 
> 
> On Mon, Sep 05, 2016 at 12:23:44PM -0700, Ken Brucker wrote:
>> I see a variety of false positives with WordPress and CRS v3.0.
>> 
>> In light of Issue 527 <https://github.com/SpiderLabs/owasp-modsecurity-crs/issues/527> (Policy for handling app specific FPs) should I be filing a github issue for each of them that I've seen? There are a number of easy to create FPs when creating post content that include example code, sql statements, embedded URLs, etc.
>> 
>> -- Ken
> 
>> _______________________________________________
>> Owasp-modsecurity-core-rule-set mailing list
>> Owasp-modsecurity-core-rule-set at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
> 
> 
> -- 
> https://www.feistyduck.com/training/modsecurity-training-course
> mailto:christian.folini at netnea.com
> twitter: @ChrFolini


From detailyang at gmail.com  Sun Sep 11 03:41:39 2016
From: detailyang at gmail.com (Bingwu Yang)
Date: Sun, 11 Sep 2016 11:41:39 +0800
Subject: [Owasp-modsecurity-core-rule-set] How to test v3.0.0-rc2
Message-ID: <CAHhYu0h-zvdVD+mD=GXU8=ggv9ew+dZi+pSbxwiGeV8Zsh7qsQ@mail.gmail.com>

Hello, i have installed CRS-v3.0.0-rc1 on apache, my config is the
following:

<IfModule security3_module>
sethandler security3_module
Include conf/owasp-modsecurity-crs-3.0.0-rc1/rules/*.conf
modsecurity On
modsecurity_rules_file path
modsecurity_rules_remote key uri
modsecurity_rules rule
IN On
OUT On
</IfModule>

I want to know how can i test these rules ( i mean how to trigger rule:) )
?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20160911/ce3548c4/attachment.html>

From christian.folini at netnea.com  Sun Sep 11 04:49:10 2016
From: christian.folini at netnea.com (Christian Folini)
Date: Sun, 11 Sep 2016 06:49:10 +0200
Subject: [Owasp-modsecurity-core-rule-set] How to test v3.0.0-rc2
In-Reply-To: <CAHhYu0h-zvdVD+mD=GXU8=ggv9ew+dZi+pSbxwiGeV8Zsh7qsQ@mail.gmail.com>
References: <CAHhYu0h-zvdVD+mD=GXU8=ggv9ew+dZi+pSbxwiGeV8Zsh7qsQ@mail.gmail.com>
Message-ID: <20160911044910.GA14025@elias>

Hi there,

On Sun, Sep 11, 2016 at 11:41:39AM +0800, Bingwu Yang wrote:
> Hello, i have installed CRS-v3.0.0-rc1 on apache, my config is the
> following:
> 
> <IfModule security3_module>

I am not sure ModSec3 / libmodsecurity is already in a state where it
can handle the full core rule set. Probably not and you are better
of with ModSec 2.9.1.

> Include conf/owasp-modsecurity-crs-3.0.0-rc1/rules/*.conf

It looks like you are missing the crs-setup.conf file.
Please follow the instructions in the INSTALL file.

> I want to know how can i test these rules ( i mean how to trigger rule:) )
> ?

A request with a query string parameter containing "/etc/passwd" is
a decent benchmark. It should bring 2 rule hits:
930120 OS File Access Attempt
932160 Remote Command Execution: Unix Shell Code Found

Please report any issues with the CRS3 that you encounter.

Ahoj,

Christian


-- 
If you have men who will only come if they know there is a good road, 
I don't want them. I want men who will come if there is no road at all.
-- David Livingstone

