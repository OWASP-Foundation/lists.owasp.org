From chris at riverstyx.net  Mon Feb  7 14:09:43 2011
From: chris at riverstyx.net (Chris Swanson)
Date: Mon, 07 Feb 2011 11:09:43 -0800
Subject: [Owasp-modsecurity-core-rule-set] Modsecurity crs 2.1.1
 41_advanced_filters & Lua issue
In-Reply-To: <1296088677.3142.14.camel@chris-desktop>
References: <1296088677.3142.14.camel@chris-desktop>
Message-ID: <1297105783.14750.7.camel@chris-desktop>

Hi, we haven't had any luck with this issue, just wondering if anyone
else has seen this or knows a solution?

Here is the original email and a response follow up with some
suggestions.

Thanks
-Chris




On Wed, 2011-01-26 at 16:37 -0800, Chris Swanson wrote:

> Hi, we're having a hard time with the new update(s) and Lua in our
> testing environment. Here's the error we're seeing in Audit Console,
> this is opening up a single transaction: 
> 
> Unknown  | Lua: Script execution failed: attempt to call a nil value
> Unknown  | Rule processing failed.
> 
> 
> This is happening with modsecurity 2.5.13 and modsec CRS 2.1.1 on our
> Debian 5 servers, apache is configured with:
> 
> ./configure --prefix=/usr/local/apache --disable-userdir
> --enable-rewrite --enable-so --enable-info --enable-status
> --enable-ssl
> --enable-cgi --enable-unique-id --enable-mime-magic
> --with-included-apr
> --with-pcre=/usr/bin/pcre-config --enable-deflate --enable-expires
> --enable-headers
> 
> modsecuirty cofigured with:
> 
> ./configure --with-apxs=/usr/local/apache/bin/apxs
> --with-apr=/usr/local/apache/bin/apr-1-config
> 
> 
> I've narrowed it down to the include in our http.conf for
> modsecurity_crs_41_advanced_filters.conf, which was previously working
> as the phpids rules. Even further, by commenting out this section at
> the
> top of the 41_advanced_filters file everything works fine:
> 
> # Lua script to normalize input payloads
> # Based on PHPIDS Converter.php code
> # Reference the following whitepaper -
> # http://docs.google.com/Doc?id=dd7x5smw_17g9cnx2cn 
> # 
> SecRuleScript ../lua/advanced_filter_converter.lua
> "phase:2,t:none,pass"
> SecRule TX:/centrifuge_ratio/ ".*"
> "phase:2,t:none,log,capture,msg:'Centrifuge Threshold Alert - Ratio
> Value is: %{tx.0}'"
> 
> 
> Here is the modsecurity includes in our http.conf
> 
> #modsecurity Rules
> Include conf/modsecurity.conf
> Include conf/modsecurity-crs_2.1.1/*.conf
> Include
> conf/modsecurity-crs_2.1.1/experimental_rules/modsecurity_crs_41_advanced_filters.conf
> Include
> conf/modsecurity-crs_2.1.1/optional_rules/modsecurity_crs_25_cc_known.conf
> Include conf/modsecurity-crs_2.1.1/base_rules/*conf
> 
> 
> With the same setup and versions Modsecurity/Apache, CRS 2.0.10 worked
> perfectly. We could move forward without Lua functionally, but I'm
> lost
> as to why such a big addition would be broken from the get-go. Haven't
> been able to find anyone posting with a similar issue so any help
> would
> be greatly appreciated.
> 
> 
> Thanks,
> -Chris
> 



> A couple questions -
> 
> 1) Did you modify the path to Lua in the script to point to your local
> version?
> 2) Did you install the additional bitop Lua module?
> http://bitop.luajit.org/
>    It is specified at the top of the script in a require statement.
> This
> is needed for the Octal to Decimal conversions.

I was missing Bitop, I've installed it from source, changed the install
path for Debian, and I believe it's working as we can run the included
bitbench.lua with no errors. The Lua problem still exists.

> 3) What was the request that triggered this error?

It triggers on any request, the one I've been using the most is
accessing the page via IP instead of hostname, here's a breakdown of all
the information regarding the request:

----------------------


Alert Messages:
The following messages have been raised for this event:
        Severity
        Rule ID
        Message
UNKNOWN

Lua: Script execution
failed: attempt to call
a nil value
Rule-Message:

UNKNOWN

Rule processing failed.
Rule-Message:



Rules Section

The following rules have been fired for this event:
SecAction phase:1 t:none nolog pass setvar:tx.anomaly_score_blocking=on
SecAction phase:1 t:none nolog pass setvar:tx.critical_anomaly_score=5
setvar:tx.error_anomaly_score=4 setvar:tx.warning_anomaly_score=3
setvar:tx.notice_anomaly_score=2
SecAction phase:1 t:none nolog pass
setvar:tx.inbound_anomaly_score_level=5
SecAction phase:1 t:none nolog pass
setvar:tx.outbound_anomaly_score_level=4
SecAction phase:1 t:none nolog pass setvar:tx.paranoid_mode=0
SecAction phase:1 t:none nolog pass setvar:tx.max_num_args=255
SecAction phase:1 t:none nolog pass setvar:'tx.allowed_methods=GET HEAD
POST OPTIONS'
setvar:'tx.allowed_request_content_type=application/x-www-form-urlencoded multipart/form-data text/xml application/xml application/x-amf' setvar:'tx.allowed_http_versions=HTTP/0.9 HTTP/1.0 HTTP/1.1' setvar:'tx.restricted_extensions=.asa/ .asax/ .ascx/ .axd/ .backup/ .bak/ .bat/ .cdx/ .cer/ .cfg/ .cmd/ .com/ .config/ .conf/ .cs/ .csproj/ .csr/ .dat/ .db/ .dbf/ .dll/ .dos/ .htr/ .htw/ .ida/ .idc/ .idq/ .inc/ .ini/ .key/ .licx/ .lnk/ .log/ .mdb/ .old/ .pass/ .pdb/ .pol/ .printer/ .pwd/ .resources/ .resx/ .sql/ .sys/ .vb/ .vbs/ .vbproj/ .vsdisco/ .webinfo/ .xsd/ .xsx/' setvar:'tx.restricted_headers=/Lock-Token/ /Content-Range/ /Translate/ /via/ /if/'
SecRule REQUEST_HEADERS:User-Agent @rx ^(.*)$ phase:1 t:none pass nolog
t:sha1 t:hexEncode setvar:tx.ua_hash=%{matched_var}
SecAction phase:1 t:none pass nolog initcol:global=global initcol:ip=
%{remote_addr}_%{tx.ua_hash}
SecAction phase:4 t:none nolog skipAfter:END_KNOWN_CC_OUTBOUND_CHECK\


Request

GET / HTTP/1.1
Host:
172.16.100.191
Connection:
keep-alive
Accept:
application/xml,application/xhtml
+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
User-Agent:
Mozilla/5.0 (X11; U; Linux x86_64;
en-US) AppleWebKit/534.10 (KHTML,
like Gecko) Chrome/8.0.552.200
Safari/534.10
Accept-Encoding:
gzip,deflate,sdch
Accept-Language:
en-US,en;q=0.8
Accept-Charset:
ISO-8859-1,utf-8;q=0.7,*;q=0.3


----------------------

> You can still run it in this manner but since it will NOT be
> normalizing
> data in the same way as PHPIDS, there will be a higher % of false
> positives/false negatives.
> We did put this in the experimental directory after all ;) 

True enough!

>  Seriously, we
> need more people to field test this new, advanced functionality.  I
> applaud you for jumping in!  Don't give up on it, hopefully we can get
> it
> working for you.
> 
> -Ryan

Glad we can help out, we will keep on it until it's resolved.

-Chris

> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110207/56ba6f61/attachment.html 

From adtantan at paydq.com  Wed Feb  9 14:01:36 2011
From: adtantan at paydq.com (Abdellah Tantan)
Date: Wed, 9 Feb 2011 13:01:36 -0600
Subject: [Owasp-modsecurity-core-rule-set] (no subject)
Message-ID: <006301cbc88b$c82b95a0$5882c0e0$@com>

I am having modsecurity  running in a traditional mode but it's not blocking
attacks. Attached is the transaction log. 

 

 

Here is my configuration file.

 

# Core ModSecurity Rule Set ver.2.1.1

# Copyright (C) 2006-2011 Trustwave All rights reserved.

#

# The OWASP ModSecurity Core Rule Set is distributed under GPL version 2

# Please see the enclosed LICENCE file for full details.

# ---------------------------------------------------------------

 

 

## -- Configuration
----------------------------------------------------------

#

# Specify CRS version in the audit logs.

#

SecComponentSignature "core ruleset/2.1.1"

 

 

#

# Review your SecRuleEngine settings.  If you want to

# allow blocking, then set it to On however check your SecDefaultAction
setting

# to ensure that it is set appropriately.

#

#SecRuleEngine DetectionOnly

 

SecRuleEngine On

#

# -=[ Mode of Operation ]=-

#

# You can now choose how you want to run the modsecurity rules -

#

#       Anomaly Scoring vs. Traditional

#

# Each detection rule uses the "block" action which will inherit the
SecDefaultAction

# specified below.  Your settings here will determine which mode of
operation you use.

#

# Traditional mode is the current default setting and it uses "deny" (you
can set any

# disruptive action you wish)

#

# If you want to run the rules in Anomaly Scoring mode (where blocking is
delayed until the

# end of the request phase and rules contribute to an anomaly score) then
set the

# SecDefaultAction to "pass"

#

# You can also decide how you want to handle logging actions.  You have
three options -

#

#       - To log to both the Apache error_log and ModSecurity audit_log file
use - log

#       - To log *only* to the ModSecurity audit_log file use -
nolog,auditlog

#       - To log *only* to the Apache error_log file use - log,noauditlog

#

SecDefaultAction "phase:2,deny,log"

 

 

#

# -=[ Anomaly Scoring Block Mode ]=-

#

# This is a collaborative detection mode where each rule will increment an
overall

# anomaly score the transaction. The scores are then evaluated in the
following files:

#

# Inbound anomaly score - checked in the
modsecurity_crs_49_inbound_blocking.conf file

# Outbound anomaly score - checked in the
modsecurity_crs_59_outbound_blocking.conf file

#

# If you do not want to use anomaly scoring mode, then comment out this
line.

#

#SecAction "phase:1,t:none,nolog,pass,setvar:tx.anomaly_score_blocking=on"

 

 

#

# -=[ Anomaly Scoring Severity Levels ]=-

#

# These are the default scoring points for each severity level.  You may

# adjust these to you liking.  These settings will be used in macro
expansion

# in the rules to increment the anomaly scores when rules match.

#

# These are the default Severity ratings (with anomaly scores) of the
individual rules -

#

#    - 2: Critical - Anomaly Score of 5.

#         Is the highest severity level possible without correlation.  It is

#         normally generated by the web attack rules (40 level files).

#    - 3: Error - Anomaly Score of 4.

#         Is generated mostly from outbound leakage rules (50 level files).

#    - 4: Warning - Anomaly Score of 3.

#         Is generated by malicious client rules (35 level files).

#    - 5: Notice - Anomaly Score of 2.

#         Is generated by the Protocol policy and anomaly files.

#

SecAction "phase:1,t:none,nolog,pass, \

setvar:tx.critical_anomaly_score=5, \

setvar:tx.error_anomaly_score=4, \

setvar:tx.warning_anomaly_score=3, \

setvar:tx.notice_anomaly_score=2"

 

 

#

# -=[ Anomaly Scoring Threshold Levels ]=-

#

# These variables are used in macro expansion in the 49 inbound blocking and
59

# outbound blocking files.

#

# **MUST HAVE** ModSecurity v2.5.12 or higher to use macro expansion in
numeric

# operators.  If you have an earlier version, edit the 49/59 files directly
to

# set the appropriate anomaly score levels.

#

# You should set the score to the proper threshold you would prefer. If set
to "5"

# it will work similarly to previous Mod CRS rules and will create an event
in the error_log

# file if there are any rules that match.  If you would like to lessen the
number of events

# generated in the error_log file, you should increase the anomaly score
threshold to

# something like "20".  This would only generate an event in the error_log
file if

# there are multiple lower severity rule matches or if any 1 higher severity
item matches.

#

SecAction
"phase:1,t:none,nolog,pass,setvar:tx.inbound_anomaly_score_level=5"

SecAction
"phase:1,t:none,nolog,pass,setvar:tx.outbound_anomaly_score_level=4"

 

#

# -=[ Paranoid Mode ]=-

#

# There are many different transactional variables that can be inspected for

# attacks.  Some variables, such as ARGS, has the best false negative/false

# positive ratio where it will catch the vast majority of attack payloads
and

# not have a high false positive rate.  This is also true for some security

# checks such as @validateByteRange checks where we are initially only
inspecting

# for Nul Bytes.

#

# There are, however, some possibilities for false negative issues with
inspecting

# parsed data and this could lead to missed attacks.  If you

# want to lessen the chances for false negatives, then you should enable

# "Paranoid Mode" processing by setting the following line to 1.  This will
process

# additional rules that are inspecting variables with a higher false
positive rate.

#

SecAction "phase:1,t:none,nolog,pass,setvar:tx.paranoid_mode=0"

 

 

#

# -=[ HTTP Policy Settings ]=-

#

# Set the following policy settings here and they will be propagated to the
23 rules

# file (modsecurity_common_23_request_limits.conf) by using macro expansion.

# If you run into false positives, you can adjust the settings here.

#

# Only the max number of args is uncommented by default as there are a high
rate

# of false positives.  Uncomment the items you wish to set.

#

## Maximum number of arguments in request limited

SecAction "phase:1,t:none,nolog,pass,setvar:tx.max_num_args=255"

 

## Limit argument name length

#SecAction "phase:1,t:none,nolog,pass,setvar:tx.arg_name_length=100"

 

## Limit value name length

#SecAction "phase:1,t:none,nolog,pass,setvar:tx.arg_length=400"

 

## Limit arguments total length

#SecAction "phase:1,t:none,nolog,pass,setvar:tx.total_arg_length=64000"

 

## Individual file size is limited

#SecAction "phase:1,t:none,nolog,pass,setvar:tx.max_file_size=1048576"

 

## Combined file size is limited

#SecAction "phase:1,t:none,nolog,pass,setvar:tx.combined_file_sizes=1048576"

 

 

#

# -=[ HTTP Policy Settings ]=-

#

# Set the following policy settings here and they will be propagated to the
30 rules

# file (modsecurity_crs_30_http_policy.conf) by using macro expansion.

# If you run into false positves, you can adjust the settings here.

#

SecAction "phase:1,t:none,nolog,pass, \

setvar:'tx.allowed_methods=GET HEAD POST OPTIONS', \

setvar:'tx.allowed_request_content_type=application/x-www-form-urlencoded
multipart/form-data text/xml application/xml applic

ation/x-amf', \

setvar:'tx.allowed_http_versions=HTTP/0.9 HTTP/1.0 HTTP/1.1', \

setvar:'tx.restricted_extensions=.asa/ .asax/ .ascx/ .axd/ .backup/ .bak/
.bat/ .cdx/ .cer/ .cfg/ .cmd/ .com/ .config/ .conf/

.cs/ .csproj/ .csr/ .dat/ .db/ .dbf/ .dll/ .dos/ .htr/ .htw/ .ida/ .idc/
.idq/ .inc/ .ini/ .key/ .licx/ .lnk/ .log/ .mdb/ .o

ld/ .pass/ .pdb/ .pol/ .printer/ .pwd/ .resources/ .resx/ .sql/ .sys/ .vb/
.vbs/ .vbproj/ .vsdisco/ .webinfo/ .xsd/ .xsx/', \

setvar:'tx.restricted_headers=/Proxy-Connection/ /Lock-Token/
/Content-Range/ /Translate/ /via/ /if/'"

 

#

# -=[ Brute Force Protection ]=-

#

# If you are using the Brute Force Protection rule set, then uncomment the
following

# lines and set the following variables:

# - Protected URLs: resources to protect (e.g. login pages) - set to your
login page

# - Burst Time Slice Interval: time interval window to monitor for bursts

# - Request Threshold: request # threshold to trigger a burst

# - Block Period: temporary block timeout

#

#SecAction "phase:1,t:none,nolog,pass, \

#setvar:'tx.brute_force_protected_urls=/login.jsp /partner_login.php', \

#setvar:'tx.brute_force_burst_time_slice=60', \

#setvar:'tx.brute_force_counter_threshold=10', \

#setvar:'tx.brute_force_block_timeout=300'"

 

 

#

# -=[ DoS Protection ]=-

#

# If you are using the DoS Protection rule set, then uncomment the following

# lines and set the following variables:

# - Burst Time Slice Interval: time interval window to monitor for bursts

# - Request Threshold: request # threshold to trigger a burst

# - Block Period: temporary block timeout

#

#SecAction "phase:1,t:none,nolog,pass, \

#setvar:'tx.dos_burst_time_slice=60', \

#setvar:'tx.dos_counter_threshold=100', \

#setvar:'tx.dos_block_timeout=600'"

 

 

#

# -=[ Check UTF enconding ]=-

#

# We only want to apply this check if UTF-8 encoding is actually used by the
site, otherwise

# it will result in false positives.

#

# Uncomment this line if your site uses UTF8 encoding

#SecAction
"phase:1,t:none,nolog,pass,setvar:tx.crs_validate_utf8_encoding=1"

 

#

# -=[ Global and IP Collections ]=-

#

# Create both Global and IP collections for rules to use

# There are some CRS rules that assume that these two collections

# have already been initiated.

#

SecRule REQUEST_HEADERS:User-Agent "^(.*)$"
"phase:1,t:none,pass,nolog,t:sha1,t:hexEncode,setvar:tx.ua_hash=%{matched_va
r}"

SecAction
"phase:1,t:none,pass,nolog,initcol:global=global,initcol:ip=%{remote_addr}_%
{tx.ua_hash}"

 

 

 

 

cid:image001.jpg at 01CAE6AE.875FA210
Abdellah Tantan
Systems Engineer / Application Developer
cid:image002.jpg at 01CAE6AE.875FA210  phone: 712.388.2132 ext. 1001
cid:image002.jpg at 01CAE6AE.875FA210   <mailto:adtantan at paydq.com>
adtantan at paydq.com
25 Main Place, Suite 400 Council Bluffs, IA 51503-0790
<http://www.paydq.com/> 
www.paydq.com

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110209/32708b33/attachment-0001.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: image/jpeg
Size: 1941 bytes
Desc: not available
Url : https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110209/32708b33/attachment-0002.jpe 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: image/jpeg
Size: 704 bytes
Desc: not available
Url : https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110209/32708b33/attachment-0003.jpe 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: httpTx-113748[1].dat
Type: application/octet-stream
Size: 10789 bytes
Desc: not available
Url : https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110209/32708b33/attachment-0001.obj 

From adtantan at paydq.com  Wed Feb  9 15:24:04 2011
From: adtantan at paydq.com (Abdellah Tantan)
Date: Wed, 9 Feb 2011 14:24:04 -0600
Subject: [Owasp-modsecurity-core-rule-set] (no subject)
In-Reply-To: <006301cbc88b$c82b95a0$5882c0e0$@com>
References: <006301cbc88b$c82b95a0$5882c0e0$@com>
Message-ID: <007601cbc897$4d172350$e74569f0$@com>

Never mind I found the issue. it's on my side.

 

From: owasp-modsecurity-core-rule-set-bounces at lists.owasp.org
[mailto:owasp-modsecurity-core-rule-set-bounces at lists.owasp.org] On Behalf
Of Abdellah Tantan
Sent: Wednesday, February 09, 2011 1:02 PM
To: owasp-modsecurity-core-rule-set at lists.owasp.org
Subject: [Owasp-modsecurity-core-rule-set] (no subject)

 

I am having modsecurity  running in a traditional mode but it's not blocking
attacks. Attached is the transaction log. 

 

 

Here is my configuration file.

 

# Core ModSecurity Rule Set ver.2.1.1

# Copyright (C) 2006-2011 Trustwave All rights reserved.

#

# The OWASP ModSecurity Core Rule Set is distributed under GPL version 2

# Please see the enclosed LICENCE file for full details.

# ---------------------------------------------------------------

 

 

## -- Configuration
----------------------------------------------------------

#

# Specify CRS version in the audit logs.

#

SecComponentSignature "core ruleset/2.1.1"

 

 

#

# Review your SecRuleEngine settings.  If you want to

# allow blocking, then set it to On however check your SecDefaultAction
setting

# to ensure that it is set appropriately.

#

#SecRuleEngine DetectionOnly

 

SecRuleEngine On

#

# -=[ Mode of Operation ]=-

#

# You can now choose how you want to run the modsecurity rules -

#

#       Anomaly Scoring vs. Traditional

#

# Each detection rule uses the "block" action which will inherit the
SecDefaultAction

# specified below.  Your settings here will determine which mode of
operation you use.

#

# Traditional mode is the current default setting and it uses "deny" (you
can set any

# disruptive action you wish)

#

# If you want to run the rules in Anomaly Scoring mode (where blocking is
delayed until the

# end of the request phase and rules contribute to an anomaly score) then
set the

# SecDefaultAction to "pass"

#

# You can also decide how you want to handle logging actions.  You have
three options -

#

#       - To log to both the Apache error_log and ModSecurity audit_log file
use - log

#       - To log *only* to the ModSecurity audit_log file use -
nolog,auditlog

#       - To log *only* to the Apache error_log file use - log,noauditlog

#

SecDefaultAction "phase:2,deny,log"

 

 

#

# -=[ Anomaly Scoring Block Mode ]=-

#

# This is a collaborative detection mode where each rule will increment an
overall

# anomaly score the transaction. The scores are then evaluated in the
following files:

#

# Inbound anomaly score - checked in the
modsecurity_crs_49_inbound_blocking.conf file

# Outbound anomaly score - checked in the
modsecurity_crs_59_outbound_blocking.conf file

#

# If you do not want to use anomaly scoring mode, then comment out this
line.

#

#SecAction "phase:1,t:none,nolog,pass,setvar:tx.anomaly_score_blocking=on"

 

 

#

# -=[ Anomaly Scoring Severity Levels ]=-

#

# These are the default scoring points for each severity level.  You may

# adjust these to you liking.  These settings will be used in macro
expansion

# in the rules to increment the anomaly scores when rules match.

#

# These are the default Severity ratings (with anomaly scores) of the
individual rules -

#

#    - 2: Critical - Anomaly Score of 5.

#         Is the highest severity level possible without correlation.  It is

#         normally generated by the web attack rules (40 level files).

#    - 3: Error - Anomaly Score of 4.

#         Is generated mostly from outbound leakage rules (50 level files).

#    - 4: Warning - Anomaly Score of 3.

#         Is generated by malicious client rules (35 level files).

#    - 5: Notice - Anomaly Score of 2.

#         Is generated by the Protocol policy and anomaly files.

#

SecAction "phase:1,t:none,nolog,pass, \

setvar:tx.critical_anomaly_score=5, \

setvar:tx.error_anomaly_score=4, \

setvar:tx.warning_anomaly_score=3, \

setvar:tx.notice_anomaly_score=2"

 

 

#

# -=[ Anomaly Scoring Threshold Levels ]=-

#

# These variables are used in macro expansion in the 49 inbound blocking and
59

# outbound blocking files.

#

# **MUST HAVE** ModSecurity v2.5.12 or higher to use macro expansion in
numeric

# operators.  If you have an earlier version, edit the 49/59 files directly
to

# set the appropriate anomaly score levels.

#

# You should set the score to the proper threshold you would prefer. If set
to "5"

# it will work similarly to previous Mod CRS rules and will create an event
in the error_log

# file if there are any rules that match.  If you would like to lessen the
number of events

# generated in the error_log file, you should increase the anomaly score
threshold to

# something like "20".  This would only generate an event in the error_log
file if

# there are multiple lower severity rule matches or if any 1 higher severity
item matches.

#

SecAction
"phase:1,t:none,nolog,pass,setvar:tx.inbound_anomaly_score_level=5"

SecAction
"phase:1,t:none,nolog,pass,setvar:tx.outbound_anomaly_score_level=4"

 

#

# -=[ Paranoid Mode ]=-

#

# There are many different transactional variables that can be inspected for

# attacks.  Some variables, such as ARGS, has the best false negative/false

# positive ratio where it will catch the vast majority of attack payloads
and

# not have a high false positive rate.  This is also true for some security

# checks such as @validateByteRange checks where we are initially only
inspecting

# for Nul Bytes.

#

# There are, however, some possibilities for false negative issues with
inspecting

# parsed data and this could lead to missed attacks.  If you

# want to lessen the chances for false negatives, then you should enable

# "Paranoid Mode" processing by setting the following line to 1.  This will
process

# additional rules that are inspecting variables with a higher false
positive rate.

#

SecAction "phase:1,t:none,nolog,pass,setvar:tx.paranoid_mode=0"

 

 

#

# -=[ HTTP Policy Settings ]=-

#

# Set the following policy settings here and they will be propagated to the
23 rules

# file (modsecurity_common_23_request_limits.conf) by using macro expansion.

# If you run into false positives, you can adjust the settings here.

#

# Only the max number of args is uncommented by default as there are a high
rate

# of false positives.  Uncomment the items you wish to set.

#

## Maximum number of arguments in request limited

SecAction "phase:1,t:none,nolog,pass,setvar:tx.max_num_args=255"

 

## Limit argument name length

#SecAction "phase:1,t:none,nolog,pass,setvar:tx.arg_name_length=100"

 

## Limit value name length

#SecAction "phase:1,t:none,nolog,pass,setvar:tx.arg_length=400"

 

## Limit arguments total length

#SecAction "phase:1,t:none,nolog,pass,setvar:tx.total_arg_length=64000"

 

## Individual file size is limited

#SecAction "phase:1,t:none,nolog,pass,setvar:tx.max_file_size=1048576"

 

## Combined file size is limited

#SecAction "phase:1,t:none,nolog,pass,setvar:tx.combined_file_sizes=1048576"

 

 

#

# -=[ HTTP Policy Settings ]=-

#

# Set the following policy settings here and they will be propagated to the
30 rules

# file (modsecurity_crs_30_http_policy.conf) by using macro expansion.

# If you run into false positves, you can adjust the settings here.

#

SecAction "phase:1,t:none,nolog,pass, \

setvar:'tx.allowed_methods=GET HEAD POST OPTIONS', \

setvar:'tx.allowed_request_content_type=application/x-www-form-urlencoded
multipart/form-data text/xml application/xml applic

ation/x-amf', \

setvar:'tx.allowed_http_versions=HTTP/0.9 HTTP/1.0 HTTP/1.1', \

setvar:'tx.restricted_extensions=.asa/ .asax/ .ascx/ .axd/ .backup/ .bak/
.bat/ .cdx/ .cer/ .cfg/ .cmd/ .com/ .config/ .conf/

.cs/ .csproj/ .csr/ .dat/ .db/ .dbf/ .dll/ .dos/ .htr/ .htw/ .ida/ .idc/
.idq/ .inc/ .ini/ .key/ .licx/ .lnk/ .log/ .mdb/ .o

ld/ .pass/ .pdb/ .pol/ .printer/ .pwd/ .resources/ .resx/ .sql/ .sys/ .vb/
.vbs/ .vbproj/ .vsdisco/ .webinfo/ .xsd/ .xsx/', \

setvar:'tx.restricted_headers=/Proxy-Connection/ /Lock-Token/
/Content-Range/ /Translate/ /via/ /if/'"

 

#

# -=[ Brute Force Protection ]=-

#

# If you are using the Brute Force Protection rule set, then uncomment the
following

# lines and set the following variables:

# - Protected URLs: resources to protect (e.g. login pages) - set to your
login page

# - Burst Time Slice Interval: time interval window to monitor for bursts

# - Request Threshold: request # threshold to trigger a burst

# - Block Period: temporary block timeout

#

#SecAction "phase:1,t:none,nolog,pass, \

#setvar:'tx.brute_force_protected_urls=/login.jsp /partner_login.php', \

#setvar:'tx.brute_force_burst_time_slice=60', \

#setvar:'tx.brute_force_counter_threshold=10', \

#setvar:'tx.brute_force_block_timeout=300'"

 

 

#

# -=[ DoS Protection ]=-

#

# If you are using the DoS Protection rule set, then uncomment the following

# lines and set the following variables:

# - Burst Time Slice Interval: time interval window to monitor for bursts

# - Request Threshold: request # threshold to trigger a burst

# - Block Period: temporary block timeout

#

#SecAction "phase:1,t:none,nolog,pass, \

#setvar:'tx.dos_burst_time_slice=60', \

#setvar:'tx.dos_counter_threshold=100', \

#setvar:'tx.dos_block_timeout=600'"

 

 

#

# -=[ Check UTF enconding ]=-

#

# We only want to apply this check if UTF-8 encoding is actually used by the
site, otherwise

# it will result in false positives.

#

# Uncomment this line if your site uses UTF8 encoding

#SecAction
"phase:1,t:none,nolog,pass,setvar:tx.crs_validate_utf8_encoding=1"

 

#

# -=[ Global and IP Collections ]=-

#

# Create both Global and IP collections for rules to use

# There are some CRS rules that assume that these two collections

# have already been initiated.

#

SecRule REQUEST_HEADERS:User-Agent "^(.*)$"
"phase:1,t:none,pass,nolog,t:sha1,t:hexEncode,setvar:tx.ua_hash=%{matched_va
r}"

SecAction
"phase:1,t:none,pass,nolog,initcol:global=global,initcol:ip=%{remote_addr}_%
{tx.ua_hash}"

 

 

 

 

cid:image001.jpg at 01CAE6AE.875FA210
Abdellah Tantan
Systems Engineer / Application Developer
cid:image002.jpg at 01CAE6AE.875FA210  phone: 712.388.2132 ext. 1001
cid:image002.jpg at 01CAE6AE.875FA210   <mailto:adtantan at paydq.com>
adtantan at paydq.com
25 Main Place, Suite 400 Council Bluffs, IA 51503-0790
<http://www.paydq.com/> 
www.paydq.com

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110209/22aaa15f/attachment-0001.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: image/jpeg
Size: 1941 bytes
Desc: not available
Url : https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110209/22aaa15f/attachment-0002.jpe 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: image/jpeg
Size: 704 bytes
Desc: not available
Url : https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110209/22aaa15f/attachment-0003.jpe 

From RBarnett at trustwave.com  Tue Feb 15 09:37:21 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Tue, 15 Feb 2011 08:37:21 -0600
Subject: [Owasp-modsecurity-core-rule-set] Experimental ruleset to detect
	Floating Point DoS Payloads
Message-ID: <C97FF9D1.19F2C%rbarnett@trustwave.com>

As many of you may have heard, there is an interesting Java DoS scenario out -

http://www.exploringbinary.com/php-hangs-on-numeric-value-2-2250738585072011e-308/
http://blog.fortify.com/blog/2011/02/08/Double-Trouble
http://blogs.adobe.com/asset/2011/02/year-of-the-snail.html

When I first saw this issue, I quickly tweeted out a modsec rule that would identify if anyone submitted the example payload being shown in many PoC payloads -

SecRule ARGS|REQUEST_HEADERS "@contains 2.2250738585072012e-308" "phase:2,block,msg:'Java Floating Point DoS Attack',tag:'CVE-2010-4476'"

While this provides some protection, it was by no means comprehensive.  So
here is an updated ModSecurity ruleset.  With the use of the
ModSecurity Lua API, we (myself and Josh Zatlin/Jamuse of PureHacking) came up
with a new Generation 2 detection mechanism similar to what Brian Sullivan
(Adobe) presented below.

First step is to inspect the ARGS and REQUEST_HEADERS data using a regex
to match on potential floating point payloads -

SecRule ARGS|REQUEST_HEADERS "[0-9\.]{12,}e-[0-9]{3,}"
"phase:2,t:none,t:lowercase,nolog,pass,exec:/usr/local/apache/conf/modsec_c
urrent/base_rules/FloatingPointDoSAttack.lua"

If a payload is found that matches the regex check, ModSecurity will
execute an external Lua script.  The lua script then extracts out
payloads, strips out the "." and then searches for the MagicDoSNumber.  If
this is found, then a TX variable is exported -

#################################
#!/opt/local/bin/lua

function main()

  local Pattern = 2225073858507201;

  -- Get the ModSec collections
  local Headers = m.getvars("REQUEST_HEADERS");
  local Args = m.getvars("ARGS");

  for i = 1, #Headers do
    FilteredPattern,NumChanges=string.gsub(Headers[i].value, "[.]", "")
    if string.gmatch(FilteredPattern, Pattern) then
      m.setvar("tx.floatingpointdos", Headers[i].name)
      return ("Potential Floating Point DoS Attack via variable: "
..Headers[i].name ..  ".");
    end
  end
  for i = 1, #Args do
    FilteredPattern,NumChanges=string.gsub(Args[i].value, "[.]", "")
    if string.gmatch(FilteredPattern, Pattern) then
      m.setvar("tx.floatingpointdos", Args[i].name)
      return ("Potential Floating Point DoS Attack via variable: "
..Args[i].name ..  ".");
    end
  end
  return nil;
end

#################################

Then we have one follow-up rule that checks if the TX:FLOATINGPOINTDOS
variable is set -

SecRule TX:FLOATINGPOINTDOS ".*" "phase:2,t:none,log,block,msg:'Floating
Point DoS Payload Found.',logdata:'Location:
%{matched_var}',tag:'CVE-2010-4476'"

We have conducted some tests with different payloads and this appears to
work pretty well.  If you find any issues please let me know.

Cheers,
Ryan



________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From chris at derham.me.uk  Tue Feb 15 11:30:54 2011
From: chris at derham.me.uk (chris derham)
Date: Tue, 15 Feb 2011 14:30:54 -0200
Subject: [Owasp-modsecurity-core-rule-set] False positives
Message-ID: <AANLkTimNHhnU2jgYoy5=jt=kMtMW_OkSxmmHS1J8Y6jc@mail.gmail.com>

All,

We have a web application that has been configured to run with mod_security.
We are getting a few false positives. Another server needs to perform http
posts to us, and the framework that performs these calls  is getting
blocked. I have managed to figure out that if we update apache config with
the following changes our app works correctly

    <LocationMatch "/secure/j_spring_security_check*">
        SecRuleRemoveById 960015 960021 960012 990012
    </LocationMatch>
    <LocationMatch "/thirdPartyTransaction/submission*">
        SecRuleRemoveById 960015 960021 960012 990012
    </LocationMatch>
    <LocationMatch "/secure/j_spring_security_logout*">
        SecRuleRemoveById 960015 960021 960012 990012
    </LocationMatch>

This works fine in that the app now works without raising any false
positives. The rules are for missing accept header, content length, and
invalid user agent. My questions are

   1. is this out of date or current/preferred method for handling false
   positives
   2. should we use SecFilterSelective instead?
   3. can we do this better - e.g. if we know the IP range for the client,
   can we configure to switch these rules off across the board?

Apache 2.2.17, win32, core ruleset/2.1.1

First post, so please forgive me when I forget something critical

Thanks

Chris
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110215/4885076c/attachment.html 

From RBarnett at trustwave.com  Thu Feb 17 13:27:22 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Thu, 17 Feb 2011 12:27:22 -0600
Subject: [Owasp-modsecurity-core-rule-set] Announcing: Real-time Application
	Profiling Ruleset
Message-ID: <C982D2BA.1A13D%rbarnett@trustwave.com>

Hello everyone,
This email will most likely come as very welcomed news to most of you.  We have just released a ruleset to the OWASP CRS that implements a basic framework for real-time application profiling -
http://blog.spiderlabs.com/2011/02/modsecurity-advanced-topic-of-the-week-real-time-application-profiling.html

This initial version of the rules has the ability to profile and enforce the following on a per-resource basis:

 *   Request Method(s)
 *   Number of Parameters
 *   Parameter Names
 *   Parameter Length Ranges
 *   Parameter Types - numeric or alpha

Please test out this ruleset and provide feedback on the OWASP CRS mail-list.

Cheers,
Ryan


________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Thu Feb 17 16:52:01 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Thu, 17 Feb 2011 15:52:01 -0600
Subject: [Owasp-modsecurity-core-rule-set] Announcing Release of OWASP
	ModSecurity CRS v2.1.2
Message-ID: <C98302B1.1A1AD%rbarnett@trustwave.com>

Hello everyone,
I am pleased to announce the release of the OWASP ModSecurity Core Rule Set (CRS) v2.1.2.  This is a significant update as we have added a couple very important capabilities.

CHANGE LOG -
--------------------------
Version 2.1.2 - 02/17/2011
--------------------------

Improvements:
- Added experimental real-time application profiling ruleset.
- Added experimental Lua script for profiling the # of page scripts, iframes, etc..
  which will help to identify successful XSS attacks and planting of malware links.
- Added new CSRF detection rule which will trigger if a subsequent request comes too
  quickly (need to use the Ignore Static Content rules).

Bug Fixes:
- Added missing " in the skipAfter SecAction in the CC Detection rule set

--------------------------
DOWNLOADING
--------------------------
Manual Downloading:
You can always download the latest CRS version here -
https://sourceforge.net/projects/mod-security/files/modsecurity-crs/0-CURRENT/

Automated Downloading:
Use the rules-updater.pl script in the CRS /util directory

# Get a list of what the repository contains:
$ ./rules-updater.pl -rhttp://www.modsecurity.org/autoupdate/repository/ -l

Repository: http://www.modsecurity.org/autoupdate/repository

modsecurity-crs {
          2.0.0: modsecurity-crs_2.0.0.zip
          2.0.1: modsecurity-crs_2.0.1.zip
          2.0.2: modsecurity-crs_2.0.2.zip
          2.0.3: modsecurity-crs_2.0.3.zip
          2.0.4: modsecurity-crs_2.0.4.zip
          2.0.5: modsecurity-crs_2.0.5.zip
          2.0.6: modsecurity-crs_2.0.6.zip
          2.0.7: modsecurity-crs_2.0.7.zip
          2.0.8: modsecurity-crs_2.0.8.zip
          2.0.9: modsecurity-crs_2.0.9.zip
          2.0.9: modsecurity-crs_2.0.10.zip
          2.1.0: modsecurity-crs_2.1.0.zip
          2.1.1: modsecurity-crs_2.1.1.zip
          2.1.2: modsecurity-crs_2.1.2.zip
}

# Get the latest stable version of "modsecurity-crs":
$ ./rules-updater.pl -rhttp://www.modsecurity.org/autoupdate/repository/ -prules -Smodsecurity-crs
Fetching: modsecurity-crs/modsecurity-crs_2.1.2.zip ...
$ ls -R rules
modsecurity-crs

rules/modsecurity-crs:
modsecurity-crs_2.1.2.zip    modsecurity-crs_2.1.2.zip.sig

--
Ryan Barnett
Senior Security Researcher
Trustwave - SpiderLabs

________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From listas at sapao.net  Fri Feb 18 09:52:58 2011
From: listas at sapao.net (Lucas Ferreira)
Date: Fri, 18 Feb 2011 12:52:58 -0200
Subject: [Owasp-modsecurity-core-rule-set] Announcing: Real-time
 Application Profiling Ruleset
In-Reply-To: <C982D2BA.1A13D%rbarnett@trustwave.com>
References: <AcvO0FHP2AVWF4rGTSygGssCXVX6og==>
	<C982D2BA.1A13D%rbarnett@trustwave.com>
Message-ID: <AANLkTik96s2gP+8v1CjBSPG3kT=XpKt3D0YG14KzNtwp@mail.gmail.com>

Hello Ryan,

after reading your blog post, I still have some doubts:

How does the profiling work with regard to restarting the web server?
Are the collections saved to disk?

How can the administrator restart the profiling process? Is it
possible to selectively restart profiling based on host, URL or other
application identifier?

Thanks,

Lucas

On Thu, Feb 17, 2011 at 16:27, Ryan Barnett <RBarnett at trustwave.com> wrote:
> Hello everyone,
> This email will most likely come as very welcomed news to most of you. ?We have just released a ruleset to the OWASP CRS that implements a basic framework for real-time application profiling -
> http://blog.spiderlabs.com/2011/02/modsecurity-advanced-topic-of-the-week-real-time-application-profiling.html
>
> This initial version of the rules has the ability to profile and enforce the following on a per-resource basis:
>
> ?* ? Request Method(s)
> ?* ? Number of Parameters
> ?* ? Parameter Names
> ?* ? Parameter Length Ranges
> ?* ? Parameter Types - numeric or alpha
>
> Please test out this ruleset and provide feedback on the OWASP CRS mail-list.
>
> Cheers,
> Ryan
>
>
> ________________________________
> This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.
>
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>



-- 
Homo sapiens non urinat in ventum.

From RBarnett at trustwave.com  Fri Feb 18 10:11:27 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Fri, 18 Feb 2011 09:11:27 -0600
Subject: [Owasp-modsecurity-core-rule-set] Announcing: Real-time
 Application Profiling Ruleset
In-Reply-To: <AANLkTik96s2gP+8v1CjBSPG3kT=XpKt3D0YG14KzNtwp@mail.gmail.com>
Message-ID: <C983F4AE.1A245%rbarnett@trustwave.com>


On 2/18/11 9:52 AM, "Lucas Ferreira" <listas at sapao.net> wrote:

>Hello Ryan,
>
>after reading your blog post, I still have some doubts:
>
>How does the profiling work with regard to restarting the web server?
>Are the collections saved to disk?

Yes - the data is saved to persistent storage files on disk.  This would
keep the data across Apache restarts.

>
>How can the administrator restart the profiling process? Is it
>possible to selectively restart profiling based on host, URL or other
>application identifier?

Great question.  We actually were talking a bit about some options for
profile management.  One option that we are thinking of would be to use
dynamic updates based on access requests from "trusted" clients.  Take a
look at the previous blog post on GeoIP data where we talk about dynamic
updates -
http://blog.spiderlabs.com/2010/10/detecting-malice-with-modsecurity-geoloc
ation-data.html

The idea would be that if you wanted to remove/relearn a profile for a
URL, you could have an authorized client send a specific request to that
URL.  Based on the source IP, UA + Parameter (maybe
?relearn_profile=true), then the saved resource collection data for that
URL would be removed and the relearning would commence.  There are some
other ideas that we we need to test which could possibly include tracking
an increase in alerts across multiple clients as this might indicate an
application change and could initiate an auto-relearn.

This is something that we are planning to add in future versions.

Please keep the comments coming!  We want people to test so that we can
improve the capabilities.

Cheers,
Ryan

>
>Thanks,
>
>Lucas
>
>On Thu, Feb 17, 2011 at 16:27, Ryan Barnett <RBarnett at trustwave.com>
>wrote:
>> Hello everyone,
>> This email will most likely come as very welcomed news to most of you.
>>We have just released a ruleset to the OWASP CRS that implements a basic
>>framework for real-time application profiling -
>> 
>>http://blog.spiderlabs.com/2011/02/modsecurity-advanced-topic-of-the-week
>>-real-time-application-profiling.html
>>
>> This initial version of the rules has the ability to profile and
>>enforce the following on a per-resource basis:
>>
>>  *   Request Method(s)
>>  *   Number of Parameters
>>  *   Parameter Names
>>  *   Parameter Length Ranges
>>  *   Parameter Types - numeric or alpha
>>
>> Please test out this ruleset and provide feedback on the OWASP CRS
>>mail-list.
>>
>> Cheers,
>> Ryan
>>
>>
>> ________________________________
>> This transmission may contain information that is privileged,
>>confidential, and/or exempt from disclosure under applicable law. If you
>>are not the intended recipient, you are hereby notified that any
>>disclosure, copying, distribution, or use of the information contained
>>herein (including any reliance thereon) is STRICTLY PROHIBITED. If you
>>received this transmission in error, please immediately contact the
>>sender and destroy the material in its entirety, whether in electronic
>>or hard copy format.
>>
>> _______________________________________________
>> Owasp-modsecurity-core-rule-set mailing list
>> Owasp-modsecurity-core-rule-set at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>>
>
>
>
>-- 
>Homo sapiens non urinat in ventum.
>



From chris at riverstyx.net  Mon Feb 21 14:17:16 2011
From: chris at riverstyx.net (Chris Swanson)
Date: Mon, 21 Feb 2011 11:17:16 -0800
Subject: [Owasp-modsecurity-core-rule-set] Modsecurity crs 2.1.1
 41_advanced_filters & Lua issue
In-Reply-To: <1297105783.14750.7.camel@chris-desktop>
References: <1296088677.3142.14.camel@chris-desktop>
	<1297105783.14750.7.camel@chris-desktop>
Message-ID: <1298315836.2315.23.camel@chris-desktop>

Here is the solution to the problem:

After installing BitOp which Ryan suggested in a previous message
(http://bitop.luajit.org/download.html) we we're still getting the same
error. The Lua script also has a require for rex_pcre, which we were
missing. 

This isn't available out of the Debian repo for Lenny so I've installed
it from the Ubuntu Lucid repo.

liblua5.1-rex-pcre0_2.4.0-1_amd64.deb
liblua5.1-rex-pcre-dev_2.4.0-1_amd64.deb

dependencies:

libpcre3_7.8-3build1_amd64.deb
libpcre3-dev_7.8-3build1_amd64.deb
libpcrecpp0_7.8-3build1_amd64.deb

Again, here is the original error:

Unknown  | Lua: Script execution failed: attempt to call a nil value
Unknown  | Rule processing failed.

I'm not sure if BitOp and rex_pcre are stated as requirements outside of the script, but it might be worth adding. (Apologies if I've missed it)

Thanks again for the assistance.
-Chris

On Mon, 2011-02-07 at 11:09 -0800, Chris Swanson wrote:
> Hi, we haven't had any luck with this issue, just wondering if anyone
> else has seen this or knows a solution?
> 
> Here is the original email and a response follow up with some
> suggestions.
> 
> Thanks
> -Chris
> 
> 
> 
> 
> On Wed, 2011-01-26 at 16:37 -0800, Chris Swanson wrote:
> > Hi, we're having a hard time with the new update(s) and Lua in our
> > testing environment. Here's the error we're seeing in Audit Console,
> > this is opening up a single transaction: 
> > 
> > Unknown  | Lua: Script execution failed: attempt to call a nil value
> > Unknown  | Rule processing failed.
> > 
> > 
> > This is happening with modsecurity 2.5.13 and modsec CRS 2.1.1 on
> > our
> > Debian 5 servers, apache is configured with:
> > 
> > ./configure --prefix=/usr/local/apache --disable-userdir
> > --enable-rewrite --enable-so --enable-info --enable-status
> > --enable-ssl
> > --enable-cgi --enable-unique-id --enable-mime-magic
> > --with-included-apr
> > --with-pcre=/usr/bin/pcre-config --enable-deflate --enable-expires
> > --enable-headers
> > 
> > modsecuirty cofigured with:
> > 
> > ./configure --with-apxs=/usr/local/apache/bin/apxs
> > --with-apr=/usr/local/apache/bin/apr-1-config
> > 
> > 
> > I've narrowed it down to the include in our http.conf for
> > modsecurity_crs_41_advanced_filters.conf, which was previously
> > working
> > as the phpids rules. Even further, by commenting out this section at
> > the
> > top of the 41_advanced_filters file everything works fine:
> > 
> > # Lua script to normalize input payloads
> > # Based on PHPIDS Converter.php code
> > # Reference the following whitepaper -
> > # http://docs.google.com/Doc?id=dd7x5smw_17g9cnx2cn 
> > # 
> > SecRuleScript ../lua/advanced_filter_converter.lua
> > "phase:2,t:none,pass"
> > SecRule TX:/centrifuge_ratio/ ".*"
> > "phase:2,t:none,log,capture,msg:'Centrifuge Threshold Alert - Ratio
> > Value is: %{tx.0}'"
> > 
> > 
> > Here is the modsecurity includes in our http.conf
> > 
> > #modsecurity Rules
> > Include conf/modsecurity.conf
> > Include conf/modsecurity-crs_2.1.1/*.conf
> > Include
> > conf/modsecurity-crs_2.1.1/experimental_rules/modsecurity_crs_41_advanced_filters.conf
> > Include
> > conf/modsecurity-crs_2.1.1/optional_rules/modsecurity_crs_25_cc_known.conf
> > Include conf/modsecurity-crs_2.1.1/base_rules/*conf
> > 
> > 
> > With the same setup and versions Modsecurity/Apache, CRS 2.0.10
> > worked
> > perfectly. We could move forward without Lua functionally, but I'm
> > lost
> > as to why such a big addition would be broken from the get-go.
> > Haven't
> > been able to find anyone posting with a similar issue so any help
> > would
> > be greatly appreciated.
> > 
> > 
> > Thanks,
> > -Chris
> > 
> 
> 
> > A couple questions -
> > 
> > 1) Did you modify the path to Lua in the script to point to your
> local
> > version?
> > 2) Did you install the additional bitop Lua module?
> > http://bitop.luajit.org/
> >    It is specified at the top of the script in a require statement.
> > This
> > is needed for the Octal to Decimal conversions.
> 
> I was missing Bitop, I've installed it from source, changed the
> install
> path for Debian, and I believe it's working as we can run the included
> bitbench.lua with no errors. The Lua problem still exists.
> 
> > 3) What was the request that triggered this error?
> 
> It triggers on any request, the one I've been using the most is
> accessing the page via IP instead of hostname, here's a breakdown of
> all
> the information regarding the request:
> 
> ----------------------
> 
> 
> Alert Messages:
> The following messages have been raised for this event:
>         Severity
>         Rule ID
>         Message
> UNKNOWN
> 
> Lua: Script execution
> failed: attempt to call
> a nil value
> Rule-Message:
> 
> UNKNOWN
> 
> Rule processing failed.
> Rule-Message:
> 
> 
> 
> Rules Section
> 
> The following rules have been fired for this event:
> SecAction phase:1 t:none nolog pass
> setvar:tx.anomaly_score_blocking=on
> SecAction phase:1 t:none nolog pass setvar:tx.critical_anomaly_score=5
> setvar:tx.error_anomaly_score=4 setvar:tx.warning_anomaly_score=3
> setvar:tx.notice_anomaly_score=2
> SecAction phase:1 t:none nolog pass
> setvar:tx.inbound_anomaly_score_level=5
> SecAction phase:1 t:none nolog pass
> setvar:tx.outbound_anomaly_score_level=4
> SecAction phase:1 t:none nolog pass setvar:tx.paranoid_mode=0
> SecAction phase:1 t:none nolog pass setvar:tx.max_num_args=255
> SecAction phase:1 t:none nolog pass setvar:'tx.allowed_methods=GET
> HEAD
> POST OPTIONS'
> setvar:'tx.allowed_request_content_type=application/x-www-form-urlencoded multipart/form-data text/xml application/xml application/x-amf' setvar:'tx.allowed_http_versions=HTTP/0.9 HTTP/1.0 HTTP/1.1' setvar:'tx.restricted_extensions=.asa/ .asax/ .ascx/ .axd/ .backup/ .bak/ .bat/ .cdx/ .cer/ .cfg/ .cmd/ .com/ .config/ .conf/ .cs/ .csproj/ .csr/ .dat/ .db/ .dbf/ .dll/ .dos/ .htr/ .htw/ .ida/ .idc/ .idq/ .inc/ .ini/ .key/ .licx/ .lnk/ .log/ .mdb/ .old/ .pass/ .pdb/ .pol/ .printer/ .pwd/ .resources/ .resx/ .sql/ .sys/ .vb/ .vbs/ .vbproj/ .vsdisco/ .webinfo/ .xsd/ .xsx/' setvar:'tx.restricted_headers=/Lock-Token/ /Content-Range/ /Translate/ /via/ /if/'
> SecRule REQUEST_HEADERS:User-Agent @rx ^(.*)$ phase:1 t:none pass
> nolog
> t:sha1 t:hexEncode setvar:tx.ua_hash=%{matched_var}
> SecAction phase:1 t:none pass nolog initcol:global=global initcol:ip=
> %{remote_addr}_%{tx.ua_hash}
> SecAction phase:4 t:none nolog skipAfter:END_KNOWN_CC_OUTBOUND_CHECK\
> 
> 
> Request
> 
> GET / HTTP/1.1
> Host:
> 172.16.100.191
> Connection:
> keep-alive
> Accept:
> application/xml,application/xhtml
> +xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
> User-Agent:
> Mozilla/5.0 (X11; U; Linux x86_64;
> en-US) AppleWebKit/534.10 (KHTML,
> like Gecko) Chrome/8.0.552.200
> Safari/534.10
> Accept-Encoding:
> gzip,deflate,sdch
> Accept-Language:
> en-US,en;q=0.8
> Accept-Charset:
> ISO-8859-1,utf-8;q=0.7,*;q=0.3
> 
> 
> ----------------------
> 
> > You can still run it in this manner but since it will NOT be
> > normalizing
> > data in the same way as PHPIDS, there will be a higher % of false
> > positives/false negatives.
> > We did put this in the experimental directory after all ;) 
> 
> True enough!
> 
> >  Seriously, we
> > need more people to field test this new, advanced functionality.  I
> > applaud you for jumping in!  Don't give up on it, hopefully we can
> get
> > it
> > working for you.
> > 
> > -Ryan
> 
> Glad we can help out, we will keep on it until it's resolved.
> 
> -Chris
> > 
> 


From rcbarnett at gmail.com  Mon Feb 21 14:34:13 2011
From: rcbarnett at gmail.com (Ryan Barnett)
Date: Mon, 21 Feb 2011 14:34:13 -0500
Subject: [Owasp-modsecurity-core-rule-set] Modsecurity crs 2.1.1
 41_advanced_filters & Lua issue
In-Reply-To: <1298315836.2315.23.camel@chris-desktop>
Message-ID: <C9882741.1A5DA%rcbarnett@gmail.com>

Ah, right.  Sorry, I assumed you already had lrexlib installed.

I will update the comments in the modsecurity_crs_41_advanced_filters.conf
file for the SecRuleScript line.

Let me know if you run into any more issues and also how the Lua
script/rules work.

-Ryan


On 2/21/11 2:17 PM, "Chris Swanson" <chris at riverstyx.net> wrote:

>Here is the solution to the problem:
>
>After installing BitOp which Ryan suggested in a previous message
>(http://bitop.luajit.org/download.html) we we're still getting the same
>error. The Lua script also has a require for rex_pcre, which we were
>missing. 
>
>This isn't available out of the Debian repo for Lenny so I've installed
>it from the Ubuntu Lucid repo.
>
>liblua5.1-rex-pcre0_2.4.0-1_amd64.deb
>liblua5.1-rex-pcre-dev_2.4.0-1_amd64.deb
>
>dependencies:
>
>libpcre3_7.8-3build1_amd64.deb
>libpcre3-dev_7.8-3build1_amd64.deb
>libpcrecpp0_7.8-3build1_amd64.deb
>
>Again, here is the original error:
>
>Unknown  | Lua: Script execution failed: attempt to call a nil value
>Unknown  | Rule processing failed.
>
>I'm not sure if BitOp and rex_pcre are stated as requirements outside of
>the script, but it might be worth adding. (Apologies if I've missed it)
>
>Thanks again for the assistance.
>-Chris
>
>On Mon, 2011-02-07 at 11:09 -0800, Chris Swanson wrote:
>> Hi, we haven't had any luck with this issue, just wondering if anyone
>> else has seen this or knows a solution?
>> 
>> Here is the original email and a response follow up with some
>> suggestions.
>> 
>> Thanks
>> -Chris
>> 
>> 
>> 
>> 
>> On Wed, 2011-01-26 at 16:37 -0800, Chris Swanson wrote:
>> > Hi, we're having a hard time with the new update(s) and Lua in our
>> > testing environment. Here's the error we're seeing in Audit Console,
>> > this is opening up a single transaction:
>> > 
>> > Unknown  | Lua: Script execution failed: attempt to call a nil value
>> > Unknown  | Rule processing failed.
>> > 
>> > 
>> > This is happening with modsecurity 2.5.13 and modsec CRS 2.1.1 on
>> > our
>> > Debian 5 servers, apache is configured with:
>> > 
>> > ./configure --prefix=/usr/local/apache --disable-userdir
>> > --enable-rewrite --enable-so --enable-info --enable-status
>> > --enable-ssl
>> > --enable-cgi --enable-unique-id --enable-mime-magic
>> > --with-included-apr
>> > --with-pcre=/usr/bin/pcre-config --enable-deflate --enable-expires
>> > --enable-headers
>> > 
>> > modsecuirty cofigured with:
>> > 
>> > ./configure --with-apxs=/usr/local/apache/bin/apxs
>> > --with-apr=/usr/local/apache/bin/apr-1-config
>> > 
>> > 
>> > I've narrowed it down to the include in our http.conf for
>> > modsecurity_crs_41_advanced_filters.conf, which was previously
>> > working
>> > as the phpids rules. Even further, by commenting out this section at
>> > the
>> > top of the 41_advanced_filters file everything works fine:
>> > 
>> > # Lua script to normalize input payloads
>> > # Based on PHPIDS Converter.php code
>> > # Reference the following whitepaper -
>> > # http://docs.google.com/Doc?id=dd7x5smw_17g9cnx2cn
>> > # 
>> > SecRuleScript ../lua/advanced_filter_converter.lua
>> > "phase:2,t:none,pass"
>> > SecRule TX:/centrifuge_ratio/ ".*"
>> > "phase:2,t:none,log,capture,msg:'Centrifuge Threshold Alert - Ratio
>> > Value is: %{tx.0}'"
>> > 
>> > 
>> > Here is the modsecurity includes in our http.conf
>> > 
>> > #modsecurity Rules
>> > Include conf/modsecurity.conf
>> > Include conf/modsecurity-crs_2.1.1/*.conf
>> > Include
>> > 
>>conf/modsecurity-crs_2.1.1/experimental_rules/modsecurity_crs_41_advanced
>>_filters.conf
>> > Include
>> > 
>>conf/modsecurity-crs_2.1.1/optional_rules/modsecurity_crs_25_cc_known.con
>>f
>> > Include conf/modsecurity-crs_2.1.1/base_rules/*conf
>> > 
>> > 
>> > With the same setup and versions Modsecurity/Apache, CRS 2.0.10
>> > worked
>> > perfectly. We could move forward without Lua functionally, but I'm
>> > lost
>> > as to why such a big addition would be broken from the get-go.
>> > Haven't
>> > been able to find anyone posting with a similar issue so any help
>> > would
>> > be greatly appreciated.
>> > 
>> > 
>> > Thanks,
>> > -Chris
>> > 
>> 
>> 
>> > A couple questions -
>> > 
>> > 1) Did you modify the path to Lua in the script to point to your
>> local
>> > version?
>> > 2) Did you install the additional bitop Lua module?
>> > http://bitop.luajit.org/
>> >    It is specified at the top of the script in a require statement.
>> > This
>> > is needed for the Octal to Decimal conversions.
>> 
>> I was missing Bitop, I've installed it from source, changed the
>> install
>> path for Debian, and I believe it's working as we can run the included
>> bitbench.lua with no errors. The Lua problem still exists.
>> 
>> > 3) What was the request that triggered this error?
>> 
>> It triggers on any request, the one I've been using the most is
>> accessing the page via IP instead of hostname, here's a breakdown of
>> all
>> the information regarding the request:
>> 
>> ----------------------
>> 
>> 
>> Alert Messages:
>> The following messages have been raised for this event:
>>         Severity
>>         Rule ID
>>         Message
>> UNKNOWN
>> 
>> Lua: Script execution
>> failed: attempt to call
>> a nil value
>> Rule-Message:
>> 
>> UNKNOWN
>> 
>> Rule processing failed.
>> Rule-Message:
>> 
>> 
>> 
>> Rules Section
>> 
>> The following rules have been fired for this event:
>> SecAction phase:1 t:none nolog pass
>> setvar:tx.anomaly_score_blocking=on
>> SecAction phase:1 t:none nolog pass setvar:tx.critical_anomaly_score=5
>> setvar:tx.error_anomaly_score=4 setvar:tx.warning_anomaly_score=3
>> setvar:tx.notice_anomaly_score=2
>> SecAction phase:1 t:none nolog pass
>> setvar:tx.inbound_anomaly_score_level=5
>> SecAction phase:1 t:none nolog pass
>> setvar:tx.outbound_anomaly_score_level=4
>> SecAction phase:1 t:none nolog pass setvar:tx.paranoid_mode=0
>> SecAction phase:1 t:none nolog pass setvar:tx.max_num_args=255
>> SecAction phase:1 t:none nolog pass setvar:'tx.allowed_methods=GET
>> HEAD
>> POST OPTIONS'
>> 
>>setvar:'tx.allowed_request_content_type=application/x-www-form-urlencoded
>> multipart/form-data text/xml application/xml application/x-amf'
>>setvar:'tx.allowed_http_versions=HTTP/0.9 HTTP/1.0 HTTP/1.1'
>>setvar:'tx.restricted_extensions=.asa/ .asax/ .ascx/ .axd/ .backup/
>>.bak/ .bat/ .cdx/ .cer/ .cfg/ .cmd/ .com/ .config/ .conf/ .cs/ .csproj/
>>.csr/ .dat/ .db/ .dbf/ .dll/ .dos/ .htr/ .htw/ .ida/ .idc/ .idq/ .inc/
>>.ini/ .key/ .licx/ .lnk/ .log/ .mdb/ .old/ .pass/ .pdb/ .pol/ .printer/
>>.pwd/ .resources/ .resx/ .sql/ .sys/ .vb/ .vbs/ .vbproj/ .vsdisco/
>>.webinfo/ .xsd/ .xsx/' setvar:'tx.restricted_headers=/Lock-Token/
>>/Content-Range/ /Translate/ /via/ /if/'
>> SecRule REQUEST_HEADERS:User-Agent @rx ^(.*)$ phase:1 t:none pass
>> nolog
>> t:sha1 t:hexEncode setvar:tx.ua_hash=%{matched_var}
>> SecAction phase:1 t:none pass nolog initcol:global=global initcol:ip=
>> %{remote_addr}_%{tx.ua_hash}
>> SecAction phase:4 t:none nolog skipAfter:END_KNOWN_CC_OUTBOUND_CHECK\
>> 
>> 
>> Request
>> 
>> GET / HTTP/1.1
>> Host:
>> 172.16.100.191
>> Connection:
>> keep-alive
>> Accept:
>> application/xml,application/xhtml
>> +xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
>> User-Agent:
>> Mozilla/5.0 (X11; U; Linux x86_64;
>> en-US) AppleWebKit/534.10 (KHTML,
>> like Gecko) Chrome/8.0.552.200
>> Safari/534.10
>> Accept-Encoding:
>> gzip,deflate,sdch
>> Accept-Language:
>> en-US,en;q=0.8
>> Accept-Charset:
>> ISO-8859-1,utf-8;q=0.7,*;q=0.3
>> 
>> 
>> ----------------------
>> 
>> > You can still run it in this manner but since it will NOT be
>> > normalizing
>> > data in the same way as PHPIDS, there will be a higher % of false
>> > positives/false negatives.
>> > We did put this in the experimental directory after all ;)
>> 
>> True enough!
>> 
>> >  Seriously, we
>> > need more people to field test this new, advanced functionality.  I
>> > applaud you for jumping in!  Don't give up on it, hopefully we can
>> get
>> > it
>> > working for you.
>> > 
>> > -Ryan
>> 
>> Glad we can help out, we will keep on it until it's resolved.
>> 
>> -Chris
>> > 
>> 
>
>_______________________________________________
>Owasp-modsecurity-core-rule-set mailing list
>Owasp-modsecurity-core-rule-set at lists.owasp.org
>https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set



From RBarnett at trustwave.com  Wed Feb 23 11:40:47 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Wed, 23 Feb 2011 10:40:47 -0600
Subject: [Owasp-modsecurity-core-rule-set] ModSecurity Advanced Topic of the
 Week: Passive Vulnerability Scanning Part 1 - OSVDB Checks
Message-ID: <C98AA2BF.1A750%rbarnett@trustwave.com>

New blog post on Passive Vulnerability Scanning.  Adds ModSecurity functionality that monitors for the use of vulnerable applications, using OSVDB as a data source. Combined with the ability to detect exploitation attempts, this feature provides a more holistic view of a web application's security condition.

http://blog.spiderlabs.com/2011/02/modsecurity-advanced-topic-of-the-week-passive-vulnerability-scanning-part-1-osvdb-checks.html

--
Ryan Barnett
Senior Security Researcher
Trustwave - SpiderLabs



From RBarnett at trustwave.com  Fri Feb 25 10:14:31 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Fri, 25 Feb 2011 09:14:31 -0600
Subject: [Owasp-modsecurity-core-rule-set] FW: [Mod-security-developers]
 [JIRA] Closed: (MODSEC-140) Add a fast IP address and network based
 matching operator
In-Reply-To: <21414143.443.1298493472277.JavaMail.jira@modsec-apps.colo.breach.com>
Message-ID: <C98D3139.1AF83%rbarnett@trustwave.com>

FYI - We have setup automatic email notifications sent to the
mod-security-developers mail-list when we Resolve/Close JIRA tickets.
Example below - which shows that we (Breno) added in a new @ipMatch
operator to better handle network addresses/ranges.

This is useful information for two reasons -

1) Provides real-time insight into the progress we are making with
ModSecurity developments, and
2) Allows adventurous users to clone SVN trunk versions and start playing
around with the newest features!  Keep in mind though, that the trunk
version is still not stable.

If you would like to see these notifications, I suggest that you sign up
for the Dev mail-list -
https://lists.sourceforge.net/lists/listinfo/mod-security-developers

Thanks,
Ryan




On 2/23/11 3:37 PM, "Mod Blogadmin" <noreply at modsecurity.org> wrote:

>
>     [ 
>https://www.modsecurity.org/tracker/browse/MODSEC-140?page=com.atlassian.j
>ira.plugin.system.issuetabpanels:all-tabpanel ]
>
>Ryan Barnett closed MODSEC-140.
>-------------------------------
>
>    Resolution: Fixed
>
>> Add a fast IP address and network based matching operator
>> ---------------------------------------------------------
>>
>>                 Key: MODSEC-140
>>                 URL:
>>https://www.modsecurity.org/tracker/browse/MODSEC-140
>>             Project: ModSecurity
>>          Issue Type: New Feature
>>      Security Level: Normal
>>            Reporter: Brian Rectanus
>>            Assignee: Breno Silva Pinto
>>             Fix For: 2.6.0
>>
>>
>> We need to be able to match IPs and networks quickly, including large
>>lists.
>> Something like:
>> @ip <ip | ip/cidr | ip/netmask>, ...
>> This would match if the target was listed in any ip or network.
>> This must support both IPv4 and IPv6.
>> I am thinking radix tree and/or modifying @pm to support IPs (former
>>sounds better right now).
>
>-- 
>This message is automatically generated by JIRA.
>-
>If you think it was sent incorrectly contact one of the administrators:
>https://www.modsecurity.org/tracker/secure/Administrators.jspa
>-
>For more information on JIRA, see: http://www.atlassian.com/software/jira
>
>        
>
>
>--------------------------------------------------------------------------
>----
>Free Software Download: Index, Search & Analyze Logs and other IT data in
>Real-Time with Splunk. Collect, index and harness all the fast moving IT
>data 
>generated by your applications, servers and devices whether physical,
>virtual
>or in the cloud. Deliver compliance at lower cost and gain new business
>insights. http://p.sf.net/sfu/splunk-dev2dev
>_______________________________________________
>mod-security-developers mailing list
>mod-security-developers at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/mod-security-developers
>



