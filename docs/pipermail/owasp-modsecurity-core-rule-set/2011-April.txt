From RBarnett at trustwave.com  Fri Apr  1 11:28:24 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Fri, 1 Apr 2011 10:28:24 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
Message-ID: <C9BB6758.1D168%rbarnett@trustwave.com>

Greetings everyone,
There has been a number of past email threads discussing the need for a recommended "base configuration" for ModSecurity configuration directives.  These are settings that the local Admin uses to control the overall settings of ModSecurity (rule and audit engine, log files locations, whether to inspect request/response bodies, etc?).  These are configurations that should not be included within 3rd party rule sets (such as the OWASP ModSecurity CRS).

We have taken the main.conf file recommended by Ivan Ristic in this thread (https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/2009-August/000052.html) and added it to the Reference Manual Wiki -
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#A_Recommended_Base_Configuration

In order to have easier tracking, I will be sending out individual emails with the directive name in the subject line so that we can openly discuss what the community believes should be the recommended initial configuration.  Based on the results, we will update the wiki and include this file within the upcoming ModSecurity 2.6 release.

Thanks,
Ryan


From RBarnett at trustwave.com  Fri Apr  1 11:34:24 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Fri, 1 Apr 2011 10:34:24 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base
	Configuration
In-Reply-To: <C9BB6758.1D168%rbarnett@trustwave.com>
Message-ID: <C9BB686D.1D170%rbarnett@trustwave.com>

One more note I should have included ? in order to make this process sane, we will assume that no email responses means you are in agreement.  Speak up if you feel as though the recommended configuration setting is not the best and why.

Cheers,
Ryan

From: Ryan Barnett <rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>>
Date: Fri, 1 Apr 2011 10:28:24 -0500
To: "mod-security-users at lists.sourceforge.net<mailto:mod-security-users at lists.sourceforge.net>" <mod-security-users at lists.sourceforge.net<mailto:mod-security-users at lists.sourceforge.net>>
Cc: "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>" <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>
Subject: A Recommended Base Configuration

Greetings everyone,
There has been a number of past email threads discussing the need for a recommended "base configuration" for ModSecurity configuration directives.  These are settings that the local Admin uses to control the overall settings of ModSecurity (rule and audit engine, log files locations, whether to inspect request/response bodies, etc?).  These are configurations that should not be included within 3rd party rule sets (such as the OWASP ModSecurity CRS).

We have taken the main.conf file recommended by Ivan Ristic in this thread (https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/2009-August/000052.html) and added it to the Reference Manual Wiki -
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#A_Recommended_Base_Configuration

In order to have easier tracking, I will be sending out individual emails with the directive name in the subject line so that we can openly discuss what the community believes should be the recommended initial configuration.  Based on the results, we will update the wiki and include this file within the upcoming ModSecurity 2.6 release.

Thanks,
Ryan

________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Fri Apr  1 11:36:16 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Fri, 1 Apr 2011 10:36:16 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
	- SecRuleEngine
Message-ID: <C9BB6930.1D17B%rbarnett@trustwave.com>

Reference Manual:
http://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecRuleEngine

Current setting:

# Enable ModSecurity, attaching it to every transaction. Use detection
# only to start with, because that minimises the chances of post-installation
# disruption.
#
SecRuleEngine DetectionOnly


Rationale:
When first adding in ModSecurity, you want to minimize any disruptions to traffic until you get a handle on how your configs/rules will respond to your traffic.  This setting allows SecRules to trigger events but not take any disruptive actions.


From christian.folini at post.ch  Mon Apr  4 02:19:25 2011
From: christian.folini at post.ch (christian.folini at post.ch)
Date: Mon, 4 Apr 2011 08:19:25 +0200
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base
 Configuration	- SecRuleEngine
In-Reply-To: <C9BB6930.1D17B%rbarnett@trustwave.com>
References: <C9BB6930.1D17B%rbarnett@trustwave.com>
Message-ID: <B99BC770CB46D6428EFBC95DFA7C36BF3285E16B25@hxmb01.pnet.ch>

Hi there,

Let me be the devil's advocate: I think SecRuleEngine should be set to "On". Starting with "DetectionOnly" is the sure path
to stay at that level. You'll see a lot of false positives. But since the service is not affected, you postpone the fixes and the tuning
effort until you find the time, which never happens.
 
Leaving it at "DetectionOnly" gives you a nice monitoring and debugging engine, but no protection.

If you start with "On", your service is likely to be heavily affected and you have to fix the false positives immediately.
Once you've done that you have a well-protected site in a very short time period.

"On" is the rocky road but the successful one.

Regs,

Christian





-----Urspr?ngliche Nachricht-----
Von: owasp-modsecurity-core-rule-set-bounces at lists.owasp.org [mailto:owasp-modsecurity-core-rule-set-bounces at lists.owasp.org] Im Auftrag von Ryan Barnett
Gesendet: Freitag, 1. April 2011 17:36
An: mod-security-users at lists.sourceforge.net; owasp-modsecurity-core-rule-set at lists.owasp.org
Betreff: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration - SecRuleEngine

Reference Manual:
http://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecRuleEngine

Current setting:

# Enable ModSecurity, attaching it to every transaction. Use detection
# only to start with, because that minimises the chances of post-installation
# disruption.
#
SecRuleEngine DetectionOnly


Rationale:
When first adding in ModSecurity, you want to minimize any disruptions to traffic until you get a handle on how your configs/rules will respond to your traffic.  This setting allows SecRules to trigger events but not take any disruptive actions.

_______________________________________________
Owasp-modsecurity-core-rule-set mailing list
Owasp-modsecurity-core-rule-set at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set

From jamuse at gmail.com  Mon Apr  4 06:47:56 2011
From: jamuse at gmail.com (Josh Amishav-Zlatin)
Date: Mon, 4 Apr 2011 13:47:56 +0300
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base
 Configuration - SecRuleEngine
In-Reply-To: <B99BC770CB46D6428EFBC95DFA7C36BF3285E16B25@hxmb01.pnet.ch>
References: <C9BB6930.1D17B%rbarnett@trustwave.com>
	<B99BC770CB46D6428EFBC95DFA7C36BF3285E16B25@hxmb01.pnet.ch>
Message-ID: <BANLkTi=wT=yx0jrTgFU0eBcyKAYdg+o95w@mail.gmail.com>

On Mon, Apr 4, 2011 at 9:19 AM,  <christian.folini at post.ch> wrote:
> Hi there,
>
> Let me be the devil's advocate: I think SecRuleEngine should be set to "On". Starting with "DetectionOnly" is the sure path
> to stay at that level.

Hi Christian,

I understand where your coming from but I think it really depends on
the intended use case. Your argument assumes that enabling the
SecRuleEngine is **the** ideal scenario, this may not always be the
case. While it may be a common practice, stopping malicious traffic is
a sure fire way to advertise your running a WAF, which then leads to
attackers modifying their payloads to elude your ruleset/engine which
may or may not be subsequently caught. By only monitoring suspicious
payloads, malicious users are less likely to send obfuscated attacks
intended to bypass ModSecurity.

--
 - Josh

>You'll see a lot of false positives. But since the service is not affected, you postpone the
> fixes and the tuning
> effort until you find the time, which never happens.
>
> Leaving it at "DetectionOnly" gives you a nice monitoring and debugging engine, but no protection.
>
> If you start with "On", your service is likely to be heavily affected and you have to fix the false positives immediately.
> Once you've done that you have a well-protected site in a very short time period.
>
> "On" is the rocky road but the successful one.
>
> Regs,
>
> Christian
>
>
>
>
>
> -----Urspr?ngliche Nachricht-----
> Von: owasp-modsecurity-core-rule-set-bounces at lists.owasp.org [mailto:owasp-modsecurity-core-rule-set-bounces at lists.owasp.org] Im Auftrag von Ryan Barnett
> Gesendet: Freitag, 1. April 2011 17:36
> An: mod-security-users at lists.sourceforge.net; owasp-modsecurity-core-rule-set at lists.owasp.org
> Betreff: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration - SecRuleEngine
>
> Reference Manual:
> http://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecRuleEngine
>
> Current setting:
>
> # Enable ModSecurity, attaching it to every transaction. Use detection
> # only to start with, because that minimises the chances of post-installation
> # disruption.
> #
> SecRuleEngine DetectionOnly
>
>
> Rationale:
> When first adding in ModSecurity, you want to minimize any disruptions to traffic until you get a handle on how your configs/rules will respond to your traffic. ?This setting allows SecRules to trigger events but not take any disruptive actions.
>
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>

From RBarnett at trustwave.com  Mon Apr  4 08:49:59 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Mon, 4 Apr 2011 07:49:59 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base
 Configuration - SecRuleEngine
In-Reply-To: <B99BC770CB46D6428EFBC95DFA7C36BF3285E16B25@hxmb01.pnet.ch>
Message-ID: <C9BF341C.1D2B6%rbarnett@trustwave.com>

On 4/4/11 2:19 AM, "christian.folini at post.ch" <christian.folini at post.ch>
wrote:


>Hi there,
>
>Let me be the devil's advocate: I think SecRuleEngine should be set to
>"On". Starting with "DetectionOnly" is the sure path
>to stay at that level. You'll see a lot of false positives. But since the
>service is not affected, you postpone the fixes and the tuning
>effort until you find the time, which never happens.
>
>Leaving it at "DetectionOnly" gives you a nice monitoring and debugging
>engine, but no protection.
>
>If you start with "On", your service is likely to be heavily affected and
>you have to fix the false positives immediately.
>Once you've done that you have a well-protected site in a very short time
>period.
>
>"On" is the rocky road but the successful one.

Hey Christian,
There are certainly scenarios that end up playing out as you outlined,
however for the purposes of this thread, we have to go by the percentages.
 The vast majority of users don't want to disrupt normal traffic when
initially implementing ModSecurity.  From a commercial perspective, adding
in *any* WAF makes business owners nervous as they don't ever want to
block legit traffic.  Having the SecRuleEngine set to DetectionOnly helps
the WAF advocate to get approval to deploy ModSecurity with the assurance
that it won't block traffic until a data sample has been gathered and
analyzed.

As a reference, this tweets was just seen today "Fixing problems on a
server due to mod_security being way too freaking strict and pissing a few
customers off."  Unfortunately, most users don't have the time and/or
skill set to fully review any ModSecurity ruleset to understand exactly
what the rules will look for and how they look for them.  Almost all users
want to just plug it in and see how it works.  We used to have the
SecFilterEngine/SecRuleEngine set to On and we go too many complaints... :)

-Ryan


>
>Regs,
>
>Christian
>
>
>
>
>
>-----Urspr?ngliche Nachricht-----
>Von: owasp-modsecurity-core-rule-set-bounces at lists.owasp.org
>[mailto:owasp-modsecurity-core-rule-set-bounces at lists.owasp.org] Im
>Auftrag von Ryan Barnett
>Gesendet: Freitag, 1. April 2011 17:36
>An: mod-security-users at lists.sourceforge.net;
>owasp-modsecurity-core-rule-set at lists.owasp.org
>Betreff: [Owasp-modsecurity-core-rule-set] A Recommended Base
>Configuration - SecRuleEngine
>
>Reference Manual:
>http://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Referen
>ce_Manual#SecRuleEngine
>
>Current setting:
>
># Enable ModSecurity, attaching it to every transaction. Use detection
># only to start with, because that minimises the chances of
>post-installation
># disruption.
>#
>SecRuleEngine DetectionOnly
>
>
>Rationale:
>When first adding in ModSecurity, you want to minimize any disruptions to
>traffic until you get a handle on how your configs/rules will respond to
>your traffic.  This setting allows SecRules to trigger events but not
>take any disruptive actions.
>
>_______________________________________________
>Owasp-modsecurity-core-rule-set mailing list
>Owasp-modsecurity-core-rule-set at lists.owasp.org
>https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>_______________________________________________
>Owasp-modsecurity-core-rule-set mailing list
>Owasp-modsecurity-core-rule-set at lists.owasp.org
>https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>


This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Mon Apr  4 10:04:39 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Mon, 4 Apr 2011 09:04:39 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
	- SecRequestBodyAccess
Message-ID: <C9BF4837.1D2F2%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecRequestBodyAccess<http://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecRuleEngine>

Current setting:

# -- Request body handling ---------------------------------------------------

# Allow ModSecurity to access request bodies. If you don't, ModSecurity
# won't be able to see any POST parameters, which opens a large security
# hole for attackers to exploit.
#
SecRequestBodyAccess On


Rationale:
If the protected application accepts POST requests which pass parameter data in the REQUEST_BODY, then this should be set to On.  If this is not set to on, then there is large false negative/bypass evasion issue as ARGS would only ever inspect QUERY_STRING parameters.  Being able to inspect POST request bodies is one of the main advantages that  ModSecurity has over other Apache modules such mod_rewrite.


________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Mon Apr  4 10:27:24 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Mon, 4 Apr 2011 09:27:24 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
 - SecRequestBodyLimit and SecRequestBodyNoFilesLimit
Message-ID: <C9BF4D8C.1D324%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecRequestBodyLimit<http://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecRuleEngine>
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecRequestBodyNoFilesLimit

Current setting:

# Maximum request body size we will accept for buffering. If you support
# file uploads then the value given on the first line has to be as large
# as the largest file you are willing to accept. The second value refers
# to the size of data, with files excluded. You want to keep that value as
# low as practical.
#
SecRequestBodyLimit 13107200
SecRequestBodyNoFilesLimit 131072

Rationale:
These two settings are highly dependent upon the local application's purpose.  The first directive ? SecRequestBodyLimit ? includes file attachments (multi-part Content-Type).  This setting translates to 12.5MB.  The second directive ? SecRequestBodyNoFilesLimit ? is for application/x-www-form-urlencoded request bodies passing ARGS.  This setting is 128K.



From RBarnett at trustwave.com  Mon Apr  4 10:34:00 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Mon, 4 Apr 2011 09:34:00 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
	- SecRequestBodyInMemoryLimit
Message-ID: <C9BF4F18.1D32F%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecRequestBodyInMemoryLimit

Current setting:

# Store up to 128 KB of request body data in memory. When the multipart
# parser reachers this limit, it will start using your hard disk for
# storage. That is slow, but unavoidable.
#
SecRequestBodyInMemoryLimit 131072

Rationale:
This initial setting of 128KB matches up with the SecRequestBodyNoFilesLimit setting so that request bodies can be inspected in the buffer.  This is done for performance reasons.

________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From agi at inittab.org  Mon Apr  4 10:35:24 2011
From: agi at inittab.org (Alberto Gonzalez Iniesta)
Date: Mon, 4 Apr 2011 16:35:24 +0200
Subject: [Owasp-modsecurity-core-rule-set] [mod-security-users] A
 Recommended Base Configuration - SecRequestBodyLimit and
 SecRequestBodyNoFilesLimit
In-Reply-To: <C9BF4D8C.1D324%rbarnett@trustwave.com>
References: <C9BF4D8C.1D324%rbarnett@trustwave.com>
Message-ID: <20110404143524.GS3780@lib.inittab.org>

On Mon, Apr 04, 2011 at 09:27:24AM -0500, Ryan Barnett wrote:
> Current setting:
> 
> # Maximum request body size we will accept for buffering. If you support
> # file uploads then the value given on the first line has to be as large
> # as the largest file you are willing to accept. The second value refers
> # to the size of data, with files excluded. You want to keep that value as
> # low as practical.
> #
> SecRequestBodyLimit 13107200
> SecRequestBodyNoFilesLimit 131072
> 
> Rationale:
> These two settings are highly dependent upon the local application's purpose.  The first directive ? SecRequestBodyLimit ? includes file attachments (multi-part Content-Type).  This setting translates to 12.5MB.  The second directive ? SecRequestBodyNoFilesLimit ? is for application/x-www-form-urlencoded request bodies passing ARGS.  This setting is 128K.
> 

Agreed. But the file "modsecurity.conf-minimal" in the tarball comes
with this:
SecRequestBodyLimit 131072

Maybe it should be updated to 13107200?

Cheers,

Alberto

-- 
Alberto Gonzalez Iniesta    | Formaci?n, consultor?a y soporte t?cnico
agi@(inittab.org|debian.org)| en GNU/Linux y software libre
Encrypted mail preferred    | http://inittab.com

Key fingerprint = 9782 04E7 2B75 405C F5E9  0C81 C514 AF8E 4BA4 01C3

From RBarnett at trustwave.com  Mon Apr  4 10:38:07 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Mon, 4 Apr 2011 09:38:07 -0500
Subject: [Owasp-modsecurity-core-rule-set] [mod-security-users] A
 Recommended Base Configuration - SecRequestBodyLimit and
 SecRequestBodyNoFilesLimit
In-Reply-To: <20110404143524.GS3780@lib.inittab.org>
Message-ID: <C9BF4FC9.1D334%rbarnett@trustwave.com>


On 4/4/11 10:35 AM, "Alberto Gonzalez Iniesta" <agi at inittab.org> wrote:

>On Mon, Apr 04, 2011 at 09:27:24AM -0500, Ryan Barnett wrote:
>> Current setting:
>>
>> # Maximum request body size we will accept for buffering. If you support
>> # file uploads then the value given on the first line has to be as large
>> # as the largest file you are willing to accept. The second value refers
>> # to the size of data, with files excluded. You want to keep that value
>>as
>> # low as practical.
>> #
>> SecRequestBodyLimit 13107200
>> SecRequestBodyNoFilesLimit 131072
>>
>> Rationale:
>> These two settings are highly dependent upon the local application's
>>purpose.  The first directive ? SecRequestBodyLimit ? includes file
>>attachments (multi-part Content-Type).  This setting translates to
>>12.5MB.  The second directive ? SecRequestBodyNoFilesLimit ? is for
>>application/x-www-form-urlencoded request bodies passing ARGS.  This
>>setting is 128K.
>>
>
>Agreed. But the file "modsecurity.conf-minimal" in the tarball comes
>with this:
>SecRequestBodyLimit 131072
>
>Maybe it should be updated to 13107200?

Exactly.  That is the purpose of this community thread.  Our goals is to
develop a new modsecurity_main.conf file that we will distribute with the
new v2.6 branch.

-Ryan


This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From christian.folini at post.ch  Mon Apr  4 11:01:58 2011
From: christian.folini at post.ch (christian.folini at post.ch)
Date: Mon, 4 Apr 2011 17:01:58 +0200
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base
 Configuration - SecRuleEngine
In-Reply-To: <C9BF341C.1D2B6%rbarnett@trustwave.com>
References: <B99BC770CB46D6428EFBC95DFA7C36BF3285E16B25@hxmb01.pnet.ch>
	<C9BF341C.1D2B6%rbarnett@trustwave.com>
Message-ID: <B99BC770CB46D6428EFBC95DFA7C36BF3285E16DA7@hxmb01.pnet.ch>

Hi Ryan,

That approach is certainly the best one from a business perspective.

I only wanted to stir up the discussion a bit.

To talk all these directives through, is a good initiative in my eyes by the way.

Christian

From RBarnett at trustwave.com  Mon Apr  4 11:04:51 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Mon, 4 Apr 2011 10:04:51 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base
 Configuration - SecRuleEngine
In-Reply-To: <B99BC770CB46D6428EFBC95DFA7C36BF3285E16DA7@hxmb01.pnet.ch>
Message-ID: <C9BF55FD.1D340%rbarnett@trustwave.com>




On 4/4/11 11:01 AM, "christian.folini at post.ch" <christian.folini at post.ch>
wrote:

>Hi Ryan,
>
>That approach is certainly the best one from a business perspective.
>
>I only wanted to stir up the discussion a bit.
>
>To talk all these directives through, is a good initiative in my eyes by
>the way.

I agree with you.  Please keep bringing up these counterpoints for
discussion as it will be good to have these items publicly documented so
the community can see how we can to conclusions.

Thanks Christian!

-Ryan


>
>Christian
>_______________________________________________
>Owasp-modsecurity-core-rule-set mailing list
>Owasp-modsecurity-core-rule-set at lists.owasp.org
>https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>


This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Wed Apr  6 12:37:06 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Wed, 6 Apr 2011 11:37:06 -0500
Subject: [Owasp-modsecurity-core-rule-set] ModSecurity Advanced Topic of the
	Week: Malware Link Removal
Message-ID: <C9C20EF2.1DD7A%rbarnett@trustwave.com>

This is really cool use-case and shows some new features of ModSecurity v2.6 -
http://blog.spiderlabs.com/2011/04/modsecurity-advanced-topic-of-the-week-malware-link-removal.html

--
Ryan Barnett


________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Thu Apr  7 10:24:16 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Thu, 7 Apr 2011 09:24:16 -0500
Subject: [Owasp-modsecurity-core-rule-set] Talking XSS Defense Tonight on
	PaulDotCom
Message-ID: <C9C34150.1DDF1%rbarnett@trustwave.com>

Just wanted to pass along to everyone that I will be on PaulDotCom tonight discussing my XSS Street-fight presentation - http://pauldotcom.com/wiki/index.php/Episode238

Lots of fun ModSecurity use-cases will be discussed :)

Cheers.

--
Ryan Barnett
Senior Security Researcher
Trustwave - SpiderLabs


________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Thu Apr  7 13:50:49 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Thu, 7 Apr 2011 12:50:49 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
	- SecRequestBodyLimitAction
Message-ID: <C9C1DE54.1DD32%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecRequestBodyLimitAction

Current setting:

# What do do if the request body size is above our configured limit.
# Keep in mind that this setting will automatically be set to ProcessPartial
# when SecRuleEngine is set to DetectionOnly mode in order to minimize
# disruptions when initially deploying ModSecurity.
#
SecRequestBodyLimitAction Reject


Rationale:
When the SecRuleEngine is set to DetectionOnly, this directive will automatically be changed to ProcessPartial in order to minimize disruptions to traffic during initial implementation.  Users should review any alert messages generated in order to identify proper local size restrictions for the SecRequestBodyLimit directive.  When the SecRuleEngine is set to On, this directive will then take effect and issue a 413 status code when requests are sent that are too large.

________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Thu Apr  7 14:33:12 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Thu, 7 Apr 2011 13:33:12 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
	- REQBODY_ERROR Check
Message-ID: <C9C37BA8.1DE7E%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#REQBODY_ERROR<https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#REQBODY_PROCESSOR_ERROR>

Current setting:

# Verify that we've correctly processed the request body.
# As a rule of thumb, when failing to process a request body
# you should reject the request (when deployed in blocking mode)
# or log a high-severity alert (when deployed in detection-only mode).
#
SecRule REQBODY_ERROR "!@eq 0" \
"phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2"


Rationale:
This variable is created when there are request body parsing errors.  In order to prevent possible evasions, all configurations should include this rule to alert you to malformed request bodies.



________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Fri Apr  8 12:03:12 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Fri, 8 Apr 2011 11:03:12 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
	- MULTIPART_STRICT_ERROR
In-Reply-To: <C9C37BA8.1DE7E%rbarnett@trustwave.com>
Message-ID: <C9C4A92A.1DF1E%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#MULTIPART_STRICT_ERROR

Current setting:
# By default be strict with what we accept in the multipart/form-data
# request body. If the rule below proves to be too strict for your
# environment consider changing it to detection-only. You are encouraged
# _not_ to remove it altogether.
#
SecRule MULTIPART_STRICT_ERROR "!@eq 0" \
"phase:2,t:none,log,deny,status:44,msg:'Multipart request body \
failed strict validation: \
PE %{REQBODY_PROCESSOR_ERROR}, \
BQ %{MULTIPART_BOUNDARY_QUOTED}, \
BW %{MULTIPART_BOUNDARY_WHITESPACE}, \
DB %{MULTIPART_DATA_BEFORE}, \
DA %{MULTIPART_DATA_AFTER}, \
HF %{MULTIPART_HEADER_FOLDING}, \
LF %{MULTIPART_LF_LINE}, \
SM %{MULTIPART_SEMICOLON_MISSING}, \
IQ %{MULTIPART_INVALID_QUOTING}, \
IH %{MULTIPART_INVALID_HEADER_FOLDING}, \
IH %{MULTIPART_FILE_LIMIT_EXCEEDED}'"

Rationale:
This rule checks for signs of evasions during file upload requests.


________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Fri Apr  8 12:05:29 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Fri, 8 Apr 2011 11:05:29 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
	- MULTIPART_UNMATCHED_BOUNDARY
In-Reply-To: <C9C4A92A.1DF1E%rbarnett@trustwave.com>
Message-ID: <C9C4AA2E.1DF28%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#MULTIPART_UNMATCHED_BOUNDARY

Current setting:
# Did we see anything that might be a boundary?
#
SecRule MULTIPART_UNMATCHED_BOUNDARY "!@eq 0" \
"phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'"

Rationale:
This rule checks for signs of evasions during file upload requests.



From RBarnett at trustwave.com  Fri Apr  8 12:11:25 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Fri, 8 Apr 2011 11:11:25 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base
	Configuration - PCRE Recursion Limits
In-Reply-To: <C9C4AA2E.1DF28%rbarnett@trustwave.com>
Message-ID: <C9C4AABB.1DF2D%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecPcreMatchLimit
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecPcreMatchLimitRecursion

Current setting:
# PCRE Tuning
# We want to avoid a potential RegEx DoS condition
#
SecPcreMatchLimit 1000
SecPcreMatchLimitRecursion 1000

# Some internal errors will set flags in TX and we will need to look for these.
# All of these are prefixed with "MSC_".  The following flags currently exist:
#
# MSC_PCRE_LIMITS_EXCEEDED: PCRE match limits were exceeded.
#
SecRule TX:/^MSC_/ "!@streq 0" \
        "phase:2,t:none,deny,msg:'ModSecurity internal error flagged: %{MATCHED_VAR_NAME}'"

Rationale:
These rules help to prevent Regular Expression DoS attacks.
https://www.owasp.org/images/3/38/20091210_VAC-REGEX_DOS-Adar_Weidman.pdf

________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From chris at derham.me.uk  Fri Apr  8 13:09:08 2011
From: chris at derham.me.uk (chris derham)
Date: Fri, 8 Apr 2011 14:09:08 -0300
Subject: [Owasp-modsecurity-core-rule-set] Fwd: A Recommended Base
 Configuration - SecRuleEngine
In-Reply-To: <BANLkTik81Sjui2NziL_gec62YEGiNW50Rg@mail.gmail.com>
References: <B99BC770CB46D6428EFBC95DFA7C36BF3285E16DA7@hxmb01.pnet.ch>
	<C9BF55FD.1D340%rbarnett@trustwave.com>
	<BANLkTik81Sjui2NziL_gec62YEGiNW50Rg@mail.gmail.com>
Message-ID: <BANLkTinpqt0kU3-ruR=6ZBbe65+PJAJixA@mail.gmail.com>

I'll try sending to the whole list instead of just Ryan :-(

---------- Forwarded message ----------
From: chris derham <chris at derham.me.uk>
Date: Fri, Apr 8, 2011 at 1:30 PM
Subject: Re: [Owasp-modsecurity-core-rule-set] A Recommended Base
Configuration - SecRuleEngine
To: Ryan Barnett <RBarnett at trustwave.com>


All,

Was on leave so only just joining in the fun discussing the options.

I have only been using mod security for the last 4 months. I can still
remember installing it onto an apache server, and then running it and seeing
nothing. I remember that it seemed very strange that it wasn't turned on.
Comparing with other pieces of software, I do not know of any that you have
to install, and then to actually switch on for them to work.

I don't think that I am about to add anything to the prior discussion, but
having seen all the other posts, which all brought up valid arguments, I
guess I'd agree that off makes no sense. detect only seems like a prudent
default. At least if that is the default, people can monitor the logs and
then switch on when happy of no false positives

One thing I did take issue with in the discussions was the following

> Your argument assumes that enabling the
> SecRuleEngine is **the** ideal scenario, this may not always be the
> case. While it may be a common practice, stopping malicious traffic is
> a sure fire way to advertise your running a WAF, which then leads to
> attackers modifying their payloads to elude your ruleset/engine which
> may or may not be subsequently caught. By only monitoring suspicious
> payloads, malicious users are less likely to send obfuscated attacks
> intended to bypass ModSecurity.

1) Please understand I just want to discuss this point, and am not
bad-mouthing the poster.
2) surely given the potential for problems in websites, e.g. xss that is no
such thing as "only monitoring suspicious payloads" - any part of the
website could be compromised and as such there isn't a safe/unsafe split.
3) if there is a flaw in a webserver, and the bad-guys want to abuse your
server with it, then when the bad-guys spot that it doesn't work on your
server, they will deduce you have a WAF. They are quite bright after all. At
this point, the cat and mouse game begins. As I said, I've only been working
with mod security for a few months, but surely in this case, the only thing
to do is to hope that

   - they get bored and go somewhere else
   - your white list rules stop the bad guys while they are attempting to
   get in
   - your proactive monitoring catches anything that they do manage to get
   through

So I guess what I am trying to ask, is should you only detect parts of the
website with mod security, or protect it all? We just went live with a
system and we used the latter

Thanks

Chris
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110408/6af0bf58/attachment.html 

From RBarnett at trustwave.com  Fri Apr  8 13:22:04 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Fri, 8 Apr 2011 12:22:04 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
	- SecResponseBodyAccess
In-Reply-To: <C9C4AA2E.1DF28%rbarnett@trustwave.com>
Message-ID: <C9C4AC59.1DF3F%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecResponseBodyAccess

Current setting:
# Allow ModSecurity to access response bodies.
# You should have this directive enabled in order to identify errors
# and data leakage issues.
#
# Do keep in mind that enabling this directive does increases both
# memory consumption and response latency.
#
SecResponseBodyAccess On

Rationale:
This directive setting will most likely spark a debate.  Ivan Ristic proposed that this directive initially be set to Off.  His rationale was that most new ModSecurity users want to focus on inbound attacks only and ge also highlighted the memory consumption impact.  While these points are valid, I believe that this directive should be initially turned on for the following reasons:

 1.  Many web apps have issues with leaking sensitive data and with this directive disabled, they will miss these issues.  These are the issues flagged by the OWASP modsecurity_crs_50_outbound.conf file.
 2.  The performance impact may or may not cause issues.  If these are found to be a problem, then the user can consider disabling this setting.
 3.  In previous versions of ModSecurity, even if the SecRuleEngine was set to DetectionOnly, ModSecurity would still block outbound response bodies that were larger than the SecResponseBodyLimit directive.  This caused a lot of problems for new users so initially setting SecResponseBodyAccess off was an option to ensure that you didn't block responses initially.  This has since been changed with SecResponseBodyLimitAction ProcessPartial.


From RBarnett at trustwave.com  Fri Apr  8 13:29:56 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Fri, 8 Apr 2011 12:29:56 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
	- XML Request Body Parser
In-Reply-To: <C9C4AC59.1DF3F%rbarnett@trustwave.com>
Message-ID: <C9C4BD7A.1DFDC%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#ctl

Current setting:
# Enable XML request body parser.
# Initiate XML Processor in case of xml content-type
#
SecRule REQUEST_HEADERS:Content-Type "text/xml" \
     "phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"

Rationale:
This rule will enable the XML request body parser.  This is needed in order to create the XML:/* variable used in the OWASP CRS.


From RBarnett at trustwave.com  Fri Apr  8 13:37:45 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Fri, 8 Apr 2011 12:37:45 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
	- SecResponseBodyMimeType
In-Reply-To: <C9C4BD7A.1DFDC%rbarnett@trustwave.com>
Message-ID: <C9C4BF76.1DFEC%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecResponseBodyMimeType

Current setting:
# Which response MIME types do you want to inspect? You should adjust the
# configuration below to catch documents but avoid static files
# (e.g., images and archives).
#
SecResponseBodyMimeType text/plain text/html text/xml

Rationale:
ModSecurity rules are most accurate when inspect text-based response bodies.  This directive setting also enables inspection of XML response bodies for web services.

________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Fri Apr  8 14:20:07 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Fri, 8 Apr 2011 13:20:07 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
 - SecResponseBodyLimit and SecResponseBodyLimitAction
In-Reply-To: <C9C4BF76.1DFEC%rbarnett@trustwave.com>
Message-ID: <C9C4C788.1DFF8%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecResponseBodyLimit
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecResponseBodyLimitAction

Current setting:
# Buffer response bodies of up to 512 KB in length.
SecResponseBodyLimit 524288

# What happens when we encounter a response body larger than the configured
# limit? By default, we process what we have and let the rest through.
# That's somewhat less secure, but does not break any legitimate pages.
#
SecResponseBodyLimitAction ProcessPartial

Rationale:
This main directive is set at a reasonable level for most sites.  If individual pages require higher/lower restrictions, you can use the ctl:responseBodyLimit action to adjust.  If the response body is above this setting, we recommend ProcessPartial as this will at least let you inspect the beginning portions of the response bodies looking for error leakages without the worry of blocking entire response pages.

________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Fri Apr  8 14:31:57 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Fri, 8 Apr 2011 13:31:57 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base
	Configuration - Filesystem Configuration
In-Reply-To: <C9C4C788.1DFF8%rbarnett@trustwave.com>
Message-ID: <C9C4CAAD.1E011%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecDataDir<https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecResponseBodyLimit>
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecTmpDir<https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecResponseBodyLimitAction>

Current setting:
# -- Filesystem configuration ------------------------------------------------

# The location where ModSecurity stores temporary files (for example, when
# it needs to handle a file upload that is larger than the configured limit).
#
# This default setting is chosen due to all systems have /tmp available however,
# this is less than ideal. It is recommended that you specify a location that's private.
#
SecTmpDir /tmp/

# The location where ModSecurity will keep its persistent data.  This default setting
# is chosen due to all systems have /tmp available however, it
# too should be updated to a place that other users can't access.
#
SecDataDir /tmp/

Rationale:
These default settings were chosen due /tmp being available on all systems, however, from a security perspective you should update these settings to point to restricted locations where only Apache has access.


From RBarnett at trustwave.com  Fri Apr  8 15:01:02 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Fri, 8 Apr 2011 14:01:02 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
 - File uploads handling configuration
In-Reply-To: <C9C4CAAD.1E011%rbarnett@trustwave.com>
Message-ID: <C9C4CDB7.1E02D%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecUploadDir<https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecResponseBodyLimit>
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecUploadKeepFiles
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecUploadFileMode

Current setting:
# -- File uploads handling configuration -------------------------------------

# The location where ModSecurity stores intercepted uploaded files. This
# location must be private to ModSecurity. You don't want other users on
# the server to access the files, do you?
#
#SecUploadDir /opt/modsecurity/var/upload/

# By default, only keep the files that were determined to be unusual
# in some way (by an external inspection script). For this to work you
# will also need at least one file inspection rule.
#
#SecUploadKeepFiles RelevantOnly

# Uploaded files are by default created with permissions that do not allow
# any other user to access them. You may need to relax that if you want to
# interface ModSecurity to an external program (e.g., an anti-virus).
#
#SecUploadFileMode 0600


Rationale:
The default for file upload directives is to have them commented out.  If you want to enable the capability of saving uploaded files, then you must uncomment them and set the appropriate path location for the SecUploadDir.


From RBarnett at trustwave.com  Fri Apr  8 15:26:38 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Fri, 8 Apr 2011 14:26:38 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
	- Debug log configuration
In-Reply-To: <C9C4CDB7.1E02D%rbarnett@trustwave.com>
Message-ID: <C9C4D42F.1E06E%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecDebugLog
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecDebugLogLevel

Current setting:
# -- Debug log configuration -------------------------------------------------

# The default debug log configuration is to duplicate the error, warning
# and notice messages from the error log.
#
#SecDebugLog /opt/modsecurity/var/log/debug.log
#SecDebugLogLevel 3

Rationale:
The default for the debug log directives is to have them commented out.  If you want to enable the debug log, then you must uncomment them and set the appropriate path location and log levels.

________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From christian.folini at post.ch  Mon Apr 11 02:48:38 2011
From: christian.folini at post.ch (christian.folini at post.ch)
Date: Mon, 11 Apr 2011 08:48:38 +0200
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base
 Configuration - SecResponseBodyAccess
In-Reply-To: <C9C4AC59.1DF3F%rbarnett@trustwave.com>
References: <C9C4AA2E.1DF28%rbarnett@trustwave.com>
	<C9C4AC59.1DF3F%rbarnett@trustwave.com>
Message-ID: <B99BC770CB46D6428EFBC95DFA7C36BF3285EE80D5@hxmb01.pnet.ch>

Hi Ryan,

You are right that SecResponseBodyAccess invites for a debate. 

In the discussion about the SecRuleEngine setting you took the hat of the business people who do not want the WAF to interfere with the legit traffic.
However, this can happen here when you have large downloads on the website. A lot of corporate websites have a few presentations, pdf reports, 
way too large images or even a video or two. This is all slowed down very much and if you have a lot of these, then the whole 
webserver / reverse proxy can be affected. It gets a lot worse when you have a B2B application with legitimate queries, that return
80MB responses... I have seen a surprisingly big number of these applications.

If you have some experience, then you know how to deal with this. But as this is the default setting, you need to think hard.

I guess one can come to a reasonable compromise with SecResponseBodyLimit and SecResponseBodyLimitAction, but I worry
if users will understand the level of protection they get: You would set the BodyAccess to on but then limit the effect afterwards.

Best,

Christian

From RBarnett at trustwave.com  Mon Apr 11 09:39:47 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Mon, 11 Apr 2011 08:39:47 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
	- Audit log configuration
In-Reply-To: <C9C4D42F.1E06E%rbarnett@trustwave.com>
Message-ID: <C9C4D9C8.1E0A1%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecAuditEngine<https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecDebugLog>
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecAuditLogRelevantStatus
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecAuditLogParts
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecAuditLogType
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecAuditLog

Current setting:
# -- Audit log configuration -------------------------------------------------

# Log the transactions that are marked by a rule, as well as those that
# trigger a server error (determined by a 5xx or 4xx, excluding 404,
# level response status codes).
#
SecAuditEngine RelevantOnly
SecAuditLogRelevantStatus "^(?:5|4(?!04))"

# Log everything we know about a transaction.
SecAuditLogParts ABIJDEFHKZ

# Use a single file for logging. This is much easier to look at, but
# assumes that you will use the audit log only ocassionally.
#
SecAuditLogType Serial
SecAuditLog /var/log/modsec_audit.log

# Specify the path for concurrent audit logging.
#SecAuditLogStorageDir /opt/modsecurity/var/audit/

Rationale:
While audit logging everything is ideal from an incident response perspective, for initial deployment setting SecAuditEngine to RelevantOnly is a good idea.  The SecAuitLogRelevantStatus will log all 5xx/4xx level status code responses (except 404s).  The default audit log type is Serial.  If you want to use mlogc to send the audit logs off to a remote location then you will need to update this to use Concurrent.

________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From klaubert at gmail.com  Mon Apr 11 09:56:42 2011
From: klaubert at gmail.com (Klaubert Herr da Silveira)
Date: Mon, 11 Apr 2011 10:56:42 -0300
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base
 Configuration - SecResponseBodyAccess
In-Reply-To: <B99BC770CB46D6428EFBC95DFA7C36BF3285EE80D5@hxmb01.pnet.ch>
References: <C9C4AA2E.1DF28%rbarnett@trustwave.com>
	<C9C4AC59.1DF3F%rbarnett@trustwave.com>
	<B99BC770CB46D6428EFBC95DFA7C36BF3285EE80D5@hxmb01.pnet.ch>
Message-ID: <BANLkTik5RD0ZfRa3CBSTpbreq1qL6Q2uBQ@mail.gmail.com>

Hi Ryan and Christian,

We can't forget the wrongly defined mime type configured on backend,
that can put a extra load on ModSecurity (ie. .pdf defined as
text/plain). This can kill modsec "image". Really the
SecResponseBodyLimit and SecResponseBodyLimitAction can help very much
on this.

On the wiki, can be good to write how to disable the
SecResponseBodyAccess on static content, once that it is not subject
to processing (ie. .txt, .html files), on specific locations.

best regards,

Klaubert



On Mon, Apr 11, 2011 at 3:48 AM,  <christian.folini at post.ch> wrote:
> Hi Ryan,
>
> You are right that SecResponseBodyAccess invites for a debate.
>
> In the discussion about the SecRuleEngine setting you took the hat of the business people who do not want the WAF to interfere with the legit traffic.
> However, this can happen here when you have large downloads on the website. A lot of corporate websites have a few presentations, pdf reports,
> way too large images or even a video or two. This is all slowed down very much and if you have a lot of these, then the whole
> webserver / reverse proxy can be affected. It gets a lot worse when you have a B2B application with legitimate queries, that return
> 80MB responses... I have seen a surprisingly big number of these applications.
>
> If you have some experience, then you know how to deal with this. But as this is the default setting, you need to think hard.
>
> I guess one can come to a reasonable compromise with SecResponseBodyLimit and SecResponseBodyLimitAction, but I worry
> if users will understand the level of protection they get: You would set the BodyAccess to on but then limit the effect afterwards.
>
> Best,
>
> Christian
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>

From RBarnett at trustwave.com  Mon Apr 11 09:57:53 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Mon, 11 Apr 2011 08:57:53 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base
 Configuration - SecResponseBodyAccess
In-Reply-To: <B99BC770CB46D6428EFBC95DFA7C36BF3285EE80D5@hxmb01.pnet.ch>
Message-ID: <C9C87CF6.1E3BF%rbarnett@trustwave.com>


On 4/11/11 2:48 AM, "christian.folini at post.ch" <christian.folini at post.ch>
wrote:

>Hi Ryan,
>
>You are right that SecResponseBodyAccess invites for a debate.

I figured ;)

>
>In the discussion about the SecRuleEngine setting you took the hat of the
>business people who do not want the WAF to interfere with the legit
>traffic.
>However, this can happen here when you have large downloads on the
>website. A lot of corporate websites have a few presentations, pdf
>reports,
>way too large images or even a video or two. This is all slowed down very
>much and if you have a lot of these, then the whole
>webserver / reverse proxy can be affected. It gets a lot worse when you
>have a B2B application with legitimate queries, that return
>80MB responses... I have seen a surprisingly big number of these
>applications.

True, however don't forget about the SecResponseBodyMimeType directive -

       SecResponseBodyMimeType text/plain text/html text/xml


This should restrict ModSecurity's response body inspect to only these 3
text-based content-types.  This means that, if your app is setting proper
Content-Type response headers, ModSecurity will not inspect these large
media-type files (PDFs, videos, etc...)

>
>If you have some experience, then you know how to deal with this. But as
>this is the default setting, you need to think hard.
>
>I guess one can come to a reasonable compromise with SecResponseBodyLimit
>and SecResponseBodyLimitAction, but I worry
>if users will understand the level of protection they get: You would set
>the BodyAccess to on but then limit the effect afterwards.

We are trying to have the best middle-ground for the default config.  If
you set Response Body monitoring to off, then you may miss some critical
errors/leakages.  If you set it On, then there was a chance that you might
deny legitimate large pages.  The latter is currently mitigated by the
combination of two other Recommended Base Config settings -

1) SecRuleEngine DetectionOnly - when this is set,
SecResponseBodyLimitAction is automatically set to ProcessPartial
2) SecResponseBodyLimitAction ProcessPartial

With these two settings in the base config, large response bodies will not
be blocked so we should do some inspection.

-Ryan

>
>Best,
>
>Christian
>_______________________________________________
>Owasp-modsecurity-core-rule-set mailing list
>Owasp-modsecurity-core-rule-set at lists.owasp.org
>https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>


This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From lcbopen at lcbennett.com  Mon Apr 11 11:18:02 2011
From: lcbopen at lcbennett.com (Larry Bennett)
Date: Mon, 11 Apr 2011 15:18:02 +0000 (UTC)
Subject: [Owasp-modsecurity-core-rule-set] Trouble with 950901
References: <4D3EF2E3.6080003@hcjb.org>
	<638B65B0-4B6A-483C-A733-63B64612F998@riggs.me>
Message-ID: <loom.20110411T171429-486@post.gmane.org>

Jim Riggs <apache-lists at ...> writes:

> 
> On Jan 25, 2011, at 9:57 AM, Josh Gee wrote:
> 
> > This SQL Injection rule is causing me serious headaches.  It has a lot
> > of false positives, and it always matches twice, once with the case it
> > finds, and once after it lower-cases the values.  This makes it very
> > hard to write an exception for.
> > 
> > It seems to be so crude as to match the word "and" in just about any
> > context that includes white space.  It matches in filenames (which is
> > not too bad), URLs, and even standard HTML form values.
> > 
> > For now I've commented it out completely because in Anomaly Scoring mode
> > I couldn't manage to write an exception that would turn it off.
> > 
> > Any ideas for a better solution?
> 
> We have had some major issues with this one too and had to disable it.  Can
you not just do a `SecRuleRemoveById
> 950901' in your 48 local exceptions file?  That's what I did, and I believe it
to be working.
> 

Is mod_security supposed to match rules twice? I'm having a similar problem to
the above, where the same rule matches twice -- once in original case and then
in lower case. The rule has t:lower. My understanding is that the input should
be transformed to lowercase and then the rule run against that. The double
matching is doubling the anomaly score and causing false positives.


From christian.folini at post.ch  Tue Apr 12 08:42:23 2011
From: christian.folini at post.ch (christian.folini at post.ch)
Date: Tue, 12 Apr 2011 14:42:23 +0200
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base
 Configuration - SecResponseBodyAccess
In-Reply-To: <C9C87CF6.1E3BF%rbarnett@trustwave.com>
References: <B99BC770CB46D6428EFBC95DFA7C36BF3285EE80D5@hxmb01.pnet.ch>
	<C9C87CF6.1E3BF%rbarnett@trustwave.com>
Message-ID: <B99BC770CB46D6428EFBC95DFA7C36BF3285EE84E4@hxmb01.pnet.ch>

Ryan, 

You are right, that SecResponseBodyMimeType saves the day in a lot of the cases.
But there are these huge html responses in business applications that bug me from
time to time - actually the response looks a lot like a leakage.

Still, I think you are right and there is a safe ground for a reasonable default.

Regs,

Christian

-----Urspr?ngliche Nachricht-----
Von: Ryan Barnett [mailto:RBarnett at trustwave.com] 
Gesendet: Montag, 11. April 2011 15:58
An: Folini Christian, IT222 extern; mod-security-users at lists.sourceforge.net; owasp-modsecurity-core-rule-set at lists.owasp.org
Betreff: Re: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration - SecResponseBodyAccess


On 4/11/11 2:48 AM, "christian.folini at post.ch" <christian.folini at post.ch>
wrote:

>Hi Ryan,
>
>You are right that SecResponseBodyAccess invites for a debate.

I figured ;)

>
>In the discussion about the SecRuleEngine setting you took the hat of the
>business people who do not want the WAF to interfere with the legit
>traffic.
>However, this can happen here when you have large downloads on the
>website. A lot of corporate websites have a few presentations, pdf
>reports,
>way too large images or even a video or two. This is all slowed down very
>much and if you have a lot of these, then the whole
>webserver / reverse proxy can be affected. It gets a lot worse when you
>have a B2B application with legitimate queries, that return
>80MB responses... I have seen a surprisingly big number of these
>applications.

True, however don't forget about the SecResponseBodyMimeType directive -

       SecResponseBodyMimeType text/plain text/html text/xml


This should restrict ModSecurity's response body inspect to only these 3
text-based content-types.  This means that, if your app is setting proper
Content-Type response headers, ModSecurity will not inspect these large
media-type files (PDFs, videos, etc...)

>
>If you have some experience, then you know how to deal with this. But as
>this is the default setting, you need to think hard.
>
>I guess one can come to a reasonable compromise with SecResponseBodyLimit
>and SecResponseBodyLimitAction, but I worry
>if users will understand the level of protection they get: You would set
>the BodyAccess to on but then limit the effect afterwards.

We are trying to have the best middle-ground for the default config.  If
you set Response Body monitoring to off, then you may miss some critical
errors/leakages.  If you set it On, then there was a chance that you might
deny legitimate large pages.  The latter is currently mitigated by the
combination of two other Recommended Base Config settings -

1) SecRuleEngine DetectionOnly - when this is set,
SecResponseBodyLimitAction is automatically set to ProcessPartial
2) SecResponseBodyLimitAction ProcessPartial

With these two settings in the base config, large response bodies will not
be blocked so we should do some inspection.

-Ryan

>
>Best,
>
>Christian
>_______________________________________________
>Owasp-modsecurity-core-rule-set mailing list
>Owasp-modsecurity-core-rule-set at lists.owasp.org
>https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>


This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.

From RBarnett at trustwave.com  Tue Apr 12 10:23:52 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Tue, 12 Apr 2011 09:23:52 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base
 Configuration - SecResponseBodyAccess
In-Reply-To: <BANLkTik5RD0ZfRa3CBSTpbreq1qL6Q2uBQ@mail.gmail.com>
Message-ID: <C9C9D7A6.1E519%rbarnett@trustwave.com>


On 4/11/11 9:56 AM, "Klaubert Herr da Silveira" <klaubert at gmail.com> wrote:

>Hi Ryan and Christian,
>
>We can't forget the wrongly defined mime type configured on backend,
>that can put a extra load on ModSecurity (ie. .pdf defined as
>text/plain). This can kill modsec "image". Really the
>SecResponseBodyLimit and SecResponseBodyLimitAction can help very much
>on this.

Good point.  When binary content is wrapped in text-based Content-Type
response header it can cause problems.  Hmm, maybe it would be worth
testing another pre-qualifier check against the response_body with
something like @validateByteRange to ensure that the body isn't binary
before deciding to run rules against it.

>
>On the wiki, can be good to write how to disable the
>SecResponseBodyAccess on static content, once that it is not subject
>to processing (ie. .txt, .html files), on specific locations.

We already have rulesets in the OWASP CRS to ignore static content -
http://mod-security.svn.sourceforge.net/viewvc/mod-security/crs/trunk/optio
nal_rules/modsecurity_crs_10_ignore_static.conf
http://mod-security.svn.sourceforge.net/viewvc/mod-security/crs/trunk/optio
nal_rules/modsecurity_crs_47_skip_outbound_checks.conf

>
>best regards,
>
>Klaubert
>
>
>
>On Mon, Apr 11, 2011 at 3:48 AM,  <christian.folini at post.ch> wrote:
>> Hi Ryan,
>>
>> You are right that SecResponseBodyAccess invites for a debate.
>>
>> In the discussion about the SecRuleEngine setting you took the hat of
>>the business people who do not want the WAF to interfere with the legit
>>traffic.
>> However, this can happen here when you have large downloads on the
>>website. A lot of corporate websites have a few presentations, pdf
>>reports,
>> way too large images or even a video or two. This is all slowed down
>>very much and if you have a lot of these, then the whole
>> webserver / reverse proxy can be affected. It gets a lot worse when you
>>have a B2B application with legitimate queries, that return
>> 80MB responses... I have seen a surprisingly big number of these
>>applications.
>>
>> If you have some experience, then you know how to deal with this. But
>>as this is the default setting, you need to think hard.
>>
>> I guess one can come to a reasonable compromise with
>>SecResponseBodyLimit and SecResponseBodyLimitAction, but I worry
>> if users will understand the level of protection they get: You would
>>set the BodyAccess to on but then limit the effect afterwards.
>>
>> Best,
>>
>> Christian
>> _______________________________________________
>> Owasp-modsecurity-core-rule-set mailing list
>> Owasp-modsecurity-core-rule-set at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>>
>_______________________________________________
>Owasp-modsecurity-core-rule-set mailing list
>Owasp-modsecurity-core-rule-set at lists.owasp.org
>https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>


This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Tue Apr 12 10:33:30 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Tue, 12 Apr 2011 09:33:30 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
	- SecArgumentSeparator
In-Reply-To: <C9C4D9C8.1E0A1%rbarnett@trustwave.com>
Message-ID: <C9C9DA4D.1E529%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecArgumentSeparator

Current setting:
# Use the most commonly used application/x-www-form-urlencoded parameter
# separator. There's probably only one application somewhere that uses
# something else so don't expect to change this value.
#
SecArgumentSeparator &

Rationale:
The ampersand char (&) is the most commonly used parameter separator used in querystring and request_bodies.

________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Tue Apr 12 10:41:52 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Tue, 12 Apr 2011 09:41:52 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
	- SecCookieFormat
In-Reply-To: <C9C4D9C8.1E0A1%rbarnett@trustwave.com>
Message-ID: <C9C9DB01.1E530%rbarnett@trustwave.com>

Reference Manual:
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecCookieFormat

Current setting:
# Settle on version 0 (zero) cookies, as that is what most applications
# use. Using an incorrect cookie version may open your installation to
# evasion attacks (against the rules that examine named cookies).
#
SecCookieFormat 0

Rationale:
We use format 0 which is the Netscape cookie spec version.

________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Tue Apr 12 10:57:24 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Tue, 12 Apr 2011 09:57:24 -0500
Subject: [Owasp-modsecurity-core-rule-set] CRS Directory Format Question
Message-ID: <C9C9E094.1E55A%rbarnett@trustwave.com>

The current OWASP CRS archive has a number of directories that hold different rules -

 *   base_rules
 *   optional_rules
 *   slr_rules
 *   experimental_rules

I am thinking that most ModSecurity users want to use Apache Include wild-carding when activating rulesets -

<IfModule security2_module>
               Include conf/modsecurity_crs/*.conf
               Include conf/modsecurity_crs/base_rules/*.conf
</IfModule>

While this is certainly convenient, this does cause a problem.  The various rules files have a numbering scheme whose purpose to to help ensure that the rules file are executed in the proper order when wild-carding with includes.  Activating these rules are challenging when separated into the different directories.

<IfModule security2_module>
               Include conf/modsecurity_crs/*.conf
               Include conf/modsecurity_crs/base_rules/*.conf
               Include conf/modsecurity_crs/optional_rules/*.conf

</IfModule>

So, what I am thinking is that we should add an empty directory called -

 *   activated_rules

The sole purpose of this directory would be for the local Admin to copy all files that they want to run into that one directory.  When they do this, then the file name numbering scheme will work and it will allow for easier Include wild-carding -

<IfModule security2_module>
               Include conf/modsecurity_crs/*.conf
               Include conf/modsecurity_crs/activated_rules/*.conf
</IfModule>

How does this approach sound to everyone?

-Ryan


From Ken at pumastudios.com  Wed Apr 13 09:02:34 2011
From: Ken at pumastudios.com (Ken Brucker)
Date: Wed, 13 Apr 2011 08:02:34 -0500
Subject: [Owasp-modsecurity-core-rule-set] Rule 950907 regex issue?
Message-ID: <73B1367E-66A9-43C9-B96A-784C5613222E@pumastudios.com>

Hi - I'm pretty new to modsecurity configuration but I think I found a problem with one of the rules.

SecRule REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* "(?:(?:[\;\|\`]\W*?\bcc|\b(wget|curl))\b|\/cc(?:[\'\"\|\;\`\-\s]|$))" \
		"phase:2,rev:'2.1.2',capture,t:none,t:normalisePath,t:lowercase,ctl:auditLogParts=+E,block,msg:'System Command Injection',id:'950907',tag:'WEB_ATTACK/COMMAND_INJECTION',tag:'WASCTC/WASC-31',tag:'OWASP_TOP_10/A1',tag:'PCI/6.5.2',logdata:'%{TX.0}',severity:'2',setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.critical_anomaly_score},setvar:tx.command_injection_score=+%{tx.critical_anomaly_score},setvar:tx.%{rule.id}-WEB_ATTACK/COMMAND_INJECTION-%{matched_var_name}=%{tx.0},skipAfter:END_COMMAND_INJECTION1"

The match pattern does not appear to be doing the right thing.  Specifically, given the text "make the little curl on the top", the rule matches the " curl " portion.  I believe what was intended is more like:

(?:(?:[\;\|\`]\W*?\b|/)(cc|wget|curl)\b(?:[\)\'\"\|\;\`\-\s]|$))

-- Ken

From dchirica at gmail.com  Wed Apr 13 13:52:25 2011
From: dchirica at gmail.com (Dan Chirica)
Date: Wed, 13 Apr 2011 10:52:25 -0700
Subject: [Owasp-modsecurity-core-rule-set] Problems with rule:
	modsecurity_crs_41_sql_injection_attacks
Message-ID: <BANLkTi=-xvk7hUuPhYD3ibUDcfg+Q+0S_w@mail.gmail.com>

Hello,

I am puzzled why the rule ID: 950901 contained in the above mentioned rule
file was triggering a 403 error even though it was supposed (it's my
understanding) to just log only due to false positive issues.

I recently installed Ubuntu 10.4 with the distributed apache binary. I
compiled modsec apache 2.5.13 because the Ubuntu distro binary was having
issues interpreting the modsecurity_crs_10_config.config instructions
rendering the base_rules useless. It solved these issues but, I am getting
some false positive hits by the rule:
modsecurity_crs_41_sql_injection_attacks namely rule ID: 950901 on POST or
GET payload containing 'and' or 'or' words. It is my understanding that this
rule should be logging-only since it is placed after the: SecMarker
END_SQL_INJECTION_PM and the line (SecRule TX:PM_SQLI_SCORE "@eq 0"
"phase:2,rev:'2.0.10',t:none,pass,skipAfter:END_SQL_INJECTION_PM,nolog") at
the beginning of this rule should set everything after the marker as
logging-only.

Am I missing anything?

I appreciate all your help.

-- Dan Chirica
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110413/0288772d/attachment.html 

From RBarnett at trustwave.com  Thu Apr 14 09:00:00 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Thu, 14 Apr 2011 08:00:00 -0500
Subject: [Owasp-modsecurity-core-rule-set] CRS Directory Format Question
In-Reply-To: <C9C9E094.1E55A%rbarnett@trustwave.com>
Message-ID: <C9CC67E9.1E71D%rbarnett@trustwave.com>

Any comments on this approach?  Good idea?

-Ryan


From: Ryan Barnett <rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>>
Date: Tue, 12 Apr 2011 09:57:24 -0500
To: "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>" <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>
Subject: CRS Directory Format Question

The current OWASP CRS archive has a number of directories that hold different rules -

 *   base_rules
 *   optional_rules
 *   slr_rules
 *   experimental_rules

I am thinking that most ModSecurity users want to use Apache Include wild-carding when activating rulesets -

<IfModule security2_module>
               Include conf/modsecurity_crs/*.conf
               Include conf/modsecurity_crs/base_rules/*.conf
</IfModule>

While this is certainly convenient, this does cause a problem.  The various rules files have a numbering scheme whose purpose to to help ensure that the rules file are executed in the proper order when wild-carding with includes.  Activating these rules are challenging when separated into the different directories.

<IfModule security2_module>
               Include conf/modsecurity_crs/*.conf
               Include conf/modsecurity_crs/base_rules/*.conf
               Include conf/modsecurity_crs/optional_rules/*.conf

</IfModule>

So, what I am thinking is that we should add an empty directory called -

 *   activated_rules

The sole purpose of this directory would be for the local Admin to copy all files that they want to run into that one directory.  When they do this, then the file name numbering scheme will work and it will allow for easier Include wild-carding -

<IfModule security2_module>
               Include conf/modsecurity_crs/*.conf
               Include conf/modsecurity_crs/activated_rules/*.conf
</IfModule>

How does this approach sound to everyone?

-Ryan

________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From tomb at owasp.org  Thu Apr 14 09:04:47 2011
From: tomb at owasp.org (Tom Brennan)
Date: Thu, 14 Apr 2011 09:04:47 -0400
Subject: [Owasp-modsecurity-core-rule-set] CRS Directory Format Question
In-Reply-To: <C9CC67E9.1E71D%rbarnett@trustwave.com>
References: <C9CC67E9.1E71D%rbarnett@trustwave.com>
Message-ID: <583E715C-4E11-4C30-9DC1-15B602F3832D@owasp.org>

+5 hit points

Sent from a mobile device

On Apr 14, 2011, at 9:00 AM, Ryan Barnett <RBarnett at trustwave.com> wrote:

> Any comments on this approach?  Good idea?
> 
> -Ryan
> 
> 
> From: Ryan Barnett <rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>>
> Date: Tue, 12 Apr 2011 09:57:24 -0500
> To: "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>" <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>
> Subject: CRS Directory Format Question
> 
> The current OWASP CRS archive has a number of directories that hold different rules -
> 
> *   base_rules
> *   optional_rules
> *   slr_rules
> *   experimental_rules
> 
> I am thinking that most ModSecurity users want to use Apache Include wild-carding when activating rulesets -
> 
> <IfModule security2_module>
>               Include conf/modsecurity_crs/*.conf
>               Include conf/modsecurity_crs/base_rules/*.conf
> </IfModule>
> 
> While this is certainly convenient, this does cause a problem.  The various rules files have a numbering scheme whose purpose to to help ensure that the rules file are executed in the proper order when wild-carding with includes.  Activating these rules are challenging when separated into the different directories.
> 
> <IfModule security2_module>
>               Include conf/modsecurity_crs/*.conf
>               Include conf/modsecurity_crs/base_rules/*.conf
>               Include conf/modsecurity_crs/optional_rules/*.conf
> 
> </IfModule>
> 
> So, what I am thinking is that we should add an empty directory called -
> 
> *   activated_rules
> 
> The sole purpose of this directory would be for the local Admin to copy all files that they want to run into that one directory.  When they do this, then the file name numbering scheme will work and it will allow for easier Include wild-carding -
> 
> <IfModule security2_module>
>               Include conf/modsecurity_crs/*.conf
>               Include conf/modsecurity_crs/activated_rules/*.conf
> </IfModule>
> 
> How does this approach sound to everyone?
> 
> -Ryan
> 
> ________________________________
> This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.
> 
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set

From colin.watson at owasp.org  Thu Apr 14 09:20:07 2011
From: colin.watson at owasp.org (Colin Watson)
Date: Thu, 14 Apr 2011 14:20:07 +0100
Subject: [Owasp-modsecurity-core-rule-set] CRS Directory Format Question
In-Reply-To: <C9CC67E9.1E71D%rbarnett@trustwave.com>
References: <C9C9E094.1E55A%rbarnett@trustwave.com>
	<C9CC67E9.1E71D%rbarnett@trustwave.com>
Message-ID: <BANLkTin1fUQrGbUYgF4d5-_V26No-RWY1A@mail.gmail.com>

Yes, I think this would be helpful.  It might be worth explaining in
the comments why the "proper order" is important, and thus where to
put custom configuration settings and rules for each vhost/server.

Colin

On 14 April 2011 14:00, Ryan Barnett <RBarnett at trustwave.com> wrote:
> Any comments on this approach? ?Good idea?
>
> -Ryan
>
>
> From: Ryan Barnett <rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>>
> Date: Tue, 12 Apr 2011 09:57:24 -0500
> To: "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>" <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>
> Subject: CRS Directory Format Question
>
> The current OWASP CRS archive has a number of directories that hold different rules -
>
> ?* ? base_rules
> ?* ? optional_rules
> ?* ? slr_rules
> ?* ? experimental_rules
>
> I am thinking that most ModSecurity users want to use Apache Include wild-carding when activating rulesets -
>
> <IfModule security2_module>
> ? ? ? ? ? ? ? Include conf/modsecurity_crs/*.conf
> ? ? ? ? ? ? ? Include conf/modsecurity_crs/base_rules/*.conf
> </IfModule>
>
> While this is certainly convenient, this does cause a problem. ?The various rules files have a numbering scheme whose purpose to to help ensure that the rules file are executed in the proper order when wild-carding with includes. ?Activating these rules are challenging when separated into the different directories.
>
> <IfModule security2_module>
> ? ? ? ? ? ? ? Include conf/modsecurity_crs/*.conf
> ? ? ? ? ? ? ? Include conf/modsecurity_crs/base_rules/*.conf
> ? ? ? ? ? ? ? Include conf/modsecurity_crs/optional_rules/*.conf
>
> </IfModule>
>
> So, what I am thinking is that we should add an empty directory called -
>
> ?* ? activated_rules
>
> The sole purpose of this directory would be for the local Admin to copy all files that they want to run into that one directory. ?When they do this, then the file name numbering scheme will work and it will allow for easier Include wild-carding -
>
> <IfModule security2_module>
> ? ? ? ? ? ? ? Include conf/modsecurity_crs/*.conf
> ? ? ? ? ? ? ? Include conf/modsecurity_crs/activated_rules/*.conf
> </IfModule>
>
> How does this approach sound to everyone?
>
> -Ryan
>
> ________________________________
> This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.
>
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>

From klaubert at gmail.com  Thu Apr 14 09:27:43 2011
From: klaubert at gmail.com (Klaubert Herr da Silveira)
Date: Thu, 14 Apr 2011 10:27:43 -0300
Subject: [Owasp-modsecurity-core-rule-set] CRS Directory Format Question
In-Reply-To: <C9CC67E9.1E71D%rbarnett@trustwave.com>
References: <C9C9E094.1E55A%rbarnett@trustwave.com>
	<C9CC67E9.1E71D%rbarnett@trustwave.com>
Message-ID: <BANLkTimhaqCGcBCAm5kaKaz6F8jeGyjvjg@mail.gmail.com>

This remember the ubuntu/debian approach to apache modules, and yes
its a good model. It make more clear to the admin what and how to
enable each file.
But instead of a file copy, maybe a link could be used, and this will
make updates more simple, and less error prone, because no file
already used will be forgoten on copy.

Klaubert

On Thu, Apr 14, 2011 at 10:00 AM, Ryan Barnett <RBarnett at trustwave.com> wrote:
> Any comments on this approach? ?Good idea?
>
> -Ryan
>
>
> From: Ryan Barnett <rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>>
> Date: Tue, 12 Apr 2011 09:57:24 -0500
> To: "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>" <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>
> Subject: CRS Directory Format Question
>
> The current OWASP CRS archive has a number of directories that hold different rules -
>
> ?* ? base_rules
> ?* ? optional_rules
> ?* ? slr_rules
> ?* ? experimental_rules
>
> I am thinking that most ModSecurity users want to use Apache Include wild-carding when activating rulesets -
>
> <IfModule security2_module>
> ? ? ? ? ? ? ? Include conf/modsecurity_crs/*.conf
> ? ? ? ? ? ? ? Include conf/modsecurity_crs/base_rules/*.conf
> </IfModule>
>
> While this is certainly convenient, this does cause a problem. ?The various rules files have a numbering scheme whose purpose to to help ensure that the rules file are executed in the proper order when wild-carding with includes. ?Activating these rules are challenging when separated into the different directories.
>
> <IfModule security2_module>
> ? ? ? ? ? ? ? Include conf/modsecurity_crs/*.conf
> ? ? ? ? ? ? ? Include conf/modsecurity_crs/base_rules/*.conf
> ? ? ? ? ? ? ? Include conf/modsecurity_crs/optional_rules/*.conf
>
> </IfModule>
>
> So, what I am thinking is that we should add an empty directory called -
>
> ?* ? activated_rules
>
> The sole purpose of this directory would be for the local Admin to copy all files that they want to run into that one directory. ?When they do this, then the file name numbering scheme will work and it will allow for easier Include wild-carding -
>
> <IfModule security2_module>
> ? ? ? ? ? ? ? Include conf/modsecurity_crs/*.conf
> ? ? ? ? ? ? ? Include conf/modsecurity_crs/activated_rules/*.conf
> </IfModule>
>
> How does this approach sound to everyone?
>
> -Ryan
>
> ________________________________
> This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.
>
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>

From pfote at ypsilon.net  Thu Apr 14 09:28:20 2011
From: pfote at ypsilon.net (pfote)
Date: Thu, 14 Apr 2011 15:28:20 +0200
Subject: [Owasp-modsecurity-core-rule-set] CRS Directory Format Question
In-Reply-To: <BANLkTin1fUQrGbUYgF4d5-_V26No-RWY1A@mail.gmail.com>
References: <C9C9E094.1E55A%rbarnett@trustwave.com>	<C9CC67E9.1E71D%rbarnett@trustwave.com>
	<BANLkTin1fUQrGbUYgF4d5-_V26No-RWY1A@mail.gmail.com>
Message-ID: <4DA6F674.8080606@ypsilon.net>

I'm using right now that

              Include conf/modsecurity_crs/*.conf
              Include conf/modsecurity_crs/base_rules/*.conf
              Include conf/modsecurity_crs/optional_rules/*.conf


approach, wasn't aware of that problem (fairly new to modsecurity and 
owasp) .. thanks for pointing out.

However, i wouldn't copy but better symlink them, this way it's still 
possible to have it auto-updated.

cheers
Andreas
> Yes, I think this would be helpful.  It might be worth explaining in
> the comments why the "proper order" is important, and thus where to
> put custom configuration settings and rules for each vhost/server.
>
> Colin
>
> On 14 April 2011 14:00, Ryan Barnett <RBarnett at trustwave.com> wrote:
>   
>> Any comments on this approach?  Good idea?
>>
>> -Ryan
>>
>>
>> From: Ryan Barnett <rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>>
>> Date: Tue, 12 Apr 2011 09:57:24 -0500
>> To: "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>" <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>
>> Subject: CRS Directory Format Question
>>
>> The current OWASP CRS archive has a number of directories that hold different rules -
>>
>>  *   base_rules
>>  *   optional_rules
>>  *   slr_rules
>>  *   experimental_rules
>>
>> I am thinking that most ModSecurity users want to use Apache Include wild-carding when activating rulesets -
>>
>> <IfModule security2_module>
>>               Include conf/modsecurity_crs/*.conf
>>               Include conf/modsecurity_crs/base_rules/*.conf
>> </IfModule>
>>
>> While this is certainly convenient, this does cause a problem.  The various rules files have a numbering scheme whose purpose to to help ensure that the rules file are executed in the proper order when wild-carding with includes.  Activating these rules are challenging when separated into the different directories.
>>
>> <IfModule security2_module>
>>               Include conf/modsecurity_crs/*.conf
>>               Include conf/modsecurity_crs/base_rules/*.conf
>>               Include conf/modsecurity_crs/optional_rules/*.conf
>>
>> </IfModule>
>>
>> So, what I am thinking is that we should add an empty directory called -
>>
>>  *   activated_rules
>>
>> The sole purpose of this directory would be for the local Admin to copy all files that they want to run into that one directory.  When they do this, then the file name numbering scheme will work and it will allow for easier Include wild-carding -
>>
>> <IfModule security2_module>
>>               Include conf/modsecurity_crs/*.conf
>>               Include conf/modsecurity_crs/activated_rules/*.conf
>> </IfModule>
>>
>> How does this approach sound to everyone?
>>
>> -Ryan
>>
>> ________________________________
>> This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.
>>
>> _______________________________________________
>> Owasp-modsecurity-core-rule-set mailing list
>> Owasp-modsecurity-core-rule-set at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>>
>>     
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110414/d8358f56/attachment-0001.html 

From apache-lists at riggs.me  Thu Apr 14 09:35:08 2011
From: apache-lists at riggs.me (Jim Riggs)
Date: Thu, 14 Apr 2011 08:35:08 -0500
Subject: [Owasp-modsecurity-core-rule-set] CRS Directory Format Question
In-Reply-To: <4DA6F674.8080606@ypsilon.net>
References: <C9C9E094.1E55A%rbarnett@trustwave.com>	<C9CC67E9.1E71D%rbarnett@trustwave.com>
	<BANLkTin1fUQrGbUYgF4d5-_V26No-RWY1A@mail.gmail.com>
	<4DA6F674.8080606@ypsilon.net>
Message-ID: <2932C79E-C63A-4DAC-9C99-3ED807B19328@riggs.me>

I agree with Andreas and Klaubert.  If this is the approach we take, the documentation should *strongly* recommend symlinks; otherwise, it will cause a major maintenance headache for admins, breaking auto-update.  (I fear the step of _copying_ the files will often get forgotten or missed.  Symlinks would address that issue to an extent.)


On Apr 14, 2011, at 8:28 AM, pfote wrote:

> I'm using right now that
>               Include conf/modsecurity_crs/*.conf
>               Include conf/modsecurity_crs/base_rules/*.conf
>               Include conf/modsecurity_crs/optional_rules/*.conf
> 
> 
> approach, wasn't aware of that problem (fairly new to modsecurity and owasp) .. thanks for pointing out.
> 
> However, i wouldn't copy but better symlink them, this way it's still possible to have it auto-updated.
> 
> cheers
> Andreas
>> Yes, I think this would be helpful.  It might be worth explaining in
>> the comments why the "proper order" is important, and thus where to
>> put custom configuration settings and rules for each vhost/server.
>> 
>> Colin
>> 
>> On 14 April 2011 14:00, Ryan Barnett 
>> <RBarnett at trustwave.com>
>>  wrote:
>>   
>> 
>>> Any comments on this approach?  Good idea?
>>> 
>>> -Ryan
>>> 
>>> 
>>> From: Ryan Barnett <
>>> rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>
>>> >
>>> Date: Tue, 12 Apr 2011 09:57:24 -0500
>>> To: "
>>> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>" <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>
>>> >
>>> Subject: CRS Directory Format Question
>>> 
>>> The current OWASP CRS archive has a number of directories that hold different rules -
>>> 
>>>  *   base_rules
>>>  *   optional_rules
>>>  *   slr_rules
>>>  *   experimental_rules
>>> 
>>> I am thinking that most ModSecurity users want to use Apache Include wild-carding when activating rulesets -
>>> 
>>> <IfModule security2_module>
>>>               Include conf/modsecurity_crs/*.conf
>>>               Include conf/modsecurity_crs/base_rules/*.conf
>>> </IfModule>
>>> 
>>> While this is certainly convenient, this does cause a problem.  The various rules files have a numbering scheme whose purpose to to help ensure that the rules file are executed in the proper order when wild-carding with includes.  Activating these rules are challenging when separated into the different directories.
>>> 
>>> <IfModule security2_module>
>>>               Include conf/modsecurity_crs/*.conf
>>>               Include conf/modsecurity_crs/base_rules/*.conf
>>>               Include conf/modsecurity_crs/optional_rules/*.conf
>>> 
>>> </IfModule>
>>> 
>>> So, what I am thinking is that we should add an empty directory called -
>>> 
>>>  *   activated_rules
>>> 
>>> The sole purpose of this directory would be for the local Admin to copy all files that they want to run into that one directory.  When they do this, then the file name numbering scheme will work and it will allow for easier Include wild-carding -
>>> 
>>> <IfModule security2_module>
>>>               Include conf/modsecurity_crs/*.conf
>>>               Include conf/modsecurity_crs/activated_rules/*.conf
>>> </IfModule>
>>> 
>>> How does this approach sound to everyone?
>>> 
>>> -Ryan
>>> 
>>> ________________________________
>>> This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.
>>> 
>>> _______________________________________________
>>> Owasp-modsecurity-core-rule-set mailing list
>>> 
>>> Owasp-modsecurity-core-rule-set at lists.owasp.org
>>> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>>> 
>>> 
>>>     
>>> 
>> _______________________________________________
>> Owasp-modsecurity-core-rule-set mailing list
>> 
>> Owasp-modsecurity-core-rule-set at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>> 
>>   
>> 
> 
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set


From RBarnett at trustwave.com  Thu Apr 14 09:38:39 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Thu, 14 Apr 2011 08:38:39 -0500
Subject: [Owasp-modsecurity-core-rule-set] CRS Directory Format Question
In-Reply-To: <2932C79E-C63A-4DAC-9C99-3ED807B19328@riggs.me>
Message-ID: <C9CC7111.1E731%rbarnett@trustwave.com>

Understood and I agree.



On 4/14/11 9:35 AM, "Jim Riggs" <apache-lists at riggs.me> wrote:

>I agree with Andreas and Klaubert.  If this is the approach we take, the
>documentation should *strongly* recommend symlinks; otherwise, it will
>cause a major maintenance headache for admins, breaking auto-update.  (I
>fear the step of _copying_ the files will often get forgotten or missed.
>Symlinks would address that issue to an extent.)
>
>
>On Apr 14, 2011, at 8:28 AM, pfote wrote:
>
>> I'm using right now that
>>               Include conf/modsecurity_crs/*.conf
>>               Include conf/modsecurity_crs/base_rules/*.conf
>>               Include conf/modsecurity_crs/optional_rules/*.conf
>>
>>
>> approach, wasn't aware of that problem (fairly new to modsecurity and
>>owasp) .. thanks for pointing out.
>>
>> However, i wouldn't copy but better symlink them, this way it's still
>>possible to have it auto-updated.
>>
>> cheers
>> Andreas
>>> Yes, I think this would be helpful.  It might be worth explaining in
>>> the comments why the "proper order" is important, and thus where to
>>> put custom configuration settings and rules for each vhost/server.
>>>
>>> Colin
>>>
>>> On 14 April 2011 14:00, Ryan Barnett
>>> <RBarnett at trustwave.com>
>>>  wrote:
>>>
>>>
>>>> Any comments on this approach?  Good idea?
>>>>
>>>> -Ryan
>>>>
>>>>
>>>> From: Ryan Barnett <
>>>> rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>
>>>> >
>>>> Date: Tue, 12 Apr 2011 09:57:24 -0500
>>>> To: "
>>>>
>>>>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurit
>>>>y-core-rule-set at lists.owasp.org>"
>>>><owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecuri
>>>>ty-core-rule-set at lists.owasp.org>
>>>> >
>>>> Subject: CRS Directory Format Question
>>>>
>>>> The current OWASP CRS archive has a number of directories that hold
>>>>different rules -
>>>>
>>>>  *   base_rules
>>>>  *   optional_rules
>>>>  *   slr_rules
>>>>  *   experimental_rules
>>>>
>>>> I am thinking that most ModSecurity users want to use Apache Include
>>>>wild-carding when activating rulesets -
>>>>
>>>> <IfModule security2_module>
>>>>               Include conf/modsecurity_crs/*.conf
>>>>               Include conf/modsecurity_crs/base_rules/*.conf
>>>> </IfModule>
>>>>
>>>> While this is certainly convenient, this does cause a problem.  The
>>>>various rules files have a numbering scheme whose purpose to to help
>>>>ensure that the rules file are executed in the proper order when
>>>>wild-carding with includes.  Activating these rules are challenging
>>>>when separated into the different directories.
>>>>
>>>> <IfModule security2_module>
>>>>               Include conf/modsecurity_crs/*.conf
>>>>               Include conf/modsecurity_crs/base_rules/*.conf
>>>>               Include conf/modsecurity_crs/optional_rules/*.conf
>>>>
>>>> </IfModule>
>>>>
>>>> So, what I am thinking is that we should add an empty directory
>>>>called -
>>>>
>>>>  *   activated_rules
>>>>
>>>> The sole purpose of this directory would be for the local Admin to
>>>>copy all files that they want to run into that one directory.  When
>>>>they do this, then the file name numbering scheme will work and it
>>>>will allow for easier Include wild-carding -
>>>>
>>>> <IfModule security2_module>
>>>>               Include conf/modsecurity_crs/*.conf
>>>>               Include conf/modsecurity_crs/activated_rules/*.conf
>>>> </IfModule>
>>>>
>>>> How does this approach sound to everyone?
>>>>
>>>> -Ryan
>>>>
>>>> ________________________________
>>>> This transmission may contain information that is privileged,
>>>>confidential, and/or exempt from disclosure under applicable law. If
>>>>you are not the intended recipient, you are hereby notified that any
>>>>disclosure, copying, distribution, or use of the information contained
>>>>herein (including any reliance thereon) is STRICTLY PROHIBITED. If you
>>>>received this transmission in error, please immediately contact the
>>>>sender and destroy the material in its entirety, whether in electronic
>>>>or hard copy format.
>>>>
>>>> _______________________________________________
>>>> Owasp-modsecurity-core-rule-set mailing list
>>>>
>>>> Owasp-modsecurity-core-rule-set at lists.owasp.org
>>>>
>>>>https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-se
>>>>t
>>>>
>>>>
>>>>
>>>>
>>> _______________________________________________
>>> Owasp-modsecurity-core-rule-set mailing list
>>>
>>> Owasp-modsecurity-core-rule-set at lists.owasp.org
>>>
>>>https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>>>
>>>
>>>
>>
>> _______________________________________________
>> Owasp-modsecurity-core-rule-set mailing list
>> Owasp-modsecurity-core-rule-set at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>
>_______________________________________________
>Owasp-modsecurity-core-rule-set mailing list
>Owasp-modsecurity-core-rule-set at lists.owasp.org
>https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>


This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Thu Apr 14 09:43:23 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Thu, 14 Apr 2011 08:43:23 -0500
Subject: [Owasp-modsecurity-core-rule-set] CRS Directory Format Question
In-Reply-To: <2932C79E-C63A-4DAC-9C99-3ED807B19328@riggs.me>
Message-ID: <C9CC7127.1E733%rbarnett@trustwave.com>

We will update the Quick Setup info in the README file.



On 4/14/11 9:35 AM, "Jim Riggs" <apache-lists at riggs.me> wrote:

>I agree with Andreas and Klaubert.  If this is the approach we take, the
>documentation should *strongly* recommend symlinks; otherwise, it will
>cause a major maintenance headache for admins, breaking auto-update.  (I
>fear the step of _copying_ the files will often get forgotten or missed.
>Symlinks would address that issue to an extent.)
>
>
>On Apr 14, 2011, at 8:28 AM, pfote wrote:
>
>> I'm using right now that
>>               Include conf/modsecurity_crs/*.conf
>>               Include conf/modsecurity_crs/base_rules/*.conf
>>               Include conf/modsecurity_crs/optional_rules/*.conf
>> 
>> 
>> approach, wasn't aware of that problem (fairly new to modsecurity and
>>owasp) .. thanks for pointing out.
>> 
>> However, i wouldn't copy but better symlink them, this way it's still
>>possible to have it auto-updated.
>> 
>> cheers
>> Andreas
>>> Yes, I think this would be helpful.  It might be worth explaining in
>>> the comments why the "proper order" is important, and thus where to
>>> put custom configuration settings and rules for each vhost/server.
>>> 
>>> Colin
>>> 
>>> On 14 April 2011 14:00, Ryan Barnett
>>> <RBarnett at trustwave.com>
>>>  wrote:
>>>   
>>> 
>>>> Any comments on this approach?  Good idea?
>>>> 
>>>> -Ryan
>>>> 
>>>> 
>>>> From: Ryan Barnett <
>>>> rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>
>>>> >
>>>> Date: Tue, 12 Apr 2011 09:57:24 -0500
>>>> To: "
>>>> 
>>>>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurit
>>>>y-core-rule-set at lists.owasp.org>"
>>>><owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecuri
>>>>ty-core-rule-set at lists.owasp.org>
>>>> >
>>>> Subject: CRS Directory Format Question
>>>> 
>>>> The current OWASP CRS archive has a number of directories that hold
>>>>different rules -
>>>> 
>>>>  *   base_rules
>>>>  *   optional_rules
>>>>  *   slr_rules
>>>>  *   experimental_rules
>>>> 
>>>> I am thinking that most ModSecurity users want to use Apache Include
>>>>wild-carding when activating rulesets -
>>>> 
>>>> <IfModule security2_module>
>>>>               Include conf/modsecurity_crs/*.conf
>>>>               Include conf/modsecurity_crs/base_rules/*.conf
>>>> </IfModule>
>>>> 
>>>> While this is certainly convenient, this does cause a problem.  The
>>>>various rules files have a numbering scheme whose purpose to to help
>>>>ensure that the rules file are executed in the proper order when
>>>>wild-carding with includes.  Activating these rules are challenging
>>>>when separated into the different directories.
>>>> 
>>>> <IfModule security2_module>
>>>>               Include conf/modsecurity_crs/*.conf
>>>>               Include conf/modsecurity_crs/base_rules/*.conf
>>>>               Include conf/modsecurity_crs/optional_rules/*.conf
>>>> 
>>>> </IfModule>
>>>> 
>>>> So, what I am thinking is that we should add an empty directory
>>>>called -
>>>> 
>>>>  *   activated_rules
>>>> 
>>>> The sole purpose of this directory would be for the local Admin to
>>>>copy all files that they want to run into that one directory.  When
>>>>they do this, then the file name numbering scheme will work and it
>>>>will allow for easier Include wild-carding -
>>>> 
>>>> <IfModule security2_module>
>>>>               Include conf/modsecurity_crs/*.conf
>>>>               Include conf/modsecurity_crs/activated_rules/*.conf
>>>> </IfModule>
>>>> 
>>>> How does this approach sound to everyone?
>>>> 
>>>> -Ryan
>>>> 
>>>> ________________________________
>>>> This transmission may contain information that is privileged,
>>>>confidential, and/or exempt from disclosure under applicable law. If
>>>>you are not the intended recipient, you are hereby notified that any
>>>>disclosure, copying, distribution, or use of the information contained
>>>>herein (including any reliance thereon) is STRICTLY PROHIBITED. If you
>>>>received this transmission in error, please immediately contact the
>>>>sender and destroy the material in its entirety, whether in electronic
>>>>or hard copy format.
>>>> 
>>>> _______________________________________________
>>>> Owasp-modsecurity-core-rule-set mailing list
>>>> 
>>>> Owasp-modsecurity-core-rule-set at lists.owasp.org
>>>> 
>>>>https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-se
>>>>t
>>>> 
>>>> 
>>>>     
>>>> 
>>> _______________________________________________
>>> Owasp-modsecurity-core-rule-set mailing list
>>> 
>>> Owasp-modsecurity-core-rule-set at lists.owasp.org
>>> 
>>>https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>>> 
>>>   
>>> 
>> 
>> _______________________________________________
>> Owasp-modsecurity-core-rule-set mailing list
>> Owasp-modsecurity-core-rule-set at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>
>_______________________________________________
>Owasp-modsecurity-core-rule-set mailing list
>Owasp-modsecurity-core-rule-set at lists.owasp.org
>https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>



From chris at derham.me.uk  Thu Apr 14 10:37:23 2011
From: chris at derham.me.uk (chris derham)
Date: Thu, 14 Apr 2011 11:37:23 -0300
Subject: [Owasp-modsecurity-core-rule-set] CRS Directory Format Question
In-Reply-To: <C9CC7127.1E733%rbarnett@trustwave.com>
References: <2932C79E-C63A-4DAC-9C99-3ED807B19328@riggs.me>
	<C9CC7127.1E733%rbarnett@trustwave.com>
Message-ID: <BANLkTinT9-wPCF=yGAydkXumStx9WXp3ow@mail.gmail.com>

Ryan,

To restate the issue, the rules are stored in different directories based on
their type - admins need to order the rules to ensure that they function
correctly, and this can't be done when use apache configuration to load wild
carded configuration files from different directories.

If you made the id parameter for SecRule mandatory, couldn't you then use
that to order the rules? This would overcome the ordering issue you mention.
I know that there are other directives as well and they might have the same
ordering issue, but just thought I would ask the question

Chris
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110414/cf177d1f/attachment.html 

From RBarnett at trustwave.com  Thu Apr 14 10:51:55 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Thu, 14 Apr 2011 09:51:55 -0500
Subject: [Owasp-modsecurity-core-rule-set] CRS Directory Format Question
In-Reply-To: <BANLkTinT9-wPCF=yGAydkXumStx9WXp3ow@mail.gmail.com>
Message-ID: <C9CC817B.1E773%rbarnett@trustwave.com>

I don't think the ModSec Rule ID would help in this case as we are talking about Apache startup and its Include directive.  I think that having the activatedrules directory is the best approach as local Admins can then review all the rules and decide which ones to activate by creating symlinks in the activated_rules directory.  When they do this, then the numbering scheme used in the rule file names will work appropriately.

Keep in mind that this simply orders the rule files appropriately by groups/purpose.  This does nothing to ensure that the rules themselves, inside the files, are ordered appropriately.  We order them appropriately in the CRS files but if you have custom rules, you will need to ensure that they are ordered correctly for the logic you want.

-Ryan

From: chris derham <chris at derham.me.uk<mailto:chris at derham.me.uk>>
Reply-To: "chris at derham.me.uk<mailto:chris at derham.me.uk>" <chris at derham.me.uk<mailto:chris at derham.me.uk>>
Date: Thu, 14 Apr 2011 09:37:23 -0500
To: Ryan Barnett <rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>>, "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>" <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>
Subject: Re: [Owasp-modsecurity-core-rule-set] CRS Directory Format Question

Ryan,

To restate the issue, the rules are stored in different directories based on their type - admins need to order the rules to ensure that they function correctly, and this can't be done when use apache configuration to load wild carded configuration files from different directories.

If you made the id parameter for SecRule mandatory, couldn't you then use that to order the rules? This would overcome the ordering issue you mention. I know that there are other directives as well and they might have the same ordering issue, but just thought I would ask the question

Chris

________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Thu Apr 14 11:15:51 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Thu, 14 Apr 2011 10:15:51 -0500
Subject: [Owasp-modsecurity-core-rule-set] Seeking Feedback - New Approach
	for XSS Detection/Response
Message-ID: <C9CC87E7.1E7B4%rbarnett@trustwave.com>

I have been thinking a lot recently about XSS Attacks and how ModSecurity can potentially identify these attacks and respond - http://www.modsecurity.org/documentation/XSS_Street_Fight-Ryan_Barnett-BlackhatDC-2011.pdf

I would like to get some community feedback on a possible new approach for XSS.

The big current issue I see with the ModSecurity CRS approach is that the rules are looking for potentially malicious input and flagging them as XSS and executing blocking.  This approach is flawed for 2 reasons -

 1.  Many of the XSS signatures are too broad and are looking for any html data on inbound.  This may work OK if the application or specific parameter is never supposed to contain html code, however many users have apps that allow for some html code on the inbound.  There are many ModSecurity users who get upset because the rules end up blocking normal transaction in applications like WordPress.  The XSS signatures should probably be broken up into separate files - 1) Malicious code ? which would only contain signatures for confirmed, malicious code.  These rules can be acted upon for blocking actions in any circumstance.  2) Html code ? which would trigger on any html-like code.  This could be activated for sites that don't allow any html code.
 2.  Blocking inbound data for XSS is prone to False Positives.  XSS manifests itself when client-supplied data is echoed back out to clients in a non-escaped format.  The applications may actually be properly output escaping user-supplied data and they don't need for ModSecurity to do any blocking.  It seems that the best place to choose a blocking action for XSS is actually in the response back to the client.

Here is an example approach for #2 above.
We are already flagging inbound data as potential XSS attacks and saving the data in TX variables.  If we were to not block for XSS on the inbound, but instead inspect the RESPONSE_BODY variables for matches of TX XSS data, we could then choose to block.  Here is an example rule which does just that -

SecRule TX:/XSS/ "@within %{response_body}" "phase:4,t:none,log,block,msg:'Malicious Client Data Found in Response Page.',logdata:'%{matched_var}'"

As a test, I sent the following request (from the ModSec audit log) -

###############################
--25ab4619-B--
POST /cgi-bin/fup.cgi HTTP/1.1
Host: localhost
Connection: keep-alive
Referer: http://localhost/upload.html
Content-Length: 429
Cache-Control: max-age=0
Origin: http://localhost
User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary5l4ChTnz96IS0ru8
Accept: application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
Accept-Encoding: gzip,deflate,sdch
Accept-Language: en-US,en;q=0.8
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3

--25ab4619-I--
note=%3cscript%3ealert%28%27xss%27%29%3c%2fscript%3e
--25ab4619-F--
HTTP/1.1 200 OK
Content-Length: 308
Keep-Alive: timeout=5, max=100
Connection: Keep-Alive
Content-Type: text/html

--25ab4619-E--
<html>
<head>
<title>File Upload Results</title>
</head>
<body>
<h1>File Upload Results</h1>

<p>You've uploaded a file.  Your notes on the file were:<br>
<blockquote><script>alert('xss')</script></blockquote><br>
<p>The file's contents are:
<pre>

</pre>
</body>
</html>
###############################

The new rule generated a number of events -

[Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning. String match within "<html>\\n<head>\\n<title>File Upload Results</title>\\n</head>\\n<body>\\n<h1>File Upload Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n<script></script>\\n<script></script>\\n<p>The file's contents are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at TX:958052-WEB_ATTACK/XSS-ARGS:note. [file "/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.conf"] [line "17"] [msg "Malicious Client Data Found n Response Page."] [data "alert("] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"] [unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
[Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning. String match within "<html>\\n<head>\\n<title>File Upload Results</title>\\n</head>\\n<body>\\n<h1>File Upload Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n<script></script>\\n<script></script>\\n<p>The file's contents are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at TX:958051-WEB_ATTACK/XSS-ARGS:note. [file "/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.conf"] [line "17"] [msg "Malicious Client Data Found n Response Page."] [data "<script"] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"] [unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
[Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning. String match within "<html>\\n<head>\\n<title>File Upload Results</title>\\n</head>\\n<body>\\n<h1>File Upload Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n<script></script>\\n<script></script>\\n<p>The file's contents are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at TX:973300-WEB_ATTACK/XSS-ARGS:note. [file "/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.conf"] [line "17"] [msg "Malicious Client Data Found n Response Page."] [data "<script>"] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"] [unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
[Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning. String match within "<html>\\n<head>\\n<title>File Upload Results</title>\\n</head>\\n<body>\\n<h1>File Upload Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n<script></script>\\n<script></script>\\n<p>The file's contents are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at TX:973307-WEB_ATTACK/XSS-ARGS:note. [file "/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.conf"] [line "17"] [msg "Malicious Client Data Found n Response Page."] [data "alert("] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"] [unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
[Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning. String match within "<html>\\n<head>\\n<title>File Upload Results</title>\\n</head>\\n<body>\\n<h1>File Upload Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n<script></script>\\n<script></script>\\n<p>The file's contents are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at TX:973310-WEB_ATTACK/XSS-ARGS:note. [file "/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.conf"] [line "17"] [msg "Malicious Client Data Found n Response Page."] [data "'xss'"] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"] [unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
[Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning. String match within "<html>\\n<head>\\n<title>File Upload Results</title>\\n</head>\\n<body>\\n<h1>File Upload Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n<script></script>\\n<script></script>\\n<p>The file's contents are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at TX:973331-WEB_ATTACK/XSS-ARGS:note. [file "/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.conf"] [line "17"] [msg "Malicious Client Data Found n Response Page."] [data "<script>"] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"] [unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]

This approach seems to me to be more accurate for detecting/reacting to XSS as you are doing the inspection/blocking in the outbound which means that you have less false positives.

Now, taking this approach one step further!  With the upcoming ModSecurity v2.6 ? you could actually extend the rule logic to use @rsub against the STREAM_OUTPUT_BODY and actually remove malicious code from response bodies and still send the page :)

SecRule TX:/XSS/ "@within %{response_body}" "chain,phase:4,t:none,log,pass,msg:'Malicious Client Data Removed From Response Page.',logdata:'%{matched_var}'"
       SecRule STREAM_OUTPUT_BODY "@rsub s/%{matched_var}/MALICIOUS_CODE_REMOVED/d"

Running new ruleset ? this is how the reflected XSS attack response page would look to a client -

$ curl "http://localhost/cgi-bin/fup.cgi?note=<script>alert('xss')</script>"
<html>
<head>
<title>File Upload Results</title>
</head>
<body>
<h1>File Upload Results</h1>

<p>You've uploaded a file.  Your notes on the file were:<br>
<blockquote>MALICIOUS_CODE_REMOVEDalert('xss')</script></blockquote><br>
<p>The file's contents are:
<pre>

</pre>
</body>
</html>

Comments welcome!

-Ryan




________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From jonathan.marcil at pheromone.ca  Thu Apr 14 12:36:33 2011
From: jonathan.marcil at pheromone.ca (Jonathan Marcil)
Date: Thu, 14 Apr 2011 12:36:33 -0400
Subject: [Owasp-modsecurity-core-rule-set] Seeking Feedback - New
 Approach for XSS Detection/Response
In-Reply-To: <C9CC87E7.1E7B4%rbarnett@trustwave.com>
References: <C9CC87E7.1E7B4%rbarnett@trustwave.com>
Message-ID: <4DA72291.7030107@pheromone.ca>

Hi Ryan,

I like the correlation between inbound and outbound in the POST. It
gives you an insight on how the application is processing the input.

But I see some ways that this can't replace full inbound checking and
blocking :
- What if the application is not outputting the input right away?
- What if the application is actually outputting the input in many
places in different ways? For instance, Drupal may output directly the
content on a node after modification, but its doing security check on
output in other places. Flaws can be everywhere in this case not just
when you submit something.
- What if a valid HTML in the output of a page that is not related to
the user input can actually trigger a false positive? (let's say my
website really do alert('XSS'); at some point ;-)

Parsing on output seams harder to me because there's more stuff to parse
: the whole page vs. a simple user input.

Thanks,

- Jonathan



On 11-04-14 11:15 AM, Ryan Barnett wrote:
> I have been thinking a lot recently about XSS Attacks and how ModSecurity can potentially identify these attacks and respond - http://www.modsecurity.org/documentation/XSS_Street_Fight-Ryan_Barnett-BlackhatDC-2011.pdf
> 
> I would like to get some community feedback on a possible new approach for XSS.
> 
> The big current issue I see with the ModSecurity CRS approach is that the rules are looking for potentially malicious input and flagging them as XSS and executing blocking.  This approach is flawed for 2 reasons -
> 
>  1.  Many of the XSS signatures are too broad and are looking for any html data on inbound.  This may work OK if the application or specific parameter is never supposed to contain html code, however many users have apps that allow for some html code on the inbound.  There are many ModSecurity users who get upset because the rules end up blocking normal transaction in applications like WordPress.  The XSS signatures should probably be broken up into separate files - 1) Malicious code ? which would only contain signatures for confirmed, malicious code.  These rules can be acted upon for blocking actions in any circumstance.  2) Html code ? which would trigger on any html-like code.  This could be activated for sites that don't allow any html code.
>  2.  Blocking inbound data for XSS is prone to False Positives.  XSS manifests itself when client-supplied data is echoed back out to clients in a non-escaped format.  The applications may actually be properly output escaping user-supplied data and they don't need for ModSecurity to do any blocking.  It seems that the best place to choose a blocking action for XSS is actually in the response back to the client.
> 
> Here is an example approach for #2 above.
> We are already flagging inbound data as potential XSS attacks and saving the data in TX variables.  If we were to not block for XSS on the inbound, but instead inspect the RESPONSE_BODY variables for matches of TX XSS data, we could then choose to block.  Here is an example rule which does just that -
> 
> SecRule TX:/XSS/ "@within %{response_body}" "phase:4,t:none,log,block,msg:'Malicious Client Data Found in Response Page.',logdata:'%{matched_var}'"
> 
> As a test, I sent the following request (from the ModSec audit log) -
> 
> ###############################
> --25ab4619-B--
> POST /cgi-bin/fup.cgi HTTP/1.1
> Host: localhost
> Connection: keep-alive
> Referer: http://localhost/upload.html
> Content-Length: 429
> Cache-Control: max-age=0
> Origin: http://localhost
> User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16
> Content-Type: multipart/form-data; boundary=----WebKitFormBoundary5l4ChTnz96IS0ru8
> Accept: application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
> Accept-Encoding: gzip,deflate,sdch
> Accept-Language: en-US,en;q=0.8
> Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3
> 
> --25ab4619-I--
> note=%3cscript%3ealert%28%27xss%27%29%3c%2fscript%3e
> --25ab4619-F--
> HTTP/1.1 200 OK
> Content-Length: 308
> Keep-Alive: timeout=5, max=100
> Connection: Keep-Alive
> Content-Type: text/html
> 
> --25ab4619-E--
> <html>
> <head>
> <title>File Upload Results</title>
> </head>
> <body>
> <h1>File Upload Results</h1>
> 
> <p>You've uploaded a file.  Your notes on the file were:<br>
> <blockquote><script>alert('xss')</script></blockquote><br>
> <p>The file's contents are:
> <pre>
> 
> </pre>
> </body>
> </html>
> ###############################
> 
> The new rule generated a number of events -
> 
> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning. String match within "<html>\\n<head>\\n<title>File Upload Results</title>\\n</head>\\n<body>\\n<h1>File Upload Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n<script></script>\\n<script></script>\\n<p>The file's contents are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at TX:958052-WEB_ATTACK/XSS-ARGS:note. [file "/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.conf"] [line "17"] [msg "Malicious Client Data Found n Response Page."] [data "alert("] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"] [unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning. String match within "<html>\\n<head>\\n<title>File Upload Results</title>\\n</head>\\n<body>\\n<h1>File Upload Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n<script></script>\\n<script></script>\\n<p>The file's contents are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at TX:958051-WEB_ATTACK/XSS-ARGS:note. [file "/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.conf"] [line "17"] [msg "Malicious Client Data Found n Response Page."] [data "<script"] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"] [unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning. String match within "<html>\\n<head>\\n<title>File Upload Results</title>\\n</head>\\n<body>\\n<h1>File Upload Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n<script></script>\\n<script></script>\\n<p>The file's contents are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at TX:973300-WEB_ATTACK/XSS-ARGS:note. [file "/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.conf"] [line "17"] [msg "Malicious Client Data Found n Response Page."] [data "<script>"] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"] [unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning. String match within "<html>\\n<head>\\n<title>File Upload Results</title>\\n</head>\\n<body>\\n<h1>File Upload Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n<script></script>\\n<script></script>\\n<p>The file's contents are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at TX:973307-WEB_ATTACK/XSS-ARGS:note. [file "/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.conf"] [line "17"] [msg "Malicious Client Data Found n Response Page."] [data "alert("] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"] [unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning. String match within "<html>\\n<head>\\n<title>File Upload Results</title>\\n</head>\\n<body>\\n<h1>File Upload Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n<script></script>\\n<script></script>\\n<p>The file's contents are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at TX:973310-WEB_ATTACK/XSS-ARGS:note. [file "/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.conf"] [line "17"] [msg "Malicious Client Data Found n Response Page."] [data "'xss'"] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"] [unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning. String match within "<html>\\n<head>\\n<title>File Upload Results</title>\\n</head>\\n<body>\\n<h1>File Upload Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n<script></script>\\n<script></script>\\n<p>The file's contents are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at TX:973331-WEB_ATTACK/XSS-ARGS:note. [file "/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.conf"] [line "17"] [msg "Malicious Client Data Found n Response Page."] [data "<script>"] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"] [unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
> 
> This approach seems to me to be more accurate for detecting/reacting to XSS as you are doing the inspection/blocking in the outbound which means that you have less false positives.
> 
> Now, taking this approach one step further!  With the upcoming ModSecurity v2.6 ? you could actually extend the rule logic to use @rsub against the STREAM_OUTPUT_BODY and actually remove malicious code from response bodies and still send the page :)
> 
> SecRule TX:/XSS/ "@within %{response_body}" "chain,phase:4,t:none,log,pass,msg:'Malicious Client Data Removed From Response Page.',logdata:'%{matched_var}'"
>        SecRule STREAM_OUTPUT_BODY "@rsub s/%{matched_var}/MALICIOUS_CODE_REMOVED/d"
> 
> Running new ruleset ? this is how the reflected XSS attack response page would look to a client -
> 
> $ curl "http://localhost/cgi-bin/fup.cgi?note=<script>alert('xss')</script>"
> <html>
> <head>
> <title>File Upload Results</title>
> </head>
> <body>
> <h1>File Upload Results</h1>
> 
> <p>You've uploaded a file.  Your notes on the file were:<br>
> <blockquote>MALICIOUS_CODE_REMOVEDalert('xss')</script></blockquote><br>
> <p>The file's contents are:
> <pre>
> 
> </pre>
> </body>
> </html>
> 
> Comments welcome!
> 
> -Ryan
> 
> 
> 
> 
> ________________________________
> This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.
> 
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set

From guillaume.bilodeau at gmail.com  Thu Apr 14 13:33:52 2011
From: guillaume.bilodeau at gmail.com (Guillaume Bilodeau)
Date: Thu, 14 Apr 2011 13:33:52 -0400
Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
	behaving as expected
Message-ID: <BANLkTikvQ0tyBBKKdipiA=apWvfCyCHS8Q@mail.gmail.com>

Hi all,

We are trying to setup the OWASP Core Rule Set to protect our application
from Slow HTTP DOS attacks.

We have setup ModSecurity 2.5.13 on our Apache 2.2.17 instance, loaded the
module, and included all CRS base rules plus
modsecurity_crs_11_slow_dos_protection.conf.  We didn't change the settings
defined in the conf file, so SecReadStateLimit is set to 5 and
RequestReadTimeout is set to body=30.  We are using the http_dos_cli command
line tool to do our tests, with the connection parameter set to 500.

When running the slow-headers test, ModSecurity seems to be protecting the
application correctly, dropping most (all?) requests from the tester's IP
and allowing requests from a different IP to be served.  However, when
running the slow-post test, ModSecurity doesn't seem to be doing anything.
 From what I understand, the test successfully creates the 500 connections
and keeps them open; none of them are dropped.  Requests coming from a
different IP are not served and eventually time out.  A tail -f error_log
shows nothing except the eventual message on MaxClients (set to 300 now)
being reached.  Interestingly, when we kill the http_dos_cli process, the
error_log is then flooded with hundreds of entries such as this:

[Mon Nov 22 17:44:46 2010] [warn] ModSecurity: Access denied with code 400.
Too many connections [6] of 5 allowed in READ state from 211.144.112.20 -
Possible DoS Consumption Attack [Rejected]

(this has been taken from the SpiderLabs blog entry, dates and IPs are
obviously different)

Any idea on why this isn't behaving like we're expecting it to be?

Thanks!
GB
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110414/e892693c/attachment-0001.html 

From RBarnett at trustwave.com  Thu Apr 14 13:56:50 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Thu, 14 Apr 2011 12:56:50 -0500
Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
 behaving as expected
In-Reply-To: <BANLkTikvQ0tyBBKKdipiA=apWvfCyCHS8Q@mail.gmail.com>
Message-ID: <C9CCAD22.1E7DB%rbarnett@trustwave.com>

Did you install the reqtimeout module?

#
# Mitigate Slow HTTP POST attacks
#
# Must have the mod_reqtimeout module installed
# You should adjust the RequestReadTimeout body directive setting to a limit
# that will allow any legitimate slow clients or large file uplaods.
#
<IfModule reqtimeout_module>
RequestReadTimeout body=30
</IfModule>

-Ryan



From: Guillaume Bilodeau <guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>
Date: Thu, 14 Apr 2011 12:33:52 -0500
To: "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>" <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>
Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not behaving as expected

Hi all,

We are trying to setup the OWASP Core Rule Set to protect our application from Slow HTTP DOS attacks.

We have setup ModSecurity 2.5.13 on our Apache 2.2.17 instance, loaded the module, and included all CRS base rules plus modsecurity_crs_11_slow_dos_protection.conf.  We didn't change the settings defined in the conf file, so SecReadStateLimit is set to 5 and RequestReadTimeout is set to body=30.  We are using the http_dos_cli command line tool to do our tests, with the connection parameter set to 500.

When running the slow-headers test, ModSecurity seems to be protecting the application correctly, dropping most (all?) requests from the tester's IP and allowing requests from a different IP to be served.  However, when running the slow-post test, ModSecurity doesn't seem to be doing anything.  From what I understand, the test successfully creates the 500 connections and keeps them open; none of them are dropped.  Requests coming from a different IP are not served and eventually time out.  A tail -f error_log shows nothing except the eventual message on MaxClients (set to 300 now) being reached.  Interestingly, when we kill the http_dos_cli process, the error_log is then flooded with hundreds of entries such as this:


[Mon Nov 22 17:44:46 2010] [warn] ModSecurity: Access denied with code 400.
Too many connections [6] of 5 allowed in READ state from 211.144.112.20 -
Possible DoS Consumption Attack [Rejected]

(this has been taken from the SpiderLabs blog entry, dates and IPs are obviously different)

Any idea on why this isn't behaving like we're expecting it to be?

Thanks!
GB



From RBarnett at trustwave.com  Thu Apr 14 14:00:05 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Thu, 14 Apr 2011 13:00:05 -0500
Subject: [Owasp-modsecurity-core-rule-set] Seeking Feedback - New
 Approach for XSS Detection/Response
In-Reply-To: <4DA72291.7030107@pheromone.ca>
Message-ID: <C9CCADFF.1E7E1%rbarnett@trustwave.com>

Jonathan,

I agree with your comments.

Just to be clear - I am not suggesting that we should get rid of the
inbound XSS checks as they have a purpose.  I am suggesting that we add in
this capability so that users can decide with methods of XSS defense they
want to use.  I think that for many users, this new, additional approach
will help them to reduce false positives for XSS.

-Ryan

On 4/14/11 12:36 PM, "Jonathan Marcil" <jonathan.marcil at pheromone.ca>
wrote:

>Hi Ryan,
>
>I like the correlation between inbound and outbound in the POST. It
>gives you an insight on how the application is processing the input.
>
>But I see some ways that this can't replace full inbound checking and
>blocking :
>- What if the application is not outputting the input right away?
>- What if the application is actually outputting the input in many
>places in different ways? For instance, Drupal may output directly the
>content on a node after modification, but its doing security check on
>output in other places. Flaws can be everywhere in this case not just
>when you submit something.
>- What if a valid HTML in the output of a page that is not related to
>the user input can actually trigger a false positive? (let's say my
>website really do alert('XSS'); at some point ;-)
>
>Parsing on output seams harder to me because there's more stuff to parse
>: the whole page vs. a simple user input.
>
>Thanks,
>
>- Jonathan
>
>
>
>On 11-04-14 11:15 AM, Ryan Barnett wrote:
>> I have been thinking a lot recently about XSS Attacks and how
>>ModSecurity can potentially identify these attacks and respond -
>>http://www.modsecurity.org/documentation/XSS_Street_Fight-Ryan_Barnett-Bl
>>ackhatDC-2011.pdf
>>
>> I would like to get some community feedback on a possible new approach
>>for XSS.
>>
>> The big current issue I see with the ModSecurity CRS approach is that
>>the rules are looking for potentially malicious input and flagging them
>>as XSS and executing blocking.  This approach is flawed for 2 reasons -
>>
>>  1.  Many of the XSS signatures are too broad and are looking for any
>>html data on inbound.  This may work OK if the application or specific
>>parameter is never supposed to contain html code, however many users
>>have apps that allow for some html code on the inbound.  There are many
>>ModSecurity users who get upset because the rules end up blocking normal
>>transaction in applications like WordPress.  The XSS signatures should
>>probably be broken up into separate files - 1) Malicious code ? which
>>would only contain signatures for confirmed, malicious code.  These
>>rules can be acted upon for blocking actions in any circumstance.  2)
>>Html code ? which would trigger on any html-like code.  This could be
>>activated for sites that don't allow any html code.
>>  2.  Blocking inbound data for XSS is prone to False Positives.  XSS
>>manifests itself when client-supplied data is echoed back out to clients
>>in a non-escaped format.  The applications may actually be properly
>>output escaping user-supplied data and they don't need for ModSecurity
>>to do any blocking.  It seems that the best place to choose a blocking
>>action for XSS is actually in the response back to the client.
>>
>> Here is an example approach for #2 above.
>> We are already flagging inbound data as potential XSS attacks and
>>saving the data in TX variables.  If we were to not block for XSS on the
>>inbound, but instead inspect the RESPONSE_BODY variables for matches of
>>TX XSS data, we could then choose to block.  Here is an example rule
>>which does just that -
>>
>> SecRule TX:/XSS/ "@within %{response_body}"
>>"phase:4,t:none,log,block,msg:'Malicious Client Data Found in Response
>>Page.',logdata:'%{matched_var}'"
>>
>> As a test, I sent the following request (from the ModSec audit log) -
>>
>> ###############################
>> --25ab4619-B--
>> POST /cgi-bin/fup.cgi HTTP/1.1
>> Host: localhost
>> Connection: keep-alive
>> Referer: http://localhost/upload.html
>> Content-Length: 429
>> Cache-Control: max-age=0
>> Origin: http://localhost
>> User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-US)
>>AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16
>> Content-Type: multipart/form-data;
>>boundary=----WebKitFormBoundary5l4ChTnz96IS0ru8
>> Accept:
>>application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,im
>>age/png,*/*;q=0.5
>> Accept-Encoding: gzip,deflate,sdch
>> Accept-Language: en-US,en;q=0.8
>> Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3
>>
>> --25ab4619-I--
>> note=%3cscript%3ealert%28%27xss%27%29%3c%2fscript%3e
>> --25ab4619-F--
>> HTTP/1.1 200 OK
>> Content-Length: 308
>> Keep-Alive: timeout=5, max=100
>> Connection: Keep-Alive
>> Content-Type: text/html
>>
>> --25ab4619-E--
>> <html>
>> <head>
>> <title>File Upload Results</title>
>> </head>
>> <body>
>> <h1>File Upload Results</h1>
>>
>> <p>You've uploaded a file.  Your notes on the file were:<br>
>> <blockquote><script>alert('xss')</script></blockquote><br>
>> <p>The file's contents are:
>> <pre>
>>
>> </pre>
>> </body>
>> </html>
>> ###############################
>>
>> The new rule generated a number of events -
>>
>> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning.
>>String match within "<html>\\n<head>\\n<title>File Upload
>>Results</title>\\n</head>\\n<body>\\n<h1>File Upload
>>Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file
>>were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n
>><script></script>\\n<script></script>\\n<p>The file's contents
>>are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at
>>TX:958052-WEB_ATTACK/XSS-ARGS:note. [file
>>"/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.con
>>f"] [line "17"] [msg "Malicious Client Data Found n Response Page."]
>>[data "alert("] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"]
>>[unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
>> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning.
>>String match within "<html>\\n<head>\\n<title>File Upload
>>Results</title>\\n</head>\\n<body>\\n<h1>File Upload
>>Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file
>>were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n
>><script></script>\\n<script></script>\\n<p>The file's contents
>>are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at
>>TX:958051-WEB_ATTACK/XSS-ARGS:note. [file
>>"/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.con
>>f"] [line "17"] [msg "Malicious Client Data Found n Response Page."]
>>[data "<script"] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"]
>>[unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
>> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning.
>>String match within "<html>\\n<head>\\n<title>File Upload
>>Results</title>\\n</head>\\n<body>\\n<h1>File Upload
>>Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file
>>were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n
>><script></script>\\n<script></script>\\n<p>The file's contents
>>are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at
>>TX:973300-WEB_ATTACK/XSS-ARGS:note. [file
>>"/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.con
>>f"] [line "17"] [msg "Malicious Client Data Found n Response Page."]
>>[data "<script>"] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"]
>>[unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
>> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning.
>>String match within "<html>\\n<head>\\n<title>File Upload
>>Results</title>\\n</head>\\n<body>\\n<h1>File Upload
>>Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file
>>were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n
>><script></script>\\n<script></script>\\n<p>The file's contents
>>are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at
>>TX:973307-WEB_ATTACK/XSS-ARGS:note. [file
>>"/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.con
>>f"] [line "17"] [msg "Malicious Client Data Found n Response Page."]
>>[data "alert("] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"]
>>[unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
>> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning.
>>String match within "<html>\\n<head>\\n<title>File Upload
>>Results</title>\\n</head>\\n<body>\\n<h1>File Upload
>>Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file
>>were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n
>><script></script>\\n<script></script>\\n<p>The file's contents
>>are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at
>>TX:973310-WEB_ATTACK/XSS-ARGS:note. [file
>>"/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.con
>>f"] [line "17"] [msg "Malicious Client Data Found n Response Page."]
>>[data "'xss'"] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"]
>>[unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
>> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning.
>>String match within "<html>\\n<head>\\n<title>File Upload
>>Results</title>\\n</head>\\n<body>\\n<h1>File Upload
>>Results</h1>\\n\\n<p>You've uploaded a file.  Your notes on the file
>>were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n
>><script></script>\\n<script></script>\\n<p>The file's contents
>>are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at
>>TX:973331-WEB_ATTACK/XSS-ARGS:note. [file
>>"/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.con
>>f"] [line "17"] [msg "Malicious Client Data Found n Response Page."]
>>[data "<script>"] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"]
>>[unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
>>
>> This approach seems to me to be more accurate for detecting/reacting to
>>XSS as you are doing the inspection/blocking in the outbound which means
>>that you have less false positives.
>>
>> Now, taking this approach one step further!  With the upcoming
>>ModSecurity v2.6 ? you could actually extend the rule logic to use @rsub
>>against the STREAM_OUTPUT_BODY and actually remove malicious code from
>>response bodies and still send the page :)
>>
>> SecRule TX:/XSS/ "@within %{response_body}"
>>"chain,phase:4,t:none,log,pass,msg:'Malicious Client Data Removed From
>>Response Page.',logdata:'%{matched_var}'"
>>        SecRule STREAM_OUTPUT_BODY "@rsub
>>s/%{matched_var}/MALICIOUS_CODE_REMOVED/d"
>>
>> Running new ruleset ? this is how the reflected XSS attack response
>>page would look to a client -
>>
>> $ curl
>>"http://localhost/cgi-bin/fup.cgi?note=<script>alert('xss')</script>"
>> <html>
>> <head>
>> <title>File Upload Results</title>
>> </head>
>> <body>
>> <h1>File Upload Results</h1>
>>
>> <p>You've uploaded a file.  Your notes on the file were:<br>
>> <blockquote>MALICIOUS_CODE_REMOVEDalert('xss')</script></blockquote><br>
>> <p>The file's contents are:
>> <pre>
>>
>> </pre>
>> </body>
>> </html>
>>
>> Comments welcome!
>>
>> -Ryan
>>
>>
>>
>>
>> ________________________________
>> This transmission may contain information that is privileged,
>>confidential, and/or exempt from disclosure under applicable law. If you
>>are not the intended recipient, you are hereby notified that any
>>disclosure, copying, distribution, or use of the information contained
>>herein (including any reliance thereon) is STRICTLY PROHIBITED. If you
>>received this transmission in error, please immediately contact the
>>sender and destroy the material in its entirety, whether in electronic
>>or hard copy format.
>>
>> _______________________________________________
>> Owasp-modsecurity-core-rule-set mailing list
>> Owasp-modsecurity-core-rule-set at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>


This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From guillaume.bilodeau at gmail.com  Thu Apr 14 14:07:41 2011
From: guillaume.bilodeau at gmail.com (Guillaume Bilodeau)
Date: Thu, 14 Apr 2011 14:07:41 -0400
Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
 behaving as expected
In-Reply-To: <C9CCAD22.1E7DB%rbarnett@trustwave.com>
References: <BANLkTikvQ0tyBBKKdipiA=apWvfCyCHS8Q@mail.gmail.com>
	<C9CCAD22.1E7DB%rbarnett@trustwave.com>
Message-ID: <BANLkTimBWTGjsvmjWYFF11qGzotUQ1o_bQ@mail.gmail.com>

Hi Ryan,

I'm no Apache expert, but AFAICT the req_timeout module is installed.  A
/server-info shows the req_timeout.c module with the RequestReadTimeout
parameter.

Thanks,
GB

On Thu, Apr 14, 2011 at 1:56 PM, Ryan Barnett <RBarnett at trustwave.com>wrote:

> Did you install the reqtimeout module?
>
> #
> # Mitigate Slow HTTP POST attacks
> #
> # Must have the mod_reqtimeout module installed
> # You should adjust the RequestReadTimeout body directive setting to a
> limit
> # that will allow any legitimate slow clients or large file uplaods.
> #
> <IfModule reqtimeout_module>
> RequestReadTimeout body=30
> </IfModule>
>
> -Ryan
>
>
>
> From: Guillaume Bilodeau <guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com>>
> Date: Thu, 14 Apr 2011 12:33:52 -0500
> To: "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>" <
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>
> Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
> behaving as expected
>
> Hi all,
>
> We are trying to setup the OWASP Core Rule Set to protect our application
> from Slow HTTP DOS attacks.
>
> We have setup ModSecurity 2.5.13 on our Apache 2.2.17 instance, loaded the
> module, and included all CRS base rules plus
> modsecurity_crs_11_slow_dos_protection.conf.  We didn't change the settings
> defined in the conf file, so SecReadStateLimit is set to 5 and
> RequestReadTimeout is set to body=30.  We are using the http_dos_cli command
> line tool to do our tests, with the connection parameter set to 500.
>
> When running the slow-headers test, ModSecurity seems to be protecting the
> application correctly, dropping most (all?) requests from the tester's IP
> and allowing requests from a different IP to be served.  However, when
> running the slow-post test, ModSecurity doesn't seem to be doing anything.
>  From what I understand, the test successfully creates the 500 connections
> and keeps them open; none of them are dropped.  Requests coming from a
> different IP are not served and eventually time out.  A tail -f error_log
> shows nothing except the eventual message on MaxClients (set to 300 now)
> being reached.  Interestingly, when we kill the http_dos_cli process, the
> error_log is then flooded with hundreds of entries such as this:
>
>
> [Mon Nov 22 17:44:46 2010] [warn] ModSecurity: Access denied with code 400.
> Too many connections [6] of 5 allowed in READ state from 211.144.112.20 -
> Possible DoS Consumption Attack [Rejected]
>
> (this has been taken from the SpiderLabs blog entry, dates and IPs are
> obviously different)
>
> Any idea on why this isn't behaving like we're expecting it to be?
>
> Thanks!
> GB
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110414/6df3b3e0/attachment.html 

From RBarnett at trustwave.com  Thu Apr 14 14:12:43 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Thu, 14 Apr 2011 13:12:43 -0500
Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
 behaving as expected
In-Reply-To: <BANLkTimBWTGjsvmjWYFF11qGzotUQ1o_bQ@mail.gmail.com>
Message-ID: <C9CCB08D.1E7EC%rbarnett@trustwave.com>

OK, if mod_reqtimeout is installed and that directive is working, then after 30 sec if Apache has not received the entire request body then it should terminate the request with a 408 status code.  The ModSecurity CRS rules are simply monitoring if/how many 408 alerts are generated by Apache per client.  After a certain amount, then ModSecurity will step in on subsequent requests in phase:1 and do drop actions.

So, by monitoring your Apache error log while you are running your http_dos_cli tool, does Apache generate 408 alerts after 30 secs?  If not, then I don't think that the mod_reqtimeout module or directive is working.

-Ryan


From: Guillaume Bilodeau <guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>
Date: Thu, 14 Apr 2011 13:07:41 -0500
To: Ryan Barnett <rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>>
Cc: "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>" <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>
Subject: Re: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not behaving as expected

Hi Ryan,

I'm no Apache expert, but AFAICT the req_timeout module is installed.  A /server-info shows the req_timeout.c module with the RequestReadTimeout parameter.

Thanks,
GB

On Thu, Apr 14, 2011 at 1:56 PM, Ryan Barnett <RBarnett at trustwave.com<mailto:RBarnett at trustwave.com>> wrote:
Did you install the reqtimeout module?

#
# Mitigate Slow HTTP POST attacks
#
# Must have the mod_reqtimeout module installed
# You should adjust the RequestReadTimeout body directive setting to a limit
# that will allow any legitimate slow clients or large file uplaods.
#
<IfModule reqtimeout_module>
RequestReadTimeout body=30
</IfModule>

-Ryan



From: Guillaume Bilodeau <guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>>
Date: Thu, 14 Apr 2011 12:33:52 -0500
To: "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>" <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>>
Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not behaving as expected

Hi all,

We are trying to setup the OWASP Core Rule Set to protect our application from Slow HTTP DOS attacks.

We have setup ModSecurity 2.5.13 on our Apache 2.2.17 instance, loaded the module, and included all CRS base rules plus modsecurity_crs_11_slow_dos_protection.conf.  We didn't change the settings defined in the conf file, so SecReadStateLimit is set to 5 and RequestReadTimeout is set to body=30.  We are using the http_dos_cli command line tool to do our tests, with the connection parameter set to 500.

When running the slow-headers test, ModSecurity seems to be protecting the application correctly, dropping most (all?) requests from the tester's IP and allowing requests from a different IP to be served.  However, when running the slow-post test, ModSecurity doesn't seem to be doing anything.  From what I understand, the test successfully creates the 500 connections and keeps them open; none of them are dropped.  Requests coming from a different IP are not served and eventually time out.  A tail -f error_log shows nothing except the eventual message on MaxClients (set to 300 now) being reached.  Interestingly, when we kill the http_dos_cli process, the error_log is then flooded with hundreds of entries such as this:


[Mon Nov 22 17:44:46 2010] [warn] ModSecurity: Access denied with code 400.
Too many connections [6] of 5 allowed in READ state from 211.144.112.20 -
Possible DoS Consumption Attack [Rejected]

(this has been taken from the SpiderLabs blog entry, dates and IPs are obviously different)

Any idea on why this isn't behaving like we're expecting it to be?

Thanks!
GB





From RBarnett at trustwave.com  Thu Apr 14 14:45:05 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Thu, 14 Apr 2011 13:45:05 -0500
Subject: [Owasp-modsecurity-core-rule-set] A Recommended Base Configuration
	- Current Version
Message-ID: <C9CCB8F0.1E80E%rbarnett@trustwave.com>

Here is a link to the current version of the base configuration that we are planning to bundle with the v2.6 ModSecurity release -
https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#A_Recommended_Base_Configuration

If you have any more comments, please send them to the list.

Thanks,
Ryan


From guillaume.bilodeau at gmail.com  Thu Apr 14 15:11:51 2011
From: guillaume.bilodeau at gmail.com (Guillaume Bilodeau)
Date: Thu, 14 Apr 2011 15:11:51 -0400
Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
 behaving as expected
In-Reply-To: <C9CCB08D.1E7EC%rbarnett@trustwave.com>
References: <BANLkTimBWTGjsvmjWYFF11qGzotUQ1o_bQ@mail.gmail.com>
	<C9CCB08D.1E7EC%rbarnett@trustwave.com>
Message-ID: <BANLkTinT0vLkL4KUw_A-qjvHHjarahaazg@mail.gmail.com>

Hi Ryan,

We installed WireShark and started sniffing on all traffic.  It seems that
Apache is returning a 200 status code instead of a 408 when the request
reaches 30 seconds, so from what I understand ModSecurity can't do much
about that.  The funny thing is, if we follow one of the TCP streams, we see
that http_dos_cli keeps sending data even after receiving the 200 code.
 Maybe something to do with  keep-alive connections?

Cheers,
GB

On Thu, Apr 14, 2011 at 2:12 PM, Ryan Barnett <RBarnett at trustwave.com>wrote:

> OK, if mod_reqtimeout is installed and that directive is working, then
> after 30 sec if Apache has not received the entire request body then it
> should terminate the request with a 408 status code.  The ModSecurity CRS
> rules are simply monitoring if/how many 408 alerts are generated by Apache
> per client.  After a certain amount, then ModSecurity will step in on
> subsequent requests in phase:1 and do drop actions.
>
> So, by monitoring your Apache error log while you are running your
> http_dos_cli tool, does Apache generate 408 alerts after 30 secs?  If not,
> then I don't think that the mod_reqtimeout module or directive is working.
>
> -Ryan
>
>
> From: Guillaume Bilodeau <guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com>>
> Date: Thu, 14 Apr 2011 13:07:41 -0500
> To: Ryan Barnett <rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>>
> Cc: "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>" <
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>
> Subject: Re: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
> behaving as expected
>
> Hi Ryan,
>
> I'm no Apache expert, but AFAICT the req_timeout module is installed.  A
> /server-info shows the req_timeout.c module with the RequestReadTimeout
> parameter.
>
> Thanks,
> GB
>
> On Thu, Apr 14, 2011 at 1:56 PM, Ryan Barnett <RBarnett at trustwave.com
> <mailto:RBarnett at trustwave.com>> wrote:
> Did you install the reqtimeout module?
>
> #
> # Mitigate Slow HTTP POST attacks
> #
> # Must have the mod_reqtimeout module installed
> # You should adjust the RequestReadTimeout body directive setting to a
> limit
> # that will allow any legitimate slow clients or large file uplaods.
> #
> <IfModule reqtimeout_module>
> RequestReadTimeout body=30
> </IfModule>
>
> -Ryan
>
>
>
> From: Guillaume Bilodeau <guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com><mailto:guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com>>>
> Date: Thu, 14 Apr 2011 12:33:52 -0500
> To: "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>" <
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>>
> Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
> behaving as expected
>
> Hi all,
>
> We are trying to setup the OWASP Core Rule Set to protect our application
> from Slow HTTP DOS attacks.
>
> We have setup ModSecurity 2.5.13 on our Apache 2.2.17 instance, loaded the
> module, and included all CRS base rules plus
> modsecurity_crs_11_slow_dos_protection.conf.  We didn't change the settings
> defined in the conf file, so SecReadStateLimit is set to 5 and
> RequestReadTimeout is set to body=30.  We are using the http_dos_cli command
> line tool to do our tests, with the connection parameter set to 500.
>
> When running the slow-headers test, ModSecurity seems to be protecting the
> application correctly, dropping most (all?) requests from the tester's IP
> and allowing requests from a different IP to be served.  However, when
> running the slow-post test, ModSecurity doesn't seem to be doing anything.
>  From what I understand, the test successfully creates the 500 connections
> and keeps them open; none of them are dropped.  Requests coming from a
> different IP are not served and eventually time out.  A tail -f error_log
> shows nothing except the eventual message on MaxClients (set to 300 now)
> being reached.  Interestingly, when we kill the http_dos_cli process, the
> error_log is then flooded with hundreds of entries such as this:
>
>
> [Mon Nov 22 17:44:46 2010] [warn] ModSecurity: Access denied with code 400.
> Too many connections [6] of 5 allowed in READ state from 211.144.112.20 -
> Possible DoS Consumption Attack [Rejected]
>
> (this has been taken from the SpiderLabs blog entry, dates and IPs are
> obviously different)
>
> Any idea on why this isn't behaving like we're expecting it to be?
>
> Thanks!
> GB
>
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110414/90f6fa97/attachment.html 

From ivan.ristic at gmail.com  Thu Apr 14 15:19:26 2011
From: ivan.ristic at gmail.com (Ivan Ristic)
Date: Thu, 14 Apr 2011 20:19:26 +0100
Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
 behaving as expected
In-Reply-To: <BANLkTinT0vLkL4KUw_A-qjvHHjarahaazg@mail.gmail.com>
References: <BANLkTimBWTGjsvmjWYFF11qGzotUQ1o_bQ@mail.gmail.com>
	<C9CCB08D.1E7EC%rbarnett@trustwave.com>
	<BANLkTinT0vLkL4KUw_A-qjvHHjarahaazg@mail.gmail.com>
Message-ID: <BANLkTik_H1-6gSvwpRHkaRDrSN19bfu5gQ@mail.gmail.com>

Yes, it's probably because of keep-alives. Sounds like a bug in the
reqtimeout module, because, if the connection stays open, the module
isn't achieving much.

IIRC, ModSecurity will turn off keep-alives on a connection on which it blocks.


On Thu, Apr 14, 2011 at 8:11 PM, Guillaume Bilodeau
<guillaume.bilodeau at gmail.com> wrote:
> Hi Ryan,
> We installed WireShark and started sniffing on all traffic. ?It seems that
> Apache is returning a 200 status code instead of a 408 when the request
> reaches 30 seconds, so from what I understand ModSecurity can't do much
> about that. ?The funny thing is, if we follow one of the TCP streams, we see
> that http_dos_cli keeps sending data even after receiving the 200 code.
> ?Maybe something to do with ?keep-alive connections?
> Cheers,
> GB
> On Thu, Apr 14, 2011 at 2:12 PM, Ryan Barnett <RBarnett at trustwave.com>
> wrote:
>>
>> OK, if mod_reqtimeout is installed and that directive is working, then
>> after 30 sec if Apache has not received the entire request body then it
>> should terminate the request with a 408 status code. ?The ModSecurity CRS
>> rules are simply monitoring if/how many 408 alerts are generated by Apache
>> per client. ?After a certain amount, then ModSecurity will step in on
>> subsequent requests in phase:1 and do drop actions.
>>
>> So, by monitoring your Apache error log while you are running your
>> http_dos_cli tool, does Apache generate 408 alerts after 30 secs? ?If not,
>> then I don't think that the mod_reqtimeout module or directive is working.
>>
>> -Ryan
>>
>>
>> From: Guillaume Bilodeau
>> <guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>
>> Date: Thu, 14 Apr 2011 13:07:41 -0500
>> To: Ryan Barnett <rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>>
>> Cc:
>> "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>"
>> <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>
>> Subject: Re: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection
>> not behaving as expected
>>
>> Hi Ryan,
>>
>> I'm no Apache expert, but AFAICT the req_timeout module is installed. ?A
>> /server-info shows the req_timeout.c module with the RequestReadTimeout
>> parameter.
>>
>> Thanks,
>> GB
>>
>> On Thu, Apr 14, 2011 at 1:56 PM, Ryan Barnett
>> <RBarnett at trustwave.com<mailto:RBarnett at trustwave.com>> wrote:
>> Did you install the reqtimeout module?
>>
>> #
>> # Mitigate Slow HTTP POST attacks
>> #
>> # Must have the mod_reqtimeout module installed
>> # You should adjust the RequestReadTimeout body directive setting to a
>> limit
>> # that will allow any legitimate slow clients or large file uplaods.
>> #
>> <IfModule reqtimeout_module>
>> RequestReadTimeout body=30
>> </IfModule>
>>
>> -Ryan
>>
>>
>>
>> From: Guillaume Bilodeau
>> <guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>>
>> Date: Thu, 14 Apr 2011 12:33:52 -0500
>> To:
>> "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>"
>> <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>>
>> Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
>> behaving as expected
>>
>> Hi all,
>>
>> We are trying to setup the OWASP Core Rule Set to protect our application
>> from Slow HTTP DOS attacks.
>>
>> We have setup ModSecurity 2.5.13 on our Apache 2.2.17 instance, loaded the
>> module, and included all CRS base rules plus
>> modsecurity_crs_11_slow_dos_protection.conf. ?We didn't change the settings
>> defined in the conf file, so SecReadStateLimit is set to 5 and
>> RequestReadTimeout is set to body=30. ?We are using the http_dos_cli command
>> line tool to do our tests, with the connection parameter set to 500.
>>
>> When running the slow-headers test, ModSecurity seems to be protecting the
>> application correctly, dropping most (all?) requests from the tester's IP
>> and allowing requests from a different IP to be served. ?However, when
>> running the slow-post test, ModSecurity doesn't seem to be doing anything.
>> ?From what I understand, the test successfully creates the 500 connections
>> and keeps them open; none of them are dropped. ?Requests coming from a
>> different IP are not served and eventually time out. ?A tail -f error_log
>> shows nothing except the eventual message on MaxClients (set to 300 now)
>> being reached. ?Interestingly, when we kill the http_dos_cli process, the
>> error_log is then flooded with hundreds of entries such as this:
>>
>>
>> [Mon Nov 22 17:44:46 2010] [warn] ModSecurity: Access denied with code
>> 400.
>> Too many connections [6] of 5 allowed in READ state from 211.144.112.20 -
>> Possible DoS Consumption Attack [Rejected]
>>
>> (this has been taken from the SpiderLabs blog entry, dates and IPs are
>> obviously different)
>>
>> Any idea on why this isn't behaving like we're expecting it to be?
>>
>> Thanks!
>> GB
>>
>>
>>
>>
>
>
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>
>



-- 
Ivan Risti?

From guillaume.bilodeau at gmail.com  Thu Apr 14 17:37:29 2011
From: guillaume.bilodeau at gmail.com (Guillaume Bilodeau)
Date: Thu, 14 Apr 2011 17:37:29 -0400
Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
 behaving as expected
In-Reply-To: <BANLkTik_H1-6gSvwpRHkaRDrSN19bfu5gQ@mail.gmail.com>
References: <BANLkTimBWTGjsvmjWYFF11qGzotUQ1o_bQ@mail.gmail.com>
	<C9CCB08D.1E7EC%rbarnett@trustwave.com>
	<BANLkTinT0vLkL4KUw_A-qjvHHjarahaazg@mail.gmail.com>
	<BANLkTik_H1-6gSvwpRHkaRDrSN19bfu5gQ@mail.gmail.com>
Message-ID: <BANLkTim8ZhSQG4W66RU8SbZwmOYnk5Bdcg@mail.gmail.com>

We will try turning off connection keep-alive to see how Apache will react.
 However, isn't turning this off going to have a disastrous impact on
connection performance, especially since all traffic will be SSL?

On Thu, Apr 14, 2011 at 3:19 PM, Ivan Ristic <ivan.ristic at gmail.com> wrote:

> Yes, it's probably because of keep-alives. Sounds like a bug in the
> reqtimeout module, because, if the connection stays open, the module
> isn't achieving much.
>
> IIRC, ModSecurity will turn off keep-alives on a connection on which it
> blocks.
>
>
> On Thu, Apr 14, 2011 at 8:11 PM, Guillaume Bilodeau
> <guillaume.bilodeau at gmail.com> wrote:
> > Hi Ryan,
> > We installed WireShark and started sniffing on all traffic.  It seems
> that
> > Apache is returning a 200 status code instead of a 408 when the request
> > reaches 30 seconds, so from what I understand ModSecurity can't do much
> > about that.  The funny thing is, if we follow one of the TCP streams, we
> see
> > that http_dos_cli keeps sending data even after receiving the 200 code.
> >  Maybe something to do with  keep-alive connections?
> > Cheers,
> > GB
> > On Thu, Apr 14, 2011 at 2:12 PM, Ryan Barnett <RBarnett at trustwave.com>
> > wrote:
> >>
> >> OK, if mod_reqtimeout is installed and that directive is working, then
> >> after 30 sec if Apache has not received the entire request body then it
> >> should terminate the request with a 408 status code.  The ModSecurity
> CRS
> >> rules are simply monitoring if/how many 408 alerts are generated by
> Apache
> >> per client.  After a certain amount, then ModSecurity will step in on
> >> subsequent requests in phase:1 and do drop actions.
> >>
> >> So, by monitoring your Apache error log while you are running your
> >> http_dos_cli tool, does Apache generate 408 alerts after 30 secs?  If
> not,
> >> then I don't think that the mod_reqtimeout module or directive is
> working.
> >>
> >> -Ryan
> >>
> >>
> >> From: Guillaume Bilodeau
> >> <guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>
> >> Date: Thu, 14 Apr 2011 13:07:41 -0500
> >> To: Ryan Barnett <rbarnett at trustwave.com<mailto:rbarnett at trustwave.com
> >>
> >> Cc:
> >> "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>"
> >> <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>
> >> Subject: Re: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection
> >> not behaving as expected
> >>
> >> Hi Ryan,
> >>
> >> I'm no Apache expert, but AFAICT the req_timeout module is installed.  A
> >> /server-info shows the req_timeout.c module with the RequestReadTimeout
> >> parameter.
> >>
> >> Thanks,
> >> GB
> >>
> >> On Thu, Apr 14, 2011 at 1:56 PM, Ryan Barnett
> >> <RBarnett at trustwave.com<mailto:RBarnett at trustwave.com>> wrote:
> >> Did you install the reqtimeout module?
> >>
> >> #
> >> # Mitigate Slow HTTP POST attacks
> >> #
> >> # Must have the mod_reqtimeout module installed
> >> # You should adjust the RequestReadTimeout body directive setting to a
> >> limit
> >> # that will allow any legitimate slow clients or large file uplaods.
> >> #
> >> <IfModule reqtimeout_module>
> >> RequestReadTimeout body=30
> >> </IfModule>
> >>
> >> -Ryan
> >>
> >>
> >>
> >> From: Guillaume Bilodeau
> >> <guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com
> ><mailto:guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com
> >>>
> >> Date: Thu, 14 Apr 2011 12:33:52 -0500
> >> To:
> >> "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>"
> >> <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>>
> >> Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
> >> behaving as expected
> >>
> >> Hi all,
> >>
> >> We are trying to setup the OWASP Core Rule Set to protect our
> application
> >> from Slow HTTP DOS attacks.
> >>
> >> We have setup ModSecurity 2.5.13 on our Apache 2.2.17 instance, loaded
> the
> >> module, and included all CRS base rules plus
> >> modsecurity_crs_11_slow_dos_protection.conf.  We didn't change the
> settings
> >> defined in the conf file, so SecReadStateLimit is set to 5 and
> >> RequestReadTimeout is set to body=30.  We are using the http_dos_cli
> command
> >> line tool to do our tests, with the connection parameter set to 500.
> >>
> >> When running the slow-headers test, ModSecurity seems to be protecting
> the
> >> application correctly, dropping most (all?) requests from the tester's
> IP
> >> and allowing requests from a different IP to be served.  However, when
> >> running the slow-post test, ModSecurity doesn't seem to be doing
> anything.
> >>  From what I understand, the test successfully creates the 500
> connections
> >> and keeps them open; none of them are dropped.  Requests coming from a
> >> different IP are not served and eventually time out.  A tail -f
> error_log
> >> shows nothing except the eventual message on MaxClients (set to 300 now)
> >> being reached.  Interestingly, when we kill the http_dos_cli process,
> the
> >> error_log is then flooded with hundreds of entries such as this:
> >>
> >>
> >> [Mon Nov 22 17:44:46 2010] [warn] ModSecurity: Access denied with code
> >> 400.
> >> Too many connections [6] of 5 allowed in READ state from 211.144.112.20
> -
> >> Possible DoS Consumption Attack [Rejected]
> >>
> >> (this has been taken from the SpiderLabs blog entry, dates and IPs are
> >> obviously different)
> >>
> >> Any idea on why this isn't behaving like we're expecting it to be?
> >>
> >> Thanks!
> >> GB
> >>
> >>
> >>
> >>
> >
> >
> > _______________________________________________
> > Owasp-modsecurity-core-rule-set mailing list
> > Owasp-modsecurity-core-rule-set at lists.owasp.org
> > https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
> >
> >
>
>
>
> --
> Ivan Risti?
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110414/e5ea8c9c/attachment-0001.html 

From klaubert at gmail.com  Thu Apr 14 17:57:46 2011
From: klaubert at gmail.com (Klaubert Herr da Silveira)
Date: Thu, 14 Apr 2011 18:57:46 -0300
Subject: [Owasp-modsecurity-core-rule-set] Seeking Feedback - New
 Approach for XSS Detection/Response
In-Reply-To: <C9CCADFF.1E7E1%rbarnett@trustwave.com>
References: <4DA72291.7030107@pheromone.ca>
	<C9CCADFF.1E7E1%rbarnett@trustwave.com>
Message-ID: <BANLkTim-zQgcCZg_0ZmDF+R3DRYDLi++-A@mail.gmail.com>

This can help too on a already stored XSS on database or inject by other ways.

Klaubert

On Thu, Apr 14, 2011 at 3:00 PM, Ryan Barnett <RBarnett at trustwave.com> wrote:
> Jonathan,
>
> I agree with your comments.
>
> Just to be clear - I am not suggesting that we should get rid of the
> inbound XSS checks as they have a purpose. ?I am suggesting that we add in
> this capability so that users can decide with methods of XSS defense they
> want to use. ?I think that for many users, this new, additional approach
> will help them to reduce false positives for XSS.
>
> -Ryan
>
> On 4/14/11 12:36 PM, "Jonathan Marcil" <jonathan.marcil at pheromone.ca>
> wrote:
>
>>Hi Ryan,
>>
>>I like the correlation between inbound and outbound in the POST. It
>>gives you an insight on how the application is processing the input.
>>
>>But I see some ways that this can't replace full inbound checking and
>>blocking :
>>- What if the application is not outputting the input right away?
>>- What if the application is actually outputting the input in many
>>places in different ways? For instance, Drupal may output directly the
>>content on a node after modification, but its doing security check on
>>output in other places. Flaws can be everywhere in this case not just
>>when you submit something.
>>- What if a valid HTML in the output of a page that is not related to
>>the user input can actually trigger a false positive? (let's say my
>>website really do alert('XSS'); at some point ;-)
>>
>>Parsing on output seams harder to me because there's more stuff to parse
>>: the whole page vs. a simple user input.
>>
>>Thanks,
>>
>>- Jonathan
>>
>>
>>
>>On 11-04-14 11:15 AM, Ryan Barnett wrote:
>>> I have been thinking a lot recently about XSS Attacks and how
>>>ModSecurity can potentially identify these attacks and respond -
>>>http://www.modsecurity.org/documentation/XSS_Street_Fight-Ryan_Barnett-Bl
>>>ackhatDC-2011.pdf
>>>
>>> I would like to get some community feedback on a possible new approach
>>>for XSS.
>>>
>>> The big current issue I see with the ModSecurity CRS approach is that
>>>the rules are looking for potentially malicious input and flagging them
>>>as XSS and executing blocking. ?This approach is flawed for 2 reasons -
>>>
>>> ?1. ?Many of the XSS signatures are too broad and are looking for any
>>>html data on inbound. ?This may work OK if the application or specific
>>>parameter is never supposed to contain html code, however many users
>>>have apps that allow for some html code on the inbound. ?There are many
>>>ModSecurity users who get upset because the rules end up blocking normal
>>>transaction in applications like WordPress. ?The XSS signatures should
>>>probably be broken up into separate files - 1) Malicious code ? which
>>>would only contain signatures for confirmed, malicious code. ?These
>>>rules can be acted upon for blocking actions in any circumstance. ?2)
>>>Html code ? which would trigger on any html-like code. ?This could be
>>>activated for sites that don't allow any html code.
>>> ?2. ?Blocking inbound data for XSS is prone to False Positives. ?XSS
>>>manifests itself when client-supplied data is echoed back out to clients
>>>in a non-escaped format. ?The applications may actually be properly
>>>output escaping user-supplied data and they don't need for ModSecurity
>>>to do any blocking. ?It seems that the best place to choose a blocking
>>>action for XSS is actually in the response back to the client.
>>>
>>> Here is an example approach for #2 above.
>>> We are already flagging inbound data as potential XSS attacks and
>>>saving the data in TX variables. ?If we were to not block for XSS on the
>>>inbound, but instead inspect the RESPONSE_BODY variables for matches of
>>>TX XSS data, we could then choose to block. ?Here is an example rule
>>>which does just that -
>>>
>>> SecRule TX:/XSS/ "@within %{response_body}"
>>>"phase:4,t:none,log,block,msg:'Malicious Client Data Found in Response
>>>Page.',logdata:'%{matched_var}'"
>>>
>>> As a test, I sent the following request (from the ModSec audit log) -
>>>
>>> ###############################
>>> --25ab4619-B--
>>> POST /cgi-bin/fup.cgi HTTP/1.1
>>> Host: localhost
>>> Connection: keep-alive
>>> Referer: http://localhost/upload.html
>>> Content-Length: 429
>>> Cache-Control: max-age=0
>>> Origin: http://localhost
>>> User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-US)
>>>AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16
>>> Content-Type: multipart/form-data;
>>>boundary=----WebKitFormBoundary5l4ChTnz96IS0ru8
>>> Accept:
>>>application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,im
>>>age/png,*/*;q=0.5
>>> Accept-Encoding: gzip,deflate,sdch
>>> Accept-Language: en-US,en;q=0.8
>>> Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3
>>>
>>> --25ab4619-I--
>>> note=%3cscript%3ealert%28%27xss%27%29%3c%2fscript%3e
>>> --25ab4619-F--
>>> HTTP/1.1 200 OK
>>> Content-Length: 308
>>> Keep-Alive: timeout=5, max=100
>>> Connection: Keep-Alive
>>> Content-Type: text/html
>>>
>>> --25ab4619-E--
>>> <html>
>>> <head>
>>> <title>File Upload Results</title>
>>> </head>
>>> <body>
>>> <h1>File Upload Results</h1>
>>>
>>> <p>You've uploaded a file. ?Your notes on the file were:<br>
>>> <blockquote><script>alert('xss')</script></blockquote><br>
>>> <p>The file's contents are:
>>> <pre>
>>>
>>> </pre>
>>> </body>
>>> </html>
>>> ###############################
>>>
>>> The new rule generated a number of events -
>>>
>>> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning.
>>>String match within "<html>\\n<head>\\n<title>File Upload
>>>Results</title>\\n</head>\\n<body>\\n<h1>File Upload
>>>Results</h1>\\n\\n<p>You've uploaded a file. ?Your notes on the file
>>>were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n
>>><script></script>\\n<script></script>\\n<p>The file's contents
>>>are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at
>>>TX:958052-WEB_ATTACK/XSS-ARGS:note. [file
>>>"/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.con
>>>f"] [line "17"] [msg "Malicious Client Data Found n Response Page."]
>>>[data "alert("] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"]
>>>[unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
>>> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning.
>>>String match within "<html>\\n<head>\\n<title>File Upload
>>>Results</title>\\n</head>\\n<body>\\n<h1>File Upload
>>>Results</h1>\\n\\n<p>You've uploaded a file. ?Your notes on the file
>>>were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n
>>><script></script>\\n<script></script>\\n<p>The file's contents
>>>are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at
>>>TX:958051-WEB_ATTACK/XSS-ARGS:note. [file
>>>"/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.con
>>>f"] [line "17"] [msg "Malicious Client Data Found n Response Page."]
>>>[data "<script"] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"]
>>>[unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
>>> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning.
>>>String match within "<html>\\n<head>\\n<title>File Upload
>>>Results</title>\\n</head>\\n<body>\\n<h1>File Upload
>>>Results</h1>\\n\\n<p>You've uploaded a file. ?Your notes on the file
>>>were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n
>>><script></script>\\n<script></script>\\n<p>The file's contents
>>>are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at
>>>TX:973300-WEB_ATTACK/XSS-ARGS:note. [file
>>>"/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.con
>>>f"] [line "17"] [msg "Malicious Client Data Found n Response Page."]
>>>[data "<script>"] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"]
>>>[unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
>>> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning.
>>>String match within "<html>\\n<head>\\n<title>File Upload
>>>Results</title>\\n</head>\\n<body>\\n<h1>File Upload
>>>Results</h1>\\n\\n<p>You've uploaded a file. ?Your notes on the file
>>>were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n
>>><script></script>\\n<script></script>\\n<p>The file's contents
>>>are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at
>>>TX:973307-WEB_ATTACK/XSS-ARGS:note. [file
>>>"/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.con
>>>f"] [line "17"] [msg "Malicious Client Data Found n Response Page."]
>>>[data "alert("] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"]
>>>[unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
>>> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning.
>>>String match within "<html>\\n<head>\\n<title>File Upload
>>>Results</title>\\n</head>\\n<body>\\n<h1>File Upload
>>>Results</h1>\\n\\n<p>You've uploaded a file. ?Your notes on the file
>>>were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n
>>><script></script>\\n<script></script>\\n<p>The file's contents
>>>are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at
>>>TX:973310-WEB_ATTACK/XSS-ARGS:note. [file
>>>"/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.con
>>>f"] [line "17"] [msg "Malicious Client Data Found n Response Page."]
>>>[data "'xss'"] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"]
>>>[unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
>>> [Thu Apr 14 11:00:59 2011] [error] [client ::1] ModSecurity: Warning.
>>>String match within "<html>\\n<head>\\n<title>File Upload
>>>Results</title>\\n</head>\\n<body>\\n<h1>File Upload
>>>Results</h1>\\n\\n<p>You've uploaded a file. ?Your notes on the file
>>>were:<br>\\n<blockquote><script>alert('xss')</script></blockquote><br>\\n
>>><script></script>\\n<script></script>\\n<p>The file's contents
>>>are:\\n<pre>\\n\\n</pre>\\n</body>\\n</html>\\n" at
>>>TX:973331-WEB_ATTACK/XSS-ARGS:note. [file
>>>"/usr/local/apache/conf/crs/base_rules/modsecurity_crs_15_customrules.con
>>>f"] [line "17"] [msg "Malicious Client Data Found n Response Page."]
>>>[data "<script>"] [hostname "localhost"] [uri "/cgi-bin/fup.cgi"]
>>>[unique_id "TacMK8CoqAEAAKdOIfUAAAAB"]
>>>
>>> This approach seems to me to be more accurate for detecting/reacting to
>>>XSS as you are doing the inspection/blocking in the outbound which means
>>>that you have less false positives.
>>>
>>> Now, taking this approach one step further! ?With the upcoming
>>>ModSecurity v2.6 ? you could actually extend the rule logic to use @rsub
>>>against the STREAM_OUTPUT_BODY and actually remove malicious code from
>>>response bodies and still send the page :)
>>>
>>> SecRule TX:/XSS/ "@within %{response_body}"
>>>"chain,phase:4,t:none,log,pass,msg:'Malicious Client Data Removed From
>>>Response Page.',logdata:'%{matched_var}'"
>>> ? ? ? ?SecRule STREAM_OUTPUT_BODY "@rsub
>>>s/%{matched_var}/MALICIOUS_CODE_REMOVED/d"
>>>
>>> Running new ruleset ? this is how the reflected XSS attack response
>>>page would look to a client -
>>>
>>> $ curl
>>>"http://localhost/cgi-bin/fup.cgi?note=<script>alert('xss')</script>"
>>> <html>
>>> <head>
>>> <title>File Upload Results</title>
>>> </head>
>>> <body>
>>> <h1>File Upload Results</h1>
>>>
>>> <p>You've uploaded a file. ?Your notes on the file were:<br>
>>> <blockquote>MALICIOUS_CODE_REMOVEDalert('xss')</script></blockquote><br>
>>> <p>The file's contents are:
>>> <pre>
>>>
>>> </pre>
>>> </body>
>>> </html>
>>>
>>> Comments welcome!
>>>
>>> -Ryan
>>>
>>>
>>>
>>>
>>> ________________________________
>>> This transmission may contain information that is privileged,
>>>confidential, and/or exempt from disclosure under applicable law. If you
>>>are not the intended recipient, you are hereby notified that any
>>>disclosure, copying, distribution, or use of the information contained
>>>herein (including any reliance thereon) is STRICTLY PROHIBITED. If you
>>>received this transmission in error, please immediately contact the
>>>sender and destroy the material in its entirety, whether in electronic
>>>or hard copy format.
>>>
>>> _______________________________________________
>>> Owasp-modsecurity-core-rule-set mailing list
>>> Owasp-modsecurity-core-rule-set at lists.owasp.org
>>> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>>
>
>
> This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.
>
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>

From RBarnett at trustwave.com  Fri Apr 15 10:15:30 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Fri, 15 Apr 2011 09:15:30 -0500
Subject: [Owasp-modsecurity-core-rule-set] Current use of TAG data in rules
	and a new idea - CONFIDENCE_LEVEL
Message-ID: <C9CDCB42.1E966%rbarnett@trustwave.com>

Hey everyone,
I wanted give an overview of the current use of TAG data in rules (https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#tag), as well as, to get some feedback on some new ideas for tag usage.

First let's look at how TAG is currently being used today in the CRS.  Here is an example SQL Injection rule -

SecRule REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* "\bxp_cmdshell\b" \
          "phase:2,rev:'2.2.0',capture,t:none,t:urlDecodeUni,t:htmlEntityDecode,t:lowercase,t:replaceComments,t:compressWhiteSpace,ctl:auditLogParts=+E,block,msg:'SQL Injection Attack',id:'959052',tag:'WEB_ATTACK/SQL_INJECTION',tag:'WASCTC/WASC-19',tag:'OWASP_TOP_10/A1',tag:'OWASP_AppSensor/CIE1',tag:'PCI/6.5.2',logdata:'%{TX.0}',severity:'2',setvar:'tx.msg=%{rule.msg}',setvar:tx.sql_injection_score=+%{tx.critical_anomaly_score},setvar:tx.anomaly_score=+%{tx.critical_anomaly_score},setvar:tx.%{rule.id}-WEB_ATTACK/SQL_INJECTION-%{matched_var_name}=%{tx.0}"

The TAG action is used to provide the following information:

 1.  Attack Category ? example WEB_ATTACK/SQL_INJECTION
 2.  Mapping to community taxonomies ? such as WASC Threat Classification, OWASP Top Ten and OWASP AppSensor Detection Points
 3.  URL links to specific reference resources ? as in this converted ET sql injection rule that lists a link to a SecurityFocus vuln entry

# (2007539) SpiderLabs Research (SLR) Public Vulns: ET WEB_SPECIFIC_APPS 20/20 Auto Gallery SQL Injection Attempt -- vehiclelistings.asp model UPDATE
SecRule REQUEST_LINE "@contains /vehiclelistings.asp" "chain,phase:2,block,t:none,t:urlDecodeUni,t:htmlEntityDecode,t:normalisePathWin,capture,nolog,auditlog,logdata:'%{TX.0}',severity:'2',id:2007539,rev:6,msg:'SLR: ET WEB_SPECIFIC_APPS 20/20 Auto Gallery SQL Injection Attempt -- vehiclelistings.asp model UPDATE',tag:'web-application-attack',tag:'url,www.securityfocus.com/bid/21154'"
SecRule &TX:'/WEB_ATTACK/SQL_INJECTION.*ARGS:model/' "@gt 0" "ctl:auditLogParts=+E,setvar:'tx.msg=%{tx.msg} - ET WEB_SPECIFIC_APPS 20/20 Auto Gallery SQL Injection Attempt -- vehiclelistings.asp model UPDATE',setvar:tx.anomaly_score=+20,setvar:'tx.%{rule.id}-WEB_ATTACK-%{rule.severity}-%{rule.msg}-%{matched_var_name}=%{matched_var}'"

One big idea we have for a new TAG is Confidence Level which would give a general indication as to the rules accuracy level perhaps on a scale of 0-5 where 0 is totally experimental without much testing at all and 5 is a very strong signature that has been rigorously tested and a low chance of false positives.  Example ? tag:'CONFIDENCE_LEVEL/5'

The Confidence Level tag seems like it has the potential to have a very positive impact to users for two reasons:

 1.  Currently, there isn't much distinction for each rules as to its accuracy level.  We do have the experimental_rules directory for brand new rules however that does not mean that other rules are all of equal accuracy levels.
 2.  With the new v2.6 enhancement which added SecRuleRemoveByTag and ctl:ruleRemoveByTag (https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecRuleRemoveByTag) users will then have the ability to make local customizations to disable entire groups of rules based on TAG data :)  For instance, if you wanted to only run CONFIDENCE_LEVEL/5 rules you could do that in a local custom rules file modsecurity_crs_60_custom_rules.conf to disable all lower confidence level rules ?

SecRuleRemoveByTag "CONFIDENCE_LEVEL/[0-4]"

While this is a great new capability ? we will need some help from the community with identifying the right CONFIDENCE_LEVEL settings for each rule.  I will go through each rule and estimate a CONFIDENCE_LEVEL based on our intel.  This may not be enough however.  I have a feeling that most ModSecurity users silently handle false positives with local exceptions and they do not also report back to the community which rule IDs are causing problems.  Some users do go the extra mile and actually open Jira tickets for the CRS with bug reports.  That is great and it ensures that I will review/update the rules.  I do think, however, that most end users would prefer an easier method.  What do you all think about us creating a new mail-list on SourceForge strictly for sending in false positive rule issues?  We could create something like - mod?security-false-positives at lists.sourceforge.net.

What do you think?  If anyone has any better ideas for false positive reporting, please speak up.

Ryan



________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From yersinia.spiros at gmail.com  Fri Apr 15 10:33:03 2011
From: yersinia.spiros at gmail.com (yersinia)
Date: Fri, 15 Apr 2011 16:33:03 +0200
Subject: [Owasp-modsecurity-core-rule-set] Current use of TAG data in
 rules and a new idea - CONFIDENCE_LEVEL
In-Reply-To: <C9CDCB42.1E966%rbarnett@trustwave.com>
References: <C9CDCB42.1E966%rbarnett@trustwave.com>
Message-ID: <BANLkTinBiG6YxBnGVwQ6Q5R7b_JD1DkdxQ@mail.gmail.com>

On Fri, Apr 15, 2011 at 4:15 PM, Ryan Barnett <RBarnett at trustwave.com>wrote:

> Hey everyone,
> I wanted give an overview of the current use of TAG data in rules (
> https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#tag),
> as well as, to get some feedback on some new ideas for tag usage.
>
> First let's look at how TAG is currently being used today in the CRS.  Here
> is an example SQL Injection rule -
>
> SecRule REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* "\bxp_cmdshell\b" \
>
>  "phase:2,rev:'2.2.0',capture,t:none,t:urlDecodeUni,t:htmlEntityDecode,t:lowercase,t:replaceComments,t:compressWhiteSpace,ctl:auditLogParts=+E,block,msg:'SQL
> Injection
> Attack',id:'959052',tag:'WEB_ATTACK/SQL_INJECTION',tag:'WASCTC/WASC-19',tag:'OWASP_TOP_10/A1',tag:'OWASP_AppSensor/CIE1',tag:'PCI/6.5.2',logdata:'%{TX.0}',severity:'2',setvar:'tx.msg=%{rule.msg}',setvar:tx.sql_injection_score=+%{tx.critical_anomaly_score},setvar:tx.anomaly_score=+%{tx.critical_anomaly_score},setvar:tx.%{
> rule.id}-WEB_ATTACK/SQL_INJECTION-%{matched_var_name}=%{tx.0}"
>
> The TAG action is used to provide the following information:
>
>  1.  Attack Category ? example WEB_ATTACK/SQL_INJECTION
>  2.  Mapping to community taxonomies ? such as WASC Threat Classification,
> OWASP Top Ten and OWASP AppSensor Detection Points
>  3.  URL links to specific reference resources ? as in this converted ET
> sql injection rule that lists a link to a SecurityFocus vuln entry
>
> # (2007539) SpiderLabs Research (SLR) Public Vulns: ET WEB_SPECIFIC_APPS
> 20/20 Auto Gallery SQL Injection Attempt -- vehiclelistings.asp model UPDATE
> SecRule REQUEST_LINE "@contains /vehiclelistings.asp"
> "chain,phase:2,block,t:none,t:urlDecodeUni,t:htmlEntityDecode,t:normalisePathWin,capture,nolog,auditlog,logdata:'%{TX.0}',severity:'2',id:2007539,rev:6,msg:'SLR:
> ET WEB_SPECIFIC_APPS 20/20 Auto Gallery SQL Injection Attempt --
> vehiclelistings.asp model UPDATE',tag:'web-application-attack',tag:'url,
> www.securityfocus.com/bid/21154'"
> SecRule &TX:'/WEB_ATTACK/SQL_INJECTION.*ARGS:model/' "@gt 0"
> "ctl:auditLogParts=+E,setvar:'tx.msg=%{tx.msg} - ET WEB_SPECIFIC_APPS 20/20
> Auto Gallery SQL Injection Attempt -- vehiclelistings.asp model
> UPDATE',setvar:tx.anomaly_score=+20,setvar:'tx.%{rule.id
> }-WEB_ATTACK-%{rule.severity}-%{rule.msg}-%{matched_var_name}=%{matched_var}'"
>
> One big idea we have for a new TAG is Confidence Level which would give a
> general indication as to the rules accuracy level perhaps on a scale of 0-5
> where 0 is totally experimental without much testing at all and 5 is a very
> strong signature that has been rigorously tested and a low chance of false
> positives.  Example ? tag:'CONFIDENCE_LEVEL/5'
>
> The Confidence Level tag seems like it has the potential to have a very
> positive impact to users for two reasons:
>
>  1.  Currently, there isn't much distinction for each rules as to its
> accuracy level.  We do have the experimental_rules directory for brand new
> rules however that does not mean that other rules are all of equal accuracy
> levels.
>  2.  With the new v2.6 enhancement which added SecRuleRemoveByTag and
> ctl:ruleRemoveByTag (
> https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecRuleRemoveByTag)
> users will then have the ability to make local customizations to disable
> entire groups of rules based on TAG data :)  For instance, if you wanted to
> only run CONFIDENCE_LEVEL/5 rules you could do that in a local custom rules
> file modsecurity_crs_60_custom_rules.conf to disable all lower confidence
> level rules ?
>
> SecRuleRemoveByTag "CONFIDENCE_LEVEL/[0-4]"
>
> While this is a great new capability ? we will need some help from the
> community with identifying the right CONFIDENCE_LEVEL settings for each
> rule.  I will go through each rule and estimate a CONFIDENCE_LEVEL based on
> our intel.  This may not be enough however.  I have a feeling that most
> ModSecurity users silently handle false positives with local exceptions and
> they do not also report back to the community which rule IDs are causing
> problems.  Some users do go the extra mile and actually open Jira tickets
> for the CRS with bug reports.  That is great and it ensures that I will
> review/update the rules.  I do think, however, that most end users would
> prefer an easier method.  What do you all think about us creating a new
> mail-list on SourceForge strictly for sending in false positive rule issues?
>  We could create something like - mod?
> security-false-positives at lists.sourceforge.net.
>
> What do you think?  If anyone has any better ideas for false positive
> reporting, please speak up.
>
> I think it's a great idea. In effect having a mailing intended only for
the false positives I think it's similar - but in this context with some
difference - to what the GNU project have done  the years for the bug report
: having different mailing for the "bug"  and discussion make it more easy to
obtain the result you want.

What should be standardized is what to send. For example

- Full audit log (and what level of logging) or not, only a significative
part
- what  was done in front of the false positive

disabling the rule
rewriting
with a whitelisting approach

Best Regards



> Ryan
>
>
>
> ________________________________
> This transmission may contain information that is privileged, confidential,
> and/or exempt from disclosure under applicable law. If you are not the
> intended recipient, you are hereby notified that any disclosure, copying,
> distribution, or use of the information contained herein (including any
> reliance thereon) is STRICTLY PROHIBITED. If you received this transmission
> in error, please immediately contact the sender and destroy the material in
> its entirety, whether in electronic or hard copy format.
>
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110415/e0d2a561/attachment-0001.html 

From RBarnett at trustwave.com  Fri Apr 15 14:40:30 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Fri, 15 Apr 2011 13:40:30 -0500
Subject: [Owasp-modsecurity-core-rule-set] New Generic Malicious JS
	Detection in Outbound Content
Message-ID: <C9CE095E.1E9E6%rbarnett@trustwave.com>

I just added the following new signatures to the modsecurity_crs_50_outbound.conf file in SVN - http://mod-security.svn.sourceforge.net/viewvc/mod-security/crs/trunk/base_rules/modsecurity_crs_50_outbound.conf

Please either sync from SVN or you can copy/paste them from below if you would like to try them out.

Please report any issues back to the list.

-Ryan

#
# Generic Malicious JS Detection
#
SecRule RESPONSE_BODY "(?i)(String\.fromCharCode\(.*?){4,}" \
                                "t:none,phase:4,rev:'2.2.0',ctl:auditLogParts=+E,block,msg:'Potential Obfuscated Javascript in Output - Excessive fromCharCode',capture,logdata:'%{tx.0}',id:'981004',tag:'MALICIOUS_CODE',tag:'bugtraq,13544',severity:'4',setvar:'tx.msg=%{rule.msg}',setvar:tx.outbound_anomaly_score=+%{tx.error_anomaly_score},setvar:tx.anomaly_score=+{tx.error_anomaly_score},setvar:tx.%{rule.id}-MALICIOUS_CODE-%{matched_var_name}=%{tx.0}"

SecRule RESPONSE_BODY "(?i)(eval\(.{0,15}unescape\()" \
                                "t:none,phase:4,rev:'2.2.0',ctl:auditLogParts=+E,block,msg:'Potential Obfuscated Javascript in Output - Eval+Unescape',capture,logdata:'%{tx.0}',id:'981005',tag:'MALICIOUS_CODE',tag:'bugtraq,13544',severity:'4',setvar:'tx.msg=%{rule.msg}',setvar:tx.outbound_anomaly_score=+%{tx.error_anomaly_score},setvar:tx.anomaly_score=+{tx.error_anomaly_score},setvar:tx.%{rule.id}-MALICIOUS_CODE-%{matched_var_name}=%{tx.0}"

SecRule RESPONSE_BODY "(?i)(var[^=]+=\s*unescape\s*;)" \
                                "t:none,phase:4,rev:'2.2.0',ctl:auditLogParts=+E,block,msg:'Potential Obfuscated Javascript in Output - Unescape',capture,logdata:'%{tx.0}',id:'981006',tag:'MALICIOUS_CODE',tag:'bugtraq,13544',severity:'4',setvar:'tx.msg=%{rule.msg}',setvar:tx.outbound_anomaly_score=+%{tx.error_anomaly_score},setvar:tx.anomaly_score=+{tx.error_anomaly_score},setvar:tx.%{rule.id}-MALICIOUS_CODE-%{matched_var_name}=%{tx.0}"

SecRule RESPONSE_BODY "(?i:%u0c0c%u0c0c|%u9090%u9090|%u4141%u4141)" \
                                "t:none,phase:4,rev:'2.2.0',ctl:auditLogParts=+E,block,msg:'Potential Obfuscated Javascript in Output - Heap Spray',id:'981007',tag:'MALICIOUS_CODE',tag:'bugtraq,13544',severity:'4',setvar:'tx.msg=%{rule.msg}',setvar:tx.outbound_anomaly_score=+%{tx.error_anomaly_score},setvar:tx.anomaly_score=+{tx.error_anomaly_score},setvar:tx.%{rule.id}-MALICIOUS_CODE-%{matched_var_name}=%{tx.0}"

________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From brectanu at gmail.com  Sat Apr 16 00:55:36 2011
From: brectanu at gmail.com (Brian Rectanus)
Date: Fri, 15 Apr 2011 21:55:36 -0700
Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
 behaving as expected
In-Reply-To: <BANLkTim8ZhSQG4W66RU8SbZwmOYnk5Bdcg@mail.gmail.com>
References: <BANLkTimBWTGjsvmjWYFF11qGzotUQ1o_bQ@mail.gmail.com>
	<C9CCB08D.1E7EC%rbarnett@trustwave.com>
	<BANLkTinT0vLkL4KUw_A-qjvHHjarahaazg@mail.gmail.com>
	<BANLkTik_H1-6gSvwpRHkaRDrSN19bfu5gQ@mail.gmail.com>
	<BANLkTim8ZhSQG4W66RU8SbZwmOYnk5Bdcg@mail.gmail.com>
Message-ID: <BANLkTimWkMgO93hKoiBQ8G5FCwzVGXr4oA@mail.gmail.com>

Probably not "disastrous" :)  You have the overhead of the TCP 3-way
handshake and also the shutdown, but the browsers should be using SSL
session resumption, which is not connection based.  It uses cached SSL
session IDs and should be reused on each connection up to the timeout
- just make sure this is enabled in the Apache config.  Personally, I
find that about 3 second timeouts w/low request limit works well for
keepalives, so it may be enough to just limit the keepalive timeout
and number of requests  (say 3 second timeout w/9 requests limit
instead of completely disabling them).  It really depends on your
latency requirements for your site.

-B

On Thu, Apr 14, 2011 at 2:37 PM, Guillaume Bilodeau
<guillaume.bilodeau at gmail.com> wrote:
> We will try turning off connection keep-alive to see how Apache will react.
> ?However, isn't turning this off going to have a disastrous impact on
> connection performance, especially since all traffic will be SSL?
>
> On Thu, Apr 14, 2011 at 3:19 PM, Ivan Ristic <ivan.ristic at gmail.com> wrote:
>>
>> Yes, it's probably because of keep-alives. Sounds like a bug in the
>> reqtimeout module, because, if the connection stays open, the module
>> isn't achieving much.
>>
>> IIRC, ModSecurity will turn off keep-alives on a connection on which it
>> blocks.
>>
>>
>> On Thu, Apr 14, 2011 at 8:11 PM, Guillaume Bilodeau
>> <guillaume.bilodeau at gmail.com> wrote:
>> > Hi Ryan,
>> > We installed WireShark and started sniffing on all traffic. ?It seems
>> > that
>> > Apache is returning a 200 status code instead of a 408 when the request
>> > reaches 30 seconds, so from what I understand ModSecurity can't do much
>> > about that. ?The funny thing is, if we follow one of the TCP streams, we
>> > see
>> > that http_dos_cli keeps sending data even after receiving the 200 code.
>> > ?Maybe something to do with ?keep-alive connections?
>> > Cheers,
>> > GB
>> > On Thu, Apr 14, 2011 at 2:12 PM, Ryan Barnett <RBarnett at trustwave.com>
>> > wrote:
>> >>
>> >> OK, if mod_reqtimeout is installed and that directive is working, then
>> >> after 30 sec if Apache has not received the entire request body then it
>> >> should terminate the request with a 408 status code. ?The ModSecurity
>> >> CRS
>> >> rules are simply monitoring if/how many 408 alerts are generated by
>> >> Apache
>> >> per client. ?After a certain amount, then ModSecurity will step in on
>> >> subsequent requests in phase:1 and do drop actions.
>> >>
>> >> So, by monitoring your Apache error log while you are running your
>> >> http_dos_cli tool, does Apache generate 408 alerts after 30 secs? ?If
>> >> not,
>> >> then I don't think that the mod_reqtimeout module or directive is
>> >> working.
>> >>
>> >> -Ryan
>> >>
>> >>
>> >> From: Guillaume Bilodeau
>> >> <guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>
>> >> Date: Thu, 14 Apr 2011 13:07:41 -0500
>> >> To: Ryan Barnett
>> >> <rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>>
>> >> Cc:
>> >>
>> >> "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>"
>> >>
>> >> <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>
>> >> Subject: Re: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection
>> >> not behaving as expected
>> >>
>> >> Hi Ryan,
>> >>
>> >> I'm no Apache expert, but AFAICT the req_timeout module is installed.
>> >> ?A
>> >> /server-info shows the req_timeout.c module with the RequestReadTimeout
>> >> parameter.
>> >>
>> >> Thanks,
>> >> GB
>> >>
>> >> On Thu, Apr 14, 2011 at 1:56 PM, Ryan Barnett
>> >> <RBarnett at trustwave.com<mailto:RBarnett at trustwave.com>> wrote:
>> >> Did you install the reqtimeout module?
>> >>
>> >> #
>> >> # Mitigate Slow HTTP POST attacks
>> >> #
>> >> # Must have the mod_reqtimeout module installed
>> >> # You should adjust the RequestReadTimeout body directive setting to a
>> >> limit
>> >> # that will allow any legitimate slow clients or large file uplaods.
>> >> #
>> >> <IfModule reqtimeout_module>
>> >> RequestReadTimeout body=30
>> >> </IfModule>
>> >>
>> >> -Ryan
>> >>
>> >>
>> >>
>> >> From: Guillaume Bilodeau
>> >>
>> >> <guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>>
>> >> Date: Thu, 14 Apr 2011 12:33:52 -0500
>> >> To:
>> >>
>> >> "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>"
>> >>
>> >> <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>>
>> >> Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
>> >> behaving as expected
>> >>
>> >> Hi all,
>> >>
>> >> We are trying to setup the OWASP Core Rule Set to protect our
>> >> application
>> >> from Slow HTTP DOS attacks.
>> >>
>> >> We have setup ModSecurity 2.5.13 on our Apache 2.2.17 instance, loaded
>> >> the
>> >> module, and included all CRS base rules plus
>> >> modsecurity_crs_11_slow_dos_protection.conf. ?We didn't change the
>> >> settings
>> >> defined in the conf file, so SecReadStateLimit is set to 5 and
>> >> RequestReadTimeout is set to body=30. ?We are using the http_dos_cli
>> >> command
>> >> line tool to do our tests, with the connection parameter set to 500.
>> >>
>> >> When running the slow-headers test, ModSecurity seems to be protecting
>> >> the
>> >> application correctly, dropping most (all?) requests from the tester's
>> >> IP
>> >> and allowing requests from a different IP to be served. ?However, when
>> >> running the slow-post test, ModSecurity doesn't seem to be doing
>> >> anything.
>> >> ?From what I understand, the test successfully creates the 500
>> >> connections
>> >> and keeps them open; none of them are dropped. ?Requests coming from a
>> >> different IP are not served and eventually time out. ?A tail -f
>> >> error_log
>> >> shows nothing except the eventual message on MaxClients (set to 300
>> >> now)
>> >> being reached. ?Interestingly, when we kill the http_dos_cli process,
>> >> the
>> >> error_log is then flooded with hundreds of entries such as this:
>> >>
>> >>
>> >> [Mon Nov 22 17:44:46 2010] [warn] ModSecurity: Access denied with code
>> >> 400.
>> >> Too many connections [6] of 5 allowed in READ state from 211.144.112.20
>> >> -
>> >> Possible DoS Consumption Attack [Rejected]
>> >>
>> >> (this has been taken from the SpiderLabs blog entry, dates and IPs are
>> >> obviously different)
>> >>
>> >> Any idea on why this isn't behaving like we're expecting it to be?
>> >>
>> >> Thanks!
>> >> GB
>> >>
>> >>
>> >>
>> >>
>> >
>> >
>> > _______________________________________________
>> > Owasp-modsecurity-core-rule-set mailing list
>> > Owasp-modsecurity-core-rule-set at lists.owasp.org
>> > https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>> >
>> >
>>
>>
>>
>> --
>> Ivan Risti?
>
>
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>
>

From guillaume.bilodeau at gmail.com  Sat Apr 16 09:43:28 2011
From: guillaume.bilodeau at gmail.com (Guillaume Bilodeau)
Date: Sat, 16 Apr 2011 09:43:28 -0400
Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
 behaving as expected
In-Reply-To: <BANLkTimWkMgO93hKoiBQ8G5FCwzVGXr4oA@mail.gmail.com>
References: <BANLkTimBWTGjsvmjWYFF11qGzotUQ1o_bQ@mail.gmail.com>
	<C9CCB08D.1E7EC%rbarnett@trustwave.com>
	<BANLkTinT0vLkL4KUw_A-qjvHHjarahaazg@mail.gmail.com>
	<BANLkTik_H1-6gSvwpRHkaRDrSN19bfu5gQ@mail.gmail.com>
	<BANLkTim8ZhSQG4W66RU8SbZwmOYnk5Bdcg@mail.gmail.com>
	<BANLkTimWkMgO93hKoiBQ8G5FCwzVGXr4oA@mail.gmail.com>
Message-ID: <BANLkTi=ND-4Qxb5gdpak3tWuYp7eUFTHTQ@mail.gmail.com>

A little more information on the 200 return code:

It seems that mod_reqtimeout is not closing the connection after the
20 seconds, but rather truncating the request and letting it go through.
 So the request is actually processed, and since the URL is referring to
an actual resource, a 200 code is returned.

Surely there must be a problem with our configuration?  Or maybe our Apache
build?

Cheers,
GB

On Sat, Apr 16, 2011 at 12:55 AM, Brian Rectanus <brectanu at gmail.com> wrote:

> Probably not "disastrous" :)  You have the overhead of the TCP 3-way
> handshake and also the shutdown, but the browsers should be using SSL
> session resumption, which is not connection based.  It uses cached SSL
> session IDs and should be reused on each connection up to the timeout
> - just make sure this is enabled in the Apache config.  Personally, I
> find that about 3 second timeouts w/low request limit works well for
> keepalives, so it may be enough to just limit the keepalive timeout
> and number of requests  (say 3 second timeout w/9 requests limit
> instead of completely disabling them).  It really depends on your
> latency requirements for your site.
>
> -B
>
> On Thu, Apr 14, 2011 at 2:37 PM, Guillaume Bilodeau
> <guillaume.bilodeau at gmail.com> wrote:
> > We will try turning off connection keep-alive to see how Apache will
> react.
> >  However, isn't turning this off going to have a disastrous impact on
> > connection performance, especially since all traffic will be SSL?
> >
> > On Thu, Apr 14, 2011 at 3:19 PM, Ivan Ristic <ivan.ristic at gmail.com>
> wrote:
> >>
> >> Yes, it's probably because of keep-alives. Sounds like a bug in the
> >> reqtimeout module, because, if the connection stays open, the module
> >> isn't achieving much.
> >>
> >> IIRC, ModSecurity will turn off keep-alives on a connection on which it
> >> blocks.
> >>
> >>
> >> On Thu, Apr 14, 2011 at 8:11 PM, Guillaume Bilodeau
> >> <guillaume.bilodeau at gmail.com> wrote:
> >> > Hi Ryan,
> >> > We installed WireShark and started sniffing on all traffic.  It seems
> >> > that
> >> > Apache is returning a 200 status code instead of a 408 when the
> request
> >> > reaches 30 seconds, so from what I understand ModSecurity can't do
> much
> >> > about that.  The funny thing is, if we follow one of the TCP streams,
> we
> >> > see
> >> > that http_dos_cli keeps sending data even after receiving the 200
> code.
> >> >  Maybe something to do with  keep-alive connections?
> >> > Cheers,
> >> > GB
> >> > On Thu, Apr 14, 2011 at 2:12 PM, Ryan Barnett <RBarnett at trustwave.com
> >
> >> > wrote:
> >> >>
> >> >> OK, if mod_reqtimeout is installed and that directive is working,
> then
> >> >> after 30 sec if Apache has not received the entire request body then
> it
> >> >> should terminate the request with a 408 status code.  The ModSecurity
> >> >> CRS
> >> >> rules are simply monitoring if/how many 408 alerts are generated by
> >> >> Apache
> >> >> per client.  After a certain amount, then ModSecurity will step in on
> >> >> subsequent requests in phase:1 and do drop actions.
> >> >>
> >> >> So, by monitoring your Apache error log while you are running your
> >> >> http_dos_cli tool, does Apache generate 408 alerts after 30 secs?  If
> >> >> not,
> >> >> then I don't think that the mod_reqtimeout module or directive is
> >> >> working.
> >> >>
> >> >> -Ryan
> >> >>
> >> >>
> >> >> From: Guillaume Bilodeau
> >> >> <guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>
> >> >> Date: Thu, 14 Apr 2011 13:07:41 -0500
> >> >> To: Ryan Barnett
> >> >> <rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>>
> >> >> Cc:
> >> >>
> >> >> "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>"
> >> >>
> >> >> <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>
> >> >> Subject: Re: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS
> protection
> >> >> not behaving as expected
> >> >>
> >> >> Hi Ryan,
> >> >>
> >> >> I'm no Apache expert, but AFAICT the req_timeout module is installed.
> >> >>  A
> >> >> /server-info shows the req_timeout.c module with the
> RequestReadTimeout
> >> >> parameter.
> >> >>
> >> >> Thanks,
> >> >> GB
> >> >>
> >> >> On Thu, Apr 14, 2011 at 1:56 PM, Ryan Barnett
> >> >> <RBarnett at trustwave.com<mailto:RBarnett at trustwave.com>> wrote:
> >> >> Did you install the reqtimeout module?
> >> >>
> >> >> #
> >> >> # Mitigate Slow HTTP POST attacks
> >> >> #
> >> >> # Must have the mod_reqtimeout module installed
> >> >> # You should adjust the RequestReadTimeout body directive setting to
> a
> >> >> limit
> >> >> # that will allow any legitimate slow clients or large file uplaods.
> >> >> #
> >> >> <IfModule reqtimeout_module>
> >> >> RequestReadTimeout body=30
> >> >> </IfModule>
> >> >>
> >> >> -Ryan
> >> >>
> >> >>
> >> >>
> >> >> From: Guillaume Bilodeau
> >> >>
> >> >> <guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com
> ><mailto:guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com
> >>>
> >> >> Date: Thu, 14 Apr 2011 12:33:52 -0500
> >> >> To:
> >> >>
> >> >> "owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>"
> >> >>
> >> >> <owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>>
> >> >> Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection
> not
> >> >> behaving as expected
> >> >>
> >> >> Hi all,
> >> >>
> >> >> We are trying to setup the OWASP Core Rule Set to protect our
> >> >> application
> >> >> from Slow HTTP DOS attacks.
> >> >>
> >> >> We have setup ModSecurity 2.5.13 on our Apache 2.2.17 instance,
> loaded
> >> >> the
> >> >> module, and included all CRS base rules plus
> >> >> modsecurity_crs_11_slow_dos_protection.conf.  We didn't change the
> >> >> settings
> >> >> defined in the conf file, so SecReadStateLimit is set to 5 and
> >> >> RequestReadTimeout is set to body=30.  We are using the http_dos_cli
> >> >> command
> >> >> line tool to do our tests, with the connection parameter set to 500.
> >> >>
> >> >> When running the slow-headers test, ModSecurity seems to be
> protecting
> >> >> the
> >> >> application correctly, dropping most (all?) requests from the
> tester's
> >> >> IP
> >> >> and allowing requests from a different IP to be served.  However,
> when
> >> >> running the slow-post test, ModSecurity doesn't seem to be doing
> >> >> anything.
> >> >>  From what I understand, the test successfully creates the 500
> >> >> connections
> >> >> and keeps them open; none of them are dropped.  Requests coming from
> a
> >> >> different IP are not served and eventually time out.  A tail -f
> >> >> error_log
> >> >> shows nothing except the eventual message on MaxClients (set to 300
> >> >> now)
> >> >> being reached.  Interestingly, when we kill the http_dos_cli process,
> >> >> the
> >> >> error_log is then flooded with hundreds of entries such as this:
> >> >>
> >> >>
> >> >> [Mon Nov 22 17:44:46 2010] [warn] ModSecurity: Access denied with
> code
> >> >> 400.
> >> >> Too many connections [6] of 5 allowed in READ state from
> 211.144.112.20
> >> >> -
> >> >> Possible DoS Consumption Attack [Rejected]
> >> >>
> >> >> (this has been taken from the SpiderLabs blog entry, dates and IPs
> are
> >> >> obviously different)
> >> >>
> >> >> Any idea on why this isn't behaving like we're expecting it to be?
> >> >>
> >> >> Thanks!
> >> >> GB
> >> >>
> >> >>
> >> >>
> >> >>
> >> >
> >> >
> >> > _______________________________________________
> >> > Owasp-modsecurity-core-rule-set mailing list
> >> > Owasp-modsecurity-core-rule-set at lists.owasp.org
> >> >
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
> >> >
> >> >
> >>
> >>
> >>
> >> --
> >> Ivan Risti?
> >
> >
> > _______________________________________________
> > Owasp-modsecurity-core-rule-set mailing list
> > Owasp-modsecurity-core-rule-set at lists.owasp.org
> > https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
> >
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110416/71271f4d/attachment-0001.html 

From RBarnett at trustwave.com  Sat Apr 16 09:44:55 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Sat, 16 Apr 2011 08:44:55 -0500
Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
 behaving as expected
In-Reply-To: <BANLkTi=ND-4Qxb5gdpak3tWuYp7eUFTHTQ@mail.gmail.com>
References: <BANLkTimBWTGjsvmjWYFF11qGzotUQ1o_bQ@mail.gmail.com>
	<C9CCB08D.1E7EC%rbarnett@trustwave.com>
	<BANLkTinT0vLkL4KUw_A-qjvHHjarahaazg@mail.gmail.com>
	<BANLkTik_H1-6gSvwpRHkaRDrSN19bfu5gQ@mail.gmail.com>
	<BANLkTim8ZhSQG4W66RU8SbZwmOYnk5Bdcg@mail.gmail.com>
	<BANLkTimWkMgO93hKoiBQ8G5FCwzVGXr4oA@mail.gmail.com>
	<BANLkTi=ND-4Qxb5gdpak3tWuYp7eUFTHTQ@mail.gmail.com>
Message-ID: <A93DF055-511D-48CB-81B3-F1870C73BEE0@trustwave.com>

What apache version are you using?

On Apr 16, 2011, at 9:43 AM, "Guillaume Bilodeau" <guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>> wrote:

A little more information on the 200 return code:

It seems that mod_reqtimeout is not closing the connection after the 20 seconds, but rather truncating the request and letting it go through.  So the request is actually processed, and since the URL is referring to an actual resource, a 200 code is returned.

Surely there must be a problem with our configuration?  Or maybe our Apache build?

Cheers,
GB

On Sat, Apr 16, 2011 at 12:55 AM, Brian Rectanus <<mailto:brectanu at gmail.com>brectanu at gmail.com<mailto:brectanu at gmail.com>> wrote:
Probably not "disastrous" :)  You have the overhead of the TCP 3-way
handshake and also the shutdown, but the browsers should be using SSL
session resumption, which is not connection based.  It uses cached SSL
session IDs and should be reused on each connection up to the timeout
- just make sure this is enabled in the Apache config.  Personally, I
find that about 3 second timeouts w/low request limit works well for
keepalives, so it may be enough to just limit the keepalive timeout
and number of requests  (say 3 second timeout w/9 requests limit
instead of completely disabling them).  It really depends on your
latency requirements for your site.

-B

On Thu, Apr 14, 2011 at 2:37 PM, Guillaume Bilodeau
<<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>> wrote:
> We will try turning off connection keep-alive to see how Apache will react.
>  However, isn't turning this off going to have a disastrous impact on
> connection performance, especially since all traffic will be SSL?
>
> On Thu, Apr 14, 2011 at 3:19 PM, Ivan Ristic <<mailto:ivan.ristic at gmail.com>ivan.ristic at gmail.com<mailto:ivan.ristic at gmail.com>> wrote:
>>
>> Yes, it's probably because of keep-alives. Sounds like a bug in the
>> reqtimeout module, because, if the connection stays open, the module
>> isn't achieving much.
>>
>> IIRC, ModSecurity will turn off keep-alives on a connection on which it
>> blocks.
>>
>>
>> On Thu, Apr 14, 2011 at 8:11 PM, Guillaume Bilodeau
>> <<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>> wrote:
>> > Hi Ryan,
>> > We installed WireShark and started sniffing on all traffic.  It seems
>> > that
>> > Apache is returning a 200 status code instead of a 408 when the request
>> > reaches 30 seconds, so from what I understand ModSecurity can't do much
>> > about that.  The funny thing is, if we follow one of the TCP streams, we
>> > see
>> > that http_dos_cli keeps sending data even after receiving the 200 code.
>> >  Maybe something to do with  keep-alive connections?
>> > Cheers,
>> > GB
>> > On Thu, Apr 14, 2011 at 2:12 PM, Ryan Barnett <<mailto:RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:RBarnett at trustwave.com>>
>> > wrote:
>> >>
>> >> OK, if mod_reqtimeout is installed and that directive is working, then
>> >> after 30 sec if Apache has not received the entire request body then it
>> >> should terminate the request with a 408 status code.  The ModSecurity
>> >> CRS
>> >> rules are simply monitoring if/how many 408 alerts are generated by
>> >> Apache
>> >> per client.  After a certain amount, then ModSecurity will step in on
>> >> subsequent requests in phase:1 and do drop actions.
>> >>
>> >> So, by monitoring your Apache error log while you are running your
>> >> http_dos_cli tool, does Apache generate 408 alerts after 30 secs?  If
>> >> not,
>> >> then I don't think that the mod_reqtimeout module or directive is
>> >> working.
>> >>
>> >> -Ryan
>> >>
>> >>
>> >> From: Guillaume Bilodeau
>> >> <<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>>
>> >> Date: Thu, 14 Apr 2011 13:07:41 -0500
>> >> To: Ryan Barnett
>> >> <<mailto:rbarnett at trustwave.com>rbarnett at trustwave.com<mailto:rbarnett at trustwave.com><mailto:<mailto:rbarnett at trustwave.com>rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>>>
>> >> Cc:
>> >>
>> >> "<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>"
>> >>
>> >> <<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>>
>> >> Subject: Re: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection
>> >> not behaving as expected
>> >>
>> >> Hi Ryan,
>> >>
>> >> I'm no Apache expert, but AFAICT the req_timeout module is installed.
>> >>  A
>> >> /server-info shows the req_timeout.c module with the RequestReadTimeout
>> >> parameter.
>> >>
>> >> Thanks,
>> >> GB
>> >>
>> >> On Thu, Apr 14, 2011 at 1:56 PM, Ryan Barnett
>> >> <<mailto:RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:RBarnett at trustwave.com><mailto:<mailto:RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:RBarnett at trustwave.com>>> wrote:
>> >> Did you install the reqtimeout module?
>> >>
>> >> #
>> >> # Mitigate Slow HTTP POST attacks
>> >> #
>> >> # Must have the mod_reqtimeout module installed
>> >> # You should adjust the RequestReadTimeout body directive setting to a
>> >> limit
>> >> # that will allow any legitimate slow clients or large file uplaods.
>> >> #
>> >> <IfModule reqtimeout_module>
>> >> RequestReadTimeout body=30
>> >> </IfModule>
>> >>
>> >> -Ryan
>> >>
>> >>
>> >>
>> >> From: Guillaume Bilodeau
>> >>
>> >> <<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>><mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>>>
>> >> Date: Thu, 14 Apr 2011 12:33:52 -0500
>> >> To:
>> >>
>> >> "<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>>"
>> >>
>> >> <<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>>>
>> >> Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
>> >> behaving as expected
>> >>
>> >> Hi all,
>> >>
>> >> We are trying to setup the OWASP Core Rule Set to protect our
>> >> application
>> >> from Slow HTTP DOS attacks.
>> >>
>> >> We have setup ModSecurity 2.5.13 on our Apache 2.2.17 instance, loaded
>> >> the
>> >> module, and included all CRS base rules plus
>> >> modsecurity_crs_11_slow_dos_protection.conf.  We didn't change the
>> >> settings
>> >> defined in the conf file, so SecReadStateLimit is set to 5 and
>> >> RequestReadTimeout is set to body=30.  We are using the http_dos_cli
>> >> command
>> >> line tool to do our tests, with the connection parameter set to 500.
>> >>
>> >> When running the slow-headers test, ModSecurity seems to be protecting
>> >> the
>> >> application correctly, dropping most (all?) requests from the tester's
>> >> IP
>> >> and allowing requests from a different IP to be served.  However, when
>> >> running the slow-post test, ModSecurity doesn't seem to be doing
>> >> anything.
>> >>  From what I understand, the test successfully creates the 500
>> >> connections
>> >> and keeps them open; none of them are dropped.  Requests coming from a
>> >> different IP are not served and eventually time out.  A tail -f
>> >> error_log
>> >> shows nothing except the eventual message on MaxClients (set to 300
>> >> now)
>> >> being reached.  Interestingly, when we kill the http_dos_cli process,
>> >> the
>> >> error_log is then flooded with hundreds of entries such as this:
>> >>
>> >>
>> >> [Mon Nov 22 17:44:46 2010] [warn] ModSecurity: Access denied with code
>> >> 400.
>> >> Too many connections [6] of 5 allowed in READ state from 211.144.112.20
>> >> -
>> >> Possible DoS Consumption Attack [Rejected]
>> >>
>> >> (this has been taken from the SpiderLabs blog entry, dates and IPs are
>> >> obviously different)
>> >>
>> >> Any idea on why this isn't behaving like we're expecting it to be?
>> >>
>> >> Thanks!
>> >> GB
>> >>
>> >>
>> >>
>> >>
>> >
>> >
>> > _______________________________________________
>> > Owasp-modsecurity-core-rule-set mailing list
>> > <mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org> Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>
>> > <https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>> >
>> >
>>
>>
>>
>> --
>> Ivan Risti?
>
>
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> <mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org> Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>
> <https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>
>

_______________________________________________
Owasp-modsecurity-core-rule-set mailing list
Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>
https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set

________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.

From guillaume.bilodeau at gmail.com  Sat Apr 16 09:58:20 2011
From: guillaume.bilodeau at gmail.com (Guillaume Bilodeau)
Date: Sat, 16 Apr 2011 09:58:20 -0400
Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
 behaving as expected
In-Reply-To: <A93DF055-511D-48CB-81B3-F1870C73BEE0@trustwave.com>
References: <BANLkTimBWTGjsvmjWYFF11qGzotUQ1o_bQ@mail.gmail.com>
	<C9CCB08D.1E7EC%rbarnett@trustwave.com>
	<BANLkTinT0vLkL4KUw_A-qjvHHjarahaazg@mail.gmail.com>
	<BANLkTik_H1-6gSvwpRHkaRDrSN19bfu5gQ@mail.gmail.com>
	<BANLkTim8ZhSQG4W66RU8SbZwmOYnk5Bdcg@mail.gmail.com>
	<BANLkTimWkMgO93hKoiBQ8G5FCwzVGXr4oA@mail.gmail.com>
	<BANLkTi=ND-4Qxb5gdpak3tWuYp7eUFTHTQ@mail.gmail.com>
	<A93DF055-511D-48CB-81B3-F1870C73BEE0@trustwave.com>
Message-ID: <BANLkTi=9pNrixNSR6asB-Jp8Np_10-2FbQ@mail.gmail.com>

We're using an Apache 2.2.17 that was built from scratch on a Solaris box.

On Sat, Apr 16, 2011 at 9:44 AM, Ryan Barnett <RBarnett at trustwave.com>wrote:

> What apache version are you using?
>
> On Apr 16, 2011, at 9:43 AM, "Guillaume Bilodeau" <
> guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>> wrote:
>
> A little more information on the 200 return code:
>
> It seems that mod_reqtimeout is not closing the connection after the 20
> seconds, but rather truncating the request and letting it go through.  So
> the request is actually processed, and since the URL is referring to an
> actual resource, a 200 code is returned.
>
> Surely there must be a problem with our configuration?  Or maybe our Apache
> build?
>
> Cheers,
> GB
>
> On Sat, Apr 16, 2011 at 12:55 AM, Brian Rectanus <<mailto:
> brectanu at gmail.com>brectanu at gmail.com<mailto:brectanu at gmail.com>> wrote:
> Probably not "disastrous" :)  You have the overhead of the TCP 3-way
> handshake and also the shutdown, but the browsers should be using SSL
> session resumption, which is not connection based.  It uses cached SSL
> session IDs and should be reused on each connection up to the timeout
> - just make sure this is enabled in the Apache config.  Personally, I
> find that about 3 second timeouts w/low request limit works well for
> keepalives, so it may be enough to just limit the keepalive timeout
> and number of requests  (say 3 second timeout w/9 requests limit
> instead of completely disabling them).  It really depends on your
> latency requirements for your site.
>
> -B
>
> On Thu, Apr 14, 2011 at 2:37 PM, Guillaume Bilodeau
> <<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com>> wrote:
> > We will try turning off connection keep-alive to see how Apache will
> react.
> >  However, isn't turning this off going to have a disastrous impact on
> > connection performance, especially since all traffic will be SSL?
> >
> > On Thu, Apr 14, 2011 at 3:19 PM, Ivan Ristic <<mailto:
> ivan.ristic at gmail.com>ivan.ristic at gmail.com<mailto:ivan.ristic at gmail.com>>
> wrote:
> >>
> >> Yes, it's probably because of keep-alives. Sounds like a bug in the
> >> reqtimeout module, because, if the connection stays open, the module
> >> isn't achieving much.
> >>
> >> IIRC, ModSecurity will turn off keep-alives on a connection on which it
> >> blocks.
> >>
> >>
> >> On Thu, Apr 14, 2011 at 8:11 PM, Guillaume Bilodeau
> >> <<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com
> <mailto:guillaume.bilodeau at gmail.com>> wrote:
> >> > Hi Ryan,
> >> > We installed WireShark and started sniffing on all traffic.  It seems
> >> > that
> >> > Apache is returning a 200 status code instead of a 408 when the
> request
> >> > reaches 30 seconds, so from what I understand ModSecurity can't do
> much
> >> > about that.  The funny thing is, if we follow one of the TCP streams,
> we
> >> > see
> >> > that http_dos_cli keeps sending data even after receiving the 200
> code.
> >> >  Maybe something to do with  keep-alive connections?
> >> > Cheers,
> >> > GB
> >> > On Thu, Apr 14, 2011 at 2:12 PM, Ryan Barnett <<mailto:
> RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:
> RBarnett at trustwave.com>>
> >> > wrote:
> >> >>
> >> >> OK, if mod_reqtimeout is installed and that directive is working,
> then
> >> >> after 30 sec if Apache has not received the entire request body then
> it
> >> >> should terminate the request with a 408 status code.  The ModSecurity
> >> >> CRS
> >> >> rules are simply monitoring if/how many 408 alerts are generated by
> >> >> Apache
> >> >> per client.  After a certain amount, then ModSecurity will step in on
> >> >> subsequent requests in phase:1 and do drop actions.
> >> >>
> >> >> So, by monitoring your Apache error log while you are running your
> >> >> http_dos_cli tool, does Apache generate 408 alerts after 30 secs?  If
> >> >> not,
> >> >> then I don't think that the mod_reqtimeout module or directive is
> >> >> working.
> >> >>
> >> >> -Ryan
> >> >>
> >> >>
> >> >> From: Guillaume Bilodeau
> >> >> <<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com
> <mailto:guillaume.bilodeau at gmail.com><mailto:<mailto:
> guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com>>>
> >> >> Date: Thu, 14 Apr 2011 13:07:41 -0500
> >> >> To: Ryan Barnett
> >> >> <<mailto:rbarnett at trustwave.com>rbarnett at trustwave.com<mailto:
> rbarnett at trustwave.com><mailto:<mailto:rbarnett at trustwave.com>
> rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>>>
> >> >> Cc:
> >> >>
> >> >> "<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>"
> >> >>
> >> >> <<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>>
> >> >> Subject: Re: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS
> protection
> >> >> not behaving as expected
> >> >>
> >> >> Hi Ryan,
> >> >>
> >> >> I'm no Apache expert, but AFAICT the req_timeout module is installed.
> >> >>  A
> >> >> /server-info shows the req_timeout.c module with the
> RequestReadTimeout
> >> >> parameter.
> >> >>
> >> >> Thanks,
> >> >> GB
> >> >>
> >> >> On Thu, Apr 14, 2011 at 1:56 PM, Ryan Barnett
> >> >> <<mailto:RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:
> RBarnett at trustwave.com><mailto:<mailto:RBarnett at trustwave.com>
> RBarnett at trustwave.com<mailto:RBarnett at trustwave.com>>> wrote:
> >> >> Did you install the reqtimeout module?
> >> >>
> >> >> #
> >> >> # Mitigate Slow HTTP POST attacks
> >> >> #
> >> >> # Must have the mod_reqtimeout module installed
> >> >> # You should adjust the RequestReadTimeout body directive setting to
> a
> >> >> limit
> >> >> # that will allow any legitimate slow clients or large file uplaods.
> >> >> #
> >> >> <IfModule reqtimeout_module>
> >> >> RequestReadTimeout body=30
> >> >> </IfModule>
> >> >>
> >> >> -Ryan
> >> >>
> >> >>
> >> >>
> >> >> From: Guillaume Bilodeau
> >> >>
> >> >> <<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com
> <mailto:guillaume.bilodeau at gmail.com><mailto:<mailto:
> guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com>><mailto:<mailto:guillaume.bilodeau at gmail.com
> >guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:
> <mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com>>>>
> >> >> Date: Thu, 14 Apr 2011 12:33:52 -0500
> >> >> To:
> >> >>
> >> >> "<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>>"
> >> >>
> >> >> <<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>>>
> >> >> Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection
> not
> >> >> behaving as expected
> >> >>
> >> >> Hi all,
> >> >>
> >> >> We are trying to setup the OWASP Core Rule Set to protect our
> >> >> application
> >> >> from Slow HTTP DOS attacks.
> >> >>
> >> >> We have setup ModSecurity 2.5.13 on our Apache 2.2.17 instance,
> loaded
> >> >> the
> >> >> module, and included all CRS base rules plus
> >> >> modsecurity_crs_11_slow_dos_protection.conf.  We didn't change the
> >> >> settings
> >> >> defined in the conf file, so SecReadStateLimit is set to 5 and
> >> >> RequestReadTimeout is set to body=30.  We are using the http_dos_cli
> >> >> command
> >> >> line tool to do our tests, with the connection parameter set to 500.
> >> >>
> >> >> When running the slow-headers test, ModSecurity seems to be
> protecting
> >> >> the
> >> >> application correctly, dropping most (all?) requests from the
> tester's
> >> >> IP
> >> >> and allowing requests from a different IP to be served.  However,
> when
> >> >> running the slow-post test, ModSecurity doesn't seem to be doing
> >> >> anything.
> >> >>  From what I understand, the test successfully creates the 500
> >> >> connections
> >> >> and keeps them open; none of them are dropped.  Requests coming from
> a
> >> >> different IP are not served and eventually time out.  A tail -f
> >> >> error_log
> >> >> shows nothing except the eventual message on MaxClients (set to 300
> >> >> now)
> >> >> being reached.  Interestingly, when we kill the http_dos_cli process,
> >> >> the
> >> >> error_log is then flooded with hundreds of entries such as this:
> >> >>
> >> >>
> >> >> [Mon Nov 22 17:44:46 2010] [warn] ModSecurity: Access denied with
> code
> >> >> 400.
> >> >> Too many connections [6] of 5 allowed in READ state from
> 211.144.112.20
> >> >> -
> >> >> Possible DoS Consumption Attack [Rejected]
> >> >>
> >> >> (this has been taken from the SpiderLabs blog entry, dates and IPs
> are
> >> >> obviously different)
> >> >>
> >> >> Any idea on why this isn't behaving like we're expecting it to be?
> >> >>
> >> >> Thanks!
> >> >> GB
> >> >>
> >> >>
> >> >>
> >> >>
> >> >
> >> >
> >> > _______________________________________________
> >> > Owasp-modsecurity-core-rule-set mailing list
> >> > <mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>
> Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> Owasp-modsecurity-core-rule-set at lists.owasp.org>
> >> > <
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set>
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
> >> >
> >> >
> >>
> >>
> >>
> >> --
> >> Ivan Risti?
> >
> >
> > _______________________________________________
> > Owasp-modsecurity-core-rule-set mailing list
> > <mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>
> Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> Owasp-modsecurity-core-rule-set at lists.owasp.org>
> > <
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set>
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
> >
> >
>
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> Owasp-modsecurity-core-rule-set at lists.owasp.org>
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>
> ________________________________
> This transmission may contain information that is privileged, confidential,
> and/or exempt from disclosure under applicable law. If you are not the
> intended recipient, you are hereby notified that any disclosure, copying,
> distribution, or use of the information contained herein (including any
> reliance thereon) is STRICTLY PROHIBITED. If you received this transmission
> in error, please immediately contact the sender and destroy the material in
> its entirety, whether in electronic or hard copy format.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110416/c5a4afbc/attachment-0001.html 

From RBarnett at trustwave.com  Sat Apr 16 10:18:46 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Sat, 16 Apr 2011 09:18:46 -0500
Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
 behaving as expected
In-Reply-To: <BANLkTi=9pNrixNSR6asB-Jp8Np_10-2FbQ@mail.gmail.com>
References: <BANLkTimBWTGjsvmjWYFF11qGzotUQ1o_bQ@mail.gmail.com>
	<C9CCB08D.1E7EC%rbarnett@trustwave.com>
	<BANLkTinT0vLkL4KUw_A-qjvHHjarahaazg@mail.gmail.com>
	<BANLkTik_H1-6gSvwpRHkaRDrSN19bfu5gQ@mail.gmail.com>
	<BANLkTim8ZhSQG4W66RU8SbZwmOYnk5Bdcg@mail.gmail.com>
	<BANLkTimWkMgO93hKoiBQ8G5FCwzVGXr4oA@mail.gmail.com>
	<BANLkTi=ND-4Qxb5gdpak3tWuYp7eUFTHTQ@mail.gmail.com>
	<A93DF055-511D-48CB-81B3-F1870C73BEE0@trustwave.com>
	<BANLkTi=9pNrixNSR6asB-Jp8Np_10-2FbQ@mail.gmail.com>
Message-ID: <F82041C7-B14D-4427-BD6E-2D117BAC69F0@trustwave.com>

Have you tried using header=timeout  directive against the slow dos tool to prevent slow headers?  Wonder if that part works for you or if it also is returning the 200. If that doesn't work then maybe it is related to Solaris OS. These settings worked for me on Mac OSX and Ubuntu.

On Apr 16, 2011, at 9:58 AM, "Guillaume Bilodeau" <guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>> wrote:

We're using an Apache 2.2.17 that was built from scratch on a Solaris box.

On Sat, Apr 16, 2011 at 9:44 AM, Ryan Barnett <<mailto:RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:RBarnett at trustwave.com>> wrote:
What apache version are you using?

On Apr 16, 2011, at 9:43 AM, "Guillaume Bilodeau" <<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>> wrote:

A little more information on the 200 return code:

It seems that mod_reqtimeout is not closing the connection after the 20 seconds, but rather truncating the request and letting it go through.  So the request is actually processed, and since the URL is referring to an actual resource, a 200 code is returned.

Surely there must be a problem with our configuration?  Or maybe our Apache build?

Cheers,
GB

On Sat, Apr 16, 2011 at 12:55 AM, Brian Rectanus <<mailto:<mailto:brectanu at gmail.com>brectanu at gmail.com<mailto:brectanu at gmail.com>><mailto:brectanu at gmail.com>brectanu at gmail.com<mailto:brectanu at gmail.com><mailto:<mailto:brectanu at gmail.com>brectanu at gmail.com<mailto:brectanu at gmail.com>>> wrote:
Probably not "disastrous" :)  You have the overhead of the TCP 3-way
handshake and also the shutdown, but the browsers should be using SSL
session resumption, which is not connection based.  It uses cached SSL
session IDs and should be reused on each connection up to the timeout
- just make sure this is enabled in the Apache config.  Personally, I
find that about 3 second timeouts w/low request limit works well for
keepalives, so it may be enough to just limit the keepalive timeout
and number of requests  (say 3 second timeout w/9 requests limit
instead of completely disabling them).  It really depends on your
latency requirements for your site.

-B

On Thu, Apr 14, 2011 at 2:37 PM, Guillaume Bilodeau
<<mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>><mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>> wrote:
> We will try turning off connection keep-alive to see how Apache will react.
>  However, isn't turning this off going to have a disastrous impact on
> connection performance, especially since all traffic will be SSL?
>
> On Thu, Apr 14, 2011 at 3:19 PM, Ivan Ristic <<mailto:<mailto:ivan.ristic at gmail.com>ivan.ristic at gmail.com<mailto:ivan.ristic at gmail.com>><mailto:ivan.ristic at gmail.com>ivan.ristic at gmail.com<mailto:ivan.ristic at gmail.com><mailto:<mailto:ivan.ristic at gmail.com>ivan.ristic at gmail.com<mailto:ivan.ristic at gmail.com>>> wrote:
>>
>> Yes, it's probably because of keep-alives. Sounds like a bug in the
>> reqtimeout module, because, if the connection stays open, the module
>> isn't achieving much.
>>
>> IIRC, ModSecurity will turn off keep-alives on a connection on which it
>> blocks.
>>
>>
>> On Thu, Apr 14, 2011 at 8:11 PM, Guillaume Bilodeau
>> <<mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>><mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>> wrote:
>> > Hi Ryan,
>> > We installed WireShark and started sniffing on all traffic.  It seems
>> > that
>> > Apache is returning a 200 status code instead of a 408 when the request
>> > reaches 30 seconds, so from what I understand ModSecurity can't do much
>> > about that.  The funny thing is, if we follow one of the TCP streams, we
>> > see
>> > that http_dos_cli keeps sending data even after receiving the 200 code.
>> >  Maybe something to do with  keep-alive connections?
>> > Cheers,
>> > GB
>> > On Thu, Apr 14, 2011 at 2:12 PM, Ryan Barnett <<mailto:<mailto:RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:RBarnett at trustwave.com>><mailto:RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:RBarnett at trustwave.com><mailto:<mailto:RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:RBarnett at trustwave.com>>>
>> > wrote:
>> >>
>> >> OK, if mod_reqtimeout is installed and that directive is working, then
>> >> after 30 sec if Apache has not received the entire request body then it
>> >> should terminate the request with a 408 status code.  The ModSecurity
>> >> CRS
>> >> rules are simply monitoring if/how many 408 alerts are generated by
>> >> Apache
>> >> per client.  After a certain amount, then ModSecurity will step in on
>> >> subsequent requests in phase:1 and do drop actions.
>> >>
>> >> So, by monitoring your Apache error log while you are running your
>> >> http_dos_cli tool, does Apache generate 408 alerts after 30 secs?  If
>> >> not,
>> >> then I don't think that the mod_reqtimeout module or directive is
>> >> working.
>> >>
>> >> -Ryan
>> >>
>> >>
>> >> From: Guillaume Bilodeau
>> >> <<mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>><mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>><mailto:<mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>><mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>>>
>> >> Date: Thu, 14 Apr 2011 13:07:41 -0500
>> >> To: Ryan Barnett
>> >> <<mailto:<mailto:rbarnett at trustwave.com>rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>><mailto:rbarnett at trustwave.com>rbarnett at trustwave.com<mailto:rbarnett at trustwave.com><mailto:<mailto:rbarnett at trustwave.com>rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>><mailto:<mailto:<mailto:rbarnett at trustwave.com>rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>><mailto:rbarnett at trustwave.com>rbarnett at trustwave.com<mailto:rbarnett at trustwave.com><mailto:<mailto:rbarnett at trustwave.com>rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>>>>
>> >> Cc:
>> >>
>> >> "<mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:<mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>>"
>> >>
>> >> <<mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:<mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>>>
>> >> Subject: Re: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection
>> >> not behaving as expected
>> >>
>> >> Hi Ryan,
>> >>
>> >> I'm no Apache expert, but AFAICT the req_timeout module is installed.
>> >>  A
>> >> /server-info shows the req_timeout.c module with the RequestReadTimeout
>> >> parameter.
>> >>
>> >> Thanks,
>> >> GB
>> >>
>> >> On Thu, Apr 14, 2011 at 1:56 PM, Ryan Barnett
>> >> <<mailto:<mailto:RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:RBarnett at trustwave.com>><mailto:RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:RBarnett at trustwave.com><mailto:<mailto:RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:RBarnett at trustwave.com>><mailto:<mailto:<mailto:RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:RBarnett at trustwave.com>><mailto:RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:RBarnett at trustwave.com><mailto:<mailto:RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:RBarnett at trustwave.com>>>> wrote:
>> >> Did you install the reqtimeout module?
>> >>
>> >> #
>> >> # Mitigate Slow HTTP POST attacks
>> >> #
>> >> # Must have the mod_reqtimeout module installed
>> >> # You should adjust the RequestReadTimeout body directive setting to a
>> >> limit
>> >> # that will allow any legitimate slow clients or large file uplaods.
>> >> #
>> >> <IfModule reqtimeout_module>
>> >> RequestReadTimeout body=30
>> >> </IfModule>
>> >>
>> >> -Ryan
>> >>
>> >>
>> >>
>> >> From: Guillaume Bilodeau
>> >>
>> >> <<mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>><mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>><mailto:<mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>><mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>><mailto:<mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>><mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>><mailto:<mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>><mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>>>>
>> >> Date: Thu, 14 Apr 2011 12:33:52 -0500
>> >> To:
>> >>
>> >> "<mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:<mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>><mailto:<mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:<mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>>>"
>> >>
>> >> <<mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:<mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>><mailto:<mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:<mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>>>>>
>> >> Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
>> >> behaving as expected
>> >>
>> >> Hi all,
>> >>
>> >> We are trying to setup the OWASP Core Rule Set to protect our
>> >> application
>> >> from Slow HTTP DOS attacks.
>> >>
>> >> We have setup ModSecurity 2.5.13 on our Apache 2.2.17 instance, loaded
>> >> the
>> >> module, and included all CRS base rules plus
>> >> modsecurity_crs_11_slow_dos_protection.conf.  We didn't change the
>> >> settings
>> >> defined in the conf file, so SecReadStateLimit is set to 5 and
>> >> RequestReadTimeout is set to body=30.  We are using the http_dos_cli
>> >> command
>> >> line tool to do our tests, with the connection parameter set to 500.
>> >>
>> >> When running the slow-headers test, ModSecurity seems to be protecting
>> >> the
>> >> application correctly, dropping most (all?) requests from the tester's
>> >> IP
>> >> and allowing requests from a different IP to be served.  However, when
>> >> running the slow-post test, ModSecurity doesn't seem to be doing
>> >> anything.
>> >>  From what I understand, the test successfully creates the 500
>> >> connections
>> >> and keeps them open; none of them are dropped.  Requests coming from a
>> >> different IP are not served and eventually time out.  A tail -f
>> >> error_log
>> >> shows nothing except the eventual message on MaxClients (set to 300
>> >> now)
>> >> being reached.  Interestingly, when we kill the http_dos_cli process,
>> >> the
>> >> error_log is then flooded with hundreds of entries such as this:
>> >>
>> >>
>> >> [Mon Nov 22 17:44:46 2010] [warn] ModSecurity: Access denied with code
>> >> 400.
>> >> Too many connections [6] of 5 allowed in READ state from 211.144.112.20
>> >> -
>> >> Possible DoS Consumption Attack [Rejected]
>> >>
>> >> (this has been taken from the SpiderLabs blog entry, dates and IPs are
>> >> obviously different)
>> >>
>> >> Any idea on why this isn't behaving like we're expecting it to be?
>> >>
>> >> Thanks!
>> >> GB
>> >>
>> >>
>> >>
>> >>
>> >
>> >
>> > _______________________________________________
>> > Owasp-modsecurity-core-rule-set mailing list
>> > <mailto:<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>> <mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org> Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>>
>> > <<https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set>https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set> <https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>> >
>> >
>>
>>
>>
>> --
>> Ivan Risti?
>
>
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> <mailto:<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>> <mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org> Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>>
> <<https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set>https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set> <https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>
>

_______________________________________________
Owasp-modsecurity-core-rule-set mailing list
<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>>
<https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set>https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set

________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.

_______________________________________________
Owasp-modsecurity-core-rule-set mailing list
Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>
https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set

From lhffjzh at 126.com  Sun Apr 17 21:28:10 2011
From: lhffjzh at 126.com (Haifeng Li)
Date: Mon, 18 Apr 2011 09:28:10 +0800
Subject: [Owasp-modsecurity-core-rule-set] help: Modsecurity 'ARGS' rules
	match 'GET' request but can't match 'POST' request
Message-ID: <B80B1C2AA1CF47839F30DA9742749245@45dae0f317fb4c6>

Hi All,

I'm a jackaroo of Modsecurity, and very interested in Modsecurity Core Rule set.

I am learning about CRS now, I downloaded the modsecurity CRS and investigate it. 
But I found that my 'ARGS' rules only match  'GET' request but can't match 'POST' request.

I downloaded latest rule set package and modsecurity engine, only update following several configuration from downloaded package.

SecDataDir /tmp
SecTmpDir /tmp
SecRuleEngine On
SecDefaultAction "phase:2,deny,log"

And I add a self rule file 'modsecurity_crs_15_customrules.conf' in 'base_rules' directory, 
it only contain below 2 rules.

SecRule ARGS "bruce" "phase:2,deny,t:none,t:lowercase,t:urlDecode,msg:'the attack what ARGS contain Bruce',setvar:'tx.msg=%{rule.msg}'"
SecRule ARGS_POST "bruce" "phase:2,deny,t:none,t:lowercase,t:urlDecode,msg:'the attack what ARGS_POST contain Bruce',setvar:'tx.msg=%{rule.msg}'"

I tested it on web interface 'http://192.168.1.135/app.php?name=Bruce' (modsecurity and httpd installed on this pc, app.php in attachment, a "name" text input area in a form)
Browser show:
Forbidden
You don't have permission to access /app.php on this server.


--------------------------------------------------------------------------------

Apache/2.2.3 (Red Hat) Server at 172.22.14.149 Port 80
 
And the http log is:
ModSecurity: Access denied with code 403 (phase 2). Pattern match "bruce" at ARGS:name. [file "/etc/httpd/modsecurity_crs/base_rules/modsecurity_crs_15_customrules.conf"] [line "3"] [msg "the attack what ARGS contain Bruce"] [hostname "172.22.14.149"] [uri "/app.php"] [unique_id "nOrQFX8AAAEAACpHFRMAAAAC"]

But if I input "Bruce" on on web interface 'http://192.168.1.135/app.php", and click button "submit", the browser redirect "next.php" successful, obviously, the rules are invalid when execute POST request.

Who can help me for this?


Thanks and regards,

-------------- next part --------------
A non-text attachment was scrubbed...
Name: app.php
Type: application/octet-stream
Size: 322 bytes
Desc: not available
Url : https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110418/83d313cd/attachment.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: next.php
Type: application/octet-stream
Size: 655 bytes
Desc: not available
Url : https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110418/83d313cd/attachment-0001.obj 

From RBarnett at trustwave.com  Sun Apr 17 23:17:39 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Sun, 17 Apr 2011 22:17:39 -0500
Subject: [Owasp-modsecurity-core-rule-set] help: Modsecurity 'ARGS'
 rules	match 'GET' request but can't match 'POST' request
In-Reply-To: <B80B1C2AA1CF47839F30DA9742749245@45dae0f317fb4c6>
References: <B80B1C2AA1CF47839F30DA9742749245@45dae0f317fb4c6>
Message-ID: <AE7B1E4C-5107-4EC0-AB3C-4C851698D1DA@trustwave.com>

You need to use SecRequestBodyAccess On. 

I suggest you use this recommended base config -
http://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#A_Recommended_Base_Configuration

Ryan

On Apr 17, 2011, at 9:28 PM, "Haifeng Li" <lhffjzh at 126.com> wrote:

> Hi All,
> 
> I'm a jackaroo of Modsecurity, and very interested in Modsecurity Core Rule set.
> 
> I am learning about CRS now, I downloaded the modsecurity CRS and investigate it. 
> But I found that my 'ARGS' rules only match  'GET' request but can't match 'POST' request.
> 
> I downloaded latest rule set package and modsecurity engine, only update following several configuration from downloaded package.
> 
> SecDataDir /tmp
> SecTmpDir /tmp
> SecRuleEngine On
> SecDefaultAction "phase:2,deny,log"
> 
> And I add a self rule file 'modsecurity_crs_15_customrules.conf' in 'base_rules' directory, 
> it only contain below 2 rules.
> 
> SecRule ARGS "bruce" "phase:2,deny,t:none,t:lowercase,t:urlDecode,msg:'the attack what ARGS contain Bruce',setvar:'tx.msg=%{rule.msg}'"
> SecRule ARGS_POST "bruce" "phase:2,deny,t:none,t:lowercase,t:urlDecode,msg:'the attack what ARGS_POST contain Bruce',setvar:'tx.msg=%{rule.msg}'"
> 
> I tested it on web interface 'http://192.168.1.135/app.php?name=Bruce' (modsecurity and httpd installed on this pc, app.php in attachment, a "name" text input area in a form)
> Browser show:
> Forbidden
> You don't have permission to access /app.php on this server.
> 
> 
> --------------------------------------------------------------------------------
> 
> Apache/2.2.3 (Red Hat) Server at 172.22.14.149 Port 80
> 
> And the http log is:
> ModSecurity: Access denied with code 403 (phase 2). Pattern match "bruce" at ARGS:name. [file "/etc/httpd/modsecurity_crs/base_rules/modsecurity_crs_15_customrules.conf"] [line "3"] [msg "the attack what ARGS contain Bruce"] [hostname "172.22.14.149"] [uri "/app.php"] [unique_id "nOrQFX8AAAEAACpHFRMAAAAC"]
> 
> But if I input "Bruce" on on web interface 'http://192.168.1.135/app.php", and click button "submit", the browser redirect "next.php" successful, obviously, the rules are invalid when execute POST request.
> 
> Who can help me for this?
> 
> 
> Thanks and regards,
> 
> <app.php>
> <next.php>
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set


From lhffjzh at 126.com  Sun Apr 17 23:34:09 2011
From: lhffjzh at 126.com (Haifeng Li)
Date: Mon, 18 Apr 2011 11:34:09 +0800
Subject: [Owasp-modsecurity-core-rule-set] help: Modsecurity 'ARGS'
	rules	match 'GET' request but can't match 'POST' request
References: <B80B1C2AA1CF47839F30DA9742749245@45dae0f317fb4c6>
	<AE7B1E4C-5107-4EC0-AB3C-4C851698D1DA@trustwave.com>
Message-ID: <0ED9D5877D984C82BA2A877E6A9772F7@45dae0f317fb4c6>

Hi Byan,

It's ok now, thanks so much, I'll look into more configuration and learn about it.


Regards,
Haifeng


----- Original Message ----- 
From: "Ryan Barnett" <RBarnett at trustwave.com>
To: "Haifeng Li" <lhffjzh at 126.com>
Cc: <owasp-modsecurity-core-rule-set at lists.owasp.org>
Sent: Monday, April 18, 2011 11:17 AM
Subject: Re: [Owasp-modsecurity-core-rule-set] help: Modsecurity 'ARGS' rules match 'GET' request but can't match 'POST' request


You need to use SecRequestBodyAccess On. 

I suggest you use this recommended base config -
http://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#A_Recommended_Base_Configuration

Ryan

On Apr 17, 2011, at 9:28 PM, "Haifeng Li" <lhffjzh at 126.com> wrote:

> Hi All,
> 
> I'm a jackaroo of Modsecurity, and very interested in Modsecurity Core Rule set.
> 
> I am learning about CRS now, I downloaded the modsecurity CRS and investigate it. 
> But I found that my 'ARGS' rules only match  'GET' request but can't match 'POST' request.
> 
> I downloaded latest rule set package and modsecurity engine, only update following several configuration from downloaded package.
> 
> SecDataDir /tmp
> SecTmpDir /tmp
> SecRuleEngine On
> SecDefaultAction "phase:2,deny,log"
> 
> And I add a self rule file 'modsecurity_crs_15_customrules.conf' in 'base_rules' directory, 
> it only contain below 2 rules.
> 
> SecRule ARGS "bruce" "phase:2,deny,t:none,t:lowercase,t:urlDecode,msg:'the attack what ARGS contain Bruce',setvar:'tx.msg=%{rule.msg}'"
> SecRule ARGS_POST "bruce" "phase:2,deny,t:none,t:lowercase,t:urlDecode,msg:'the attack what ARGS_POST contain Bruce',setvar:'tx.msg=%{rule.msg}'"
> 
> I tested it on web interface 'http://192.168.1.135/app.php?name=Bruce' (modsecurity and httpd installed on this pc, app.php in attachment, a "name" text input area in a form)
> Browser show:
> Forbidden
> You don't have permission to access /app.php on this server.
> 
> 
> --------------------------------------------------------------------------------
> 
> Apache/2.2.3 (Red Hat) Server at 172.22.14.149 Port 80
> 
> And the http log is:
> ModSecurity: Access denied with code 403 (phase 2). Pattern match "bruce" at ARGS:name. [file "/etc/httpd/modsecurity_crs/base_rules/modsecurity_crs_15_customrules.conf"] [line "3"] [msg "the attack what ARGS contain Bruce"] [hostname "172.22.14.149"] [uri "/app.php"] [unique_id "nOrQFX8AAAEAACpHFRMAAAAC"]
> 
> But if I input "Bruce" on on web interface 'http://192.168.1.135/app.php", and click button "submit", the browser redirect "next.php" successful, obviously, the rules are invalid when execute POST request.
> 
> Who can help me for this?
> 
> 
> Thanks and regards,
> 
> <app.php>
> <next.php>
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set

From klaubert at gmail.com  Mon Apr 18 11:17:46 2011
From: klaubert at gmail.com (Klaubert Herr da Silveira)
Date: Mon, 18 Apr 2011 12:17:46 -0300
Subject: [Owasp-modsecurity-core-rule-set] Current use of TAG data in
 rules and a new idea - CONFIDENCE_LEVEL
In-Reply-To: <C9CDCB42.1E966%rbarnett@trustwave.com>
References: <Acv7d5QqkjVKgfk8QzqKoMozUGis4w==>
	<C9CDCB42.1E966%rbarnett@trustwave.com>
Message-ID: <BANLkTi=Vtc5fdVGxnEj=iD0CkYtB7+qRkg@mail.gmail.com>

Ryan,

one interesting thing to do with the Confidence Tag could be a
block/pass based on confidence. This can help the use of signatures,
and even test/improve the signatures without disabling it. And in
anomaly mode, this could rise the weigth of rules with with a higher
confidence or lower the weight of a rule with lower confidence, having
the same behaviour.

Klaubert

On Fri, Apr 15, 2011 at 11:15 AM, Ryan Barnett <RBarnett at trustwave.com> wrote:
> Hey everyone,
> I wanted give an overview of the current use of TAG data in rules (https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#tag), as well as, to get some feedback on some new ideas for tag usage.
>
> First let's look at how TAG is currently being used today in the CRS. ?Here is an example SQL Injection rule -
>
> SecRule REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* "\bxp_cmdshell\b" \
> ? ? ? ? ?"phase:2,rev:'2.2.0',capture,t:none,t:urlDecodeUni,t:htmlEntityDecode,t:lowercase,t:replaceComments,t:compressWhiteSpace,ctl:auditLogParts=+E,block,msg:'SQL Injection Attack',id:'959052',tag:'WEB_ATTACK/SQL_INJECTION',tag:'WASCTC/WASC-19',tag:'OWASP_TOP_10/A1',tag:'OWASP_AppSensor/CIE1',tag:'PCI/6.5.2',logdata:'%{TX.0}',severity:'2',setvar:'tx.msg=%{rule.msg}',setvar:tx.sql_injection_score=+%{tx.critical_anomaly_score},setvar:tx.anomaly_score=+%{tx.critical_anomaly_score},setvar:tx.%{rule.id}-WEB_ATTACK/SQL_INJECTION-%{matched_var_name}=%{tx.0}"
>
> The TAG action is used to provide the following information:
>
> ?1. ?Attack Category ? example WEB_ATTACK/SQL_INJECTION
> ?2. ?Mapping to community taxonomies ? such as WASC Threat Classification, OWASP Top Ten and OWASP AppSensor Detection Points
> ?3. ?URL links to specific reference resources ? as in this converted ET sql injection rule that lists a link to a SecurityFocus vuln entry
>
> # (2007539) SpiderLabs Research (SLR) Public Vulns: ET WEB_SPECIFIC_APPS 20/20 Auto Gallery SQL Injection Attempt -- vehiclelistings.asp model UPDATE
> SecRule REQUEST_LINE "@contains /vehiclelistings.asp" "chain,phase:2,block,t:none,t:urlDecodeUni,t:htmlEntityDecode,t:normalisePathWin,capture,nolog,auditlog,logdata:'%{TX.0}',severity:'2',id:2007539,rev:6,msg:'SLR: ET WEB_SPECIFIC_APPS 20/20 Auto Gallery SQL Injection Attempt -- vehiclelistings.asp model UPDATE',tag:'web-application-attack',tag:'url,www.securityfocus.com/bid/21154'"
> SecRule &TX:'/WEB_ATTACK/SQL_INJECTION.*ARGS:model/' "@gt 0" "ctl:auditLogParts=+E,setvar:'tx.msg=%{tx.msg} - ET WEB_SPECIFIC_APPS 20/20 Auto Gallery SQL Injection Attempt -- vehiclelistings.asp model UPDATE',setvar:tx.anomaly_score=+20,setvar:'tx.%{rule.id}-WEB_ATTACK-%{rule.severity}-%{rule.msg}-%{matched_var_name}=%{matched_var}'"
>
> One big idea we have for a new TAG is Confidence Level which would give a general indication as to the rules accuracy level perhaps on a scale of 0-5 where 0 is totally experimental without much testing at all and 5 is a very strong signature that has been rigorously tested and a low chance of false positives. ?Example ? tag:'CONFIDENCE_LEVEL/5'
>
> The Confidence Level tag seems like it has the potential to have a very positive impact to users for two reasons:
>
> ?1. ?Currently, there isn't much distinction for each rules as to its accuracy level. ?We do have the experimental_rules directory for brand new rules however that does not mean that other rules are all of equal accuracy levels.
> ?2. ?With the new v2.6 enhancement which added SecRuleRemoveByTag and ctl:ruleRemoveByTag (https://sourceforge.net/apps/mediawiki/mod-security/index.php?title=Reference_Manual#SecRuleRemoveByTag) users will then have the ability to make local customizations to disable entire groups of rules based on TAG data :) ?For instance, if you wanted to only run CONFIDENCE_LEVEL/5 rules you could do that in a local custom rules file modsecurity_crs_60_custom_rules.conf to disable all lower confidence level rules ?
>
> SecRuleRemoveByTag "CONFIDENCE_LEVEL/[0-4]"
>
> While this is a great new capability ? we will need some help from the community with identifying the right CONFIDENCE_LEVEL settings for each rule. ?I will go through each rule and estimate a CONFIDENCE_LEVEL based on our intel. ?This may not be enough however. ?I have a feeling that most ModSecurity users silently handle false positives with local exceptions and they do not also report back to the community which rule IDs are causing problems. ?Some users do go the extra mile and actually open Jira tickets for the CRS with bug reports. ?That is great and it ensures that I will review/update the rules. ?I do think, however, that most end users would prefer an easier method. ?What do you all think about us creating a new mail-list on SourceForge strictly for sending in false positive rule issues? ?We could create something like - mod?security-false-positives at lists.sourceforge.net.
>
> What do you think? ?If anyone has any better ideas for false positive reporting, please speak up.
>
> Ryan
>
>
>
> ________________________________
> This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.
>
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>

From RBarnett at trustwave.com  Mon Apr 18 17:43:17 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Mon, 18 Apr 2011 16:43:17 -0500
Subject: [Owasp-modsecurity-core-rule-set] FW: SF.net SVN:
	mod-security:[1727] crs/trunk
In-Reply-To: <E1QBw8C-0005U1-7d@sfp-svn-4.v30.ch3.sourceforge.com>
Message-ID: <C9D22813.1EB5E%rbarnett@trustwave.com>

Just added these new OWASP AppSensor Detection Point checks to the CRS in
trunk.  These take the place of the older modsecurity_crs_profiler.conf
file.  This new setup allows for more modular AppSensor checks.  I also
added in an interesting HoneyTrap check using new ModSecurity v2.6 @rsub
capabilities.

-Ryan



On 4/18/11 5:37 PM, "rcbarnett at users.sourceforge.net"
<rcbarnett at users.sourceforge.net> wrote:

>Revision: 1727
>
>http://mod-security.svn.sourceforge.net/mod-security/?rev=1727&view=rev
>Author:   rcbarnett
>Date:     2011-04-18 21:37:15 +0000 (Mon, 18 Apr 2011)
>
>Log Message:
>-----------
>- Added new AppSensor rules to experimental_dir
>  https://www.owasp.org/index.php/AppSensor_DetectionPoints
>- Added new HoneyTrap AppSensor Rules to detect fake hidden parameter
>tampering
>  https://www.owasp.org/index.php/AppSensor_DetectionPoints#Honey_Trap
>
>Modified Paths:
>--------------
>    crs/trunk/CHANGELOG
>
>Added Paths:
>-----------
>
>crs/trunk/experimental_rules/modsecurity_crs_40_appsensor_detection_point_
>2.0_setup.conf
>
>crs/trunk/experimental_rules/modsecurity_crs_40_appsensor_detection_point_
>2.1_request_exception.conf
>
>crs/trunk/experimental_rules/modsecurity_crs_40_appsensor_detection_point_
>2.9_honeytrap.conf
>
>crs/trunk/experimental_rules/modsecurity_crs_40_appsensor_detection_point_
>3.0_end.conf
>
>Removed Paths:
>-------------
>    crs/trunk/experimental_rules/modsecurity_crs_40_profiler.conf
>
>
>This was sent by the SourceForge.net collaborative development platform,
>the world's largest Open Source development site.
>


This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From guillaume.bilodeau at gmail.com  Tue Apr 19 09:16:11 2011
From: guillaume.bilodeau at gmail.com (Guillaume Bilodeau)
Date: Tue, 19 Apr 2011 09:16:11 -0400
Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection not
 behaving as expected
In-Reply-To: <F82041C7-B14D-4427-BD6E-2D117BAC69F0@trustwave.com>
References: <BANLkTimBWTGjsvmjWYFF11qGzotUQ1o_bQ@mail.gmail.com>
	<C9CCB08D.1E7EC%rbarnett@trustwave.com>
	<BANLkTinT0vLkL4KUw_A-qjvHHjarahaazg@mail.gmail.com>
	<BANLkTik_H1-6gSvwpRHkaRDrSN19bfu5gQ@mail.gmail.com>
	<BANLkTim8ZhSQG4W66RU8SbZwmOYnk5Bdcg@mail.gmail.com>
	<BANLkTimWkMgO93hKoiBQ8G5FCwzVGXr4oA@mail.gmail.com>
	<BANLkTi=ND-4Qxb5gdpak3tWuYp7eUFTHTQ@mail.gmail.com>
	<A93DF055-511D-48CB-81B3-F1870C73BEE0@trustwave.com>
	<BANLkTi=9pNrixNSR6asB-Jp8Np_10-2FbQ@mail.gmail.com>
	<F82041C7-B14D-4427-BD6E-2D117BAC69F0@trustwave.com>
Message-ID: <BANLkTikooBwvcxDfMOdEdbw-Bgy9gBccZg@mail.gmail.com>

Our latest tries looked like this:

In modsecurity_crs_11_slow_dos_protection.conf:

#SecReadStateLimit 10
<IfModule reqtimeout_module>
RequestReadTimeout header=20-40,MinRate=500 body=20,MinRate=500
</IfModule>
SecRule RESPONSE_STATUS "@streq 408"
"phase:5,t:none,nolog,pass,setvar:ip.slow_dos_counter=+1,expirevar:ip.slow_dos_counter=60"
SecRule IP:SLOW_DOS_COUNTER "@gt 5" "phase:1,t:none,log,drop,msg:'Client
Connection Dropped due to high # of slow DoS alerts'"

First test**

http_dos_cli --host 1.2.3.4 --port 80 --path /doLogin.html --slow-headers
--post --connections 1000 --rate 1000 --timeout 5



Tool establishes connections, starts sending headers

After 20 seconds, requests start timing out

Within a minute, tool cannot connect anymore

Outside IP can connect to Apache



In error_log:

[Tue Apr 19 08:55:09 2011] [info] [client 5.6.7.8] Request header read
timeout

[Tue Apr 19 08:55:09 2011] [error] [client 5.6.7.8] request failed: error
reading the headers



In Wireshark:

HTTP response code 400 (Bad Request)



Second test**

http_dos_cli --host 1.2.3.4 --port 80 --path /doLogin.html --slow-post
--post-field j_username --connections 1000 --rate 1000 --timeout 5



Tool establishes connections, starts sending post data

Tool caps at 1000 connections, never receives any error

Outside IP cannot connect to Apache



In error_log:

[Tue Apr 19 09:01:20 2011] [info] [client 5.6.7.8] Request body read timeout



In Wireshark:

HTTP response code 200 (Found)

So...

In both cases, Apache (mod_reqtimeout I suppose) seems to be enforcing the
header / body timeout correctly.  It's just that it's not returning a 408 in
either case.

On Sat, Apr 16, 2011 at 10:18 AM, Ryan Barnett <RBarnett at trustwave.com>wrote:

> Have you tried using header=timeout  directive against the slow dos tool to
> prevent slow headers?  Wonder if that part works for you or if it also is
> returning the 200. If that doesn't work then maybe it is related to Solaris
> OS. These settings worked for me on Mac OSX and Ubuntu.
>
> On Apr 16, 2011, at 9:58 AM, "Guillaume Bilodeau" <
> guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>> wrote:
>
> We're using an Apache 2.2.17 that was built from scratch on a Solaris box.
>
> On Sat, Apr 16, 2011 at 9:44 AM, Ryan Barnett <<mailto:
> RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:
> RBarnett at trustwave.com>> wrote:
> What apache version are you using?
>
> On Apr 16, 2011, at 9:43 AM, "Guillaume Bilodeau" <<mailto:
> guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com><mailto:<mailto:guillaume.bilodeau at gmail.com>
> guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>> wrote:
>
> A little more information on the 200 return code:
>
> It seems that mod_reqtimeout is not closing the connection after the 20
> seconds, but rather truncating the request and letting it go through.  So
> the request is actually processed, and since the URL is referring to an
> actual resource, a 200 code is returned.
>
> Surely there must be a problem with our configuration?  Or maybe our Apache
> build?
>
> Cheers,
> GB
>
> On Sat, Apr 16, 2011 at 12:55 AM, Brian Rectanus <<mailto:<mailto:
> brectanu at gmail.com>brectanu at gmail.com<mailto:brectanu at gmail.com>><mailto:
> brectanu at gmail.com>brectanu at gmail.com<mailto:brectanu at gmail.com><mailto:
> <mailto:brectanu at gmail.com>brectanu at gmail.com<mailto:brectanu at gmail.com>>>
> wrote:
> Probably not "disastrous" :)  You have the overhead of the TCP 3-way
> handshake and also the shutdown, but the browsers should be using SSL
> session resumption, which is not connection based.  It uses cached SSL
> session IDs and should be reused on each connection up to the timeout
> - just make sure this is enabled in the Apache config.  Personally, I
> find that about 3 second timeouts w/low request limit works well for
> keepalives, so it may be enough to just limit the keepalive timeout
> and number of requests  (say 3 second timeout w/9 requests limit
> instead of completely disabling them).  It really depends on your
> latency requirements for your site.
>
> -B
>
> On Thu, Apr 14, 2011 at 2:37 PM, Guillaume Bilodeau
> <<mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com
> <mailto:guillaume.bilodeau at gmail.com>><mailto:guillaume.bilodeau at gmail.com
> >guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:
> <mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com>>> wrote:
> > We will try turning off connection keep-alive to see how Apache will
> react.
> >  However, isn't turning this off going to have a disastrous impact on
> > connection performance, especially since all traffic will be SSL?
> >
> > On Thu, Apr 14, 2011 at 3:19 PM, Ivan Ristic <<mailto:<mailto:
> ivan.ristic at gmail.com>ivan.ristic at gmail.com<mailto:ivan.ristic at gmail.com
> >><mailto:ivan.ristic at gmail.com>ivan.ristic at gmail.com<mailto:
> ivan.ristic at gmail.com><mailto:<mailto:ivan.ristic at gmail.com>
> ivan.ristic at gmail.com<mailto:ivan.ristic at gmail.com>>> wrote:
> >>
> >> Yes, it's probably because of keep-alives. Sounds like a bug in the
> >> reqtimeout module, because, if the connection stays open, the module
> >> isn't achieving much.
> >>
> >> IIRC, ModSecurity will turn off keep-alives on a connection on which it
> >> blocks.
> >>
> >>
> >> On Thu, Apr 14, 2011 at 8:11 PM, Guillaume Bilodeau
> >> <<mailto:<mailto:guillaume.bilodeau at gmail.com>
> guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>><mailto:
> guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com><mailto:<mailto:guillaume.bilodeau at gmail.com>
> guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>>> wrote:
> >> > Hi Ryan,
> >> > We installed WireShark and started sniffing on all traffic.  It seems
> >> > that
> >> > Apache is returning a 200 status code instead of a 408 when the
> request
> >> > reaches 30 seconds, so from what I understand ModSecurity can't do
> much
> >> > about that.  The funny thing is, if we follow one of the TCP streams,
> we
> >> > see
> >> > that http_dos_cli keeps sending data even after receiving the 200
> code.
> >> >  Maybe something to do with  keep-alive connections?
> >> > Cheers,
> >> > GB
> >> > On Thu, Apr 14, 2011 at 2:12 PM, Ryan Barnett <<mailto:<mailto:
> RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:
> RBarnett at trustwave.com>><mailto:RBarnett at trustwave.com>
> RBarnett at trustwave.com<mailto:RBarnett at trustwave.com><mailto:<mailto:
> RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:
> RBarnett at trustwave.com>>>
> >> > wrote:
> >> >>
> >> >> OK, if mod_reqtimeout is installed and that directive is working,
> then
> >> >> after 30 sec if Apache has not received the entire request body then
> it
> >> >> should terminate the request with a 408 status code.  The ModSecurity
> >> >> CRS
> >> >> rules are simply monitoring if/how many 408 alerts are generated by
> >> >> Apache
> >> >> per client.  After a certain amount, then ModSecurity will step in on
> >> >> subsequent requests in phase:1 and do drop actions.
> >> >>
> >> >> So, by monitoring your Apache error log while you are running your
> >> >> http_dos_cli tool, does Apache generate 408 alerts after 30 secs?  If
> >> >> not,
> >> >> then I don't think that the mod_reqtimeout module or directive is
> >> >> working.
> >> >>
> >> >> -Ryan
> >> >>
> >> >>
> >> >> From: Guillaume Bilodeau
> >> >> <<mailto:<mailto:guillaume.bilodeau at gmail.com>
> guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>><mailto:
> guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com><mailto:<mailto:guillaume.bilodeau at gmail.com>
> guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>><mailto:
> <mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com
> <mailto:guillaume.bilodeau at gmail.com>><mailto:guillaume.bilodeau at gmail.com
> >guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:
> <mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com>>>>
> >> >> Date: Thu, 14 Apr 2011 13:07:41 -0500
> >> >> To: Ryan Barnett
> >> >> <<mailto:<mailto:rbarnett at trustwave.com>rbarnett at trustwave.com
> <mailto:rbarnett at trustwave.com>><mailto:rbarnett at trustwave.com>
> rbarnett at trustwave.com<mailto:rbarnett at trustwave.com><mailto:<mailto:
> rbarnett at trustwave.com>rbarnett at trustwave.com<mailto:
> rbarnett at trustwave.com>><mailto:<mailto:<mailto:rbarnett at trustwave.com>
> rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>><mailto:
> rbarnett at trustwave.com>rbarnett at trustwave.com<mailto:
> rbarnett at trustwave.com><mailto:<mailto:rbarnett at trustwave.com>
> rbarnett at trustwave.com<mailto:rbarnett at trustwave.com>>>>
> >> >> Cc:
> >> >>
> >> >> "<mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:<mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>>"
> >> >>
> >> >> <<mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:<mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>>>
> >> >> Subject: Re: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS
> protection
> >> >> not behaving as expected
> >> >>
> >> >> Hi Ryan,
> >> >>
> >> >> I'm no Apache expert, but AFAICT the req_timeout module is installed.
> >> >>  A
> >> >> /server-info shows the req_timeout.c module with the
> RequestReadTimeout
> >> >> parameter.
> >> >>
> >> >> Thanks,
> >> >> GB
> >> >>
> >> >> On Thu, Apr 14, 2011 at 1:56 PM, Ryan Barnett
> >> >> <<mailto:<mailto:RBarnett at trustwave.com>RBarnett at trustwave.com
> <mailto:RBarnett at trustwave.com>><mailto:RBarnett at trustwave.com>
> RBarnett at trustwave.com<mailto:RBarnett at trustwave.com><mailto:<mailto:
> RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:
> RBarnett at trustwave.com>><mailto:<mailto:<mailto:RBarnett at trustwave.com>
> RBarnett at trustwave.com<mailto:RBarnett at trustwave.com>><mailto:
> RBarnett at trustwave.com>RBarnett at trustwave.com<mailto:
> RBarnett at trustwave.com><mailto:<mailto:RBarnett at trustwave.com>
> RBarnett at trustwave.com<mailto:RBarnett at trustwave.com>>>> wrote:
> >> >> Did you install the reqtimeout module?
> >> >>
> >> >> #
> >> >> # Mitigate Slow HTTP POST attacks
> >> >> #
> >> >> # Must have the mod_reqtimeout module installed
> >> >> # You should adjust the RequestReadTimeout body directive setting to
> a
> >> >> limit
> >> >> # that will allow any legitimate slow clients or large file uplaods.
> >> >> #
> >> >> <IfModule reqtimeout_module>
> >> >> RequestReadTimeout body=30
> >> >> </IfModule>
> >> >>
> >> >> -Ryan
> >> >>
> >> >>
> >> >>
> >> >> From: Guillaume Bilodeau
> >> >>
> >> >> <<mailto:<mailto:guillaume.bilodeau at gmail.com>
> guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>><mailto:
> guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com><mailto:<mailto:guillaume.bilodeau at gmail.com>
> guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com>><mailto:
> <mailto:<mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com
> <mailto:guillaume.bilodeau at gmail.com>><mailto:guillaume.bilodeau at gmail.com
> >guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:
> <mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com>>><mailto:<mailto:<mailto:
> guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com>><mailto:guillaume.bilodeau at gmail.com>
> guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:
> <mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com>><mailto:<mailto:<mailto:
> guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com>><mailto:guillaume.bilodeau at gmail.com>
> guillaume.bilodeau at gmail.com<mailto:guillaume.bilodeau at gmail.com><mailto:
> <mailto:guillaume.bilodeau at gmail.com>guillaume.bilodeau at gmail.com<mailto:
> guillaume.bilodeau at gmail.com>>>>>
> >> >> Date: Thu, 14 Apr 2011 12:33:52 -0500
> >> >> To:
> >> >>
> >> >> "<mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:<mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>><mailto:<mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:<mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>>>"
> >> >>
> >> >> <<mailto:<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:<mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>><mailto:<mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:<mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>><mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>
> owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> owasp-modsecurity-core-rule-set at lists.owasp.org>>>>>
> >> >> Subject: [Owasp-modsecurity-core-rule-set] Slow HTTP DOS protection
> not
> >> >> behaving as expected
> >> >>
> >> >> Hi all,
> >> >>
> >> >> We are trying to setup the OWASP Core Rule Set to protect our
> >> >> application
> >> >> from Slow HTTP DOS attacks.
> >> >>
> >> >> We have setup ModSecurity 2.5.13 on our Apache 2.2.17 instance,
> loaded
> >> >> the
> >> >> module, and included all CRS base rules plus
> >> >> modsecurity_crs_11_slow_dos_protection.conf.  We didn't change the
> >> >> settings
> >> >> defined in the conf file, so SecReadStateLimit is set to 5 and
> >> >> RequestReadTimeout is set to body=30.  We are using the http_dos_cli
> >> >> command
> >> >> line tool to do our tests, with the connection parameter set to 500.
> >> >>
> >> >> When running the slow-headers test, ModSecurity seems to be
> protecting
> >> >> the
> >> >> application correctly, dropping most (all?) requests from the
> tester's
> >> >> IP
> >> >> and allowing requests from a different IP to be served.  However,
> when
> >> >> running the slow-post test, ModSecurity doesn't seem to be doing
> >> >> anything.
> >> >>  From what I understand, the test successfully creates the 500
> >> >> connections
> >> >> and keeps them open; none of them are dropped.  Requests coming from
> a
> >> >> different IP are not served and eventually time out.  A tail -f
> >> >> error_log
> >> >> shows nothing except the eventual message on MaxClients (set to 300
> >> >> now)
> >> >> being reached.  Interestingly, when we kill the http_dos_cli process,
> >> >> the
> >> >> error_log is then flooded with hundreds of entries such as this:
> >> >>
> >> >>
> >> >> [Mon Nov 22 17:44:46 2010] [warn] ModSecurity: Access denied with
> code
> >> >> 400.
> >> >> Too many connections [6] of 5 allowed in READ state from
> 211.144.112.20
> >> >> -
> >> >> Possible DoS Consumption Attack [Rejected]
> >> >>
> >> >> (this has been taken from the SpiderLabs blog entry, dates and IPs
> are
> >> >> obviously different)
> >> >>
> >> >> Any idea on why this isn't behaving like we're expecting it to be?
> >> >>
> >> >> Thanks!
> >> >> GB
> >> >>
> >> >>
> >> >>
> >> >>
> >> >
> >> >
> >> > _______________________________________________
> >> > Owasp-modsecurity-core-rule-set mailing list
> >> > <mailto:<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>
> Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> Owasp-modsecurity-core-rule-set at lists.owasp.org>> <mailto:
> Owasp-modsecurity-core-rule-set at lists.owasp.org>
> Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> Owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> Owasp-modsecurity-core-rule-set at lists.owasp.org>
> Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> Owasp-modsecurity-core-rule-set at lists.owasp.org>>
> >> > <<
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set>
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set>
> <https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set>
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
> >> >
> >> >
> >>
> >>
> >>
> >> --
> >> Ivan Risti?
> >
> >
> > _______________________________________________
> > Owasp-modsecurity-core-rule-set mailing list
> > <mailto:<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>
> Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> Owasp-modsecurity-core-rule-set at lists.owasp.org>> <mailto:
> Owasp-modsecurity-core-rule-set at lists.owasp.org>
> Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> Owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> Owasp-modsecurity-core-rule-set at lists.owasp.org>
> Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> Owasp-modsecurity-core-rule-set at lists.owasp.org>>
> > <<
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set>
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set>
> <https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set>
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
> >
> >
>
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> <mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>
> Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> Owasp-modsecurity-core-rule-set at lists.owasp.org><mailto:<mailto:
> Owasp-modsecurity-core-rule-set at lists.owasp.org>
> Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> Owasp-modsecurity-core-rule-set at lists.owasp.org>>
> <https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set>
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>
> ________________________________
> This transmission may contain information that is privileged, confidential,
> and/or exempt from disclosure under applicable law. If you are not the
> intended recipient, you are hereby notified that any disclosure, copying,
> distribution, or use of the information contained herein (including any
> reliance thereon) is STRICTLY PROHIBITED. If you received this transmission
> in error, please immediately contact the sender and destroy the material in
> its entirety, whether in electronic or hard copy format.
>
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:
> Owasp-modsecurity-core-rule-set at lists.owasp.org>
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20110419/826fbf14/attachment-0001.html 

From RBarnett at trustwave.com  Wed Apr 20 16:28:54 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Wed, 20 Apr 2011 15:28:54 -0500
Subject: [Owasp-modsecurity-core-rule-set] New mail-list to report false
	positives with rules
Message-ID: <C9D4BA46.1EDEB%rbarnett@trustwave.com>

Per a recent email thread on the OWASP ModSecurity CRS list (https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/2011-April/000732.html) - we need help from the community with identifying false positives with rules.  We have therefore setup a separate mail-list whose sole purpose is to report on and discuss false positives -
https://lists.sourceforge.net/lists/listinfo/mod-security-report-false-positives

Please sign-up for and use that list to send an email when you encounter a false positive with any of the CRS rules.  When sending an email, please provide the following -

 1.  Short error_log alert message
 2.  Attach an audit log file showing the full transaction

Thanks,
Ryan


From RBarnett at trustwave.com  Thu Apr 21 09:26:31 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Thu, 21 Apr 2011 08:26:31 -0500
Subject: [Owasp-modsecurity-core-rule-set] Working new AppDefect Rule -
	Charset Checks
Message-ID: <C9D5A8C6.1EE75%rbarnett@trustwave.com>

I am working on some new Application Defect rules for the CRS based on the Watcher application - http://websecuritytool.codeplex.com/wikipage?title=Checks<http://websecuritytool.codeplex.com/wikipage?title=Checks#charset>

The one I am currently working is the Charset Check - http://websecuritytool.codeplex.com/wikipage?title=Checks#charset

There are two current checks listed by Watcher, however the first check that I am testing is to raise an alert if a web app/resource does not include a charset declaration at all for text/html data in either the Content-Type Response Header or in a meta http-equiv html code block in the response body.  I have some rules that are working -

SecRule &RESOURCE:CHARSET_CHECK "@eq 0" "chain,phase:4,t:none,pass,log,msg:'Character Set (Charset) Not Specified for Response Content.',logdata:'%{response_content_type}',setvar:resource.charset_check=1,expirevar:resource.charset_check=86400"
        SecRule &RESOURCE:MISSING_CHARSET "@eq 0" "chain"
                SecRule RESPONSE_HEADERS:Content-Length "!^0$" "chain"
                        SecRule RESPONSE_BODY "!@contains <meta http-equiv=\"content-type\" content=\"text/html; charset=" "chain"
                                SecRule RESPONSE_CONTENT_TYPE "(?i:^text/html;?$)" "setvar:resource.missing_charset=1,expirevar:resource.missing_charset=86400"


I was running some tests by configuring my apache install to be an open proxy and then having my browser use it as a proxy while browsing public sites such as google, facebook, amazon, and cnn.  What I am trying to figure out if this should be tracked per/site or per/resource.  As you can see with the example rules, we only want periodic alerting of defects (vs. alerting each time when we see attacks).  The idea for appdefect detection is to alert the admin to a config issue but not to flood them with alerts.  With the example rules above, we are storing RESOURCE variables to do alert suppression so it will only alert on the issue 1/day.  The alert suppression/periodic alerting works fine, however I am not sure for this issue if it is better to track this per/resource or per/site.  Per resource seems more accurate, however there may be many more alerts generated.  What I was seeing while browsing to these sites is that oftentimes there are subdomains that don't set charset at all.  So, you would essentially have a flood of alerts for that subdomain.  On the flip side (false negative), if we only tracked this in a GLOBAL site collection, if one resource correctly declares charset, then there might be other resources that don't and we would not alert on it?.

So, I wanted to get some feedback from the community on which persistent collection you think we should track this appdefect issue in ? GLOBAL or RESOURCE?

Comments welcome,
Ryan


From RBarnett at trustwave.com  Thu Apr 21 10:58:37 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Thu, 21 Apr 2011 09:58:37 -0500
Subject: [Owasp-modsecurity-core-rule-set] ModSecurity Advanced Topic of the
	Week: Integrating IDS Signatures
Message-ID: <C9D5BE5C.1EE9B%rbarnett@trustwave.com>

http://blog.spiderlabs.com/2011/04/modsecurity-advanced-topic-of-the-week-integrating-ids-signatures.html

--
Ryan Barnett
Senior Security Researcher
Trustwave - SpiderLabs


________________________________
This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Tue Apr 26 14:45:23 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Tue, 26 Apr 2011 13:45:23 -0500
Subject: [Owasp-modsecurity-core-rule-set] Detecting Malice with
	ModSecurity: Request Method Anomalies
Message-ID: <CB43D9CC-4739-48ED-B810-ADF2A7A249E2@trustwave.com>

http://blog.spiderlabs.com/2011/04/detecting-malice-with-modsecurity-request-method-anomalies.html

Ryan

This transmission may contain information that is privileged, confidential, and/or exempt from disclosure under applicable law. If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format.


From RBarnett at trustwave.com  Thu Apr 28 19:41:14 2011
From: RBarnett at trustwave.com (Ryan Barnett)
Date: Thu, 28 Apr 2011 18:41:14 -0500
Subject: [Owasp-modsecurity-core-rule-set] [Mod-security-developers] CRS
 DoS protection & x-forwarded-for header
In-Reply-To: <555136.46713.qm@web37605.mail.mud.yahoo.com>
Message-ID: <C9DF72E0.251FA%rbarnett@trustwave.com>

Thanks for the updates Oleg!  This will certainly be a useful update to
not only the DoS rules buy any rules that will be based on the client IP.
I will actually go back to check other uses of REMOTE_ADDR and see if we
can swap it for tx.real_ip instead.

I will add this to the CRS v2.2.0 that I am working on.

For future reference - here is the OWASP CRS mail-list -

https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set

--
Ryan Barnett
Senior Security Researcher
Trustwave - SpiderLabs




On 4/28/11 7:32 PM, "Oleg Gryb" <oleg_gryb at yahoo.com> wrote:

>I'm not sure if I can discuss CRS rules here. If not, please let me know
>what 
>the right place is. I want to suggest an improvement to DoS protection in
>CRS 
>2.1.2. The problem is that enterprise applications usually run behind
>load 
>balancers, so relying on remote_addr doesn't make too much sense, because
>you'll 
>always have an LB's IP in there.
>
>
>My improved rules (attached)  check for x-forwarded-for header and if
>it's 
>present, this IP will be used to initialize IP collection. If it's not
>then the 
>old logic will be used.
>
>It would be great if we can include this improvement to the next CRS
>release.
>
>Thanks,
>Oleg.



