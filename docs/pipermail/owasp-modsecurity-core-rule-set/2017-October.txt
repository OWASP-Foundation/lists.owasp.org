From christian.folini at netnea.com  Mon Oct  2 04:42:46 2017
From: christian.folini at netnea.com (Christian Folini)
Date: Mon, 2 Oct 2017 06:42:46 +0200
Subject: [Owasp-modsecurity-core-rule-set] Up tonight (Monday): Monthly
	Project Chat
Message-ID: <20171002044246.yrlvvw6w3w2zm7is@leander>

Hi there,

Tonight is our monthly project chat. Monday, September 4, we'll do our regular 
Core Rule Set project chat.
20:30 CET (14:30 EDT, 18:30 GMT)
on Freenode IRC, channel #modsecurity

The development is taking up speed with new contributors submitting
PRs (and a lot of review work to be done). So there is a lot to talk about.

Hope to see / read many of you tonight!

Cheers,

Christian

-- 
1 seat for ModSec course in London and 
1 seat for ModSec course in Zurich still free!
https://www.feistyduck.com/training/modsecurity-training-course
https://www.feistyduck.com/books/modsecurity-handbook/
mailto:christian.folini at netnea.com
twitter: @ChrFolini

From christian.folini at netnea.com  Mon Oct  2 04:48:44 2017
From: christian.folini at netnea.com (Christian Folini)
Date: Mon, 2 Oct 2017 06:48:44 +0200
Subject: [Owasp-modsecurity-core-rule-set] Up tonight (Monday): Monthly
 Project Chat
In-Reply-To: <20171002044246.yrlvvw6w3w2zm7is@leander>
References: <20171002044246.yrlvvw6w3w2zm7is@leander>
Message-ID: <20171002044844.z3o5tjm5nlvozldh@leander>

Obviously, one should not copy&paste too much.

I meant Monday, October 2. The first Monday of every month, actually.

On Mon, Oct 02, 2017 at 06:42:46AM +0200, Christian Folini wrote:
> Tonight is our monthly project chat. Monday, September 4, we'll do our regular 
> Core Rule Set project chat.
> 20:30 CET (14:30 EDT, 18:30 GMT)
> on Freenode IRC, channel #modsecurity
> 
> The development is taking up speed with new contributors submitting
> PRs (and a lot of review work to be done). So there is a lot to talk about.
> 
> Hope to see / read many of you tonight!
> 
> Cheers,
> 
> Christian
> 
> -- 
> 1 seat for ModSec course in London and 
> 1 seat for ModSec course in Zurich still free!
> https://www.feistyduck.com/training/modsecurity-training-course
> https://www.feistyduck.com/books/modsecurity-handbook/
> mailto:christian.folini at netnea.com
> twitter: @ChrFolini
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set

-- 
ModSecurity courses Oct 2017 in London and Zurich
https://www.feistyduck.com/training/modsecurity-training-course
https://www.feistyduck.com/books/modsecurity-handbook/
mailto:christian.folini at netnea.com
twitter: @ChrFolini

From chaim at chaimsanders.com  Tue Oct  3 13:18:38 2017
From: chaim at chaimsanders.com (Chaim Sanders)
Date: Tue, 3 Oct 2017 09:18:38 -0400
Subject: [Owasp-modsecurity-core-rule-set] News from the Core Rule Set
	(2017-10-03)
Message-ID: <CAE8hE=o3oe6O+Rck+7Br_6vzMiJD4f2x=aVKq-mfdAFYcn2xxQ@mail.gmail.com>

This is the CRS newsletter covering the period from Early September until
today.

It is also available on the website at
https://coreruleset.org/20171003/crs-project-news-october-2017/

We held our monthly community chat. We had quite a few people stop by.
Special thanks to our active participants:
- dune73
- fzipi
- csanders
- franbuehler
- lifeforms
- emphazer
- fgs
- squared
- spartantri
- ossie
- buddyleer

During the chat we discussed the following:

- We will be moving our agenda document to GitHub. In this way all active
participants will be easily able to add comments and tag PR's in an
efficient manner. We'll open the "Agenda Issue" one week before out next
meeting.

- There has been a bottleneck in terms of reviews. In order to address this
we'll be assigning responsible contributors to oversee the smooth flow of
issues through the PR process. These contributors will be assigned at
monthly meetings. Additionally, in order to give more timely feedback we
are encouraging the system of using Github's reaction system.

- A number of PR's were given responsible overseers

   -   #899: Dune73
   -   #905: lifeforms: Should be a quick merge
   -   #907: emphazer
   -   #896: lifeforms
   -   #894: Merged
   -   #890: Dune73 and lifeforms
   -   #887: Dune73
   -   #883: csanders and franbuehler
   -   #907/#881: franbuehler and lifeforms
   -   #881: lifeforms
   -   #879: lifeforms: should be a quick merge
   -   #871: Closed: Changes only applied to 3.1

- Some recognition was given to franbuehler for a whopping PR on the
disassembly of SQLi rules (PR#@#$)

- We are 13% done with the technical milestone work for CRS 3.1. However
given the amount of contributed PR's we will likely release prior to all
that work being completed.

- There is interest in starting a project to measure rule performance
automatically as part of acceptance testing. This will be undertaken soon.

- Verizon Digital Media Services graciously offered to host coreruleset.org
behind their CDN. While we don't have a tremendous amount of users, we are
going to test out the functionality

The next community chats will be held on the following dates:
- Nov 6, 2017, 20:30 CET (14:30 EST, 19:30 GMT)
- Dec 4, 2017, 20:30 CET
- January 8, 2017 20:30 CET (Note: The change from our normal schedule)

We had a number of talks on Core Rule Set topics at OWASP AppSec USA. We
will post video links when they are made available.

Some nice new blog posts have come out on coreruleset.org
- How You Can Help the CRS Project
- Writing FTW test cases for OWASP CRS
- OptionsBleed Defenses
- CRS Project Nominated for Swiss DINACon Award


-- 
-- 
Chaim Sanders
http://www.ChaimSanders.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20171003/0281854e/attachment.html>

From rclemings at gmail.com  Mon Oct  9 19:20:47 2017
From: rclemings at gmail.com (Russell Clemings)
Date: Mon, 9 Oct 2017 12:20:47 -0700
Subject: [Owasp-modsecurity-core-rule-set] False positive on Mailman user
	options page
Message-ID: <CAN7RX0a=ccTam0htdA3J=B5ZDpZyCNBUopfH_RfLi=opooabUg@mail.gmail.com>

Using OWASP ModSecurity Core Rule Set ver.3.0.2 on cPanel v66.0.23; CentOS
7.3.

I'm getting false positives on 920440 when hitting certain Mailman (v.
2.1.23) user options pages -- specifically ones ending in ".com" -- which
is a lot of them, because Mailman includes the user's email address in the
URL for the options pages.

What's the best way to deal with this without disabling the rule
completely? Is there already a fix? If so I couldn't find it.

Sanitized example:

(Now posted at https://pastebin.com/MFyyVNZk because Barracuda won't let it
onto the list.)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20171009/3985f127/attachment.html>

From rclemings at gmail.com  Tue Oct 10 18:44:06 2017
From: rclemings at gmail.com (Russell Clemings)
Date: Tue, 10 Oct 2017 11:44:06 -0700
Subject: [Owasp-modsecurity-core-rule-set] False positive on Mailman
	user options page
Message-ID: <CAN7RX0ai1OoNe2=NELboJiJjdNwQtOc_EhbJAZn4k6DG13Xm=A@mail.gmail.com>

With help from Christian Folini, I now have a workaround.

I entered this as a new rule in cPanel WHM's "ModSecurity Tools" section
and restarted Apache:

SecRule REQUEST_URI "^\/mailman\/options\/.*"
"id:900240,phase:1,nolog,pass,t:none,setvar:'tx.restricted_extensions=.asa/
.asax/ .ascx/ .axd/ .backup/ .bak/ .bat/ .cdx/ .cer/ .cfg/ .cmd/ .config/
.conf/ .cs/ .csproj/ .csr/ .dat/ .db/ .dbf/ .dll/ .dos/ .htr/ .htw/ .ida/
.idc/ .idq/ .inc/ .ini/ .key/ .licx/ .lnk/ .log/ .mdb/ .old/ .pass/ .pdb/
.pol/ .printer/ .pwd/ .resources/ .resx/ .sql/ .sys/ .vb/ .vbs/ .vbproj/
.vsdisco/ .webinfo/ .xsd/ .xsx/'"

This is modified from the disabled SecAction 900240 in crs-setup.conf. The
".com/" is removed from the list of extensions, and REQUEST_URI is added to
restrict its action to the specified pages.

Now:
http://lists.xxx.xxx/mailman/options/listname/localpart--at--domain.com is
admitted
http://lists.xxx.xxx/mailman/Xoptions/listname/localpart--at--domain.com is
blocked



On Mon, Oct 9, 2017 at 12:20 PM, Russell Clemings <rclemings at gmail.com>
wrote:

> Using OWASP ModSecurity Core Rule Set ver.3.0.2 on cPanel v66.0.23; CentOS
> 7.3.
>
> I'm getting false positives on 920440 when hitting certain Mailman (v.
> 2.1.23) user options pages -- specifically ones ending in ".com" -- which
> is a lot of them, because Mailman includes the user's email address in the
> URL for the options pages.
>
> What's the best way to deal with this without disabling the rule
> completely? Is there already a fix? If so I couldn't find it.
>
> Sanitized example:
>
> (Now posted at https://pastebin.com/MFyyVNZk because Barracuda won't let
> it onto the list.)
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20171010/2ef6f09c/attachment.html>

From bobjolliffe at gmail.com  Thu Oct 12 11:39:53 2017
From: bobjolliffe at gmail.com (Bob Jolliffe)
Date: Thu, 12 Oct 2017 13:39:53 +0200
Subject: [Owasp-modsecurity-core-rule-set] Possibility of fine tuning
	libinjection results
Message-ID: <CACd=f9ehJ9t24UG9fJch=__59Q4rKb4jTUBBZC2v_dMR5VUNyw@mail.gmail.com>

Hi

I am not very experienced with owcrs so please bear with me if I say
silly things.

I have a problem that rule 942100 (libinjection) is getting falsely
triggered in response to a legitimate api call on our application.  In
particular the the offending URL is:

GET /dhis/api/26/dimensions.json?fields=id,displayName~rename(name),dimensionType&paging=false

Which triggers 942100 with a fingerprint of 'nok(n'.

I don't really want to disable the whole rule as I am sure
libinjection is valuable and it seems it is just this nok thing which
is tripping.   I also will not easily get developers to change the api
in a hurry.  Does anybody know is there a way to keep 942100 but just
disable responding to this particular fingerprint?

Bonus question: can anybody tell me what it is exactly in the URL
which is upsetting libinjection?  I am suspecting it has to do with
'rename(name)'

Regards
Bob

From waqas.khan at nadra.gov.pk  Thu Oct 12 13:56:40 2017
From: waqas.khan at nadra.gov.pk (Waqas Ali Khan (47247))
Date: Thu, 12 Oct 2017 13:56:40 +0000
Subject: [Owasp-modsecurity-core-rule-set] Possibility of fine tuning
 libinjection results
In-Reply-To: <mailman.9.1507809606.20207.owasp-modsecurity-core-rule-set@lists.owasp.org>
References: <mailman.9.1507809606.20207.owasp-modsecurity-core-rule-set@lists.owasp.org>
Message-ID: <1507816599041.67226@nadra.gov.pk>



Hi Bob

To determine what exactly is triggering the rule, you can view the error logs that are created in response to the detected rule. Data matched variable is going to show exactly what is being detected as a threat.

You can disable the mentioned rule just for this particular URI like:

SecRule REQUEST_URI "@beginsWith /dhis/api/26/dimensions.json" "id:10000,phase:1,pass,nolog,ctl:ruleRemoveById=942100"

You will have to include the above rule before the rule file 942100. 

Regards
Waqas Ali
----------------------------------------------------------------------

Message: 1
Date: Thu, 12 Oct 2017 13:39:53 +0200
From: Bob Jolliffe <bobjolliffe at gmail.com>
To: owasp-modsecurity-core-rule-set at lists.owasp.org
Subject: [Owasp-modsecurity-core-rule-set] Possibility of fine tuning
        libinjection results
Message-ID:
        <CACd=f9ehJ9t24UG9fJch=__59Q4rKb4jTUBBZC2v_dMR5VUNyw at mail.gmail.com>
Content-Type: text/plain; charset="UTF-8"

Hi

I am not very experienced with owcrs so please bear with me if I say
silly things.

I have a problem that rule 942100 (libinjection) is getting falsely
triggered in response to a legitimate api call on our application.  In
particular the the offending URL is:

GET /dhis/api/26/dimensions.json?fields=id,displayName~rename(name),dimensionType&paging=false

Which triggers 942100 with a fingerprint of 'nok(n'.

I don't really want to disable the whole rule as I am sure
libinjection is valuable and it seems it is just this nok thing which
is tripping.   I also will not easily get developers to change the api
in a hurry.  Does anybody know is there a way to keep 942100 but just
disable responding to this particular fingerprint?

Bonus question: can anybody tell me what it is exactly in the URL
which is upsetting libinjection?  I am suspecting it has to do with
'rename(name)'

Regards
Bob


------------------------------

From waqas.khan at nadra.gov.pk  Thu Oct 12 14:00:30 2017
From: waqas.khan at nadra.gov.pk (Waqas Ali Khan (47247))
Date: Thu, 12 Oct 2017 14:00:30 +0000
Subject: [Owasp-modsecurity-core-rule-set] Possibility of fine tuning
 libinjection results
In-Reply-To: <1507816599041.67226@nadra.gov.pk>
References: <mailman.9.1507809606.20207.owasp-modsecurity-core-rule-set@lists.owasp.org>,
	<1507816599041.67226@nadra.gov.pk>
Message-ID: <1507816828813.28272@nadra.gov.pk>

The ctl action should be ruleRemoveTargetById. Sorry for the typo. So the final rule should be:

SecRule REQUEST_URI "@beginsWith /dhis/api/26/dimensions.json" "id:10000,phase:1,pass,nolog,ctl:ruleRemoveTargetById=942100"

Regards
Waqas Ali
________________________________________
From: Waqas Ali Khan (47247)
Sent: Thursday, October 12, 2017 6:56 PM
To: owasp-modsecurity-core-rule-set at lists.owasp.org
Subject: Re: [Owasp-modsecurity-core-rule-set] Possibility of fine tuning libinjection results

Hi Bob

To determine what exactly is triggering the rule, you can view the error logs that are created in response to the detected rule. Data matched variable is going to show exactly what is being detected as a threat.

You can disable the mentioned rule just for this particular URI like:

SecRule REQUEST_URI "@beginsWith /dhis/api/26/dimensions.json" "id:10000,phase:1,pass,nolog,ctl:ruleRemoveById=942100"

You will have to include the above rule before the rule file 942100.

Regards
Waqas Ali
----------------------------------------------------------------------

Message: 1
Date: Thu, 12 Oct 2017 13:39:53 +0200
From: Bob Jolliffe <bobjolliffe at gmail.com>
To: owasp-modsecurity-core-rule-set at lists.owasp.org
Subject: [Owasp-modsecurity-core-rule-set] Possibility of fine tuning
        libinjection results
Message-ID:
        <CACd=f9ehJ9t24UG9fJch=__59Q4rKb4jTUBBZC2v_dMR5VUNyw at mail.gmail.com>
Content-Type: text/plain; charset="UTF-8"

Hi

I am not very experienced with owcrs so please bear with me if I say
silly things.

I have a problem that rule 942100 (libinjection) is getting falsely
triggered in response to a legitimate api call on our application.  In
particular the the offending URL is:

GET /dhis/api/26/dimensions.json?fields=id,displayName~rename(name),dimensionType&paging=false

Which triggers 942100 with a fingerprint of 'nok(n'.

I don't really want to disable the whole rule as I am sure
libinjection is valuable and it seems it is just this nok thing which
is tripping.   I also will not easily get developers to change the api
in a hurry.  Does anybody know is there a way to keep 942100 but just
disable responding to this particular fingerprint?

Bonus question: can anybody tell me what it is exactly in the URL
which is upsetting libinjection?  I am suspecting it has to do with
'rename(name)'

Regards
Bob


------------------------------

From spartantri at gmail.com  Fri Oct 13 10:29:52 2017
From: spartantri at gmail.com (Manuel Spartan)
Date: Fri, 13 Oct 2017 12:29:52 +0200
Subject: [Owasp-modsecurity-core-rule-set] Possibility of fine tuning
 libinjection results
In-Reply-To: <1507816828813.28272@nadra.gov.pk>
References: <mailman.9.1507809606.20207.owasp-modsecurity-core-rule-set@lists.owasp.org>
	<1507816599041.67226@nadra.gov.pk> <1507816828813.28272@nadra.gov.pk>
Message-ID: <CAN6xG9shdsoT=DTdD1_efCtbV3yi63v1p0ZYu3X5DshU9yzsbQ@mail.gmail.com>

You can do some checks before killing the rule by chaining that rule and
verifying the contents of "fields" if it is always the same use a streq as
the example below, otherwise do a rx including a pattern that match your
different values.

SecRule REQUEST_URI "@beginsWith /dhis/api/26/dimensions.json"
"id:10000,phase:1,pass,nolog,chain"
    SecRule ARGS:fields "@streq id,displayName~rename(name),dimensionType"
"ctl:ruleRemoveTargetById=942100;ARGS:fields"

You may want to use phase 2 instead of phase 1 or viceversa, if you have
issues depending of your setup

2017-10-12 16:00 GMT+02:00 Waqas Ali Khan (47247) <waqas.khan at nadra.gov.pk>:

> The ctl action should be ruleRemoveTargetById. Sorry for the typo. So the
> final rule should be:
>
> SecRule REQUEST_URI "@beginsWith /dhis/api/26/dimensions.json"
> "id:10000,phase:1,pass,nolog,ctl:ruleRemoveTargetById=942100"
>
> Regards
> Waqas Ali
> ________________________________________
> From: Waqas Ali Khan (47247)
> Sent: Thursday, October 12, 2017 6:56 PM
> To: owasp-modsecurity-core-rule-set at lists.owasp.org
> Subject: Re: [Owasp-modsecurity-core-rule-set] Possibility of fine tuning
> libinjection results
>
> Hi Bob
>
> To determine what exactly is triggering the rule, you can view the error
> logs that are created in response to the detected rule. Data matched
> variable is going to show exactly what is being detected as a threat.
>
> You can disable the mentioned rule just for this particular URI like:
>
> SecRule REQUEST_URI "@beginsWith /dhis/api/26/dimensions.json"
> "id:10000,phase:1,pass,nolog,ctl:ruleRemoveById=942100"
>
> You will have to include the above rule before the rule file 942100.
>
> Regards
> Waqas Ali
> ----------------------------------------------------------------------
>
> Message: 1
> Date: Thu, 12 Oct 2017 13:39:53 +0200
> From: Bob Jolliffe <bobjolliffe at gmail.com>
> To: owasp-modsecurity-core-rule-set at lists.owasp.org
> Subject: [Owasp-modsecurity-core-rule-set] Possibility of fine tuning
>         libinjection results
> Message-ID:
>         <CACd=f9ehJ9t24UG9fJch=__59Q4rKb4jTUBBZC2v_dMR5VUNyw at mail.
> gmail.com>
> Content-Type: text/plain; charset="UTF-8"
>
> Hi
>
> I am not very experienced with owcrs so please bear with me if I say
> silly things.
>
> I have a problem that rule 942100 (libinjection) is getting falsely
> triggered in response to a legitimate api call on our application.  In
> particular the the offending URL is:
>
> GET /dhis/api/26/dimensions.json?fields=id,displayName~rename(
> name),dimensionType&paging=false
>
> Which triggers 942100 with a fingerprint of 'nok(n'.
>
> I don't really want to disable the whole rule as I am sure
> libinjection is valuable and it seems it is just this nok thing which
> is tripping.   I also will not easily get developers to change the api
> in a hurry.  Does anybody know is there a way to keep 942100 but just
> disable responding to this particular fingerprint?
>
> Bonus question: can anybody tell me what it is exactly in the URL
> which is upsetting libinjection?  I am suspecting it has to do with
> 'rename(name)'
>
> Regards
> Bob
>
>
> ------------------------------
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20171013/efeda94c/attachment.html>

From waqas.khan at nadra.gov.pk  Fri Oct 13 10:39:39 2017
From: waqas.khan at nadra.gov.pk (Waqas Ali Khan (47247))
Date: Fri, 13 Oct 2017 10:39:39 +0000
Subject: [Owasp-modsecurity-core-rule-set] Possibility of fine tuning
 libinjection results
In-Reply-To: <CAN6xG9shdsoT=DTdD1_efCtbV3yi63v1p0ZYu3X5DshU9yzsbQ@mail.gmail.com>
References: <mailman.9.1507809606.20207.owasp-modsecurity-core-rule-set@lists.owasp.org>
	<1507816599041.67226@nadra.gov.pk>
	<1507816828813.28272@nadra.gov.pk>,
	<CAN6xG9shdsoT=DTdD1_efCtbV3yi63v1p0ZYu3X5DshU9yzsbQ@mail.gmail.com>
Message-ID: <1507891180187.69009@nadra.gov.pk>

Thank you Manuel Spartan for the response. Yes it is always good to create very specific disable rules to make sure the rules are ignored only for the specific requests.


@Bob Jolliffe?, please take note of the SecRule from Manuel Spartan. These are more specific and the matching rule ID will only be ignored for the request causing problem.


Regards

Waqas Ali

________________________________
From: Manuel Spartan <spartantri at gmail.com>
Sent: Friday, October 13, 2017 3:29 PM
To: Waqas Ali Khan (47247)
Cc: owasp-modsecurity-core-rule-set at lists.owasp.org
Subject: Re: [Owasp-modsecurity-core-rule-set] Possibility of fine tuning libinjection results

You can do some checks before killing the rule by chaining that rule and verifying the contents of "fields" if it is always the same use a streq as the example below, otherwise do a rx including a pattern that match your different values.

SecRule REQUEST_URI "@beginsWith /dhis/api/26/dimensions.json" "id:10000,phase:1,pass,nolog,chain"
    SecRule ARGS:fields "@streq id,displayName~rename(name),dimensionType" "ctl:ruleRemoveTargetById=942100;ARGS:fields"

You may want to use phase 2 instead of phase 1 or viceversa, if you have issues depending of your setup

2017-10-12 16:00 GMT+02:00 Waqas Ali Khan (47247) <waqas.khan at nadra.gov.pk<mailto:waqas.khan at nadra.gov.pk>>:
The ctl action should be ruleRemoveTargetById. Sorry for the typo. So the final rule should be:

SecRule REQUEST_URI "@beginsWith /dhis/api/26/dimensions.json" "id:10000,phase:1,pass,nolog,ctl:ruleRemoveTargetById=942100"

Regards
Waqas Ali
________________________________________
From: Waqas Ali Khan (47247)
Sent: Thursday, October 12, 2017 6:56 PM
To: owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>
Subject: Re: [Owasp-modsecurity-core-rule-set] Possibility of fine tuning libinjection results

Hi Bob

To determine what exactly is triggering the rule, you can view the error logs that are created in response to the detected rule. Data matched variable is going to show exactly what is being detected as a threat.

You can disable the mentioned rule just for this particular URI like:

SecRule REQUEST_URI "@beginsWith /dhis/api/26/dimensions.json" "id:10000,phase:1,pass,nolog,ctl:ruleRemoveById=942100"

You will have to include the above rule before the rule file 942100.

Regards
Waqas Ali
----------------------------------------------------------------------

Message: 1
Date: Thu, 12 Oct 2017 13:39:53 +0200
From: Bob Jolliffe <bobjolliffe at gmail.com<mailto:bobjolliffe at gmail.com>>
To: owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:owasp-modsecurity-core-rule-set at lists.owasp.org>
Subject: [Owasp-modsecurity-core-rule-set] Possibility of fine tuning
        libinjection results
Message-ID:
        <CACd=f9ehJ9t24UG9fJch=__59Q4rKb4jTUBBZC2v_dMR5VUNyw at mail.gmail.com<mailto:59Q4rKb4jTUBBZC2v_dMR5VUNyw at mail.gmail.com>>
Content-Type: text/plain; charset="UTF-8"

Hi

I am not very experienced with owcrs so please bear with me if I say
silly things.

I have a problem that rule 942100 (libinjection) is getting falsely
triggered in response to a legitimate api call on our application.  In
particular the the offending URL is:

GET /dhis/api/26/dimensions.json?fields=id,displayName~rename(name),dimensionType&paging=false

Which triggers 942100 with a fingerprint of 'nok(n'.

I don't really want to disable the whole rule as I am sure
libinjection is valuable and it seems it is just this nok thing which
is tripping.   I also will not easily get developers to change the api
in a hurry.  Does anybody know is there a way to keep 942100 but just
disable responding to this particular fingerprint?

Bonus question: can anybody tell me what it is exactly in the URL
which is upsetting libinjection?  I am suspecting it has to do with
'rename(name)'

Regards
Bob


------------------------------
_______________________________________________
Owasp-modsecurity-core-rule-set mailing list
Owasp-modsecurity-core-rule-set at lists.owasp.org<mailto:Owasp-modsecurity-core-rule-set at lists.owasp.org>
https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set


From bobjolliffe at gmail.com  Fri Oct 13 11:06:37 2017
From: bobjolliffe at gmail.com (Bob Jolliffe)
Date: Fri, 13 Oct 2017 13:06:37 +0200
Subject: [Owasp-modsecurity-core-rule-set] Possibility of fine tuning
	libinjection results
In-Reply-To: <CACd=f9ehJ9t24UG9fJch=__59Q4rKb4jTUBBZC2v_dMR5VUNyw@mail.gmail.com>
References: <CACd=f9ehJ9t24UG9fJch=__59Q4rKb4jTUBBZC2v_dMR5VUNyw@mail.gmail.com>
Message-ID: <CACd=f9eScJS8yTx4bR-_xNRStKRNRp-K0V4pyxHESYiSx36-SQ@mail.gmail.com>

Thanks Waqas and Manuel for your valuable suggestions.

And sorry for replying here to my own post instead of yours - I was
receiving just the digest not the individual mails.

As I said, your suggestions are valuable learning for me, but don't
really get to the heart of my problem.  Unfortunately this is not
going to be just one url.  There are many which will use the same
pattern of parameters.  What I am really trying to get to is the
fingerprint result of libinjection.  My understanding is that
libinjection returns a 1 or 0 result indicated attack detected, but
also the fingerprint of the attack detected.  In this case 'nok(n' .
Is there some way I can say to respect the result of libinjection but
ignore this particular fingerprint?

That seemed to be the intent of early discussion of integrating
libinjection back in 2013
(https://sourceforge.net/p/mod-security/mailman/message/30387182/).
The syntax proposed in that message was:

SecRule ARGS "@detectSQLi /path/to/fingerprints.txt"

Maybe it does actually work like that and I am missing something.

Regards
Bob



On 12 October 2017 at 13:39, Bob Jolliffe <bobjolliffe at gmail.com> wrote:
> Hi
>
> I am not very experienced with owcrs so please bear with me if I say
> silly things.
>
> I have a problem that rule 942100 (libinjection) is getting falsely
> triggered in response to a legitimate api call on our application.  In
> particular the the offending URL is:
>
> GET /dhis/api/26/dimensions.json?fields=id,displayName~rename(name),dimensionType&paging=false
>
> Which triggers 942100 with a fingerprint of 'nok(n'.
>
> I don't really want to disable the whole rule as I am sure
> libinjection is valuable and it seems it is just this nok thing which
> is tripping.   I also will not easily get developers to change the api
> in a hurry.  Does anybody know is there a way to keep 942100 but just
> disable responding to this particular fingerprint?
>
> Bonus question: can anybody tell me what it is exactly in the URL
> which is upsetting libinjection?  I am suspecting it has to do with
> 'rename(name)'
>
> Regards
> Bob

From christian.folini at netnea.com  Fri Oct 13 12:50:46 2017
From: christian.folini at netnea.com (Christian Folini)
Date: Fri, 13 Oct 2017 14:50:46 +0200
Subject: [Owasp-modsecurity-core-rule-set] Trustwave Position: Security
	Researcher - ModSecurity
Message-ID: <20171013125046.6thrazz7fwukd3rv@leander>

Hi there,

Just caught a tweet about a position for a Security Researcher
with Trustwave:

https://jobs.jobvite.com/careers/trustwave/job/oHPI5fw3?__jvst=Employee&__jvsd=sTFykfwa&__jvsc=Twitter&bid=ntlpMBw5

Would be cool if some active member from the community would apply.

Cheers,

Christian

-- 
Demagoguery is easy.
-- Bruce Schneier

From christian.folini at netnea.com  Sat Oct 14 09:56:36 2017
From: christian.folini at netnea.com (Christian Folini)
Date: Sat, 14 Oct 2017 11:56:36 +0200
Subject: [Owasp-modsecurity-core-rule-set] DINAcon Hacknight Oct 20 in Berne,
	Switzerland
Message-ID: <20171014095636.r46jtcn5tidhcx6z@leander>

Hi there,

Fr?nzi B?hler and I will take part at the HackNight at the Swiss DINAcon
next Friday in Berne, from 6pm local time.

We have plenty of PRs to review, but we also plan to work on new ideas.

Having more people join us on site would of course be fun, but participating
remotely could also be an option. If interested, then please get in join.

Here is the tweet introducing the idea. Please retweet.
https://twitter.com/CoreRuleSet/status/919138876819759107

Ahoj,

Christian


-- 
ModSecurity courses Oct 2017 in London and Zurich
https://www.feistyduck.com/training/modsecurity-training-course
https://www.feistyduck.com/books/modsecurity-handbook/
mailto:christian.folini at netnea.com
twitter: @ChrFolini

From aurel-la at laposte.net  Tue Oct 17 11:52:34 2017
From: aurel-la at laposte.net (Aurel)
Date: Tue, 17 Oct 2017 13:52:34 +0200
Subject: [Owasp-modsecurity-core-rule-set] XSS Attack and PHP source code
 leakage with Nextcloud 10.0.3 (HTTP methods and content-types allowed)
Message-ID: <8F037F2A-267B-4E62-B549-69A61B19AA1A@laposte.net>

Dear all,

I am trying to make ModSecurity v3/Nginx 1.12.1 working together with NextCloud 10.0.3 on a Debian Jessie. I am using the latest available code from the git repository for ModSecurity v3 and its nginx connector and the owasp 3.0.2 rules.

I am getting the following ModSecurity exceptions when refreshing the administration page of NextCloud which execute some automatic testing on webdav and others. I don?t know how to make ModSecurity working with Nextcloud :

None None None
None 949110 Inbound Anomaly Score Exceeded (Total Score: 15)
None 920420 Request content type is not allowed by policy
None 980130 Inbound Anomaly Score Exceeded (Total Inbound Score: 15 - SQLI=0,XSS=15,RFI=0,LFI=0,RCE=0,PHPI=0,HTTP=0,SESS=0): XSS Filter - Category 3: Attribute Vector
None 941130 XSS Filter - Category 3: Attribute Vector
None 953120 PHP source code leakage
None 941100 XSS Attack Detected via libinjection

To resume the details given below, I got two problems :
	1) ModSecurity: Warning. Matched "Operator `Rx' with parameter [msg "PHP source code leakage"] 
	2) Warning. detected XSS using libinjection [msg "XSS Attack Detected via libinjection"] [data "Matched Data: requesttoken found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"]

In crs-setup-cloud.conf I allowed all the HTTP methods and content-types. Its works as it reduced a lot my previous exceptions on HTTP methods and content-types but still these two problems are occurring. How should I process to make Nextcloud working and let ModSecurity as tightened as possible ?

Thanks for your help,

A.

Here my crs-setup-cloud.conf :

SecDefaultAction "phase:1,log,auditlog,pass"
SecDefaultAction "phase:2,log,auditlog,pass"
SecAction \
 "id:900110,\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.inbound_anomaly_score_threshold=7,\
  setvar:tx.outbound_anomaly_score_threshold=6"
SecAction \
 "id:900200,\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:'tx.allowed_methods=GET HEAD POST OPTIONS PROPFIND PUT REPORT DELETE MKCOL CHECKOUT COPY LOCK MERGE MKACTIVITY MOVE PROPPATCH UNLOCK PUT PATCH'"
SecAction \
 "id:900220,\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:'tx.allowed_request_content_type=application/x-www-form-urlencoded|multipart/form-data|text/xml|application/xml|application/soap+xml|application/x-amf|application/json|application/octet-stream|text/plain'"
SecCollectionTimeout 600
SecAction \
 "id:900990,\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.crs_setup_version=302 ?

Here my ModSecurity conf file :

SecRuleEngine On
SecRequestBodyAccess On
SecRule REQUEST_HEADERS:Content-Type "(?:application(?:/soap\+|/)|text/)xml" \
     "id:'200000',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"
SecRule REQUEST_HEADERS:Content-Type "application/json" \
     "id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"
SecRequestBodyLimit 13107200
SecRequestBodyNoFilesLimit 131072
SecRequestBodyLimitAction Reject
SecRule REQBODY_ERROR "!@eq 0" \
"id:'200002', phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2"
SecRule MULTIPART_STRICT_ERROR "!@eq 0" \
"id:'200003',phase:2,t:none,log,deny,status:400, \
msg:'Multipart request body failed strict validation: \
PE %{REQBODY_PROCESSOR_ERROR}, \
BQ %{MULTIPART_BOUNDARY_QUOTED}, \
BW %{MULTIPART_BOUNDARY_WHITESPACE}, \
DB %{MULTIPART_DATA_BEFORE}, \
DA %{MULTIPART_DATA_AFTER}, \
HF %{MULTIPART_HEADER_FOLDING}, \
LF %{MULTIPART_LF_LINE}, \
SM %{MULTIPART_MISSING_SEMICOLON}, \
IQ %{MULTIPART_INVALID_QUOTING}, \
IP %{MULTIPART_INVALID_PART}, \
IH %{MULTIPART_INVALID_HEADER_FOLDING}, \
FL %{MULTIPART_FILE_LIMIT_EXCEEDED}'"
SecRule MULTIPART_UNMATCHED_BOUNDARY "!@eq 0" \
"id:'200004',phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'"
SecPcreMatchLimit 1000
SecPcreMatchLimitRecursion 1000
SecRule TX:/^MSC_/ "!@streq 0" \
        "id:'200005',phase:2,t:none,deny,msg:'ModSecurity internal error flagged: %{MATCHED_VAR_NAME}'"
SecResponseBodyAccess On
SecResponseBodyMimeType text/plain text/html text/xml
SecResponseBodyLimit 524288
SecResponseBodyLimitAction ProcessPartial
SecTmpDir /data/tmp/www/mydomain.com/cloud/modsecurity
SecDataDir /data/tmp/www/mydomain.com/cloud/modsecurity
SecUploadDir /data/tmp/www/mydomain.com/cloud/modsecurity
SecAuditEngine RelevantOnly
SecAuditLogRelevantStatus "^(?:5|4(?!04))"
SecAuditLogParts ABIJDEFHZ
SecAuditLogType Serial
SecAuditLog /var/log/modsec/mydomain.com/cloud-audit.log
SecArgumentSeparator &
SecCookieFormat 0
SecUnicodeMapFile unicode.mapping 20127
SecStatusEngine On
include ../modsec_core_cloud.conf

Here modsec_core_cloud.conf :

include owasp-modsecurity-crs/crs-setup-cloud.conf
include owasp-modsecurity-crs/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS-cloud.conf
include owasp-modsecurity-crs/REQUEST-901-INITIALIZATION.conf
include owasp-modsecurity-crs/REQUEST-905-COMMON-EXCEPTIONS.conf
include owasp-modsecurity-crs/REQUEST-910-IP-REPUTATION.conf
include owasp-modsecurity-crs/REQUEST-911-METHOD-ENFORCEMENT.conf
include owasp-modsecurity-crs/REQUEST-912-DOS-PROTECTION.conf
include owasp-modsecurity-crs/REQUEST-913-SCANNER-DETECTION.conf
include owasp-modsecurity-crs/REQUEST-920-PROTOCOL-ENFORCEMENT.conf
include owasp-modsecurity-crs/REQUEST-921-PROTOCOL-ATTACK.conf
include owasp-modsecurity-crs/REQUEST-930-APPLICATION-ATTACK-LFI.conf
include owasp-modsecurity-crs/REQUEST-931-APPLICATION-ATTACK-RFI.conf
include owasp-modsecurity-crs/REQUEST-932-APPLICATION-ATTACK-RCE.conf
include owasp-modsecurity-crs/REQUEST-933-APPLICATION-ATTACK-PHP.conf
include owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf
include owasp-modsecurity-crs/REQUEST-942-APPLICATION-ATTACK-SQLI.conf
include owasp-modsecurity-crs/REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION.conf
include owasp-modsecurity-crs/REQUEST-949-BLOCKING-EVALUATION.conf
include owasp-modsecurity-crs/RESPONSE-950-DATA-LEAKAGES.conf
include owasp-modsecurity-crs/RESPONSE-951-DATA-LEAKAGES-SQL.conf
include owasp-modsecurity-crs/RESPONSE-952-DATA-LEAKAGES-JAVA.conf
include owasp-modsecurity-crs/RESPONSE-953-DATA-LEAKAGES-PHP.conf
include owasp-modsecurity-crs/RESPONSE-954-DATA-LEAKAGES-IIS.conf
include owasp-modsecurity-crs/RESPONSE-959-BLOCKING-EVALUATION.conf
include owasp-modsecurity-crs/RESPONSE-980-CORRELATION.conf
include owasp-modsecurity-crs/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS-cloud.conf

Here the details of the ModSecurity matched rules :

ModSecurity: Warning. Matched "Operator `Rx' with parameter `(?:\x1f\x8b\x08|\b(?:(?:i(?:nterplay|hdr|d3)|m(?:ovi|thd)|r(?:ar!|iff)|(?:ex|jf)if|f(?:lv|ws)|varg|cws)\b|gif)|B(?:%pdf|\.ra)\b)' against variable `RESPONSE_BODY' (Value: `\xe5]\xe9r\xdbF\xb6\xfe\xad<E\x87\xa9df*\x06\x17Ivd\x85T\x8a^cO\xa28\x91\xbc\xe5\x8f\x0a\x04\x9a$,\x (26086 characters omitted)' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/RESPONSE-953-DATA-LEAKAGES-PHP.conf"] [line "79"] [id "953120"] [rev "2"] [msg "PHP source code leakage"] [data "Matched Data: <? found within RESPONSE_BODY: \xe5]\xe9r\xdbF\xb6\xfe\xad<E\x87\xa9df*\x06\x17Ivd\x85T\x8a^cO\xa28\x91\xbc\xe5\x8f\x0a\x04\x9a$,\x10@\xd0\x00%\xf9\x01\xee+\xdc\xbfS\xf7W|_Cor\x9f\xe4~\xe7t7\x16.\xa2$s\xca\x1e&\x95D$\xd0\xcb9\xa7O\x9f\xbd\x9b\xdd/\x1f\xfd\xf2\xf0\xf8\xed\x8b\xc7b\x9cM\xc2\x83/\xba\xf4Gx\xa1\xabT\xaf\x11\x8d\x1cO%\x0d\xe1\xbb\x99\xeb$\xa1\xeb\xc9q\x1c\xfa2u\x86\xb1\x97\xe3\xfd\xd0\x0d\x95l\x88\xd0\x8dF\xf8\x926\xc4\xc1\x17[\xdd\xb1t}\xdd#W2\xed5\\x7f\x12D\x81\xcaR7\x939\xda\xf0`\xf4\xca\xf1\x03\x85A/"w"{\x8d\xfe\xa2f\xa9\xfc#\x97*\xcb\xe2S\x19\xf5\x1ao\x07\xbboT6\xdc=\xddm\x9d\x9eN\x87?=I\x13\xd9?\x0f\xde?k\xa9o\xf7\xe2\x1f\x7f\x8a\x7fy\x13\xfe\x11\x84?\xbe\xdd\xe9\xf7\xf6_\xaa\xac\xdf~6\xf8\xe7\xb6{\xfcfo\x10\xdd\xf3\x0e\xcf\x92\xe3\x9d\x9d\x97/\x07\xfe\x0b\xf5\x8b\xfb\xe0\xfcw\xf7\xcd\xee\xd3_\xe3\xe7Go{\x0d\xc0\xbd\xd5\x9d\xc8\xcc\x15\xde\xd8M\x95\xccz\x8d<\x1b:{\xfaE\x16d\xa1\xa4&[\x15 \x838\x12\x8e8\x94\xe7\x99\x17\xc6\xb9\x8f\xfe\xad\xa2\x9d\x1ej\x9ce\x89\x03\x04\x82i\xaf\xf1\xc6y\xd9w\x1e\xc6\x93\xc4\xcd\x82A\x08\x9ayq\x94\xc9\x08\xf3<{\xdc\x93\xfeHV@\xd0\xf4H\xe5P\xa6\xa9\x04\xc1\x8a\xa6\x91\x9c\xe2{\x09\xabn8\x0d\xe4Y\x12\xa7Y\xa5\xe1Y\xe0g\xe3\x9e/\xa7\x81'\x1d\xferG`\x0d\xb2\xc0\x0d\x1d\xe5\xb9\xa1\xecu\x9a\xed;\x82\xd6e\x92Oj\x8f\xdc\xf3\xfa\xa3\xb9\xe9\xdc$\x09\xa5\x13dy$\x95\x83/\x95i\xf1\xcd\x09\xfc^\xa7\xb3}ww\xbb\xddio/\xe9<\x89\x07\x01\xc68\x93\x03\x1a\xc0\xf1\xdc\xc4\xad\xd3\xe4B\xaa\xebuU\x99\x9b\xe5\xca\x19\xb8\xa9\xa3\xb2\x8b\x1a]\x07`\xd7\xd3\xeb\x8d\xc2\xebV\xc1\xa3\xbe\xcasc\xdc\x0a\xfcl,'\xd2\xf1\xe20\xae\xae\xe8W\xed\xf6\xde\xb6w_O\x11\x06\xd1\xa9He\xd8k\x04X\xf2\x86\x18\x83\x05z\x8d\x96\x17\xa7\xb2\x15LF\xad\xa1\x8b\xf5\x8c\xa3&\xfe7\xdbA/J\x16\xe7\xde\xd8\xa16N\x92J\x0f\xdc\x16+\xe9/\x1d\xc8\xe1\xf6\xcd$\x1a\xcd\x0e7q\xd5)\x8f\xd3\x10*x/\xb1\xd3\xdd\xe8b\xf98\xd4\xbc\xa9\xa6#"!\xf0\xeb5\x96\xa05q\xa3`\x88\xed<?\x92}\xd3|\xa70)o5\xfa\xa7[\x92\x84\x97W\x8d\xa5\x9c\xe9=\x95\x91\x1f\xa7-%C\xe9e\xdb\xf6o\xd3S\xea\x87io\xfb\xae\xbf3\x18v\xf6\xdc\xef\xee\x0e\xefu\xf6\xb0\xa3d\xa7\xed\xeez\xf7\xeey\xdf\x0d\xf7v\xef;m;\xd7\x8a\x99\x94\xd2\xcb\xb0'\xef\xef\xb8\xb2\xed\xed\x0e<Ov\xfc\x9d\xfb\xde\xc0\xbf\xbf'\xe5^{{\xd7\xdf\x93;\x0e\xc4\x1a\xf6\xe8\xba\xa7'\x0e0\x88\xbe\x83 at L/\x9c<h1G\xa9\xd6\xc0U\xb2U<\xfdw\xcc\x0cZ\x96\x138\xc3\xe0\\xaa5O\x03\xf6U\xad!d\x82:I\xfc!\x094\x99\xb6hZ^\xf55OF\xe3\xf2\x9eZ\xbd\x98\xd0\x05\xeb\x9e\xbd\x82*\x18EA\x8b\x00\x1a at d\xbf\xac\x19\xd9\xeat\x81/c\xd2\xb7\xffF\xda\xf2tQ\x9c\x05\xc3\xc0\x83\xa6\xb3\xc8\xe9\xcd\xbbf\xd4x\x0dK\xdel\xc6\x9e\x0f\xfd\x16\x8f\xd6<\x0d\x8c\x81,\x88Fz\x95\xec\x97\x1b\xcf\xc1\xd2Lyi\x90d"\x8a#\x0f\x06\xcf\xeb\xd7\xcf\xda\xaf\x7f<l\xff\xfe\xee\xb7\xf4\xf0\xe1\xfd\xd4\xdd\xf9}r\xfc\xf8\xf7\x0b\xef\xe9\xab\x07\xf2ix\xef\xe8\xe8\xfe\xfb\x7f\xbe\x1fO\x8f\x1e\x9fO\x8f;c\xe5\xbd\x0e\xd5\xd1\x93\xd3\xf7\xbf\x1e\xb7\xef\xbdzs\xd8\xfe\xf5\xf8\xc1\xf3\xb7\xa7\xea\xe2\xed\xab\xdf\xde\xfe\xf2\xf4y~89\xfc\xc5\xdfy\xf0\xf2\xe7\xf7\x87\xaf^\xbd~~\xfa\xf2\xc7\xc3\x17o_>\xdf}=y\xf2\xf6\xf0\xb1\xff\xdb\xa0\x9d\x1c\xbf>n\xf7 \xd3S\xcf\xea\x95w\xaa\x15{\x90\xba\xd7\x10\x96\x8d\x83nKc`\xe4\xf3\xe7\x88\x8f\x91\x92\xc4\x1b\xd7\xc3\x8aT\xc0\xe7\x8d\x17\x96\x88Y}"\xd3\x91\xf4\x9dLN\xb0\x893I*>\x81\xf2\xdb\x144\x19G%\xdd\xd4\x1b\xb7\x80\xb2\xfe\xb4Q\xc8\x85\x9dv\xd4\x1a\xa6\x1b\x85\x13Vj\x00;{\x94\xc6y\xe4\xbf\x8b\x07jS\xb0[h\x92\x00[\xec:v\xb8\xc2|\x14D\x9b\x82\xec\x8c\x88Qd\xf7\xc0\xa9\xf2\xe0uo\x8c|Yb\x09\x01umon\xcaZ2\x9e#7\x0c\xe1&\xb46L\xe4,0/7\x0cC\xb0c\xdd|\xd6Z\x7fS\x98\x93\x95<p,\xfcU\xe3N^\xcb\x00\xfd\xfcM5\x8b\x1e\xbb\xb2\xec\xd0\x06\xd10\xde\xb4\xc5\xd3\xd8ya\x80\xf8\xe5\xa6\xe1F\xb1V\xd7\xcb\xd4DF\xf9\xa6\xe0\xc6R3O\x10w\x97U\xd9\xb2\x91\xcaa\x01\x9a\x107\x9c\x82\xd8\x94\xe5,\x02\x12\x1b\xa6\xfa\x0a\xbc\xd8\xfb\xd3A\x97\x8d[\xb3\x8deF F\xb1\xb7\x0dQ\xe4U^\xf4dj\xe2\x99\x88{o\x08~\xd6P\x99\xe4a\x16\xe8\xdc\xc9\xa6\xa1\x86%\xcc\x13o,\xbd\xd3\x8dY\xb5\xd2\x85\xddH\xdd\xad\xed\xca\xc2;h\xd2\xf7<\x09c\xf7\xd61\x88\xab\xb3zLN\xca\xa2!\xbc\xaf3M\x14\x06o7Z\x076\xb2\xad\x03\xe5\xb5v\x00\xcft\xe1\xb6\x9f<\x98_\x06\xafQ\x80@\xa5\x17T\x821\x88\xfd\x0b\x81L|\x83> '\xa9\x95)\xe5:\xbbQ\\xc4\xf0\xbb~0\xe5VQ\xfc\xce\x9d\xba\xfa\xb9N\x05\xe3\x0d\x07\xf9\x1f\xa2\xab\x14 @h\xf29\xc8O\xa3\xa0\x01\x12Q<G\x97#\x9d\xd0H\xe2<\x15Cd5(\xe3\x13\xc9\x14i`T.x\x88T\x93\x87 ^\xc9<@8\xe2\xbd\xe8\xba&\xa7M\x95\x11\xfb\xad\x96\x8c(\xef\xef\x94\x937\x91\xb3n5D\xe6"\xd2\x8d\xd2\x88\x13\xe4\xf0\xa3\xd3\x86\xce\x89Gp\x1dME\xc4\x01,\xf4\x00\x09\xb3\x0a\x0c\xdd\x96{ d\x86\xa6T\xc01\xc2\xbb\xd0\x15\x89;\x92M*\xcc\xd0\xe8\x98\xbf]x\xd8\x8bhP&\xad\x90\xa6\x87\x17\x10\x00\x93\x82\x1a\x86Ne\x1b\xca\x1a\xd4\x86\xd5\x85/\x988\x8dQ_\xd1\x18\xb8D\x09\xb4\xb2D\xa6\xb51\x03n\xf1CSc\xa3\x9f;\xa1\x1cf&\x19]\x90\xa9\xd5\xd0\x89p^#[hB\xe4\x19\x04\x91/\xcf{\x8dN\x91\xbe\xae\x0c\x085\x1c\xeb\xe4\xbd\xcd\xa3w\xc7\x9db\xb6\xc0\xf7e\xe4L\x03\x95#DtQ\xa6\xda+\x85,\x9c\xabj\x8d;6\xcdc\xf0\xe4\xa7\xee\xc1\x17\x0cS\x01\xe3WH\xfa\xebb!\x83\x08\x98\x85\xeaRJ\x1a\x0a\xf2\xa5\xb2x4\xa2\x1a\x8b\x12v]\x1cBCU\xa0c\x1aQQ\x08\x0dQ\x00W\xaf\xc7\xa0\xe9k\xf0Up\xe7\xda\x07\x0f\xd1K\xd0\xd2\xaeO\x1d\xee<\xe4\xa5\xc4\x14\x04V\x89?\x0f\x1a\x06\xba:\x89Z\xb04*\x91c\xba\x95\xcd\xcb5\xaa\x08e\xb3\[[BT\x10\xdd)\x1eo\x15\x85\x0d[]\x14t\x98<\e\x00\xaa\xf2\xc0W\xaa\xa5\xb8NB\xce\x96I`B\xb3\x06\xe8\xac\x97\xbeU\x99j\x96>$Q!\xf2\x1c5\x01\x0b8\xbe\x9b\x9e\x96\x10n\x09\xce\xd5\xf6\x1a\xa66k\x1f\xc9J\xf9}\x8d\x98\x96\x9e\xbc\x0e\x94\xd5L\xdc\xa8\x9c\xedI\xe0\x8d!\x1f\x94}\xdb\xd2\xaf\x0d\xa8\xddV\x18\x94mgI\xce\xdb:\xc8PibY\xeaj\xaa\xdb\xf6v\x9f\xdc\x86\xf0\xc5\x18L{\x03\xc0\x7f\xf2\x02\xf45\x0e\x97\x1fn\xb3\x02&n|\xdd\x05\xb0a\xe6\x8f`|;\xc4\x06\xb0\xfeS\x14\xd6\xa5\x81\xbc\x0d\xdd\x15\xd2JT\xa9u=\xbe\xd7\xad?\x86\xeb\xcd\x08\x1b@\xf4~\x92\xc8P\x89i\xe0_~\x88oCz\x1b\xf1\xbb.\xf1m\xfb\x8f!\x7f1\xc6\x06,\xc0C\x131\xbd\x15\xed\xb1c"(\xa0k\xd3\xde\xb4\xff(\xda\xdb1\x88\xf6T\x0bK\x00\xfcG\x0b\xfc\x11\xa1p=\xf2\x93\x85C\xc6\xcd\x04\xc64\x99Y\xa5\x81S1\xd2\x0a\xb3\xd1\x9a\xeb_U\xec\x9eYc\x82G:\x1b\x07\x19\xcc\xb5\x8a\xc5E\xaa\x9d5\xff\x8b0W\xc2\xff\xe6\xab\xf6\xce\xfd\xef1\xa1\xf5#\x14jn*v\x03\x1b\x96\x8cBi!t[9\xea\xd1\xb5\xb5\x19\xb9ScW\xe3S0\xe2\xd2\xb2\x9a\xed\xcb&r\xf9j\xd6\x8a!7\x8d\xcc\x18k\x86X\xa3\x9cIP\x18$]\x9a\xd0\x10\xb2\xfc\xb3\xc0*\xac\xb4Zl\x08.6\xff\xb6*\x06 \xd1g:\x12\xbaR\xbb\xd1\xb9\x87\x9aX\x19\x8c\xc6\xf0z\xe83\xa5\xa4\x1f\xc4\xb0\xf0\xdb\xa2-:\xf7\xf0\xef\x8c\xa5\xea\xcb\xa1:\xe8\xc2F\xcd\xe0q\x10\xf2A\x04\x87(C:\x8d\xacV\xbc\x91\x0f\xa9\x14\xf7g7K\x83s\xd4~\xf7\x1aGp\xd2<\xf94u\x93q\xe0\xc1\x10\xbfH`\xe5M\xf8=\xe6sC\xd4\xd9\xf7\x1aN\x07\xf3\xf1\x9c\xf8\xcf|\xd1\x8f\xf8K\xe5-\xadvm\x12\xfa\xce\xe0\x10\x1b\x10tUJ\xc2\xdc\x85/&\x08\xa1\x86\xb8\xe0\xff/\xc1\x1c\x8a\x90kh\xfb*\x81\x07\xf9\x1b\xadt\xafq\xfes\x10\xbd\xc5\x7fp%\xa8\xfeW\xcf\x83\x12\xfd4\xfc\xfbWU\xc4\xff\xd1\x10\xe7T2\xbcoJ\xa7ooZ\x8b9\x8b\x1ah1\x12U\xbc\xc0\xc4\xd3Q\xed\xc1\xec\xf6X`k\xcf\xf2\xe6B\x0b\xbb\xd8?\xd6\x9e\xae\xef\x17\xde(v\xcb\xd4\xb7M\x8d\x7fk\xbc[\x98\xd7\xcb\xd9\xb7\xb4\xa8?\x19\x07\x97P\xfe\xf5\x98\xd8\xe2\xbe\x90\x8f?\xcaS\xf9l\xf8\xb9pO\xd6\xc0\xd0\xd6[Y\xce\xcf\x85\x83\xf2\xc9\xd8\xb9\x80\xf1\xaf\xc7\xcd\x06\xf5\x85\xcc|K\xb7\xef\xb3ac\xe3\xeb\xad\x81\x89\x8d\xeb\xb7\x9c\x87\xad\xb7\xf7\xc9X\xd8B\xf8\xd7\xe3`\x8d\xf9B\x06\xbe\x9d\x07\xfd\xd9\xf0o\xcdm^\x03\x17\x17^\xf4r>.\x1d\xe7O\xc6\xc9%\x94\x7f=^\xb6\xb8/\xe4\xe6\xdb\x06$>\x1b~\xb6Q\x88u\xb0\xb2\x0dJ\\xc1\xcaE\x1c\xe2\xd3\xb1r\x01\xe5_\x90\x95\x0d\xee\x8bY\xf9c\xe2;\x9f\x0d?\xf79\xa8s\x1bn\xd6a\x13\xed\x05V\x032\xb5t\x18B%:\xb4b\x9e\x92\xaf\xbe )\x99RD\xc2D\x1e\xba\xc38\x9dX\xafX\x9f\xce\x19\xc4\x08\x1d\x90[\x12#\xbe\x80D \x0e\xd0\x8fc\xc4"p\xec\x18^\xba\xce\x83\xea\x96\x94'G\x8c!\xa0\x1aD\xb3\xad\xba\xa1;\x90!\xd2\xc68/\\x19\xae\x16\x01\x9f\xcfS\xfe\x86\xfc\xae\xc4\x11!\x992\x86\x88\x16\xd1(v\xc8 J\xf2\x8c\xc3!\x95\x11u\xa4\xa3\x80\x83/\x1b\xe0C\xb46k\xc1\xc1\x8f^\x83\xf2\xcc\xc8m\xa7\xd27\x91\x0b\x17YK:D\x1d\xca\x0c\xaf\xe3\xe1\xb0\x9a\xbe\xbc[\x84\x9f\x069\xee'\x88,et\x062\xc4\xc1k\x13\x153\x91\x16\x0akpRR7\xd7\x10#d\x02\xa2\x9a\xcf6&eeq5?Y]\x1b=\x83\x89\xbaV\x93\xab\xb5\xf8[\xb5\x87\x1e\xa9\xc6\x00\x98lf\xdaj\x95\x00\x93\xd6\xc2#\xcf\x11\xa8Cn\xa2L\xdd"@\xa5\x17\x97b-E\xecvQ\x04\xb1\x12\x0eA\xb9\x00\xf2\xfax\x80\xf3\x87\xf5\x14#\x07\xe7\xea\xf1-Z\xd9\x02\xc49X\x1e\xe9{#\x0e)G\\xa3\xbb\xc5aQ@\xb2\xb6\x17\xea\xb8-\x02\xaa\x160\x9c\x0d\x0c"\xacR(\x872\x00X\x14\x8d%\xc8\x7f\xc6\x91\x1b.M\xfc\xba!\xe2|\xf6\x1cf\xd1\x8d\x02\xd2\xb6\xebu\x03\xd2\xa5\x8ez\xc1\x93F24\x01\xa0J|hQ\xd6\xf5*\xf8\xb9\\xb6\x04\xbe\x08\x85q\xd5Ee\xa18\x89\xbd\x1c\x17]u{\xcd\v\x89\xc8\x82l\x7f-\xdaucl(\xc6[\x04#\xcbyVA\x8fn7_\x05\xd8\xd5E\x88\xfb\xe3\x17\x82nI\xb9\x0d\xec\xdc\xef\xe6\xc0\xbf\xcc\x820P|MK\x99\xbf/\xa2\x8c7\xa5\xfbX\x86\xc9-\xe8N\xddn\x0ez\x1f\x87\xdboKo\xaaFR(GB\xb1\x91\x872q\xaaA\xa2\x1a\x9a<\xfb\xa1v\xfd\xcc\x15\xb7\xcf|\xbd\xfd`\xe6\xfe\x99\xafw\x1e}\xbd\xd3\xbf\xc1\x1d4\xe8p=bq\xe9\xa6-V\xa0\x03\xf6\x1a\xd6\x9b\x93\xecH\x0a\xe4L\xa1m"*\xd5\xd2\xfa\xf4\xca\x8dVI\xc8T\xc5s)X\x8bO\xfa\x83\xaeGCB\x80\x928\x85:Q\xb9\x1f;\x809\x88\xf8\x84\xa1>9:\x97\x00,\x87b\xb3\x83Uz\xd9\x91\x9e\xcdu\xa1-n\xea\xd5\xd8$\x11\x11\xb0\x93J!5%\xa0\xef\xc54F&\x0a\xe8\x0e\x83t\x12\xa0\x1am\x1ag\xa9\x14\x938\x13\xbeD\xa9\x98RR\xecw\x07\x80\x96\x94\x9f\xb6$\xb4\xe9@\xef\xce\xe2\xb4L\xcf\xf3\x9dD\x94\x81\x12u\x13!\x92gN\xd9X\xdf\xceS\xb65f\x86\xd0\xcb\\xb9M\xa9\xd7\x80\xf7BP!\x953\x0fTC\xe8Z\x1e\x03\x92\xb1\x8f\x0c\x1e\xc2\x1a\x03\xd4\x1d*\x9a.\xb2\xa9\x0cg\x12;\xa4k\x8c\x15\x94\x0f&\x81\xb6\xe8\xac\xedQ]\x1b2=P\xb2\xe7\x9c!K\x04M\xa4E}\xb1r\xe6mAx\xb4)k\x0b\x8dE0A\xd9\x9c\xd1\x10_\x14\x1d\xa9a=oWQ\xa8\x94\xa2X\xaca\x16hV\xad\x99J\x19\xce[~\x95 \xe7\xc3\x1ft=M\xa9\xf3tj\xd2M\xdd\xc9\xe5\x9f\xe0\x02d(\xa5\xa0\x8bT\xe6\x0c\xee\xca\x86\xa8\xca?\x02\xda\x8c\xb6\x0cJ\x9ca\xa0\xab`\xe8\x00\xd8\x9cm3\xa779QUv\xd0\xfb\x1bT\xa3\xe2\xacE\xa0\x1f\xe5\x18\x1bE\x95\x90X\xeb\x85\x19\xc5\x93(\x0d[\x0d\xf0\x9c\x14\xe23\xc3\x8b@}\xe1\xa6\x19\xd2f\xeb\xa5\xac\x97\xa7T'\xb6\x92\x11\xe6\xc0\xb4\xdbs\x11\xa4G\x90\x174\xee\xe5\x87u\x02\x8b\xbaM\x99\xc2\x18TY\x9c\x82\x0e\x95t\xb3\xd6W\xf3\xdc[f-Ol\xe7\xd5\x0c\x01W\xe5\x94\x86\x17\xba\x8b\x9cI\xb0\xeb\x8dbS\x867e\xe5\xd0w\x93\xd5\xc4f\xb8\xc9\xf48\xa1\xf6+A~\x16\x81\xd2#\xdc\x0aG\xb2\xfa\xa7G\xfd\x17\xad\xfe\xa3u\x12\xde\x94i_\x13n[\x07n*r\x96\xee<cf\xc3\x97\x05\xa2",\x0a\x1b\xc0\xfdk\xde\x8b\x18/\xbdH\xaa\x95\x0e\xc6\xc0Y \xf0n\xc4\xe7\x0f\xc7\xc1p\x98rq\xf6:\xe9\xbd(\xbd\xbcX<3\xa3,Lg.%\xfb\xf2\xb4\xe1GHh(\xf5\xd3a\x18\x9f\xadf\x919\xfaB\xa4-\x12!O\xc2\xfc\xbc\xa8v\xb1\x85\x98k\xdd\x8a\x8a$\xff\xc5\x89>}\xbb\x1ap\xadX\xaa}V\xee\xcb#\xdc\xa9\x87\xeb\x1a\x03\xb2\,.\xb9\xf1\x0c\xb0U\xd7\xc920\x03a\x07^C\xdd0\x1ah\x9dr\x81\xf8J\x14\x9e\xa3\xd6\x05"\x97|\x995C\xec\xfa>\xaeQd\xe7\xfe\xe6\xca\xa7\x08O,S\xeb\xd0\x95\x85E\xa2r\xb8\x92\x97\x1fh\x97\xba\x08J\xad\x95\x89\xb2 Q\x0e*\x7fp6j5\x1a\xb5\xf8\x84\xf5\xce\xcan\xba\xcc\xeb8\xcd=\xe8\x9eL\xb8*\xcbau_\x8bK\xb4CaC\x905s\xd1\xda\x9a riG*\xa9\xf5\xbes\xe6\xa6\x11\xf1M\x19\x8ed\x8b\x9f\x80\xea\x8e\xb7\x0f\xfaT\x0a\x15\xc0\xa0'\xe2\xb1m\xa7\x0a\xd5.\xbeq'\xc9\xf7\xda\x0f\x18\xe5Z\xfb\xc0Q\xd9\xa6\xaeI9\x9e>1\xe3\x8c\x83\x08\xd6\xf2\xb3P\xc0\xe0\x17\x01\xeeS\x84-\x13e\x82\x0f\xbc\xe0\x80IeX\xa0N'NdJ\xbe\x09\x99e4\xad\xb6\xe6\x83\x08\xd7T\xd2\x13\xf2B<\x89\xa30\x8e\x17\x08\x15\x07Y\xed\xa0L\x01\xd3\xe5\x07\xd9\x14\xfd!\xca\x9dx\x08x-.\xbc\xdb\xf4\xce\xecp\xc5\x91\x0d!\x87C\xf8p\x18\x1d3\x84\xbco\xa7\x97\x1f\xd2\xf2\x126\xf6SP\xeb\xc5{\xba)^\x10\xf8\xe4\xf4Pm\x1e\xc8\x81\x921\x94\x881\xe0DF\x85\x99\xec\x91\x1d\xac\x83\xc2\x19A}\x9e\x06\xf4ge\xad\x17[\x13\xb2\xaf\xd7\xfb\x0e`\x8cT\xc0(\x82\x0e>\xee\x87e\xce\xe5\xf6\x05\xa0\xcdn+!B\x9b:;\xebP\x16+O\x81c\xb0\x9b=\xb7g\xee\x8a\xe5C|\xb8-4\x0cO\xa3\xf8\x0c\xa1\xe6,\xcd\xcd}\xa9\x95\xf8\xa2\xa9\xb4\xaaT!b\x1a\xbb\xa0\xb8I5N\x95\x18\x9b\xf3\x046F^iaX\xea\xca6D\xa3\xf91\x0a\xae!f)^\x93\x17\xf93"\xd58Q\x82E/\xa9\x08R\xc3cXu\xc2\xa9rN\x8a"\x13 \xa7j\x16'\x808B\xa1\x9d\x85Vg\xbb5\x8a\x9b\xc98\xf9!\x8b{\xec\x1d9\xccn!\xe4\xd3(\x07\xdb\x80\xfd\xfff\x9e\xe8\xc5\xf8\xbf\xff\xfao{X\x8a\xd8K\xf3\x09\xad/\xd9\x8e8\xb6\x85\xd8\x8f\x88s\xe1\xce\xee!\x86\xdb\xd4\xd5\x15"\x81g$\xc1\xac\xc58>`\xe7\xe3$\x16\xe1\xccG\xc7,\xef\xf31,^{{j\xca\x86`g75.rE\x04\x8a\xe5\x0b\x8b\x16\xbb\x84z\xed\x8c\xc3K\x1c1\xa1\x83+\x07\xc7\xb4?\x08\xf6\x0c[\x14\x90c\x09\xd2\xcb\x0f9\xdc~0\x9b)15s\xd6\x04\x8d\xf1\xa3\x0dK7\xf4i\xb9\xdaMVF\x9a\x14\x01\xe6\x08\xd1n9\x08agc\xd6\xcb\xff\x01W\xb2h\xc1\xb97\xdf\x08\x10@\0\x83\x97\xc6\x11\xc8\x01\x02T\xba\x15Q\xc8\x1af\xfa\x12[\xa1r\xdc)\xaa\xa8x\xb3Z\x1a[kI\x83R\x0a\xa5\xf0\xf4;\xdf\x89\xd8\xcb\xe2\x01\x02\x19\xb8p\xf7;\xd1\xd9\xd9\xdf\xde\xdb\xbf\xdb\x11/\x8f\x1f~[\x9c\xb0z\x04\x07$\xb8\xfc\x13\x8d2\x86\x1b>\x02\xc9C\x98\xdfX\xa0P\\x08\xb7\x14\x1c \x08\xe6\x80\x94`\xd3m\xa6H\x97\x16\x90\x8e~\xadd_C]\x8eN\xb0\x07\xfc\x05\x9f\x89\xd2\xe1\x89Wq\xc0\xd2\xb3&$t\x0b\xcd_6 w#\xb6/\x83I\x0e\xddCFd\xe4\xc3jK\xa5\xba\x96\xb0\xda\x80\x8fagO\xd8\xa2ws\\x8b,a\xc5\xad\x92\xe6\xb8QyV-\xe8\x9d>\x0c\xa0W0R\xf5\x10\xa4\xe6\xd0\x149\x10\x8c,#\xe1\xa6)/\x08]\xaa\x1d5\x85\x06\xe2!VW\x7fbu\x13RT\xca\xda\x03t\xb01\x9e@\xb1 dg\xd4\x0f\x0bm\xadY\x98\x11a&@\xb5\x94Z\x0aJ\xa48y\xc9Z\x04\xfbb\x88\xed\x0e\xd0.\xff5G\xffRH\xeb\xe1Y7\x98\xba\xed\xaan\xa0\xbePe*\x7f'3+\xce5[TCf)N\x98\xc5H\xfaq\xb2m\x12\xfb\xe0X\x13\xfer\xdf\xb9H\x1a\x1a\xfe\xd0\xcdhW\x80;(\xc6W\xbfK\xee\xc44\xa6\xdd.\xf1\x96\x15\x01\x8e\xc90\x17V\xd2\x87\x8bz\x1d\xf4\x9f\xf7\xdf\xd8\xf4 \xc2z\x1cD\xeb\xca\xc9\xc1c\xcd\xfbR\xe0\x02k\xbb\x1f\x08\xa7\xb1\xcb\xea\x99O\x8f\x92\xeab\x05\xc9\x81\x0bt"\xb9\xc5\xd2\xeb&\xa8\xe2~k\xda\xb0\xd7\xc6\xb6h\xbf\x02?\xdb\xee\xe0\xb5\x9e`\x11\x96:\x94\x8f(g\x1e\x09R\x15\xb8\x08\\x98~z}\x8d\x08 >\x05\x8c\xa4A\x04\xae\x83\x86\x10eV\xed\xdc\xa5\xcb\xc1\xf9+xP\xfcx|\xfc\xe2\xf6t\xb8\x11\x11t\xe3\x15\x14\xe0F\x07\xb4_\xae\xc0\x9dTZ\x81;\xf5\x10~.\xd4\x85\xca.\xff\x9c`i\xc9\x06\x82[\x81{\xa3\xb9!.\xac\xa5s\x8b+\xa8AR\xf1'p\x89%\x99OF\xdc\xe5\xffR \xb9\x90\xa9L1\x13\x18\xb0~\x13\xb4j9\xf57\x7f\xe4q\xf6=\xdd~\xce7\xc7\xeb\xaf\xd8K\xc4g\x86\xd1\xaeRU\xc4\x86_:\x8eP\xe38\x0f}1\x00\x17C\xa4\xe3\x0c.\xecR\xc4\xda\xee\xc0\xb2\x14/\xf9\xb6\x1f`\x03\xfd9\x8cC\xf8\xb8"\x18B\xf0\xd0yk_\xfc\x1d@\x8f]\x85\xbc+\x0e\x1d\xf0YP\x1a\x02\xc7\xab\x91Z\xf8GS8\x0eM\x01\x93\xf8\x95\xbe\xa0\xb80\x8fq.>\x03\xe6\xa3\x83\xc2\x12\xb0\x92\xbaf\x9b\xcc\x1f\xd8\x9eU\x18\x07\x85E\xc8\xd6Bg\xbb\xd9n\xee@\xd9\x98\xd1i\xabY\x9d]\x84\xffc\xcf=\x99\xbf\xdd\xe7\xa4P\xe0F\xa4hl\xf3\xc4>'N\xdaz\xc5\xa1~s\xc52\x0bW\xec\xf8w\xe0\x002K\xaaFF\xa1\xb0\x04_gn\x15\x966\x92 y\xc1(\xb3*\xb7\xdd\xde\xdf\xbe\xbb\x7f\x17\x074\x0amY\xc8\x89\x8a\x8c\xc2\xbd\xee\x12\x01f\x07\x02\x86\x92\xb4\xe0^\x17N$\x09\x19\xd2;\x16\x1ed \xca\x8a\x86\xae\xbe\x98\x83\x05\xe3\wB\xabKj\x0b|mD+t\x01]\xa3\x7f\xa0\xffv[\xfa-\x13\x80\xfe\x99i\xedC]\x14\x11T\xfe\xc2\x8dV\xf4\x1a\xe07\x12\xac\xefG\x9f\xaf\xd3'Ic?/\x1c4\xeaQ>Y\xd0\x1fd\xe4\xcb\xdcY\x06\xf0\xe2\x10\x01\x0c\xddN\x14\x0c\xd3\x93\x89*}?\xfa\\x92\xbe&\xa6\xb1\xa1^\x91\xe2\xc3^\x9fB\x14b\xcdI\xc4!\xe5\xc3\xf2\x1d\xd5*\xc4\x15\x86\x13\x96;W\xc46\xac,,\xff\xb0j\x842\xf50\x8a$[\x192\x16\x1b\x0d\xab\x89R\x09b\x15\xf6|B\xa8_\x9a\x1c\x1dI\xd6\xa4\x00\xc0\xe3\x0b{\xc9\x81|\xe7"Q\x82A\xf0\x83\x0e\x11\x8c!\xc0P\x9d\x00-h\x18\x08\x0d\x88\x15\xc8\xef\xcb\x0fD\x0f\xactD}\x8b\xd9\x18\x0e\xbd\xd8Fzh\x0dWh}\xdc\xf6\x05\x19\xf0G\xae\x8d\x0a\x98+\x89\x04\xfaJ\x7f\xa5\xd4_N\xc2\x8f\xc6\x83\xbf\x0c\xff\x0d6\xf4$\x81\x17\x10\x11]\xc8\xbd\x85\xbb\x1b\xc0\x91\xd5\x1d\x08\xc2\x88(IVF\xb1\x970\x1e,9\x14d\xc4Q\x80_u\xa0\xe8\xb9\x96\xad\xf8\x80\xf0EE\x9f\xc2C&Vw.\xff\x05\x03\x0d\xf20\xf0\x02\xc8*|\xa8{\xc9Mqh\x8c\x15\x92f\xf0\xe2\xe1;\xd1\xbe\x83\xe1\x83\xbb@\x02\xab\x9bIziX\xe0\xec\x9a\x8b\xd4+6\x0c\xa8\xcc\xbd4Fd\xefh$d\x84\xa8\x00v\x09m<\\x03!*\x02\x1a\x8e\xf1CM\x07h\xbdbH\xa8AZ\x07\xf8\xc4\x09\x96\\xd1\xca\xb2m\xa0\xc4 \x1f\x81\xb5\xd2x at Q\x1a\xe3[\xa3\x95\x04Th\xa1\x95\x82\x82\xe3\x0d+[\xd9\xf5a\xf6\xd4F)1\xf5\x12\x99F9Qs.\x0d\x96\x8b\xce\xff\x1d\xf2\xa5\xea\xac\xab\x14Xw\x02\x93\x9f\xac>%\xb81\xfe*\xfc\xce\x08@\xd3\x0f\x89\xd0\xca\xb26\x1e\x99\xf5\xa1\xbe\xfb`\x12m\xaai\xeb\xecJ\x18N\x10CC)\x97N\x1e\x1a\xef\x99\xb7\xe3uzY\x8b\x8f\xabIl\xd1\x0f\x1f\xfb\xda\x17\xbb\xedvr\xae\x0d9YT\x95Y\xf7\x9ce\x9bE|\xebH\x82M\xb5YR\xbb\x1a\xb34\x83k\xd8.:l\x08N\xa6E\x0b\x98I1\x18;7Z\xf4\x94\xc6\x9dM\x88V+\xa7*Z\x04\xa6\x9f1\xff\x1e]~\xc0&\x88\x13\xecu\xad\xeb\xdd\xfa\xcd&\xe4\xb1\xd7\x9du\x8af\xa5\x01*\xbf\xf8\x06\x8c\x15\x97\x9b\x90\x9d\x9fG\xcc8%C\x93\x9e\xbcC\x0c=\xa7zGA6\xce\x07\x1c\x13\xa8\xdd\x11\xb2r\x16\xec\x00\xc5g\x02u8\x00J\x11_Ag\x98\x8a\x14\xac\x9a\x9b\xe8\xec\xec\xac9\xc2\xad\x88q:\xc2-\x0eh\x04\x16k\xb9\xa3$tv\xa0\xbe\xe9g\x83\xae\x81\\xff\xe9\x8b\x9fh\xbe\xa66\xa8k\xeeY\xec\xd1\xef\xd3\xe8\xfa8\xcd\x1a+=M\xec\xe1\x182\x95~%\xa7\xee:\x92ll\x8e\xe2\x18\x97\x8e0i\xbe-,\x0e(\x0bJ\xbf\x9a\xe3\x87wq\x12\xb1r\x1d>e\x7ft/\x1e\xa0j\x04\x1ca\x7f\xc9\xf7\x0e\xa4\x0e\xed\xb5T<\xe5\xc1\xbf\x15_\xa2\x0a\x80\xca\xb9\x96\xbf\xd7\x9e\xe8j\xb7y)2D\xf9!~|i\x10\xc7\xa7\x8cM\x81\x0c\x04_k%BE\xd7*:}h\xa9\xf7\x98\x91D=\xb99\xc2\xb6\xb2\xf8\\xd1\xe0\xa3\x11\xca\xce\x02\x04\x87\xf03)U\xa6\xa5R\xa7Ukc;^\xb50\xc7z\xf0\xa5\x0bS\xbe\xffh<\xea\xbb\x1c\xe5\x1f\xc5j\xd8\x00\xc8\x04\xbf\xa0\x15\xa4\x1e]}\xb3\x9c\xe3RUg5\x08\x18\xe8\xe6)\x99\x0cz\x81\x10u\x1a\x15\xf8,{\xbb\x06l\xce\x14j]ia\xea\x88\xfd\x90\xf4T>\xa0;\x93\x06\x92\xa3\xbe\xd0\x00\xb8zh\xc5>\x82\x85\x13\xd6vP\x7f@\xb5F\xef\x1d\x0eF@%k\xdc\x88jz\xd6\x82\xf3V\xb6cT\xb5\x04a\x8dZ\x0f\xf0\x91\xf6\xb0\xd5\xa3\xd6\x91\xc2\x13\xba\x0b\x8b\x9a\xea\xdf9\xfb\x7f\xf2\x15>\xc1\xf8l\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"] [severity "3"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "9"] [tag "application-multi"] [tag "language-php"] [tag "platform-multi"] [tag "attack-disclosure"] [tag "OWASP_CRS/LEAKAGE/SOURCE_CODE_PHP"] [tag "WASCTC/WASC-13"] [tag "OWASP_TOP_10/A6"] [tag "PCI/6.5.6"] [ref "o624,2v612,8192v612,8192"]
ModSecurity: Warning. detected XSS using libinjection. [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "17"] [id "941100"] [rev "2"] [msg "XSS Attack Detected via libinjection"] [data "Matched Data: requesttoken found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "v828,13t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNullsv842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
ModSecurity: Warning. Matched "Operator `Rx' with parameter `(?i)[\s\S](?:x(?:link:href|html|mlns)|!ENTITY.*?SYSTEM|data:text\/html|pattern(?=.*?=)|formaction|\@import|base64)\b' against variable `ARGS:<?xml version' (Value: `"1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "130"] [id "941130"] [rev "2"] [msg "XSS Filter - Category 3: Attribute Vector"] [data "Matched Data:  xmlns found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "8"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "o18,6v842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
ModSecurity: Warning. Matched "Operator `Ge' with parameter `%{tx.inbound_anomaly_score_threshold}' against variable `TX:ANOMALY_SCORE' (Value: `15' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-949-BLOCKING-EVALUATION.conf"] [line "36"] [id "949110"] [rev ""] [msg "Inbound Anomaly Score Exceeded (Total Score: 15)"] [data ""] [severity "2"] [ver ""] [maturity "0"] [accuracy "0"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-generic"] [ref ""]
ModSecurity: Warning. Matched "Operator `Ge' with parameter `%{tx.inbound_anomaly_score_threshold}' against variable `TX:INBOUND_ANOMALY_SCORE' (Value: `15' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/RESPONSE-980-CORRELATION.conf"] [line "61"] [id "980130"] [rev ""] [msg "Inbound Anomaly Score Exceeded (Total Inbound Score: 15 - SQLI=0,XSS=15,RFI=0,LFI=0,RCE=0,PHPI=0,HTTP=0,SESS=0): XSS Filter - Category 3: Attribute Vector"] [data ""] [severity "0"] [ver ""] [maturity "0"] [accuracy "0"] [tag "event-correlation"] [ref ""]
ModSecurity: Warning. detected XSS using libinjection. [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "17"] [id "941100"] [rev "2"] [msg "XSS Attack Detected via libinjection"] [data "Matched Data: requesttoken found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "v828,13t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNullsv842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
ModSecurity: Warning. Matched "Operator `Rx' with parameter `(?i)[\s\S](?:x(?:link:href|html|mlns)|!ENTITY.*?SYSTEM|data:text\/html|pattern(?=.*?=)|formaction|\@import|base64)\b' against variable `ARGS:<?xml version' (Value: `"1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "130"] [id "941130"] [rev "2"] [msg "XSS Filter - Category 3: Attribute Vector"] [data "Matched Data:  xmlns found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "8"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "o18,6v842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
ModSecurity: Warning. Matched "Operator `Ge' with parameter `%{tx.inbound_anomaly_score_threshold}' against variable `TX:ANOMALY_SCORE' (Value: `15' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-949-BLOCKING-EVALUATION.conf"] [line "36"] [id "949110"] [rev ""] [msg "Inbound Anomaly Score Exceeded (Total Score: 15)"] [data ""] [severity "2"] [ver ""] [maturity "0"] [accuracy "0"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-generic"] [ref ""]
ModSecurity: Warning. Matched "Operator `Ge' with parameter `%{tx.inbound_anomaly_score_threshold}' against variable `TX:INBOUND_ANOMALY_SCORE' (Value: `15' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/RESPONSE-980-CORRELATION.conf"] [line "61"] [id "980130"] [rev ""] [msg "Inbound Anomaly Score Exceeded (Total Inbound Score: 15 - SQLI=0,XSS=15,RFI=0,LFI=0,RCE=0,PHPI=0,HTTP=0,SESS=0): XSS Filter - Category 3: Attribute Vector"] [data ""] [severity "0"] [ver ""] [maturity "0"] [accuracy "0"] [tag "event-correlation"] [ref ""]
ModSecurity: Warning. Matched "Operator `Rx' with parameter `^%{tx.allowed_request_content_type}$' against variable `TX:0' (Value: `text/vcard' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line "928"] [id "920420"] [rev "2"] [msg "Request content type is not allowed by policy"] [data "text/vcard"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-protocol"] [tag "OWASP_CRS/POLICY/ENCODING_NOT_ALLOWED"] [tag "WASCTC/WASC-20"] [tag "OWASP_TOP_10/A1"] [tag "OWASP_AppSensor/EE2"] [tag "PCI/12.1"] [ref "v0,3o0,10o0,10v174,25"]
ModSecurity: Warning. Matched "Operator `Rx' with parameter `^%{tx.allowed_request_content_type}$' against variable `TX:0' (Value: `text/xml' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line "928"] [id "920420"] [rev "2"] [msg "Request content type is not allowed by policy"] [data "text/xml"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-protocol"] [tag "OWASP_CRS/POLICY/ENCODING_NOT_ALLOWED"] [tag "WASCTC/WASC-20"] [tag "OWASP_TOP_10/A1"] [tag "OWASP_AppSensor/EE2"] [tag "PCI/12.1"] [ref "v0,6o0,8o0,8v266,8"]
ModSecurity: Warning. Matched "Operator `Rx' with parameter `^%{tx.allowed_request_content_type}$' against variable `TX:0' (Value: `text/vcard' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line "928"] [id "920420"] [rev "2"] [msg "Request content type is not allowed by policy"] [data "text/vcard"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-protocol"] [tag "OWASP_CRS/POLICY/ENCODING_NOT_ALLOWED"] [tag "WASCTC/WASC-20"] [tag "OWASP_TOP_10/A1"] [tag "OWASP_AppSensor/EE2"] [tag "PCI/12.1"] [ref "v0,3o0,10o0,10v174,25"]
ModSecurity: Warning. Matched "Operator `Rx' with parameter `^%{tx.allowed_request_content_type}$' against variable `TX:0' (Value: `text/xml' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line "928"] [id "920420"] [rev "2"] [msg "Request content type is not allowed by policy"] [data "text/xml"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-protocol"] [tag "OWASP_CRS/POLICY/ENCODING_NOT_ALLOWED"] [tag "WASCTC/WASC-20"] [tag "OWASP_TOP_10/A1"] [tag "OWASP_AppSensor/EE2"] [tag "PCI/12.1"] [ref "v0,6o0,8o0,8v266,8"]
ModSecurity: Warning. detected XSS using libinjection. [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "17"] [id "941100"] [rev "2"] [msg "XSS Attack Detected via libinjection"] [data "Matched Data: requesttoken found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "v828,13t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNullsv842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
ModSecurity: Warning. Matched "Operator `Rx' with parameter `(?i)[\s\S](?:x(?:link:href|html|mlns)|!ENTITY.*?SYSTEM|data:text\/html|pattern(?=.*?=)|formaction|\@import|base64)\b' against variable `ARGS:<?xml version' (Value: `"1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "130"] [id "941130"] [rev "2"] [msg "XSS Filter - Category 3: Attribute Vector"] [data "Matched Data:  xmlns found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "8"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "o18,6v842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
ModSecurity: Warning. Matched "Operator `Ge' with parameter `%{tx.inbound_anomaly_score_threshold}' against variable `TX:ANOMALY_SCORE' (Value: `15' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-949-BLOCKING-EVALUATION.conf"] [line "36"] [id "949110"] [rev ""] [msg "Inbound Anomaly Score Exceeded (Total Score: 15)"] [data ""] [severity "2"] [ver ""] [maturity "0"] [accuracy "0"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-generic"] [ref ""]


From christian.folini at netnea.com  Tue Oct 17 14:18:56 2017
From: christian.folini at netnea.com (Christian Folini)
Date: Tue, 17 Oct 2017 16:18:56 +0200
Subject: [Owasp-modsecurity-core-rule-set] XSS Attack and PHP source
 code leakage with Nextcloud 10.0.3 (HTTP methods and content-types allowed)
In-Reply-To: <8F037F2A-267B-4E62-B549-69A61B19AA1A@laposte.net>
References: <8F037F2A-267B-4E62-B549-69A61B19AA1A@laposte.net>
Message-ID: <20171017141856.74rj3joyicxrltcc@leander>

Hey Aurel,

We have a pull request waiting for my review that addresses Nextcloud.

https://github.com/SpiderLabs/owasp-modsecurity-crs/pull/899

The idea is to get a rule exclusion package for Nextcloud. Ideally you could
give that contributed pull request a go and report back your experience
in the pull request. I'll review and eventually merge, but I do not
use Nextcloud, so my insight will be limited.

Ahoj,

Christian


On Tue, Oct 17, 2017 at 01:52:34PM +0200, Aurel wrote:
> Dear all,
> 
> I am trying to make ModSecurity v3/Nginx 1.12.1 working together with NextCloud 10.0.3 on a Debian Jessie. I am using the latest available code from the git repository for ModSecurity v3 and its nginx connector and the owasp 3.0.2 rules.
> 
> I am getting the following ModSecurity exceptions when refreshing the administration page of NextCloud which execute some automatic testing on webdav and others. I don?t know how to make ModSecurity working with Nextcloud :
> 
> None None None
> None 949110 Inbound Anomaly Score Exceeded (Total Score: 15)
> None 920420 Request content type is not allowed by policy
> None 980130 Inbound Anomaly Score Exceeded (Total Inbound Score: 15 - SQLI=0,XSS=15,RFI=0,LFI=0,RCE=0,PHPI=0,HTTP=0,SESS=0): XSS Filter - Category 3: Attribute Vector
> None 941130 XSS Filter - Category 3: Attribute Vector
> None 953120 PHP source code leakage
> None 941100 XSS Attack Detected via libinjection
> 
> To resume the details given below, I got two problems :
> 	1) ModSecurity: Warning. Matched "Operator `Rx' with parameter [msg "PHP source code leakage"] 
> 	2) Warning. detected XSS using libinjection [msg "XSS Attack Detected via libinjection"] [data "Matched Data: requesttoken found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"]
> 
> In crs-setup-cloud.conf I allowed all the HTTP methods and content-types. Its works as it reduced a lot my previous exceptions on HTTP methods and content-types but still these two problems are occurring. How should I process to make Nextcloud working and let ModSecurity as tightened as possible ?
> 
> Thanks for your help,
> 
> A.
> 
> Here my crs-setup-cloud.conf :
> 
> SecDefaultAction "phase:1,log,auditlog,pass"
> SecDefaultAction "phase:2,log,auditlog,pass"
> SecAction \
>  "id:900110,\
>   phase:1,\
>   nolog,\
>   pass,\
>   t:none,\
>   setvar:tx.inbound_anomaly_score_threshold=7,\
>   setvar:tx.outbound_anomaly_score_threshold=6"
> SecAction \
>  "id:900200,\
>   phase:1,\
>   nolog,\
>   pass,\
>   t:none,\
>   setvar:'tx.allowed_methods=GET HEAD POST OPTIONS PROPFIND PUT REPORT DELETE MKCOL CHECKOUT COPY LOCK MERGE MKACTIVITY MOVE PROPPATCH UNLOCK PUT PATCH'"
> SecAction \
>  "id:900220,\
>   phase:1,\
>   nolog,\
>   pass,\
>   t:none,\
>   setvar:'tx.allowed_request_content_type=application/x-www-form-urlencoded|multipart/form-data|text/xml|application/xml|application/soap+xml|application/x-amf|application/json|application/octet-stream|text/plain'"
> SecCollectionTimeout 600
> SecAction \
>  "id:900990,\
>   phase:1,\
>   nolog,\
>   pass,\
>   t:none,\
>   setvar:tx.crs_setup_version=302 ?
> 
> Here my ModSecurity conf file :
> 
> SecRuleEngine On
> SecRequestBodyAccess On
> SecRule REQUEST_HEADERS:Content-Type "(?:application(?:/soap\+|/)|text/)xml" \
>      "id:'200000',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"
> SecRule REQUEST_HEADERS:Content-Type "application/json" \
>      "id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"
> SecRequestBodyLimit 13107200
> SecRequestBodyNoFilesLimit 131072
> SecRequestBodyLimitAction Reject
> SecRule REQBODY_ERROR "!@eq 0" \
> "id:'200002', phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2"
> SecRule MULTIPART_STRICT_ERROR "!@eq 0" \
> "id:'200003',phase:2,t:none,log,deny,status:400, \
> msg:'Multipart request body failed strict validation: \
> PE %{REQBODY_PROCESSOR_ERROR}, \
> BQ %{MULTIPART_BOUNDARY_QUOTED}, \
> BW %{MULTIPART_BOUNDARY_WHITESPACE}, \
> DB %{MULTIPART_DATA_BEFORE}, \
> DA %{MULTIPART_DATA_AFTER}, \
> HF %{MULTIPART_HEADER_FOLDING}, \
> LF %{MULTIPART_LF_LINE}, \
> SM %{MULTIPART_MISSING_SEMICOLON}, \
> IQ %{MULTIPART_INVALID_QUOTING}, \
> IP %{MULTIPART_INVALID_PART}, \
> IH %{MULTIPART_INVALID_HEADER_FOLDING}, \
> FL %{MULTIPART_FILE_LIMIT_EXCEEDED}'"
> SecRule MULTIPART_UNMATCHED_BOUNDARY "!@eq 0" \
> "id:'200004',phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'"
> SecPcreMatchLimit 1000
> SecPcreMatchLimitRecursion 1000
> SecRule TX:/^MSC_/ "!@streq 0" \
>         "id:'200005',phase:2,t:none,deny,msg:'ModSecurity internal error flagged: %{MATCHED_VAR_NAME}'"
> SecResponseBodyAccess On
> SecResponseBodyMimeType text/plain text/html text/xml
> SecResponseBodyLimit 524288
> SecResponseBodyLimitAction ProcessPartial
> SecTmpDir /data/tmp/www/mydomain.com/cloud/modsecurity
> SecDataDir /data/tmp/www/mydomain.com/cloud/modsecurity
> SecUploadDir /data/tmp/www/mydomain.com/cloud/modsecurity
> SecAuditEngine RelevantOnly
> SecAuditLogRelevantStatus "^(?:5|4(?!04))"
> SecAuditLogParts ABIJDEFHZ
> SecAuditLogType Serial
> SecAuditLog /var/log/modsec/mydomain.com/cloud-audit.log
> SecArgumentSeparator &
> SecCookieFormat 0
> SecUnicodeMapFile unicode.mapping 20127
> SecStatusEngine On
> include ../modsec_core_cloud.conf
> 
> Here modsec_core_cloud.conf :
> 
> include owasp-modsecurity-crs/crs-setup-cloud.conf
> include owasp-modsecurity-crs/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS-cloud.conf
> include owasp-modsecurity-crs/REQUEST-901-INITIALIZATION.conf
> include owasp-modsecurity-crs/REQUEST-905-COMMON-EXCEPTIONS.conf
> include owasp-modsecurity-crs/REQUEST-910-IP-REPUTATION.conf
> include owasp-modsecurity-crs/REQUEST-911-METHOD-ENFORCEMENT.conf
> include owasp-modsecurity-crs/REQUEST-912-DOS-PROTECTION.conf
> include owasp-modsecurity-crs/REQUEST-913-SCANNER-DETECTION.conf
> include owasp-modsecurity-crs/REQUEST-920-PROTOCOL-ENFORCEMENT.conf
> include owasp-modsecurity-crs/REQUEST-921-PROTOCOL-ATTACK.conf
> include owasp-modsecurity-crs/REQUEST-930-APPLICATION-ATTACK-LFI.conf
> include owasp-modsecurity-crs/REQUEST-931-APPLICATION-ATTACK-RFI.conf
> include owasp-modsecurity-crs/REQUEST-932-APPLICATION-ATTACK-RCE.conf
> include owasp-modsecurity-crs/REQUEST-933-APPLICATION-ATTACK-PHP.conf
> include owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf
> include owasp-modsecurity-crs/REQUEST-942-APPLICATION-ATTACK-SQLI.conf
> include owasp-modsecurity-crs/REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION.conf
> include owasp-modsecurity-crs/REQUEST-949-BLOCKING-EVALUATION.conf
> include owasp-modsecurity-crs/RESPONSE-950-DATA-LEAKAGES.conf
> include owasp-modsecurity-crs/RESPONSE-951-DATA-LEAKAGES-SQL.conf
> include owasp-modsecurity-crs/RESPONSE-952-DATA-LEAKAGES-JAVA.conf
> include owasp-modsecurity-crs/RESPONSE-953-DATA-LEAKAGES-PHP.conf
> include owasp-modsecurity-crs/RESPONSE-954-DATA-LEAKAGES-IIS.conf
> include owasp-modsecurity-crs/RESPONSE-959-BLOCKING-EVALUATION.conf
> include owasp-modsecurity-crs/RESPONSE-980-CORRELATION.conf
> include owasp-modsecurity-crs/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS-cloud.conf
> 
> Here the details of the ModSecurity matched rules :
> 
> ModSecurity: Warning. Matched "Operator `Rx' with parameter `(?:\x1f\x8b\x08|\b(?:(?:i(?:nterplay|hdr|d3)|m(?:ovi|thd)|r(?:ar!|iff)|(?:ex|jf)if|f(?:lv|ws)|varg|cws)\b|gif)|B(?:%pdf|\.ra)\b)' against variable `RESPONSE_BODY' (Value: `\xe5]\xe9r\xdbF\xb6\xfe\xad<E\x87\xa9df*\x06\x17Ivd\x85T\x8a^cO\xa28\x91\xbc\xe5\x8f\x0a\x04\x9a$,\x (26086 characters omitted)' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/RESPONSE-953-DATA-LEAKAGES-PHP.conf"] [line "79"] [id "953120"] [rev "2"] [msg "PHP source code leakage"] [data "Matched Data: <? found within RESPONSE_BODY: \xe5]\xe9r\xdbF\xb6\xfe\xad<E\x87\xa9df*\x06\x17Ivd\x85T\x8a^cO\xa28\x91\xbc\xe5\x8f\x0a\x04\x9a$,\x10@\xd0\x00%\xf9\x01\xee+\xdc\xbfS\xf7W|_Cor\x9f\xe4~\xe7t7\x16.\xa2$s\xca\x1e&\x95D$\xd0\xcb9\xa7O\x9f\xbd\x9b\xdd/\x1f\xfd\xf2\xf0\xf8\xed\x8b\xc7b\x9cM\xc2\x83/\xba\xf4Gx\xa1\xabT\xaf\x11\x8d\x1cO%\x0d\xe1\xbb\x99\xeb$\xa1\xeb\xc9q\x1c\xfa2u\x86\xb1\x97\xe3\xfd\xd0\x0d\x95l\x88\xd0\x8dF\xf8\x926\xc4\xc1\x17[\xdd\xb1t}\xdd#W2\xed5\\x7f\x12D\x81\xcaR7\x939\xda\xf0`\xf4\xca\xf1\x03\x85A/"w"{\x8d\xfe\xa2f\xa9\xfc#\x97*\xcb\xe2S\x19\xf5\x1ao\x07\xbboT6\xdc=\xddm\x9d\x9eN\x87?=I\x13\xd9?\x0f\xde?k\xa9o\xf7\xe2\x1f\x7f\x8a\x7fy\x13\xfe\x11\x84?\xbe\xdd\xe9\xf7\xf6_\xaa\xac\xdf~6\xf8\xe7\xb6{\xfcfo\x10\xdd\xf3\x0e\xcf\x92\xe3\x9d\x9d\x97/\x07\xfe\x0b\xf5\x8b\xfb\xe0\xfcw\xf7\xcd\xee\xd3_\xe3\xe7Go{\x0d\xc0\xbd\xd5\x9d\xc8\xcc\x15\xde\xd8M\x95\xccz\x8d<\x1b:{\xfaE\x16d\xa1\xa4&[\x15 \x838\x12\x8e8\x94\xe7\x99\x17\xc6\xb9\x8f\xfe\xad\xa2\x9d\x1ej\x9ce\x89\x03\x04\x82i\xaf\xf1\xc6y\xd9w\x1e\xc6\x93\xc4\xcd\x82A\x08\x9ayq\x94\xc9\x08\xf3<{\xdc\x93\xfeHV@\xd0\xf4H\xe5P\xa6\xa9\x04\xc1\x8a\xa6\x91\x9c\xe2{\x09\xabn8\x0d\xe4Y\x12\xa7Y\xa5\xe1Y\xe0g\xe3\x9e/\xa7\x81'\x1d\xferG`\x0d\xb2\xc0\x0d\x1d\xe5\xb9\xa1\xecu\x9a\xed;\x82\xd6e\x92Oj\x8f\xdc\xf3\xfa\xa3\xb9\xe9\xdc$\x09\xa5\x13dy$\x95\x83/\x95i\xf1\xcd\x09\xfc^\xa7\xb3}ww\xbb\xddio/\xe9<\x89\x07\x01\xc68\x93\x03\x1a\xc0\xf1\xdc\xc4\xad\xd3\xe4B\xaa\xebuU\x99\x9b\xe5\xca\x19\xb8\xa9\xa3\xb2\x8b\x1a]\x07`\xd7\xd3\xeb\x8d\xc2\xebV\xc1\xa3\xbe\xcasc\xdc\x0a\xfcl,'\xd2\xf1\xe20\xae\xae\xe8W\xed\xf6\xde\xb6w_O\x11\x06\xd1\xa9He\xd8k\x04X\xf2\x86\x18\x83\x05z\x8d\x96\x17\xa7\xb2\x15LF\xad\xa1\x8b\xf5\x8c\xa3&\xfe7\xdbA/J\x16\xe7\xde\xd8\xa16N\x92J\x0f\xdc\x16+\xe9/\x1d\xc8\xe1\xf6\xcd$\x1a\xcd\x0e7q\xd5)\x8f\xd3\x10*x/\xb1\xd3\xdd\xe8b\xf98\xd4\xbc\xa9\xa6#"!\xf0\xeb5\x96\xa05q\xa3`\x88\xed<?\x92}\xd3|\xa70)o5\xfa\xa7[\x92\x84\x97W\x8d\xa5\x9c\xe9=\x95\x91\x1f\xa7-%C\xe9e\xdb\xf6o\xd3S\xea\x87io\xfb\xae\xbf3\x18v\xf6\xdc\xef\xee\x0e\xefu\xf6\xb0\xa3d\xa7\xed\xeez\xf7\xeey\xdf\x0d\xf7v\xef;m;\xd7\x8a\x99\x94\xd2\xcb\xb0'\xef\xef\xb8\xb2\xed\xed\x0e<Ov\xfc\x9d\xfb\xde\xc0\xbf\xbf'\xe5^{{\xd7\xdf\x93;\x0e\xc4\x1a\xf6\xe8\xba\xa7'\x0e0\x88\xbe\x83 at L/\x9c<h1G\xa9\xd6\xc0U\xb2U<\xfdw\xcc\x0cZ\x96\x138\xc3\xe0\\xaa5O\x03\xf6U\xad!d\x82:I\xfc!\x094\x99\xb6hZ^\xf55OF\xe3\xf2\x9eZ\xbd\x98\xd0\x05\xeb\x9e\xbd\x82*\x18EA\x8b\x00\x1a at d\xbf\xac\x19\xd9\xeat\x81/c\xd2\xb7\xffF\xda\xf2tQ\x9c\x05\xc3\xc0\x83\xa6\xb3\xc8\xe9\xcd\xbbf\xd4x\x0dK\xdel\xc6\x9e\x0f\xfd\x16\x8f\xd6<\x0d\x8c\x81,\x88Fz\x95\xec\x97\x1b\xcf\xc1\xd2Lyi\x90d"\x8a#\x0f\x06\xcf\xeb\xd7\xcf\xda\xaf\x7f<l\xff\xfe\xee\xb7\xf4\xf0\xe1\xfd\xd4\xdd\xf9}r\xfc\xf8\xf7\x0b\xef\xe9\xab\x07\xf2ix\xef\xe8\xe8\xfe\xfb\x7f\xbe\x1fO\x8f\x1e\x9fO\x8f;c\xe5\xbd\x0e\xd5\xd1\x93\xd3\xf7\xbf\x1e\xb7\xef\xbdzs\xd8\xfe\xf5\xf8\xc1\xf3\xb7\xa7\xea\xe2\xed\xab\xdf\xde\xfe\xf2\xf4y~89\xfc\xc5\xdfy\xf0\xf2\xe7\xf7\x87\xaf^\xbd~~\xfa\xf2\xc7\xc3\x17o_>\xdf}=y\xf2\xf6\xf0\xb1\xff\xdb\xa0\x9d\x1c\xbf>n\xf7 \xd3S\xcf\xea\x95w\xaa\x15{\x90\xba\xd7\x10\x96\x8d\x83nKc`\xe4\xf3\xe7\x88\x8f\x91\x92\xc4\x1b\xd7\xc3\x8aT\xc0\xe7\x8d\x17\x96\x88Y}"\xd3\x91\xf4\x9dLN\xb0\x893I*>\x81\xf2\xdb\x144\x19G%\xdd\xd4\x1b\xb7\x80\xb2\xfe\xb4Q\xc8\x85\x9dv\xd4\x1a\xa6\x1b\x85\x13Vj\x00;{\x94\xc6y\xe4\xbf\x8b\x07jS\xb0[h\x92\x00[\xec:v\xb8\xc2|\x14D\x9b\x82\xec\x8c\x88Qd\xf7\xc0\xa9\xf2\xe0uo\x8c|Yb\x09\x01umon\xcaZ2\x9e#7\x0c\xe1&\xb46L\xe4,0/7\x0cC\xb0c\xdd|\xd6Z\x7fS\x98\x93\x95<p,\xfcU\xe3N^\xcb\x00\xfd\xfcM5\x8b\x1e\xbb\xb2\xec\xd0\x06\xd10\xde\xb4\xc5\xd3\xd8ya\x80\xf8\xe5\xa6\xe1F\xb1V\xd7\xcb\xd4DF\xf9\xa6\xe0\xc6R3O\x10w\x97U\xd9\xb2\x91\xcaa\x01\x9a\x107\x9c\x82\xd8\x94\xe5,\x02\x12\x1b\xa6\xfa\x0a\xbc\xd8\xfb\xd3A\x97\x8d[\xb3\x8deF F\xb1\xb7\x0dQ\xe4U^\xf4dj\xe2\x99\x88{o\x08~\xd6P\x99\xe4a\x16\xe8\xdc\xc9\xa6\xa1\x86%\xcc\x13o,\xbd\xd3\x8dY\xb5\xd2\x85\xddH\xdd\xad\xed\xca\xc2;h\xd2\xf7<\x09c\xf7\xd61\x88\xab\xb3zLN\xca\xa2!\xbc\xaf3M\x14\x06o7Z\x076\xb2\xad\x03\xe5\xb5v\x00\xcft\xe1\xb6\x9f<\x98_\x06\xafQ\x80@\xa5\x17T\x821\x88\xfd\x0b\x81L|\x83> '\xa9\x95)\xe5:\xbbQ\\xc4\xf0\xbb~0\xe5VQ\xfc\xce\x9d\xba\xfa\xb9N\x05\xe3\x0d\x07\xf9\x1f\xa2\xab\x14 @h\xf29\xc8O\xa3\xa0\x01\x12Q<G\x97#\x9d\xd0H\xe2<\x15Cd5(\xe3\x13\xc9\x14i`T.x\x88T\x93\x87 ^\xc9<@8\xe2\xbd\xe8\xba&\xa7M\x95\x11\xfb\xad\x96\x8c(\xef\xef\x94\x937\x91\xb3n5D\xe6"\xd2\x8d\xd2\x88\x13\xe4\xf0\xa3\xd3\x86\xce\x89Gp\x1dME\xc4\x01,\xf4\x00\x09\xb3\x0a\x0c\xdd\x96{ d\x86\xa6T\xc01\xc2\xbb\xd0\x15\x89;\x92M*\xcc\xd0\xe8\x98\xbf]x\xd8\x8bhP&\xad\x90\xa6\x87\x17\x10\x00\x93\x82\x1a\x86Ne\x1b\xca\x1a\xd4\x86\xd5\x85/\x988\x8dQ_\xd1\x18\xb8D\x09\xb4\xb2D\xa6\xb51\x03n\xf1CSc\xa3\x9f;\xa1\x1cf&\x19]\x90\xa9\xd5\xd0\x89p^#[hB\xe4\x19\x04\x91/\xcf{\x8dN\x91\xbe\xae\x0c\x085\x1c\xeb\xe4\xbd\xcd\xa3w\xc7\x9db\xb6\xc0\xf7e\xe4L\x03\x95#DtQ\xa6\xda+\x85,\x9c\xabj\x8d;6\xcdc\xf0\xe4\xa7\xee\xc1\x17\x0cS\x01\xe3WH\xfa\xebb!\x83\x08\x98\x85\xeaRJ\x1a\x0a\xf2\xa5\xb2x4\xa2\x1a\x8b\x12v]\x1cBCU\xa0c\x1aQQ\x08\x0dQ\x00W\xaf\xc7\xa0\xe9k\xf0Up\xe7\xda\x07\x0f\xd1K\xd0\xd2\xaeO\x1d\xee<\xe4\xa5\xc4\x14\x04V\x89?\x0f\x1a\x06\xba:\x89Z\xb04*\x91c\xba\x95\xcd\xcb5\xaa\x08e\xb3\[[BT\x10\xdd)\x1eo\x15\x85\x0d[]\x14t\x98<\e\x00\xaa\xf2\xc0W\xaa\xa5\xb8NB\xce\x96I`B\xb3\x06\xe8\xac\x97\xbeU\x99j\x96>$Q!\xf2\x1c5\x01\x0b8\xbe\x9b\x9e\x96\x10n\x09\xce\xd5\xf6\x1a\xa66k\x1f\xc9J\xf9}\x8d\x98\x96\x9e\xbc\x0e\x94\xd5L\xdc\xa8\x9c\xedI\xe0\x8d!\x1f\x94}\xdb\xd2\xaf\x0d\xa8\xddV\x18\x94mgI\xce\xdb:\xc8PibY\xeaj\xaa\xdb\xf6v\x9f\xdc\x86\xf0\xc5\x18L{\x03\xc0\x7f\xf2\x02\xf45\x0e\x97\x1fn\xb3\x02&n|\xdd\x05\xb0a\xe6\x8f`|;\xc4\x06\xb0\xfeS\x14\xd6\xa5\x81\xbc\x0d\xdd\x15\xd2JT\xa9u=\xbe\xd7\xad?\x86\xeb\xcd\x08\x1b@\xf4~\x92\xc8P\x89i\xe0_~\x88oCz\x1b\xf1\xbb.\xf1m\xfb\x8f!\x7f1\xc6\x06,\xc0C\x131\xbd\x15\xed\xb1c"(\xa0k\xd3\xde\xb4\xff(\xda\xdb1\x88\xf6T\x0bK\x00\xfcG\x0b\xfc\x11\xa1p=\xf2\x93\x85C\xc6\xcd\x04\xc64\x99Y\xa5\x81S1\xd2\x0a\xb3\xd1\x9a\xeb_U\xec\x9eYc\x82G:\x1b\x07\x19\xcc\xb5\x8a\xc5E\xaa\x9d5\xff\x8b0W\xc2\xff\xe6\xab\xf6\xce\xfd\xef1\xa1\xf5#\x14jn*v\x03\x1b\x96\x8cBi!t[9\xea\xd1\xb5\xb5\x19\xb9ScW\xe3S0\xe2\xd2\xb2\x9a\xed\xcb&r\xf9j\xd6\x8a!7\x8d\xcc\x18k\x86X\xa3\x9cIP\x18$]\x9a\xd0\x10\xb2\xfc\xb3\xc0*\xac\xb4Zl\x08.6\xff\xb6*\x06 \xd1g:\x12\xbaR\xbb\xd1\xb9\x87\x9aX\x19\x8c\xc6\xf0z\xe83\xa5\xa4\x1f\xc4\xb0\xf0\xdb\xa2-:\xf7\xf0\xef\x8c\xa5\xea\xcb\xa1:\xe8\xc2F\xcd\xe0q\x10\xf2A\x04\x87(C:\x8d\xacV\xbc\x91\x0f\xa9\x14\xf7g7K\x83s\xd4~\xf7\x1aGp\xd2<\xf94u\x93q\xe0\xc1\x10\xbfH`\xe5M\xf8=\xe6sC\xd4\xd9\xf7\x1aN\x07\xf3\xf1\x9c\xf8\xcf|\xd1\x8f\xf8K\xe5-\xadvm\x12\xfa\xce\xe0\x10\x1b\x10tUJ\xc2\xdc\x85/&\x08\xa1\x86\xb8\xe0\xff/\xc1\x1c\x8a\x90kh\xfb*\x81\x07\xf9\x1b\xadt\xafq\xfes\x10\xbd\xc5\x7fp%\xa8\xfeW\xcf\x83\x12\xfd4\xfc\xfbWU\xc4\xff\xd1\x10\xe7T2\xbcoJ\xa7ooZ\x8b9\x8b\x1ah1\x12U\xbc\xc0\xc4\xd3Q\xed\xc1\xec\xf6X`k\xcf\xf2\xe6B\x0b\xbb\xd8?\xd6\x9e\xae\xef\x17\xde(v\xcb\xd4\xb7M\x8d\x7fk\xbc[\x98\xd7\xcb\xd9\xb7\xb4\xa8?\x19\x07\x97P\xfe\xf5\x98\xd8\xe2\xbe\x90\x8f?\xcaS\xf9l\xf8\xb9pO\xd6\xc0\xd0\xd6[Y\xce\xcf\x85\x83\xf2\xc9\xd8\xb9\x80\xf1\xaf\xc7\xcd\x06\xf5\x85\xcc|K\xb7\xef\xb3ac\xe3\xeb\xad\x81\x89\x8d\xeb\xb7\x9c\x87\xad\xb7\xf7\xc9X\xd8B\xf8\xd7\xe3`\x8d\xf9B\x06\xbe\x9d\x07\xfd\xd9\xf0o\xcdm^\x03\x17\x17^\xf4r>.\x1d\xe7O\xc6\xc9%\x94\x7f=^\xb6\xb8/\xe4\xe6\xdb\x06$>\x1b~\xb6Q\x88u\xb0\xb2\x0dJ\\xc1\xcaE\x1c\xe2\xd3\xb1r\x01\xe5_\x90\x95\x0d\xee\x8bY\xf9c\xe2;\x9f\x0d?\xf79\xa8s\x1bn\xd6a\x13\xed\x05V\x032\xb5t\x18B%:\xb4b\x9e\x92\xaf\xbe )\x99RD\xc2D\x1e\xba\xc38\x9dX\xafX\x9f\xce\x19\xc4\x08\x1d\x90[\x12#\xbe\x80D \x0e\xd0\x8fc\xc4"p\xec\x18^\xba\xce\x83\xea\x96\x94'G\x8c!\xa0\x1aD\xb3\xad\xba\xa1;\x90!\xd2\xc68/\\x19\xae\x16\x01\x9f\xcfS\xfe\x86\xfc\xae\xc4\x11!\x992\x86\x88\x16\xd1(v\xc8 J\xf2\x8c\xc3!\x95\x11u\xa4\xa3\x80\x83/\x1b\xe0C\xb46k\xc1\xc1\x8f^\x83\xf2\xcc\xc8m\xa7\xd27\x91\x0b\x17YK:D\x1d\xca\x0c\xaf\xe3\xe1\xb0\x9a\xbe\xbc[\x84\x9f\x069\xee'\x88,et\x062\xc4\xc1k\x13\x153\x91\x16\x0akpRR7\xd7\x10#d\x02\xa2\x9a\xcf6&eeq5?Y]\x1b=\x83\x89\xbaV\x93\xab\xb5\xf8[\xb5\x87\x1e\xa9\xc6\x00\x98lf\xdaj\x95\x00\x93\xd6\xc2#\xcf\x11\xa8Cn\xa2L\xdd"@\xa5\x17\x97b-E\xecvQ\x04\xb1\x12\x0eA\xb9\x00\xf2\xfax\x80\xf3\x87\xf5\x14#\x07\xe7\xea\xf1-Z\xd9\x02\xc49X\x1e\xe9{#\x0e)G\\xa3\xbb\xc5aQ@\xb2\xb6\x17\xea\xb8-\x02\xaa\x160\x9c\x0d\x0c"\xacR(\x872\x00X\x14\x8d%\xc8\x7f\xc6\x91\x1b.M\xfc\xba!\xe2|\xf6\x1cf\xd1\x8d\x02\xd2\xb6\xebu\x03\xd2\xa5\x8ez\xc1\x93F24\x01\xa0J|hQ\xd6\xf5*\xf8\xb9\\xb6\x04\xbe\x08\x85q\xd5Ee\xa18\x89\xbd\x1c\x17]u{\xcd\v\x89\xc8\x82l\x7f-\xdaucl(\xc6[\x04#\xcbyVA\x8fn7_\x05\xd8\xd5E\x88\xfb\xe3\x17\x82nI\xb9\x0d\xec\xdc\xef\xe6\xc0\xbf\xcc\x820P|MK\x99\xbf/\xa2\x8c7\xa5\xfbX\x86\xc9-\xe8N\xddn\x0ez\x1f\x87\xdboKo\xaaFR(GB\xb1\x91\x872q\xaaA\xa2\x1a\x9a<\xfb\xa1v\xfd\xcc\x15\xb7\xcf|\xbd\xfd`\xe6\xfe\x99\xafw\x1e}\xbd\xd3\xbf\xc1\x1d4\xe8p=bq\xe9\xa6-V\xa0\x03\xf6\x1a\xd6\x9b\x93\xecH\x0a\xe4L\xa1m"*\xd5\xd2\xfa\xf4\xca\x8dVI\xc8T\xc5s)X\x8bO\xfa\x83\xaeGCB\x80\x928\x85:Q\xb9\x1f;\x809\x88\xf8\x84\xa1>9:\x97\x00,\x87b\xb3\x83Uz\xd9\x91\x9e\xcdu\xa1-n\xea\xd5\xd8$\x11\x11\xb0\x93J!5%\xa0\xef\xc54F&\x0a\xe8\x0e\x83t\x12\xa0\x1am\x1ag\xa9\x14\x938\x13\xbeD\xa9\x98RR\xecw\x07\x80\x96\x94\x9f\xb6$\xb4\xe9@\xef\xce\xe2\xb4L\xcf\xf3\x9dD\x94\x81\x12u\x13!\x92gN\xd9X\xdf\xceS\xb65f\x86\xd0\xcb\\xb9M\xa9\xd7\x80\xf7BP!\x953\x0fTC\xe8Z\x1e\x03\x92\xb1\x8f\x0c\x1e\xc2\x1a\x03\xd4\x1d*\x9a.\xb2\xa9\x0cg\x12;\xa4k\x8c\x15\x94\x0f&\x81\xb6\xe8\xac\xedQ]\x1b2=P\xb2\xe7\x9c!K\x04M\xa4E}\xb1r\xe6mAx\xb4)k\x0b\x8dE0A\xd9\x9c\xd1\x10_\x14\x1d\xa9a=oWQ\xa8\x94\xa2X\xaca\x16hV\xad\x99J\x19\xce[~\x95 \xe7\xc3\x1ft=M\xa9\xf3tj\xd2M\xdd\xc9\xe5\x9f\xe0\x02d(\xa5\xa0\x8bT\xe6\x0c\xee\xca\x86\xa8\xca?\x02\xda\x8c\xb6\x0cJ\x9ca\xa0\xab`\xe8\x00\xd8\x9cm3\xa779QUv\xd0\xfb\x1bT\xa3\xe2\xacE\xa0\x1f\xe5\x18\x1bE\x95\x90X\xeb\x85\x19\xc5\x93(\x0d[\x0d\xf0\x9c\x14\xe23\xc3\x8b@}\xe1\xa6\x19\xd2f\xeb\xa5\xac\x97\xa7T'\xb6\x92\x11\xe6\xc0\xb4\xdbs\x11\xa4G\x90\x174\xee\xe5\x87u\x02\x8b\xbaM\x99\xc2\x18TY\x9c\x82\x0e\x95t\xb3\xd6W\xf3\xdc[f-Ol\xe7\xd5\x0c\x01W\xe5\x94\x86\x17\xba\x8b\x9cI\xb0\xeb\x8dbS\x867e\xe5\xd0w\x93\xd5\xc4f\xb8\xc9\xf48\xa1\xf6+A~\x16\x81\xd2#\xdc\x0aG\xb2\xfa\xa7G\xfd\x17\xad\xfe\xa3u\x12\xde\x94i_\x13n[\x07n*r\x96\xee<cf\xc3\x97\x05\xa2",\x0a\x1b\xc0\xfdk\xde\x8b\x18/\xbdH\xaa\x95\x0e\xc6\xc0Y \xf0n\xc4\xe7\x0f\xc7\xc1p\x98rq\xf6:\xe9\xbd(\xbd\xbcX<3\xa3,Lg.%\xfb\xf2\xb4\xe1GHh(\xf5\xd3a\x18\x9f\xadf\x919\xfaB\xa4-\x12!O\xc2\xfc\xbc\xa8v\xb1\x85\x98k\xdd\x8a\x8a$\xff\xc5\x89>}\xbb\x1ap\xadX\xaa}V\xee\xcb#\xdc\xa9\x87\xeb\x1a\x03\xb2\,.\xb9\xf1\x0c\xb0U\xd7\xc920\x03a\x07^C\xdd0\x1ah\x9dr\x81\xf8J\x14\x9e\xa3\xd6\x05"\x97|\x995C\xec\xfa>\xaeQd\xe7\xfe\xe6\xca\xa7\x08O,S\xeb\xd0\x95\x85E\xa2r\xb8\x92\x97\x1fh\x97\xba\x08J\xad\x95\x89\xb2 Q\x0e*\x7fp6j5\x1a\xb5\xf8\x84\xf5\xce\xcan\xba\xcc\xeb8\xcd=\xe8\x9eL\xb8*\xcbau_\x8bK\xb4CaC\x905s\xd1\xda\x9a riG*\xa9\xf5\xbes\xe6\xa6\x11\xf1M\x19\x8ed\x8b\x9f\x80\xea\x8e\xb7\x0f\xfaT\x0a\x15\xc0\xa0'\xe2\xb1m\xa7\x0a\xd5.\xbeq'\xc9\xf7\xda\x0f\x18\xe5Z\xfb\xc0Q\xd9\xa6\xaeI9\x9e>1\xe3\x8c\x83\x08\xd6\xf2\xb3P\xc0\xe0\x17\x01\xeeS\x84-\x13e\x82\x0f\xbc\xe0\x80IeX\xa0N'NdJ\xbe\x09\x99e4\xad\xb6\xe6\x83\x08\xd7T\xd2\x13\xf2B<\x89\xa30\x8e\x17\x08\x15\x07Y\xed\xa0L\x01\xd3\xe5\x07\xd9\x14\xfd!\xca\x9dx\x08x-.\xbc\xdb\xf4\xce\xecp\xc5\x91\x0d!\x87C\xf8p\x18\x1d3\x84\xbco\xa7\x97\x1f\xd2\xf2\x126\xf6SP\xeb\xc5{\xba)^\x10\xf8\xe4\xf4Pm\x1e\xc8\x81\x921\x94\x881\xe0DF\x85\x99\xec\x91\x1d\xac\x83\xc2\x19A}\x9e\x06\xf4ge\xad\x17[\x13\xb2\xaf\xd7\xfb\x0e`\x8cT\xc0(\x82\x0e>\xee\x87e\xce\xe5\xf6\x05\xa0\xcdn+!B\x9b:;\xebP\x16+O\x81c\xb0\x9b=\xb7g\xee\x8a\xe5C|\xb8-4\x0cO\xa3\xf8\x0c\xa1\xe6,\xcd\xcd}\xa9\x95\xf8\xa2\xa9\xb4\xaaT!b\x1a\xbb\xa0\xb8I5N\x95\x18\x9b\xf3\x046F^iaX\xea\xca6D\xa3\xf91\x0a\xae!f)^\x93\x17\xf93"\xd58Q\x82E/\xa9\x08R\xc3cXu\xc2\xa9rN\x8a"\x13 \xa7j\x16'\x808B\xa1\x9d\x85Vg\xbb5\x8a\x9b\xc98\xf9!\x8b{\xec\x1d9\xccn!\xe4\xd3(\x07\xdb\x80\xfd\xfff\x9e\xe8\xc5\xf8\xbf\xff\xfao{X\x8a\xd8K\xf3\x09\xad/\xd9\x8e8\xb6\x85\xd8\x8f\x88s\xe1\xce\xee!\x86\xdb\xd4\xd5\x15"\x81g$\xc1\xac\xc58>`\xe7\xe3$\x16\xe1\xccG\xc7,\xef\xf31,^{{j\xca\x86`g75.rE\x04\x8a\xe5\x0b\x8b\x16\xbb\x84z\xed\x8c\xc3K\x1c1\xa1\x83+\x07\xc7\xb4?\x08\xf6\x0c[\x14\x90c\x09\xd2\xcb\x0f9\xdc~0\x9b)15s\xd6\x04\x8d\xf1\xa3\x0dK7\xf4i\xb9\xdaMVF\x9a\x14\x01\xe6\x08\xd1n9\x08agc\xd6\xcb\xff\x01W\xb2h\xc1\xb97\xdf\x08\x10@\0\x83\x97\xc6\x11\xc8\x01\x02T\xba\x15Q\xc8\x1af\xfa\x12[\xa1r\xdc)\xaa\xa8x\xb3Z\x1a[kI\x83R\x0a\xa5\xf0\xf4;\xdf\x89\xd8\xcb\xe2\x01\x02\x19\xb8p\xf7;\xd1\xd9\xd9\xdf\xde\xdb\xbf\xdb\x11/\x8f\x1f~[\x9c\xb0z\x04\x07$\xb8\xfc\x13\x8d2\x86\x1b>\x02\xc9C\x98\xdfX\xa0P\\x08\xb7\x14\x1c \x08\xe6\x80\x94`\xd3m\xa6H\x97\x16\x90\x8e~\xadd_C]\x8eN\xb0\x07\xfc\x05\x9f\x89\xd2\xe1\x89Wq\xc0\xd2\xb3&$t\x0b\xcd_6 w#\xb6/\x83I\x0e\xddCFd\xe4\xc3jK\xa5\xba\x96\xb0\xda\x80\x8fagO\xd8\xa2ws\\x8b,a\xc5\xad\x92\xe6\xb8QyV-\xe8\x9d>\x0c\xa0W0R\xf5\x10\xa4\xe6\xd0\x149\x10\x8c,#\xe1\xa6)/\x08]\xaa\x1d5\x85\x06\xe2!VW\x7fbu\x13RT\xca\xda\x03t\xb01\x9e@\xb1 dg\xd4\x0f\x0bm\xadY\x98\x11a&@\xb5\x94Z\x0aJ\xa48y\xc9Z\x04\xfbb\x88\xed\x0e\xd0.\xff5G\xffRH\xeb\xe1Y7\x98\xba\xed\xaan\xa0\xbePe*\x7f'3+\xce5[TCf)N\x98\xc5H\xfaq\xb2m\x12\xfb\xe0X\x13\xfer\xdf\xb9H\x1a\x1a\xfe\xd0\xcdhW\x80;(\xc6W\xbfK\xee\xc44\xa6\xdd.\xf1\x96\x15\x01\x8e\xc90\x17V\xd2\x87\x8bz\x1d\xf4\x9f\xf7\xdf\xd8\xf4 \xc2z\x1cD\xeb\xca\xc9\xc1c\xcd\xfbR\xe0\x02k\xbb\x1f\x08\xa7\xb1\xcb\xea\x99O\x8f\x92\xeab\x05\xc9\x81\x0bt"\xb9\xc5\xd2\xeb&\xa8\xe2~k\xda\xb0\xd7\xc6\xb6h\xbf\x02?\xdb\xee\xe0\xb5\x9e`\x11\x96:\x94\x8f(g\x1e\x09R\x15\xb8\x08\\x98~z}\x8d\x08 >\x05\x8c\xa4A\x04\xae\x83\x86\x10eV\xed\xdc\xa5\xcb\xc1\xf9+xP\xfcx|\xfc\xe2\xf6t\xb8\x11\x11t\xe3\x15\x14\xe0F\x07\xb4_\xae\xc0\x9dTZ\x81;\xf5\x10~.\xd4\x85\xca.\xff\x9c`i\xc9\x06\x82[\x81{\xa3\xb9!.\xac\xa5s\x8b+\xa8AR\xf1'p\x89%\x99OF\xdc\xe5\xffR \xb9\x90\xa9L1\x13\x18\xb0~\x13\xb4j9\xf57\x7f\xe4q\xf6=\xdd~\xce7\xc7\xeb\xaf\xd8K\xc4g\x86\xd1\xaeRU\xc4\x86_:\x8eP\xe38\x0f}1\x00\x17C\xa4\xe3\x0c.\xecR\xc4\xda\xee\xc0\xb2\x14/\xf9\xb6\x1f`\x03\xfd9\x8cC\xf8\xb8"\x18B\xf0\xd0yk_\xfc\x1d@\x8f]\x85\xbc+\x0e\x1d\xf0YP\x1a\x02\xc7\xab\x91Z\xf8GS8\x0eM\x01\x93\xf8\x95\xbe\xa0\xb80\x8fq.>\x03\xe6\xa3\x83\xc2\x12\xb0\x92\xbaf\x9b\xcc\x1f\xd8\x9eU\x18\x07\x85E\xc8\xd6Bg\xbb\xd9n\xee@\xd9\x98\xd1i\xabY\x9d]\x84\xffc\xcf=\x99\xbf\xdd\xe7\xa4P\xe0F\xa4hl\xf3\xc4>'N\xdaz\xc5\xa1~s\xc52\x0bW\xec\xf8w\xe0\x002K\xaaFF\xa1\xb0\x04_gn\x15\x966\x92 y\xc1(\xb3*\xb7\xdd\xde\xdf\xbe\xbb\x7f\x17\x074\x0amY\xc8\x89\x8a\x8c\xc2\xbd\xee\x12\x01f\x07\x02\x86\x92\xb4\xe0^\x17N$\x09\x19\xd2;\x16\x1ed \xca\x8a\x86\xae\xbe\x98\x83\x05\xe3\wB\xabKj\x0b|mD+t\x01]\xa3\x7f\xa0\xffv[\xfa-\x13\x80\xfe\x99i\xedC]\x14\x11T\xfe\xc2\x8dV\xf4\x1a\xe07\x12\xac\xefG\x9f\xaf\xd3'Ic?/\x1c4\xeaQ>Y\xd0\x1fd\xe4\xcb\xdcY\x06\xf0\xe2\x10\x01\x0c\xddN\x14\x0c\xd3\x93\x89*}?\xfa\\x92\xbe&\xa6\xb1\xa1^\x91\xe2\xc3^\x9fB\x14b\xcdI\xc4!\xe5\xc3\xf2\x1d\xd5*\xc4\x15\x86\x13\x96;W\xc46\xac,,\xff\xb0j\x842\xf50\x8a$[\x192\x16\x1b\x0d\xab\x89R\x09b\x15\xf6|B\xa8_\x9a\x1c\x1dI\xd6\xa4\x00\xc0\xe3\x0b{\xc9\x81|\xe7"Q\x82A\xf0\x83\x0e\x11\x8c!\xc0P\x9d\x00-h\x18\x08\x0d\x88\x15\xc8\xef\xcb\x0fD\x0f\xactD}\x8b\xd9\x18\x0e\xbd\xd8Fzh\x0dWh}\xdc\xf6\x05\x19\xf0G\xae\x8d\x0a\x98+\x89\x04\xfaJ\x7f\xa5\xd4_N\xc2\x8f\xc6\x83\xbf\x0c\xff\x0d6\xf4$\x81\x17\x10\x11]\xc8\xbd\x85\xbb\x1b\xc0\x91\xd5\x1d\x08\xc2\x88(IVF\xb1\x970\x1e,9\x14d\xc4Q\x80_u\xa0\xe8\xb9\x96\xad\xf8\x80\xf0EE\x9f\xc2C&Vw.\xff\x05\x03\x0d\xf20\xf0\x02\xc8*|\xa8{\xc9Mqh\x8c\x15\x92f\xf0\xe2\xe1;\xd1\xbe\x83\xe1\x83\xbb@\x02\xab\x9bIziX\xe0\xec\x9a\x8b\xd4+6\x0c\xa8\xcc\xbd4Fd\xefh$d\x84\xa8\x00v\x09m<\\x03!*\x02\x1a\x8e\xf1CM\x07h\xbdbH\xa8AZ\x07\xf8\xc4\x09\x96\\xd1\xca\xb2m\xa0\xc4 \x1f\x81\xb5\xd2x at Q\x1a\xe3[\xa3\x95\x04Th\xa1\x95\x82\x82\xe3\x0d+[\xd9\xf5a\xf6\xd4F)1\xf5\x12\x99F9Qs.\x0d\x96\x8b\xce\xff\x1d\xf2\xa5\xea\xac\xab\x14Xw\x02\x93\x9f\xac>%\xb81\xfe*\xfc\xce\x08@\xd3\x0f\x89\xd0\xca\xb26\x1e\x99\xf5\xa1\xbe\xfb`\x12m\xaai\xeb\xecJ\x18N\x10CC)\x97N\x1e\x1a\xef\x99\xb7\xe3uzY\x8b\x8f\xabIl\xd1\x0f\x1f\xfb\xda\x17\xbb\xedvr\xae\x0d9YT\x95Y\xf7\x9ce\x9bE|\xebH\x82M\xb5YR\xbb\x1a\xb34\x83k\xd8.:l\x08N\xa6E\x0b\x98I1\x18;7Z\xf4\x94\xc6\x9dM\x88V+\xa7*Z\x04\xa6\x9f1\xff\x1e]~\xc0&\x88\x13\xecu\xad\xeb\xdd\xfa\xcd&\xe4\xb1\xd7\x9du\x8af\xa5\x01*\xbf\xf8\x06\x8c\x15\x97\x9b\x90\x9d\x9fG\xcc8%C\x93\x9e\xbcC\x0c=\xa7zGA6\xce\x07\x1c\x13\xa8\xdd\x11\xb2r\x16\xec\x00\xc5g\x02u8\x00J\x11_Ag\x98\x8a\x14\xac\x9a\x9b\xe8\xec\xec\xac9\xc2\xad\x88q:\xc2-\x0eh\x04\x16k\xb9\xa3$tv\xa0\xbe\xe9g\x83\xae\x81\\xff\xe9\x8b\x9fh\xbe\xa66\xa8k\xeeY\xec\xd1\xef\xd3\xe8\xfa8\xcd\x1a+=M\xec\xe1\x182\x95~%\xa7\xee:\x92ll\x8e\xe2\x18\x97\x8e0i\xbe-,\x0e(\x0bJ\xbf\x9a\xe3\x87wq\x12\xb1r\x1d>e\x7ft/\x1e\xa0j\x04\x1ca\x7f\xc9\xf7\x0e\xa4\x0e\xed\xb5T<\xe5\xc1\xbf\x15_\xa2\x0a\x80\xca\xb9\x96\xbf\xd7\x9e\xe8j\xb7y)2D\xf9!~|i\x10\xc7\xa7\x8cM\x81\x0c\x04_k%BE\xd7*:}h\xa9\xf7\x98\x91D=\xb99\xc2\xb6\xb2\xf8\\xd1\xe0\xa3\x11\xca\xce\x02\x04\x87\xf03)U\xa6\xa5R\xa7Ukc;^\xb50\xc7z\xf0\xa5\x0bS\xbe\xffh<\xea\xbb\x1c\xe5\x1f\xc5j\xd8\x00\xc8\x04\xbf\xa0\x15\xa4\x1e]}\xb3\x9c\xe3RUg5\x08\x18\xe8\xe6)\x99\x0cz\x81\x10u\x1a\x15\xf8,{\xbb\x06l\xce\x14j]ia\xea\x88\xfd\x90\xf4T>\xa0;\x93\x06\x92\xa3\xbe\xd0\x00\xb8zh\xc5>\x82\x85\x13\xd6vP\x7f@\xb5F\xef\x1d\x0eF@%k\xdc\x88jz\xd6\x82\xf3V\xb6cT\xb5\x04a\x8dZ\x0f\xf0\x91\xf6\xb0\xd5\xa3\xd6\x91\xc2\x13\xba\x0b\x8b\x9a\xea\xdf9\xfb\x7f\xf2\x15>\xc1\xf8l\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"] [severity "3"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "9"] [tag "application-multi"] [tag "language-php"] [tag "platform-multi"] [tag "attack-disclosure"] [tag "OWASP_CRS/LEAKAGE/SOURCE_CODE_PHP"] [tag "WASCTC/WASC-13"] [tag "OWASP_TOP_10/A6"] [tag "PCI/6.5.6"] [ref "o624,2v612,8192v612,8192"]
> ModSecurity: Warning. detected XSS using libinjection. [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "17"] [id "941100"] [rev "2"] [msg "XSS Attack Detected via libinjection"] [data "Matched Data: requesttoken found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "v828,13t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNullsv842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
> ModSecurity: Warning. Matched "Operator `Rx' with parameter `(?i)[\s\S](?:x(?:link:href|html|mlns)|!ENTITY.*?SYSTEM|data:text\/html|pattern(?=.*?=)|formaction|\@import|base64)\b' against variable `ARGS:<?xml version' (Value: `"1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "130"] [id "941130"] [rev "2"] [msg "XSS Filter - Category 3: Attribute Vector"] [data "Matched Data:  xmlns found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "8"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "o18,6v842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
> ModSecurity: Warning. Matched "Operator `Ge' with parameter `%{tx.inbound_anomaly_score_threshold}' against variable `TX:ANOMALY_SCORE' (Value: `15' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-949-BLOCKING-EVALUATION.conf"] [line "36"] [id "949110"] [rev ""] [msg "Inbound Anomaly Score Exceeded (Total Score: 15)"] [data ""] [severity "2"] [ver ""] [maturity "0"] [accuracy "0"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-generic"] [ref ""]
> ModSecurity: Warning. Matched "Operator `Ge' with parameter `%{tx.inbound_anomaly_score_threshold}' against variable `TX:INBOUND_ANOMALY_SCORE' (Value: `15' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/RESPONSE-980-CORRELATION.conf"] [line "61"] [id "980130"] [rev ""] [msg "Inbound Anomaly Score Exceeded (Total Inbound Score: 15 - SQLI=0,XSS=15,RFI=0,LFI=0,RCE=0,PHPI=0,HTTP=0,SESS=0): XSS Filter - Category 3: Attribute Vector"] [data ""] [severity "0"] [ver ""] [maturity "0"] [accuracy "0"] [tag "event-correlation"] [ref ""]
> ModSecurity: Warning. detected XSS using libinjection. [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "17"] [id "941100"] [rev "2"] [msg "XSS Attack Detected via libinjection"] [data "Matched Data: requesttoken found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "v828,13t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNullsv842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
> ModSecurity: Warning. Matched "Operator `Rx' with parameter `(?i)[\s\S](?:x(?:link:href|html|mlns)|!ENTITY.*?SYSTEM|data:text\/html|pattern(?=.*?=)|formaction|\@import|base64)\b' against variable `ARGS:<?xml version' (Value: `"1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "130"] [id "941130"] [rev "2"] [msg "XSS Filter - Category 3: Attribute Vector"] [data "Matched Data:  xmlns found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "8"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "o18,6v842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
> ModSecurity: Warning. Matched "Operator `Ge' with parameter `%{tx.inbound_anomaly_score_threshold}' against variable `TX:ANOMALY_SCORE' (Value: `15' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-949-BLOCKING-EVALUATION.conf"] [line "36"] [id "949110"] [rev ""] [msg "Inbound Anomaly Score Exceeded (Total Score: 15)"] [data ""] [severity "2"] [ver ""] [maturity "0"] [accuracy "0"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-generic"] [ref ""]
> ModSecurity: Warning. Matched "Operator `Ge' with parameter `%{tx.inbound_anomaly_score_threshold}' against variable `TX:INBOUND_ANOMALY_SCORE' (Value: `15' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/RESPONSE-980-CORRELATION.conf"] [line "61"] [id "980130"] [rev ""] [msg "Inbound Anomaly Score Exceeded (Total Inbound Score: 15 - SQLI=0,XSS=15,RFI=0,LFI=0,RCE=0,PHPI=0,HTTP=0,SESS=0): XSS Filter - Category 3: Attribute Vector"] [data ""] [severity "0"] [ver ""] [maturity "0"] [accuracy "0"] [tag "event-correlation"] [ref ""]
> ModSecurity: Warning. Matched "Operator `Rx' with parameter `^%{tx.allowed_request_content_type}$' against variable `TX:0' (Value: `text/vcard' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line "928"] [id "920420"] [rev "2"] [msg "Request content type is not allowed by policy"] [data "text/vcard"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-protocol"] [tag "OWASP_CRS/POLICY/ENCODING_NOT_ALLOWED"] [tag "WASCTC/WASC-20"] [tag "OWASP_TOP_10/A1"] [tag "OWASP_AppSensor/EE2"] [tag "PCI/12.1"] [ref "v0,3o0,10o0,10v174,25"]
> ModSecurity: Warning. Matched "Operator `Rx' with parameter `^%{tx.allowed_request_content_type}$' against variable `TX:0' (Value: `text/xml' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line "928"] [id "920420"] [rev "2"] [msg "Request content type is not allowed by policy"] [data "text/xml"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-protocol"] [tag "OWASP_CRS/POLICY/ENCODING_NOT_ALLOWED"] [tag "WASCTC/WASC-20"] [tag "OWASP_TOP_10/A1"] [tag "OWASP_AppSensor/EE2"] [tag "PCI/12.1"] [ref "v0,6o0,8o0,8v266,8"]
> ModSecurity: Warning. Matched "Operator `Rx' with parameter `^%{tx.allowed_request_content_type}$' against variable `TX:0' (Value: `text/vcard' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line "928"] [id "920420"] [rev "2"] [msg "Request content type is not allowed by policy"] [data "text/vcard"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-protocol"] [tag "OWASP_CRS/POLICY/ENCODING_NOT_ALLOWED"] [tag "WASCTC/WASC-20"] [tag "OWASP_TOP_10/A1"] [tag "OWASP_AppSensor/EE2"] [tag "PCI/12.1"] [ref "v0,3o0,10o0,10v174,25"]
> ModSecurity: Warning. Matched "Operator `Rx' with parameter `^%{tx.allowed_request_content_type}$' against variable `TX:0' (Value: `text/xml' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line "928"] [id "920420"] [rev "2"] [msg "Request content type is not allowed by policy"] [data "text/xml"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-protocol"] [tag "OWASP_CRS/POLICY/ENCODING_NOT_ALLOWED"] [tag "WASCTC/WASC-20"] [tag "OWASP_TOP_10/A1"] [tag "OWASP_AppSensor/EE2"] [tag "PCI/12.1"] [ref "v0,6o0,8o0,8v266,8"]
> ModSecurity: Warning. detected XSS using libinjection. [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "17"] [id "941100"] [rev "2"] [msg "XSS Attack Detected via libinjection"] [data "Matched Data: requesttoken found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "v828,13t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNullsv842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
> ModSecurity: Warning. Matched "Operator `Rx' with parameter `(?i)[\s\S](?:x(?:link:href|html|mlns)|!ENTITY.*?SYSTEM|data:text\/html|pattern(?=.*?=)|formaction|\@import|base64)\b' against variable `ARGS:<?xml version' (Value: `"1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "130"] [id "941130"] [rev "2"] [msg "XSS Filter - Category 3: Attribute Vector"] [data "Matched Data:  xmlns found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "8"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "o18,6v842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
> ModSecurity: Warning. Matched "Operator `Ge' with parameter `%{tx.inbound_anomaly_score_threshold}' against variable `TX:ANOMALY_SCORE' (Value: `15' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-949-BLOCKING-EVALUATION.conf"] [line "36"] [id "949110"] [rev ""] [msg "Inbound Anomaly Score Exceeded (Total Score: 15)"] [data ""] [severity "2"] [ver ""] [maturity "0"] [accuracy "0"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-generic"] [ref ""]
> 
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set

-- 
ModSecurity courses Oct 2017 in London and Zurich
https://www.feistyduck.com/training/modsecurity-training-course
https://www.feistyduck.com/books/modsecurity-handbook/
mailto:christian.folini at netnea.com
twitter: @ChrFolini


From aurel-la at laposte.net  Tue Oct 17 17:40:47 2017
From: aurel-la at laposte.net (Aurel)
Date: Tue, 17 Oct 2017 19:40:47 +0200
Subject: [Owasp-modsecurity-core-rule-set] XSS Attack and PHP source
 code leakage with Nextcloud 10.0.3 (HTTP methods and content-types allowed)
In-Reply-To: <20171017141856.74rj3joyicxrltcc@leander>
References: <8F037F2A-267B-4E62-B549-69A61B19AA1A@laposte.net>
	<20171017141856.74rj3joyicxrltcc@leander>
Message-ID: <7C6DF31F-0CFC-4054-A7E5-7B129A8B403E@laposte.net>

Hi Christian,

Thanks to point me out the request, I will try it and report back my experience there.

Thanks !

Aur?lien

> Le 17 oct. 2017 ? 16:18, Christian Folini <christian.folini at netnea.com> a ?crit :
> 
> Hey Aurel,
> 
> We have a pull request waiting for my review that addresses Nextcloud.
> 
> https://github.com/SpiderLabs/owasp-modsecurity-crs/pull/899
> 
> The idea is to get a rule exclusion package for Nextcloud. Ideally you could
> give that contributed pull request a go and report back your experience
> in the pull request. I'll review and eventually merge, but I do not
> use Nextcloud, so my insight will be limited.
> 
> Ahoj,
> 
> Christian
> 
> 
> On Tue, Oct 17, 2017 at 01:52:34PM +0200, Aurel wrote:
>> Dear all,
>> 
>> I am trying to make ModSecurity v3/Nginx 1.12.1 working together with NextCloud 10.0.3 on a Debian Jessie. I am using the latest available code from the git repository for ModSecurity v3 and its nginx connector and the owasp 3.0.2 rules.
>> 
>> I am getting the following ModSecurity exceptions when refreshing the administration page of NextCloud which execute some automatic testing on webdav and others. I don?t know how to make ModSecurity working with Nextcloud :
>> 
>> None None None
>> None 949110 Inbound Anomaly Score Exceeded (Total Score: 15)
>> None 920420 Request content type is not allowed by policy
>> None 980130 Inbound Anomaly Score Exceeded (Total Inbound Score: 15 - SQLI=0,XSS=15,RFI=0,LFI=0,RCE=0,PHPI=0,HTTP=0,SESS=0): XSS Filter - Category 3: Attribute Vector
>> None 941130 XSS Filter - Category 3: Attribute Vector
>> None 953120 PHP source code leakage
>> None 941100 XSS Attack Detected via libinjection
>> 
>> To resume the details given below, I got two problems :
>> 	1) ModSecurity: Warning. Matched "Operator `Rx' with parameter [msg "PHP source code leakage"] 
>> 	2) Warning. detected XSS using libinjection [msg "XSS Attack Detected via libinjection"] [data "Matched Data: requesttoken found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"]
>> 
>> In crs-setup-cloud.conf I allowed all the HTTP methods and content-types. Its works as it reduced a lot my previous exceptions on HTTP methods and content-types but still these two problems are occurring. How should I process to make Nextcloud working and let ModSecurity as tightened as possible ?
>> 
>> Thanks for your help,
>> 
>> A.
>> 
>> Here my crs-setup-cloud.conf :
>> 
>> SecDefaultAction "phase:1,log,auditlog,pass"
>> SecDefaultAction "phase:2,log,auditlog,pass"
>> SecAction \
>> "id:900110,\
>>  phase:1,\
>>  nolog,\
>>  pass,\
>>  t:none,\
>>  setvar:tx.inbound_anomaly_score_threshold=7,\
>>  setvar:tx.outbound_anomaly_score_threshold=6"
>> SecAction \
>> "id:900200,\
>>  phase:1,\
>>  nolog,\
>>  pass,\
>>  t:none,\
>>  setvar:'tx.allowed_methods=GET HEAD POST OPTIONS PROPFIND PUT REPORT DELETE MKCOL CHECKOUT COPY LOCK MERGE MKACTIVITY MOVE PROPPATCH UNLOCK PUT PATCH'"
>> SecAction \
>> "id:900220,\
>>  phase:1,\
>>  nolog,\
>>  pass,\
>>  t:none,\
>>  setvar:'tx.allowed_request_content_type=application/x-www-form-urlencoded|multipart/form-data|text/xml|application/xml|application/soap+xml|application/x-amf|application/json|application/octet-stream|text/plain'"
>> SecCollectionTimeout 600
>> SecAction \
>> "id:900990,\
>>  phase:1,\
>>  nolog,\
>>  pass,\
>>  t:none,\
>>  setvar:tx.crs_setup_version=302 ?
>> 
>> Here my ModSecurity conf file :
>> 
>> SecRuleEngine On
>> SecRequestBodyAccess On
>> SecRule REQUEST_HEADERS:Content-Type "(?:application(?:/soap\+|/)|text/)xml" \
>>     "id:'200000',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"
>> SecRule REQUEST_HEADERS:Content-Type "application/json" \
>>     "id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"
>> SecRequestBodyLimit 13107200
>> SecRequestBodyNoFilesLimit 131072
>> SecRequestBodyLimitAction Reject
>> SecRule REQBODY_ERROR "!@eq 0" \
>> "id:'200002', phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2"
>> SecRule MULTIPART_STRICT_ERROR "!@eq 0" \
>> "id:'200003',phase:2,t:none,log,deny,status:400, \
>> msg:'Multipart request body failed strict validation: \
>> PE %{REQBODY_PROCESSOR_ERROR}, \
>> BQ %{MULTIPART_BOUNDARY_QUOTED}, \
>> BW %{MULTIPART_BOUNDARY_WHITESPACE}, \
>> DB %{MULTIPART_DATA_BEFORE}, \
>> DA %{MULTIPART_DATA_AFTER}, \
>> HF %{MULTIPART_HEADER_FOLDING}, \
>> LF %{MULTIPART_LF_LINE}, \
>> SM %{MULTIPART_MISSING_SEMICOLON}, \
>> IQ %{MULTIPART_INVALID_QUOTING}, \
>> IP %{MULTIPART_INVALID_PART}, \
>> IH %{MULTIPART_INVALID_HEADER_FOLDING}, \
>> FL %{MULTIPART_FILE_LIMIT_EXCEEDED}'"
>> SecRule MULTIPART_UNMATCHED_BOUNDARY "!@eq 0" \
>> "id:'200004',phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'"
>> SecPcreMatchLimit 1000
>> SecPcreMatchLimitRecursion 1000
>> SecRule TX:/^MSC_/ "!@streq 0" \
>>        "id:'200005',phase:2,t:none,deny,msg:'ModSecurity internal error flagged: %{MATCHED_VAR_NAME}'"
>> SecResponseBodyAccess On
>> SecResponseBodyMimeType text/plain text/html text/xml
>> SecResponseBodyLimit 524288
>> SecResponseBodyLimitAction ProcessPartial
>> SecTmpDir /data/tmp/www/mydomain.com/cloud/modsecurity
>> SecDataDir /data/tmp/www/mydomain.com/cloud/modsecurity
>> SecUploadDir /data/tmp/www/mydomain.com/cloud/modsecurity
>> SecAuditEngine RelevantOnly
>> SecAuditLogRelevantStatus "^(?:5|4(?!04))"
>> SecAuditLogParts ABIJDEFHZ
>> SecAuditLogType Serial
>> SecAuditLog /var/log/modsec/mydomain.com/cloud-audit.log
>> SecArgumentSeparator &
>> SecCookieFormat 0
>> SecUnicodeMapFile unicode.mapping 20127
>> SecStatusEngine On
>> include ../modsec_core_cloud.conf
>> 
>> Here modsec_core_cloud.conf :
>> 
>> include owasp-modsecurity-crs/crs-setup-cloud.conf
>> include owasp-modsecurity-crs/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS-cloud.conf
>> include owasp-modsecurity-crs/REQUEST-901-INITIALIZATION.conf
>> include owasp-modsecurity-crs/REQUEST-905-COMMON-EXCEPTIONS.conf
>> include owasp-modsecurity-crs/REQUEST-910-IP-REPUTATION.conf
>> include owasp-modsecurity-crs/REQUEST-911-METHOD-ENFORCEMENT.conf
>> include owasp-modsecurity-crs/REQUEST-912-DOS-PROTECTION.conf
>> include owasp-modsecurity-crs/REQUEST-913-SCANNER-DETECTION.conf
>> include owasp-modsecurity-crs/REQUEST-920-PROTOCOL-ENFORCEMENT.conf
>> include owasp-modsecurity-crs/REQUEST-921-PROTOCOL-ATTACK.conf
>> include owasp-modsecurity-crs/REQUEST-930-APPLICATION-ATTACK-LFI.conf
>> include owasp-modsecurity-crs/REQUEST-931-APPLICATION-ATTACK-RFI.conf
>> include owasp-modsecurity-crs/REQUEST-932-APPLICATION-ATTACK-RCE.conf
>> include owasp-modsecurity-crs/REQUEST-933-APPLICATION-ATTACK-PHP.conf
>> include owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf
>> include owasp-modsecurity-crs/REQUEST-942-APPLICATION-ATTACK-SQLI.conf
>> include owasp-modsecurity-crs/REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION.conf
>> include owasp-modsecurity-crs/REQUEST-949-BLOCKING-EVALUATION.conf
>> include owasp-modsecurity-crs/RESPONSE-950-DATA-LEAKAGES.conf
>> include owasp-modsecurity-crs/RESPONSE-951-DATA-LEAKAGES-SQL.conf
>> include owasp-modsecurity-crs/RESPONSE-952-DATA-LEAKAGES-JAVA.conf
>> include owasp-modsecurity-crs/RESPONSE-953-DATA-LEAKAGES-PHP.conf
>> include owasp-modsecurity-crs/RESPONSE-954-DATA-LEAKAGES-IIS.conf
>> include owasp-modsecurity-crs/RESPONSE-959-BLOCKING-EVALUATION.conf
>> include owasp-modsecurity-crs/RESPONSE-980-CORRELATION.conf
>> include owasp-modsecurity-crs/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS-cloud.conf
>> 
>> Here the details of the ModSecurity matched rules :
>> 
>> ModSecurity: Warning. Matched "Operator `Rx' with parameter `(?:\x1f\x8b\x08|\b(?:(?:i(?:nterplay|hdr|d3)|m(?:ovi|thd)|r(?:ar!|iff)|(?:ex|jf)if|f(?:lv|ws)|varg|cws)\b|gif)|B(?:%pdf|\.ra)\b)' against variable `RESPONSE_BODY' (Value: `\xe5]\xe9r\xdbF\xb6\xfe\xad<E\x87\xa9df*\x06\x17Ivd\x85T\x8a^cO\xa28\x91\xbc\xe5\x8f\x0a\x04\x9a$,\x (26086 characters omitted)' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/RESPONSE-953-DATA-LEAKAGES-PHP.conf"] [line "79"] [id "953120"] [rev "2"] [msg "PHP source code leakage"] [data "Matched Data: <? found within RESPONSE_BODY: \xe5]\xe9r\xdbF\xb6\xfe\xad<E\x87\xa9df*\x06\x17Ivd\x85T\x8a^cO\xa28\x91\xbc\xe5\x8f\x0a\x04\x9a$,\x10@\xd0\x00%\xf9\x01\xee+\xdc\xbfS\xf7W|_Cor\x9f\xe4~\xe7t7\x16.\xa2$s\xca\x1e&\x95D$\xd0\xcb9\xa7O\x9f\xbd\x9b\xdd/\x1f\xfd\xf2\xf0\xf8\xed\x8b\xc7b\x9cM\xc2\x83/\xba\xf4Gx\xa1\xabT\xaf\x11\x8d\x1cO%\x0d\xe1\xbb\x99\xeb$\xa1\xeb\xc9q\x1c\xfa2u\x86\xb1\x97\xe3\xfd\xd0\x0d\x95l\x88\xd0\x8dF\xf8\x926\xc4\xc1\x17[\xdd\xb1t}\xdd#W2\xed5\\x7f\x12D\x81\xcaR7\x939\xda\xf0`\xf4\xca\xf1\x03\x85A/"w"{\x8d\xfe\xa2f\xa9\xfc#\x97*\xcb\xe2S\x19\xf5\x1ao\x07\xbboT6\xdc=\xddm\x9d\x9eN\x87?=I\x13\xd9?\x0f\xde?k\xa9o\xf7\xe2\x1f\x7f\x8a\x7fy\x13\xfe\x11\x84?\xbe\xdd\xe9\xf7\xf6_\xaa\xac\xdf~6\xf8\xe7\xb6{\xfcfo\x10\xdd\xf3\x0e\xcf\x92\xe3\x9d\x9d\x97/\x07\xfe\x0b\xf5\x8b\xfb\xe0\xfcw\xf7\xcd\xee\xd3_\xe3\xe7Go{\x0d\xc0\xbd\xd5\x9d\xc8\xcc\x15\xde\xd8M\x95\xccz\x8d<\x1b:{\xfaE\x16d\xa1\xa4&[\x15 \x838\x12\x8e8\x94\xe7\x99\x17\xc6\xb9\x8f\xfe\xad\xa2\x9d\x1ej\x9ce\x89\x03\x04\x82i\xaf\xf1\xc6y\xd9w\x1e\xc6\x93\xc4\xcd\x82A\x08\x9ayq\x94\xc9\x08\xf3<{\xdc\x93\xfeHV@\xd0\xf4H\xe5P\xa6\xa9\x04\xc1\x8a\xa6\x91\x9c\xe2{\x09\xabn8\x0d\xe4Y\x12\xa7Y\xa5\xe1Y\xe0g\xe3\x9e/\xa7\x81'\x1d\xferG`\x0d\xb2\xc0\x0d\x1d\xe5\xb9\xa1\xecu\x9a\xed;\x82\xd6e\x92Oj\x8f\xdc\xf3\xfa\xa3\xb9\xe9\xdc$\x09\xa5\x13dy$\x95\x83/\x95i\xf1\xcd\x09\xfc^\xa7\xb3}ww\xbb\xddio/\xe9<\x89\x07\x01\xc68\x93\x03\x1a\xc0\xf1\xdc\xc4\xad\xd3\xe4B\xaa\xebuU\x99\x9b\xe5\xca\x19\xb8\xa9\xa3\xb2\x8b\x1a]\x07`\xd7\xd3\xeb\x8d\xc2\xebV\xc1\xa3\xbe\xcasc\xdc\x0a\xfcl,'\xd2\xf1\xe20\xae\xae\xe8W\xed\xf6\xde\xb6w_O\x11\x06\xd1\xa9He\xd8k\x04X\xf2\x86\x18\x83\x05z\x8d\x96\x17\xa7\xb2\x15LF\xad\xa1\x8b\xf5\x8c\xa3&\xfe7\xdbA/J\x16\xe7\xde\xd8\xa16N\x92J\x0f\xdc\x16+\xe9/\x1d\xc8\xe1\xf6\xcd$\x1a\xcd\x0e7q\xd5)\x8f\xd3\x10*x/\xb1\xd3\xdd\xe8b\xf98\xd4\xbc\xa9\xa6#"!\xf0\xeb5\x96\xa05q\xa3`\x88\xed<?\x92}\xd3|\xa70)o5\xfa\xa7[\x92\x84\x97W\x8d\xa5\x9c\xe9=\x95\x91\x1f\xa7-%C\xe9e\xdb\xf6o\xd3S\xea\x87io\xfb\xae\xbf3\x18v\xf6\xdc\xef\xee\x0e\xefu\xf6\xb0\xa3d\xa7\xed\xeez\xf7\xeey\xdf\x0d\xf7v\xef;m;\xd7\x8a\x99\x94\xd2\xcb\xb0'\xef\xef\xb8\xb2\xed\xed\x0e<Ov\xfc\x9d\xfb\xde\xc0\xbf\xbf'\xe5^{{\xd7\xdf\x93;\x0e\xc4\x1a\xf6\xe8\xba\xa7'\x0e0\x88\xbe\x83 at L/\x9c<h1G\xa9\xd6\xc0U\xb2U<\xfdw\xcc\x0cZ\x96\x138\xc3\xe0\\xaa5O\x03\xf6U\xad!d\x82:I\xfc!\x094\x99\xb6hZ^\xf55OF\xe3\xf2\x9eZ\xbd\x98\xd0\x05\xeb\x9e\xbd\x82*\x18EA\x8b\x00\x1a at d\xbf\xac\x19\xd9\xeat\x81/c\xd2\xb7\xffF\xda\xf2tQ\x9c\x05\xc3\xc0\x83\xa6\xb3\xc8\xe9\xcd\xbbf\xd4x\x0dK\xdel\xc6\x9e\x0f\xfd\x16\x8f\xd6<\x0d\x8c\x81,\x88Fz\x95\xec\x97\x1b\xcf\xc1\xd2Lyi\x90d"\x8a#\x0f\x06\xcf\xeb\xd7\xcf\xda\xaf\x7f<l\xff\xfe\xee\xb7\xf4\xf0\xe1\xfd\xd4\xdd\xf9}r\xfc\xf8\xf7\x0b\xef\xe9\xab\x07\xf2ix\xef\xe8\xe8\xfe\xfb\x7f\xbe\x1fO\x8f\x1e\x9fO\x8f;c\xe5\xbd\x0e\xd5\xd1\x93\xd3\xf7\xbf\x1e\xb7\xef\xbdzs\xd8\xfe\xf5\xf8\xc1\xf3\xb7\xa7\xea\xe2\xed\xab\xdf\xde\xfe\xf2\xf4y~89\xfc\xc5\xdfy\xf0\xf2\xe7\xf7\x87\xaf^\xbd~~\xfa\xf2\xc7\xc3\x17o_>\xdf}=y\xf2\xf6\xf0\xb1\xff\xdb\xa0\x9d\x1c\xbf>n\xf7 \xd3S\xcf\xea\x95w\xaa\x15{\x90\xba\xd7\x10\x96\x8d\x83nKc`\xe4\xf3\xe7\x88\x8f\x91\x92\xc4\x1b\xd7\xc3\x8aT\xc0\xe7\x8d\x17\x96\x88Y}"\xd3\x91\xf4\x9dLN\xb0\x893I*>\x81\xf2\xdb\x144\x19G%\xdd\xd4\x1b\xb7\x80\xb2\xfe\xb4Q\xc8\x85\x9dv\xd4\x1a\xa6\x1b\x85\x13Vj\x00;{\x94\xc6y\xe4\xbf\x8b\x07jS\xb0[h\x92\x00[\xec:v\xb8\xc2|\x14D\x9b\x82\xec\x8c\x88Qd\xf7\xc0\xa9\xf2\xe0uo\x8c|Yb\x09\x01umon\xcaZ2\x9e#7\x0c\xe1&\xb46L\xe4,0/7\x0cC\xb0c\xdd|\xd6Z\x7fS\x98\x93\x95<p,\xfcU\xe3N^\xcb\x00\xfd\xfcM5\x8b\x1e\xbb\xb2\xec\xd0\x06\xd10\xde\xb4\xc5\xd3\xd8ya\x80\xf8\xe5\xa6\xe1F\xb1V\xd7\xcb\xd4DF\xf9\xa6\xe0\xc6R3O\x10w\x97U\xd9\xb2\x91\xcaa\x01\x9a\x107\x9c\x82\xd8\x94\xe5,\x02\x12\x1b\xa6\xfa\x0a\xbc\xd8\xfb\xd3A\x97\x8d[\xb3\x8deF F\xb1\xb7\x0dQ\xe4U^\xf4dj\xe2\x99\x88{o\x08~\xd6P\x99\xe4a\x16\xe8\xdc\xc9\xa6\xa1\x86%\xcc\x13o,\xbd\xd3\x8dY\xb5\xd2\x85\xddH\xdd\xad\xed\xca\xc2;h\xd2\xf7<\x09c\xf7\xd61\x88\xab\xb3zLN\xca\xa2!\xbc\xaf3M\x14\x06o7Z\x076\xb2\xad\x03\xe5\xb5v\x00\xcft\xe1\xb6\x9f<\x98_\x06\xafQ\x80@\xa5\x17T\x821\x88\xfd\x0b\x81L|\x83> '\xa9\x95)\xe5:\xbbQ\\xc4\xf0\xbb~0\xe5VQ\xfc\xce\x9d\xba\xfa\xb9N\x05\xe3\x0d\x07\xf9\x1f\xa2\xab\x14 @h\xf29\xc8O\xa3\xa0\x01\x12Q<G\x97#\x9d\xd0H\xe2<\x15Cd5(\xe3\x13\xc9\x14i`T.x\x88T\x93\x87 ^\xc9<@8\xe2\xbd\xe8\xba&\xa7M\x95\x11\xfb\xad\x96\x8c(\xef\xef\x94\x937\x91\xb3n5D\xe6"\xd2\x8d\xd2\x88\x13\xe4\xf0\xa3\xd3\x86\xce\x89Gp\x1dME\xc4\x01,\xf4\x00\x09\xb3\x0a\x0c\xdd\x96{ d\x86\xa6T\xc01\xc2\xbb\xd0\x15\x89;\x92M*\xcc\xd0\xe8\x98\xbf]x\xd8\x8bhP&\xad\x90\xa6\x87\x17\x10\x00\x93\x82\x1a\x86Ne\x1b\xca\x1a\xd4\x86\xd5\x85/\x988\x8dQ_\xd1\x18\xb8D\x09\xb4\xb2D\xa6\xb51\x03n\xf1CSc\xa3\x9f;\xa1\x1cf&\x19]\x90\xa9\xd5\xd0\x89p^#[hB\xe4\x19\x04\x91/\xcf{\x8dN\x91\xbe\xae\x0c\x085\x1c\xeb\xe4\xbd\xcd\xa3w\xc7\x9db\xb6\xc0\xf7e\xe4L\x03\x95#DtQ\xa6\xda+\x85,\x9c\xabj\x8d;6\xcdc\xf0\xe4\xa7\xee\xc1\x17\x0cS\x01\xe3WH\xfa\xebb!\x83\x08\x98\x85\xeaRJ\x1a\x0a\xf2\xa5\xb2x4\xa2\x1a\x8b\x12v]\x1cBCU\xa0c\x1aQQ\x08\x0dQ\x00W\xaf\xc7\xa0\xe9k\xf0Up\xe7\xda\x07\x0f\xd1K\xd0\xd2\xaeO\x1d\xee<\xe4\xa5\xc4\x14\x04V\x89?\x0f\x1a\x06\xba:\x89Z\xb04*\x91c\xba\x95\xcd\xcb5\xaa\x08e\xb3\[[BT\x10\xdd)\x1eo\x15\x85\x0d[]\x14t\x98<\e\x00\xaa\xf2\xc0W\xaa\xa5\xb8NB\xce\x96I`B\xb3\x06\xe8\xac\x97\xbeU\x99j\x96>$Q!\xf2\x1c5\x01\x0b8\xbe\x9b\x9e\x96\x10n\x09\xce\xd5\xf6\x1a\xa66k\x1f\xc9J\xf9}\x8d\x98\x96\x9e\xbc\x0e\x94\xd5L\xdc\xa8\x9c\xedI\xe0\x8d!\x1f\x94}\xdb\xd2\xaf\x0d\xa8\xddV\x18\x94mgI\xce\xdb:\xc8PibY\xeaj\xaa\xdb\xf6v\x9f\xdc\x86\xf0\xc5\x18L{\x03\xc0\x7f\xf2\x02\xf45\x0e\x97\x1fn\xb3\x02&n|\xdd\x05\xb0a\xe6\x8f`|;\xc4\x06\xb0\xfeS\x14\xd6\xa5\x81\xbc\x0d\xdd\x15\xd2JT\xa9u=\xbe\xd7\xad?\x86\xeb\xcd\x08\x1b@\xf4~\x92\xc8P\x89i\xe0_~\x88oCz\x1b\xf1\xbb.\xf1m\xfb\x8f!\x7f1\xc6\x06,\xc0C\x131\xbd\x15\xed\xb1c"(\xa0k\xd3\xde\xb4\xff(\xda\xdb1\x88\xf6T\x0bK\x00\xfcG\x0b\xfc\x11\xa1p=\xf2\x93\x85C\xc6\xcd\x04\xc64\x99Y\xa5\x81S1\xd2\x0a\xb3\xd1\x9a\xeb_U\xec\x9eYc\x82G:\x1b\x07\x19\xcc\xb5\x8a\xc5E\xaa\x9d5\xff\x8b0W\xc2\xff\xe6\xab\xf6\xce\xfd\xef1\xa1\xf5#\x14jn*v\x03\x1b\x96\x8cBi!t[9\xea\xd1\xb5\xb5\x19\xb9ScW\xe3S0\xe2\xd2\xb2\x9a\xed\xcb&r\xf9j\xd6\x8a!7\x8d\xcc\x18k\x86X\xa3\x9cIP\x18$]\x9a\xd0\x10\xb2\xfc\xb3\xc0*\xac\xb4Zl\x08.6\xff\xb6*\x06 \xd1g:\x12\xbaR\xbb\xd1\xb9\x87\x9aX\x19\x8c\xc6\xf0z\xe83\xa5\xa4\x1f\xc4\xb0\xf0\xdb\xa2-:\xf7\xf0\xef\x8c\xa5\xea\xcb\xa1:\xe8\xc2F\xcd\xe0q\x10\xf2A\x04\x87(C:\x8d\xacV\xbc\x91\x0f\xa9\x14\xf7g7K\x83s\xd4~\xf7\x1aGp\xd2<\xf94u\x93q\xe0\xc1\x10\xbfH`\xe5M\xf8=\xe6sC\xd4\xd9\xf7\x1aN\x07\xf3\xf1\x9c\xf8\xcf|\xd1\x8f\xf8K\xe5-\xadvm\x12\xfa\xce\xe0\x10\x1b\x10tUJ\xc2\xdc\x85/&\x08\xa1\x86\xb8\xe0\xff/\xc1\x1c\x8a\x90kh\xfb*\x81\x07\xf9\x1b\xadt\xafq\xfes\x10\xbd\xc5\x7fp%\xa8\xfeW\xcf\x83\x12\xfd4\xfc\xfbWU\xc4\xff\xd1\x10\xe7T2\xbcoJ\xa7ooZ\x8b9\x8b\x1ah1\x12U\xbc\xc0\xc4\xd3Q\xed\xc1\xec\xf6X`k\xcf\xf2\xe6B\x0b\xbb\xd8?\xd6\x9e\xae\xef\x17\xde(v\xcb\xd4\xb7M\x8d\x7fk\xbc[\x98\xd7\xcb\xd9\xb7\xb4\xa8?\x19\x07\x97P\xfe\xf5\x98\xd8\xe2\xbe\x90\x8f?\xcaS\xf9l\xf8\xb9pO\xd6\xc0\xd0\xd6[Y\xce\xcf\x85\x83\xf2\xc9\xd8\xb9\x80\xf1\xaf\xc7\xcd\x06\xf5\x85\xcc|K\xb7\xef\xb3ac\xe3\xeb\xad\x81\x89\x8d\xeb\xb7\x9c\x87\xad\xb7\xf7\xc9X\xd8B\xf8\xd7\xe3`\x8d\xf9B\x06\xbe\x9d\x07\xfd\xd9\xf0o\xcdm^\x03\x17\x17^\xf4r>.\x1d\xe7O\xc6\xc9%\x94\x7f=^\xb6\xb8/\xe4\xe6\xdb\x06$>\x1b~\xb6Q\x88u\xb0\xb2\x0dJ\\xc1\xcaE\x1c\xe2\xd3\xb1r\x01\xe5_\x90\x95\x0d\xee\x8bY\xf9c\xe2;\x9f\x0d?\xf79\xa8s\x1bn\xd6a\x13\xed\x05V\x032\xb5t\x18B%:\xb4b\x9e\x92\xaf\xbe )\x99RD\xc2D\x1e\xba\xc38\x9dX\xafX\x9f\xce\x19\xc4\x08\x1d\x90[\x12#\xbe\x80D \x0e\xd0\x8fc\xc4"p\xec\x18^\xba\xce\x83\xea\x96\x94'G\x8c!\xa0\x1aD\xb3\xad\xba\xa1;\x90!\xd2\xc68/\\x19\xae\x16\x01\x9f\xcfS\xfe\x86\xfc\xae\xc4\x11!\x992\x86\x88\x16\xd1(v\xc8 J\xf2\x8c\xc3!\x95\x11u\xa4\xa3\x80\x83/\x1b\xe0C\xb46k\xc1\xc1\x8f^\x83\xf2\xcc\xc8m\xa7\xd27\x91\x0b\x17YK:D\x1d\xca\x0c\xaf\xe3\xe1\xb0\x9a\xbe\xbc[\x84\x9f\x069\xee'\x88,et\x062\xc4\xc1k\x13\x153\x91\x16\x0akpRR7\xd7\x10#d\x02\xa2\x9a\xcf6&eeq5?Y]\x1b=\x83\x89\xbaV\x93\xab\xb5\xf8[\xb5\x87\x1e\xa9\xc6\x00\x98lf\xdaj\x95\x00\x93\xd6\xc2#\xcf\x11\xa8Cn\xa2L\xdd"@\xa5\x17\x97b-E\xecvQ\x04\xb1\x12\x0eA\xb9\x00\xf2\xfax\x80\xf3\x87\xf5\x14#\x07\xe7\xea\xf1-Z\xd9\x02\xc49X\x1e\xe9{#\x0e)G\\xa3\xbb\xc5aQ@\xb2\xb6\x17\xea\xb8-\x02\xaa\x160\x9c\x0d\x0c"\xacR(\x872\x00X\x14\x8d%\xc8\x7f\xc6\x91\x1b.M\xfc\xba!\xe2|\xf6\x1cf\xd1\x8d\x02\xd2\xb6\xebu\x03\xd2\xa5\x8ez\xc1\x93F24\x01\xa0J|hQ\xd6\xf5*\xf8\xb9\\xb6\x04\xbe\x08\x85q\xd5Ee\xa18\x89\xbd\x1c\x17]u{\xcd\v\x89\xc8\x82l\x7f-\xdaucl(\xc6[\x04#\xcbyVA\x8fn7_\x05\xd8\xd5E\x88\xfb\xe3\x17\x82nI\xb9\x0d\xec\xdc\xef\xe6\xc0\xbf\xcc\x820P|MK\x99\xbf/\xa2\x8c7\xa5\xfbX\x86\xc9-\xe8N\xddn\x0ez\x1f\x87\xdboKo\xaaFR(GB\xb1\x91\x872q\xaaA\xa2\x1a\x9a<\xfb\xa1v\xfd\xcc\x15\xb7\xcf|\xbd\xfd`\xe6\xfe\x99\xafw\x1e}\xbd\xd3\xbf\xc1\x1d4\xe8p=bq\xe9\xa6-V\xa0\x03\xf6\x1a\xd6\x9b\x93\xecH\x0a\xe4L\xa1m"*\xd5\xd2\xfa\xf4\xca\x8dVI\xc8T\xc5s)X\x8bO\xfa\x83\xaeGCB\x80\x928\x85:Q\xb9\x1f;\x809\x88\xf8\x84\xa1>9:\x97\x00,\x87b\xb3\x83Uz\xd9\x91\x9e\xcdu\xa1-n\xea\xd5\xd8$\x11\x11\xb0\x93J!5%\xa0\xef\xc54F&\x0a\xe8\x0e\x83t\x12\xa0\x1am\x1ag\xa9\x14\x938\x13\xbeD\xa9\x98RR\xecw\x07\x80\x96\x94\x9f\xb6$\xb4\xe9@\xef\xce\xe2\xb4L\xcf\xf3\x9dD\x94\x81\x12u\x13!\x92gN\xd9X\xdf\xceS\xb65f\x86\xd0\xcb\\xb9M\xa9\xd7\x80\xf7BP!\x953\x0fTC\xe8Z\x1e\x03\x92\xb1\x8f\x0c\x1e\xc2\x1a\x03\xd4\x1d*\x9a.\xb2\xa9\x0cg\x12;\xa4k\x8c\x15\x94\x0f&\x81\xb6\xe8\xac\xedQ]\x1b2=P\xb2\xe7\x9c!K\x04M\xa4E}\xb1r\xe6mAx\xb4)k\x0b\x8dE0A\xd9\x9c\xd1\x10_\x14\x1d\xa9a=oWQ\xa8\x94\xa2X\xaca\x16hV\xad\x99J\x19\xce[~\x95 \xe7\xc3\x1ft=M\xa9\xf3tj\xd2M\xdd\xc9\xe5\x9f\xe0\x02d(\xa5\xa0\x8bT\xe6\x0c\xee\xca\x86\xa8\xca?\x02\xda\x8c\xb6\x0cJ\x9ca\xa0\xab`\xe8\x00\xd8\x9cm3\xa779QUv\xd0\xfb\x1bT\xa3\xe2\xacE\xa0\x1f\xe5\x18\x1bE\x95\x90X\xeb\x85\x19\xc5\x93(\x0d[\x0d\xf0\x9c\x14\xe23\xc3\x8b@}\xe1\xa6\x19\xd2f\xeb\xa5\xac\x97\xa7T'\xb6\x92\x11\xe6\xc0\xb4\xdbs\x11\xa4G\x90\x174\xee\xe5\x87u\x02\x8b\xbaM\x99\xc2\x18TY\x9c\x82\x0e\x95t\xb3\xd6W\xf3\xdc[f-Ol\xe7\xd5\x0c\x01W\xe5\x94\x86\x17\xba\x8b\x9cI\xb0\xeb\x8dbS\x867e\xe5\xd0w\x93\xd5\xc4f\xb8\xc9\xf48\xa1\xf6+A~\x16\x81\xd2#\xdc\x0aG\xb2\xfa\xa7G\xfd\x17\xad\xfe\xa3u\x12\xde\x94i_\x13n[\x07n*r\x96\xee<cf\xc3\x97\x05\xa2",\x0a\x1b\xc0\xfdk\xde\x8b\x18/\xbdH\xaa\x95\x0e\xc6\xc0Y \xf0n\xc4\xe7\x0f\xc7\xc1p\x98rq\xf6:\xe9\xbd(\xbd\xbcX<3\xa3,Lg.%\xfb\xf2\xb4\xe1GHh(\xf5\xd3a\x18\x9f\xadf\x919\xfaB\xa4-\x12!O\xc2\xfc\xbc\xa8v\xb1\x85\x98k\xdd\x8a\x8a$\xff\xc5\x89>}\xbb\x1ap\xadX\xaa}V\xee\xcb#\xdc\xa9\x87\xeb\x1a\x03\xb2\,.\xb9\xf1\x0c\xb0U\xd7\xc920\x03a\x07^C\xdd0\x1ah\x9dr\x81\xf8J\x14\x9e\xa3\xd6\x05"\x97|\x995C\xec\xfa>\xaeQd\xe7\xfe\xe6\xca\xa7\x08O,S\xeb\xd0\x95\x85E\xa2r\xb8\x92\x97\x1fh\x97\xba\x08J\xad\x95\x89\xb2 Q\x0e*\x7fp6j5\x1a\xb5\xf8\x84\xf5\xce\xcan\xba\xcc\xeb8\xcd=\xe8\x9eL\xb8*\xcbau_\x8bK\xb4CaC\x905s\xd1\xda\x9a riG*\xa9\xf5\xbes\xe6\xa6\x11\xf1M\x19\x8ed\x8b\x9f\x80\xea\x8e\xb7\x0f\xfaT\x0a\x15\xc0\xa0'\xe2\xb1m\xa7\x0a\xd5.\xbeq'\xc9\xf7\xda\x0f\x18\xe5Z\xfb\xc0Q\xd9\xa6\xaeI9\x9e>1\xe3\x8c\x83\x08\xd6\xf2\xb3P\xc0\xe0\x17\x01\xeeS\x84-\x13e\x82\x0f\xbc\xe0\x80IeX\xa0N'NdJ\xbe\x09\x99e4\xad\xb6\xe6\x83\x08\xd7T\xd2\x13\xf2B<\x89\xa30\x8e\x17\x08\x15\x07Y\xed\xa0L\x01\xd3\xe5\x07\xd9\x14\xfd!\xca\x9dx\x08x-.\xbc\xdb\xf4\xce\xecp\xc5\x91\x0d!\x87C\xf8p\x18\x1d3\x84\xbco\xa7\x97\x1f\xd2\xf2\x126\xf6SP\xeb\xc5{\xba)^\x10\xf8\xe4\xf4Pm\x1e\xc8\x81\x921\x94\x881\xe0DF\x85\x99\xec\x91\x1d\xac\x83\xc2\x19A}\x9e\x06\xf4ge\xad\x17[\x13\xb2\xaf\xd7\xfb\x0e`\x8cT\xc0(\x82\x0e>\xee\x87e\xce\xe5\xf6\x05\xa0\xcdn+!B\x9b:;\xebP\x16+O\x81c\xb0\x9b=\xb7g\xee\x8a\xe5C|\xb8-4\x0cO\xa3\xf8\x0c\xa1\xe6,\xcd\xcd}\xa9\x95\xf8\xa2\xa9\xb4\xaaT!b\x1a\xbb\xa0\xb8I5N\x95\x18\x9b\xf3\x046F^iaX\xea\xca6D\xa3\xf91\x0a\xae!f)^\x93\x17\xf93"\xd58Q\x82E/\xa9\x08R\xc3cXu\xc2\xa9rN\x8a"\x13 \xa7j\x16'\x808B\xa1\x9d\x85Vg\xbb5\x8a\x9b\xc98\xf9!\x8b{\xec\x1d9\xccn!\xe4\xd3(\x07\xdb\x80\xfd\xfff\x9e\xe8\xc5\xf8\xbf\xff\xfao{X\x8a\xd8K\xf3\x09\xad/\xd9\x8e8\xb6\x85\xd8\x8f\x88s\xe1\xce\xee!\x86\xdb\xd4\xd5\x15"\x81g$\xc1\xac\xc58>`\xe7\xe3$\x16\xe1\xccG\xc7,\xef\xf31,^{{j\xca\x86`g75.rE\x04\x8a\xe5\x0b\x8b\x16\xbb\x84z\xed\x8c\xc3K\x1c1\xa1\x83+\x07\xc7\xb4?\x08\xf6\x0c[\x14\x90c\x09\xd2\xcb\x0f9\xdc~0\x9b)15s\xd6\x04\x8d\xf1\xa3\x0dK7\xf4i\xb9\xdaMVF\x9a\x14\x01\xe6\x08\xd1n9\x08agc\xd6\xcb\xff\x01W\xb2h\xc1\xb97\xdf\x08\x10@\0\x83\x97\xc6\x11\xc8\x01\x02T\xba\x15Q\xc8\x1af\xfa\x12[\xa1r\xdc)\xaa\xa8x\xb3Z\x1a[kI\x83R\x0a\xa5\xf0\xf4;\xdf\x89\xd8\xcb\xe2\x01\x02\x19\xb8p\xf7;\xd1\xd9\xd9\xdf\xde\xdb\xbf\xdb\x11/\x8f\x1f~[\x9c\xb0z\x04\x07$\xb8\xfc\x13\x8d2\x86\x1b>\x02\xc9C\x98\xdfX\xa0P\\x08\xb7\x14\x1c \x08\xe6\x80\x94`\xd3m\xa6H\x97\x16\x90\x8e~\xadd_C]\x8eN\xb0\x07\xfc\x05\x9f\x89\xd2\xe1\x89Wq\xc0\xd2\xb3&$t\x0b\xcd_6 w#\xb6/\x83I\x0e\xddCFd\xe4\xc3jK\xa5\xba\x96\xb0\xda\x80\x8fagO\xd8\xa2ws\\x8b,a\xc5\xad\x92\xe6\xb8QyV-\xe8\x9d>\x0c\xa0W0R\xf5\x10\xa4\xe6\xd0\x149\x10\x8c,#\xe1\xa6)/\x08]\xaa\x1d5\x85\x06\xe2!VW\x7fbu\x13RT\xca\xda\x03t\xb01\x9e@\xb1 dg\xd4\x0f\x0bm\xadY\x98\x11a&@\xb5\x94Z\x0aJ\xa48y\xc9Z\x04\xfbb\x88\xed\x0e\xd0.\xff5G\xffRH\xeb\xe1Y7\x98\xba\xed\xaan\xa0\xbePe*\x7f'3+\xce5[TCf)N\x98\xc5H\xfaq\xb2m\x12\xfb\xe0X\x13\xfer\xdf\xb9H\x1a\x1a\xfe\xd0\xcdhW\x80;(\xc6W\xbfK\xee\xc44\xa6\xdd.\xf1\x96\x15\x01\x8e\xc90\x17V\xd2\x87\x8bz\x1d\xf4\x9f\xf7\xdf\xd8\xf4 \xc2z\x1cD\xeb\xca\xc9\xc1c\xcd\xfbR\xe0\x02k\xbb\x1f\x08\xa7\xb1\xcb\xea\x99O\x8f\x92\xeab\x05\xc9\x81\x0bt"\xb9\xc5\xd2\xeb&\xa8\xe2~k\xda\xb0\xd7\xc6\xb6h\xbf\x02?\xdb\xee\xe0\xb5\x9e`\x11\x96:\x94\x8f(g\x1e\x09R\x15\xb8\x08\\x98~z}\x8d\x08 >\x05\x8c\xa4A\x04\xae\x83\x86\x10eV\xed\xdc\xa5\xcb\xc1\xf9+xP\xfcx|\xfc\xe2\xf6t\xb8\x11\x11t\xe3\x15\x14\xe0F\x07\xb4_\xae\xc0\x9dTZ\x81;\xf5\x10~.\xd4\x85\xca.\xff\x9c`i\xc9\x06\x82[\x81{\xa3\xb9!.\xac\xa5s\x8b+\xa8AR\xf1'p\x89%\x99OF\xdc\xe5\xffR \xb9\x90\xa9L1\x13\x18\xb0~\x13\xb4j9\xf57\x7f\xe4q\xf6=\xdd~\xce7\xc7\xeb\xaf\xd8K\xc4g\x86\xd1\xaeRU\xc4\x86_:\x8eP\xe38\x0f}1\x00\x17C\xa4\xe3\x0c.\xecR\xc4\xda\xee\xc0\xb2\x14/\xf9\xb6\x1f`\x03\xfd9\x8cC\xf8\xb8"\x18B\xf0\xd0yk_\xfc\x1d@\x8f]\x85\xbc+\x0e\x1d\xf0YP\x1a\x02\xc7\xab\x91Z\xf8GS8\x0eM\x01\x93\xf8\x95\xbe\xa0\xb80\x8fq.>\x03\xe6\xa3\x83\xc2\x12\xb0\x92\xbaf\x9b\xcc\x1f\xd8\x9eU\x18\x07\x85E\xc8\xd6Bg\xbb\xd9n\xee@\xd9\x98\xd1i\xabY\x9d]\x84\xffc\xcf=\x99\xbf\xdd\xe7\xa4P\xe0F\xa4hl\xf3\xc4>'N\xdaz\xc5\xa1~s\xc52\x0bW\xec\xf8w\xe0\x002K\xaaFF\xa1\xb0\x04_gn\x15\x966\x92 y\xc1(\xb3*\xb7\xdd\xde\xdf\xbe\xbb\x7f\x17\x074\x0amY\xc8\x89\x8a\x8c\xc2\xbd\xee\x12\x01f\x07\x02\x86\x92\xb4\xe0^\x17N$\x09\x19\xd2;\x16\x1ed \xca\x8a\x86\xae\xbe\x98\x83\x05\xe3\wB\xabKj\x0b|mD+t\x01]\xa3\x7f\xa0\xffv[\xfa-\x13\x80\xfe\x99i\xedC]\x14\x11T\xfe\xc2\x8dV\xf4\x1a\xe07\x12\xac\xefG\x9f\xaf\xd3'Ic?/\x1c4\xeaQ>Y\xd0\x1fd\xe4\xcb\xdcY\x06\xf0\xe2\x10\x01\x0c\xddN\x14\x0c\xd3\x93\x89*}?\xfa\\x92\xbe&\xa6\xb1\xa1^\x91\xe2\xc3^\x9fB\x14b\xcdI\xc4!\xe5\xc3\xf2\x1d\xd5*\xc4\x15\x86\x13\x96;W\xc46\xac,,\xff\xb0j\x842\xf50\x8a$[\x192\x16\x1b\x0d\xab\x89R\x09b\x15\xf6|B\xa8_\x9a\x1c\x1dI\xd6\xa4\x00\xc0\xe3\x0b{\xc9\x81|\xe7"Q\x82A\xf0\x83\x0e\x11\x8c!\xc0P\x9d\x00-h\x18\x08\x0d\x88\x15\xc8\xef\xcb\x0fD\x0f\xactD}\x8b\xd9\x18\x0e\xbd\xd8Fzh\x0dWh}\xdc\xf6\x05\x19\xf0G\xae\x8d\x0a\x98+\x89\x04\xfaJ\x7f\xa5\xd4_N\xc2\x8f\xc6\x83\xbf\x0c\xff\x0d6\xf4$\x81\x17\x10\x11]\xc8\xbd\x85\xbb\x1b\xc0\x91\xd5\x1d\x08\xc2\x88(IVF\xb1\x970\x1e,9\x14d\xc4Q\x80_u\xa0\xe8\xb9\x96\xad\xf8\x80\xf0EE\x9f\xc2C&Vw.\xff\x05\x03\x0d\xf20\xf0\x02\xc8*|\xa8{\xc9Mqh\x8c\x15\x92f\xf0\xe2\xe1;\xd1\xbe\x83\xe1\x83\xbb@\x02\xab\x9bIziX\xe0\xec\x9a\x8b\xd4+6\x0c\xa8\xcc\xbd4Fd\xefh$d\x84\xa8\x00v\x09m<\\x03!*\x02\x1a\x8e\xf1CM\x07h\xbdbH\xa8AZ\x07\xf8\xc4\x09\x96\\xd1\xca\xb2m\xa0\xc4 \x1f\x81\xb5\xd2x at Q\x1a\xe3[\xa3\x95\x04Th\xa1\x95\x82\x82\xe3\x0d+[\xd9\xf5a\xf6\xd4F)1\xf5\x12\x99F9Qs.\x0d\x96\x8b\xce\xff\x1d\xf2\xa5\xea\xac\xab\x14Xw\x02\x93\x9f\xac>%\xb81\xfe*\xfc\xce\x08@\xd3\x0f\x89\xd0\xca\xb26\x1e\x99\xf5\xa1\xbe\xfb`\x12m\xaai\xeb\xecJ\x18N\x10CC)\x97N\x1e\x1a\xef\x99\xb7\xe3uzY\x8b\x8f\xabIl\xd1\x0f\x1f\xfb\xda\x17\xbb\xedvr\xae\x0d9YT\x95Y\xf7\x9ce\x9bE|\xebH\x82M\xb5YR\xbb\x1a\xb34\x83k\xd8.:l\x08N\xa6E\x0b\x98I1\x18;7Z\xf4\x94\xc6\x9dM\x88V+\xa7*Z\x04\xa6\x9f1\xff\x1e]~\xc0&\x88\x13\xecu\xad\xeb\xdd\xfa\xcd&\xe4\xb1\xd7\x9du\x8af\xa5\x01*\xbf\xf8\x06\x8c\x15\x97\x9b\x90\x9d\x9fG\xcc8%C\x93\x9e\xbcC\x0c=\xa7zGA6\xce\x07\x1c\x13\xa8\xdd\x11\xb2r\x16\xec\x00\xc5g\x02u8\x00J\x11_Ag\x98\x8a\x14\xac\x9a\x9b\xe8\xec\xec\xac9\xc2\xad\x88q:\xc2-\x0eh\x04\x16k\xb9\xa3$tv\xa0\xbe\xe9g\x83\xae\x81\\xff\xe9\x8b\x9fh\xbe\xa66\xa8k\xeeY\xec\xd1\xef\xd3\xe8\xfa8\xcd\x1a+=M\xec\xe1\x182\x95~%\xa7\xee:\x92ll\x8e\xe2\x18\x97\x8e0i\xbe-,\x0e(\x0bJ\xbf\x9a\xe3\x87wq\x12\xb1r\x1d>e\x7ft/\x1e\xa0j\x04\x1ca\x7f\xc9\xf7\x0e\xa4\x0e\xed\xb5T<\xe5\xc1\xbf\x15_\xa2\x0a\x80\xca\xb9\x96\xbf\xd7\x9e\xe8j\xb7y)2D\xf9!~|i\x10\xc7\xa7\x8cM\x81\x0c\x04_k%BE\xd7*:}h\xa9\xf7\x98\x91D=\xb99\xc2\xb6\xb2\xf8\\xd1\xe0\xa3\x11\xca\xce\x02\x04\x87\xf03)U\xa6\xa5R\xa7Ukc;^\xb50\xc7z\xf0\xa5\x0bS\xbe\xffh<\xea\xbb\x1c\xe5\x1f\xc5j\xd8\x00\xc8\x04\xbf\xa0\x15\xa4\x1e]}\xb3\x9c\xe3RUg5\x08\x18\xe8\xe6)\x99\x0cz\x81\x10u\x1a\x15\xf8,{\xbb\x06l\xce\x14j]ia\xea\x88\xfd\x90\xf4T>\xa0;\x93\x06\x92\xa3\xbe\xd0\x00\xb8zh\xc5>\x82\x85\x13\xd6vP\x7f@\xb5F\xef\x1d\x0eF@%k\xdc\x88jz\xd6\x82\xf3V\xb6cT\xb5\x04a\x8dZ\x0f\xf0\x91\xf6\xb0\xd5\xa3\xd6\x91\xc2\x13\xba\x0b\x8b\x9a\xea\xdf9\xfb\x7f\xf2\x15>\xc1\xf8l\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"] [severity "3"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "9"] [tag "application-multi"] [tag "language-php"] [tag "platform-multi"] [tag "attack-disclosure"] [tag "OWASP_CRS/LEAKAGE/SOURCE_CODE_PHP"] [tag "WASCTC/WASC-13"] [tag "OWASP_TOP_10/A6"] [tag "PCI/6.5.6"] [ref "o624,2v612,8192v612,8192"]
>> ModSecurity: Warning. detected XSS using libinjection. [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "17"] [id "941100"] [rev "2"] [msg "XSS Attack Detected via libinjection"] [data "Matched Data: requesttoken found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "v828,13t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNullsv842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
>> ModSecurity: Warning. Matched "Operator `Rx' with parameter `(?i)[\s\S](?:x(?:link:href|html|mlns)|!ENTITY.*?SYSTEM|data:text\/html|pattern(?=.*?=)|formaction|\@import|base64)\b' against variable `ARGS:<?xml version' (Value: `"1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "130"] [id "941130"] [rev "2"] [msg "XSS Filter - Category 3: Attribute Vector"] [data "Matched Data:  xmlns found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "8"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "o18,6v842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
>> ModSecurity: Warning. Matched "Operator `Ge' with parameter `%{tx.inbound_anomaly_score_threshold}' against variable `TX:ANOMALY_SCORE' (Value: `15' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-949-BLOCKING-EVALUATION.conf"] [line "36"] [id "949110"] [rev ""] [msg "Inbound Anomaly Score Exceeded (Total Score: 15)"] [data ""] [severity "2"] [ver ""] [maturity "0"] [accuracy "0"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-generic"] [ref ""]
>> ModSecurity: Warning. Matched "Operator `Ge' with parameter `%{tx.inbound_anomaly_score_threshold}' against variable `TX:INBOUND_ANOMALY_SCORE' (Value: `15' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/RESPONSE-980-CORRELATION.conf"] [line "61"] [id "980130"] [rev ""] [msg "Inbound Anomaly Score Exceeded (Total Inbound Score: 15 - SQLI=0,XSS=15,RFI=0,LFI=0,RCE=0,PHPI=0,HTTP=0,SESS=0): XSS Filter - Category 3: Attribute Vector"] [data ""] [severity "0"] [ver ""] [maturity "0"] [accuracy "0"] [tag "event-correlation"] [ref ""]
>> ModSecurity: Warning. detected XSS using libinjection. [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "17"] [id "941100"] [rev "2"] [msg "XSS Attack Detected via libinjection"] [data "Matched Data: requesttoken found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "v828,13t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNullsv842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
>> ModSecurity: Warning. Matched "Operator `Rx' with parameter `(?i)[\s\S](?:x(?:link:href|html|mlns)|!ENTITY.*?SYSTEM|data:text\/html|pattern(?=.*?=)|formaction|\@import|base64)\b' against variable `ARGS:<?xml version' (Value: `"1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "130"] [id "941130"] [rev "2"] [msg "XSS Filter - Category 3: Attribute Vector"] [data "Matched Data:  xmlns found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "8"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "o18,6v842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
>> ModSecurity: Warning. Matched "Operator `Ge' with parameter `%{tx.inbound_anomaly_score_threshold}' against variable `TX:ANOMALY_SCORE' (Value: `15' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-949-BLOCKING-EVALUATION.conf"] [line "36"] [id "949110"] [rev ""] [msg "Inbound Anomaly Score Exceeded (Total Score: 15)"] [data ""] [severity "2"] [ver ""] [maturity "0"] [accuracy "0"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-generic"] [ref ""]
>> ModSecurity: Warning. Matched "Operator `Ge' with parameter `%{tx.inbound_anomaly_score_threshold}' against variable `TX:INBOUND_ANOMALY_SCORE' (Value: `15' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/RESPONSE-980-CORRELATION.conf"] [line "61"] [id "980130"] [rev ""] [msg "Inbound Anomaly Score Exceeded (Total Inbound Score: 15 - SQLI=0,XSS=15,RFI=0,LFI=0,RCE=0,PHPI=0,HTTP=0,SESS=0): XSS Filter - Category 3: Attribute Vector"] [data ""] [severity "0"] [ver ""] [maturity "0"] [accuracy "0"] [tag "event-correlation"] [ref ""]
>> ModSecurity: Warning. Matched "Operator `Rx' with parameter `^%{tx.allowed_request_content_type}$' against variable `TX:0' (Value: `text/vcard' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line "928"] [id "920420"] [rev "2"] [msg "Request content type is not allowed by policy"] [data "text/vcard"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-protocol"] [tag "OWASP_CRS/POLICY/ENCODING_NOT_ALLOWED"] [tag "WASCTC/WASC-20"] [tag "OWASP_TOP_10/A1"] [tag "OWASP_AppSensor/EE2"] [tag "PCI/12.1"] [ref "v0,3o0,10o0,10v174,25"]
>> ModSecurity: Warning. Matched "Operator `Rx' with parameter `^%{tx.allowed_request_content_type}$' against variable `TX:0' (Value: `text/xml' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line "928"] [id "920420"] [rev "2"] [msg "Request content type is not allowed by policy"] [data "text/xml"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-protocol"] [tag "OWASP_CRS/POLICY/ENCODING_NOT_ALLOWED"] [tag "WASCTC/WASC-20"] [tag "OWASP_TOP_10/A1"] [tag "OWASP_AppSensor/EE2"] [tag "PCI/12.1"] [ref "v0,6o0,8o0,8v266,8"]
>> ModSecurity: Warning. Matched "Operator `Rx' with parameter `^%{tx.allowed_request_content_type}$' against variable `TX:0' (Value: `text/vcard' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line "928"] [id "920420"] [rev "2"] [msg "Request content type is not allowed by policy"] [data "text/vcard"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-protocol"] [tag "OWASP_CRS/POLICY/ENCODING_NOT_ALLOWED"] [tag "WASCTC/WASC-20"] [tag "OWASP_TOP_10/A1"] [tag "OWASP_AppSensor/EE2"] [tag "PCI/12.1"] [ref "v0,3o0,10o0,10v174,25"]
>> ModSecurity: Warning. Matched "Operator `Rx' with parameter `^%{tx.allowed_request_content_type}$' against variable `TX:0' (Value: `text/xml' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-920-PROTOCOL-ENFORCEMENT.conf"] [line "928"] [id "920420"] [rev "2"] [msg "Request content type is not allowed by policy"] [data "text/xml"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "9"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-protocol"] [tag "OWASP_CRS/POLICY/ENCODING_NOT_ALLOWED"] [tag "WASCTC/WASC-20"] [tag "OWASP_TOP_10/A1"] [tag "OWASP_AppSensor/EE2"] [tag "PCI/12.1"] [ref "v0,6o0,8o0,8v266,8"]
>> ModSecurity: Warning. detected XSS using libinjection. [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "17"] [id "941100"] [rev "2"] [msg "XSS Attack Detected via libinjection"] [data "Matched Data: requesttoken found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "9"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "v828,13t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNullsv842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
>> ModSecurity: Warning. Matched "Operator `Rx' with parameter `(?i)[\s\S](?:x(?:link:href|html|mlns)|!ENTITY.*?SYSTEM|data:text\/html|pattern(?=.*?=)|formaction|\@import|base64)\b' against variable `ARGS:<?xml version' (Value: `"1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-941-APPLICATION-ATTACK-XSS.conf"] [line "130"] [id "941130"] [rev "2"] [msg "XSS Filter - Category 3: Attribute Vector"] [data "Matched Data:  xmlns found within ARGS:<?xml version: "1.0"?><d:propfind xmlns:d="DAV:"><d:prop><d:resourcetype/></d:prop></d:propfind>"] [severity "2"] [ver "OWASP_CRS/3.0.0"] [maturity "1"] [accuracy "8"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-xss"] [tag "OWASP_CRS/WEB_ATTACK/XSS"] [tag "WASCTC/WASC-8"] [tag "WASCTC/WASC-22"] [tag "OWASP_TOP_10/A3"] [tag "OWASP_AppSensor/IE1"] [tag "CAPEC-242"] [ref "o18,6v842,81t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls"]
>> ModSecurity: Warning. Matched "Operator `Ge' with parameter `%{tx.inbound_anomaly_score_threshold}' against variable `TX:ANOMALY_SCORE' (Value: `15' ) [file "/etc/nginx/modsec/mydomain.com/../owasp-modsecurity-crs/REQUEST-949-BLOCKING-EVALUATION.conf"] [line "36"] [id "949110"] [rev ""] [msg "Inbound Anomaly Score Exceeded (Total Score: 15)"] [data ""] [severity "2"] [ver ""] [maturity "0"] [accuracy "0"] [tag "application-multi"] [tag "language-multi"] [tag "platform-multi"] [tag "attack-generic"] [ref ""]
>> 
>> _______________________________________________
>> Owasp-modsecurity-core-rule-set mailing list
>> Owasp-modsecurity-core-rule-set at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
> 
> -- 
> ModSecurity courses Oct 2017 in London and Zurich
> https://www.feistyduck.com/training/modsecurity-training-course
> https://www.feistyduck.com/books/modsecurity-handbook/
> mailto:christian.folini at netnea.com
> twitter: @ChrFolini
> 


From jeff.liu at west.cmu.edu  Tue Oct 17 19:20:40 2017
From: jeff.liu at west.cmu.edu (Jeff Liu)
Date: Tue, 17 Oct 2017 12:20:40 -0700
Subject: [Owasp-modsecurity-core-rule-set] CRS3 Issues - modsecurity cannot
	detect SQLi in request body (HTTP POST)
Message-ID: <CAKkAneraWYTorcDphm14hpnLedijUKnL=3AEDNmgXX3vscaT+g@mail.gmail.com>

Dear CRS leaders,

I am trying to test the latest version of rule set (version 3) with
modsecurity to detect SQLi injection. I find that the CRS is able to
correctly detect SQLi attacks in request headers (HTTP GET), while it's not
able to detect any SQLi attacks in the request body (HTTP POST) even for
the most simple ones such as "or 1=1--".

I checked some online solutions and already set the SecRequestBodyAccess On
but it still doesn't work.

Could anyone help me with it? Thanks in advance!

Regards,
Tianyu
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20171017/b3778b28/attachment.html>

From christian.folini at netnea.com  Tue Oct 17 21:18:58 2017
From: christian.folini at netnea.com (Christian Folini)
Date: Tue, 17 Oct 2017 23:18:58 +0200
Subject: [Owasp-modsecurity-core-rule-set] CRS3 Issues - modsecurity
 cannot detect SQLi in request body (HTTP POST)
In-Reply-To: <CAKkAneraWYTorcDphm14hpnLedijUKnL=3AEDNmgXX3vscaT+g@mail.gmail.com>
References: <CAKkAneraWYTorcDphm14hpnLedijUKnL=3AEDNmgXX3vscaT+g@mail.gmail.com>
Message-ID: <20171017211858.yt5rmycx2qjvnzuw@leander>

Hey Jeff,

Could you raise you SecDebugLogLevel to 9 and then post your payload and
select that part of the debug log that handles the rule 942100?

Also: Said libinjection rules does not work on the raw request body (your
post implies this somehow). But it only works on argument names and
argument values.

Best,

Christian

On Tue, Oct 17, 2017 at 12:20:40PM -0700, Jeff Liu wrote:
>    Dear CRS leaders,
>    I am trying to test the latest version of rule set (version 3) with
>    modsecurity to detect SQLi injection. I find that the CRS is able to
>    correctly detect SQLi attacks in request headers (HTTP GET), while it's
>    not able to detect any SQLi attacks in the request body (HTTP POST) even
>    for the most simple ones such as "or 1=1--".
>    I checked some online solutions and already set the SecRequestBodyAccess
>    On but it still doesn't work.
>    Could anyone help me with it? Thanks in advance!
>    Regards,
>    Tianyu

> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set


-- 
ModSecurity courses Oct 2017 in London and Zurich
https://www.feistyduck.com/training/modsecurity-training-course
https://www.feistyduck.com/books/modsecurity-handbook/
mailto:christian.folini at netnea.com
twitter: @ChrFolini

From spartantri at gmail.com  Wed Oct 18 12:18:26 2017
From: spartantri at gmail.com (spartantri at gmail.com)
Date: Wed, 18 Oct 2017 14:18:26 +0200
Subject: [Owasp-modsecurity-core-rule-set] CRS3 Issues - modsecurity
	cannot detect SQLi in request body (HTTP POST)
In-Reply-To: <20171017211858.yt5rmycx2qjvnzuw@leander>
References: <CAKkAneraWYTorcDphm14hpnLedijUKnL=3AEDNmgXX3vscaT+g@mail.gmail.com>
	<20171017211858.yt5rmycx2qjvnzuw@leander>
Message-ID: <630B18D5-9FDE-42D1-B023-A61904D2F3B2@gmail.com>

That if a body processor is used, certain content-types that do not use one are ignored, eg plain text or multipart may not have all the parts inspected, so you will have to start to with that and force the right body processor to be used.

Cheers!

Enviado desde mi iPhone

> El 17 oct 2017, a las 23:18, Christian Folini <christian.folini at netnea.com> escribi?:
> 
> Hey Jeff,
> 
> Could you raise you SecDebugLogLevel to 9 and then post your payload and
> select that part of the debug log that handles the rule 942100?
> 
> Also: Said libinjection rules does not work on the raw request body (your
> post implies this somehow). But it only works on argument names and
> argument values.
> 
> Best,
> 
> Christian
> 
>> On Tue, Oct 17, 2017 at 12:20:40PM -0700, Jeff Liu wrote:
>>   Dear CRS leaders,
>>   I am trying to test the latest version of rule set (version 3) with
>>   modsecurity to detect SQLi injection. I find that the CRS is able to
>>   correctly detect SQLi attacks in request headers (HTTP GET), while it's
>>   not able to detect any SQLi attacks in the request body (HTTP POST) even
>>   for the most simple ones such as "or 1=1--".
>>   I checked some online solutions and already set the SecRequestBodyAccess
>>   On but it still doesn't work.
>>   Could anyone help me with it? Thanks in advance!
>>   Regards,
>>   Tianyu
> 
>> _______________________________________________
>> Owasp-modsecurity-core-rule-set mailing list
>> Owasp-modsecurity-core-rule-set at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
> 
> 
> -- 
> ModSecurity courses Oct 2017 in London and Zurich
> https://www.feistyduck.com/training/modsecurity-training-course
> https://www.feistyduck.com/books/modsecurity-handbook/
> mailto:christian.folini at netnea.com
> twitter: @ChrFolini
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set

From christian.folini at netnea.com  Fri Oct 20 08:55:07 2017
From: christian.folini at netnea.com (Christian Folini)
Date: Fri, 20 Oct 2017 10:55:07 +0200
Subject: [Owasp-modsecurity-core-rule-set] DINAcon Hacknight Oct 20 in
 Berne, Switzerland
In-Reply-To: <20171014095636.r46jtcn5tidhcx6z@leander>
References: <20171014095636.r46jtcn5tidhcx6z@leander>
Message-ID: <20171020085507.ffc5boqlc32ymaex@leander>

Hello,

This is a reminder, that Fr?nzi and I will be at the DINAcon Hacknight tonight
(Middle European Time). If anybody wants to join, then come on site, or
get in touch with us for remote participation.

We have plans to work on existing PRs, look into issues and get down to
business with testing.

Ahoj,

Christian

On Sat, Oct 14, 2017 at 11:56:36AM +0200, Christian Folini wrote:
> Hi there,
> 
> Fr?nzi B?hler and I will take part at the HackNight at the Swiss DINAcon
> next Friday in Berne, from 6pm local time.
> 
> We have plenty of PRs to review, but we also plan to work on new ideas.
> 
> Having more people join us on site would of course be fun, but participating
> remotely could also be an option. If interested, then please get in join.
> 
> Here is the tweet introducing the idea. Please retweet.
> https://twitter.com/CoreRuleSet/status/919138876819759107
> 
> Ahoj,
> 
> Christian
> 
> 
> -- 
> ModSecurity courses Oct 2017 in London and Zurich
> https://www.feistyduck.com/training/modsecurity-training-course
> https://www.feistyduck.com/books/modsecurity-handbook/
> mailto:christian.folini at netnea.com
> twitter: @ChrFolini
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set

-- 
ModSecurity courses Oct 2017 in London and Zurich
https://www.feistyduck.com/training/modsecurity-training-course
https://www.feistyduck.com/books/modsecurity-handbook/
mailto:christian.folini at netnea.com
twitter: @ChrFolini

From pinto.elia at gmail.com  Fri Oct 20 10:48:41 2017
From: pinto.elia at gmail.com (devzero2000)
Date: Fri, 20 Oct 2017 12:48:41 +0200
Subject: [Owasp-modsecurity-core-rule-set] mod_security_crs 2.2.9
	modsecurity_crs_48_local_exceptions.conf question
In-Reply-To: <CAH5b-BUn82Lu=OTWQWUEx6PS2yMGxmksBb99-W9xBfcjEsSTqg@mail.gmail.com>
References: <CAH5b-BUn82Lu=OTWQWUEx6PS2yMGxmksBb99-W9xBfcjEsSTqg@mail.gmail.com>
Message-ID: <CAH5b-BVEsjXW_wi5oioSyS3pEK2JQS1oXytQVYcEZDFgtJd8pw@mail.gmail.com>

Hi to all

>
>
> just updated a Centos 7.4 to mod_security_crs 2.2.9 and mod_security
> 2.7.3-5. In the /etc/httpd/modsecurity.d/activated_rules/modsecurity_crs_48_local_exceptions.conf
> file I have a rule like this that worked in earlier versions but no longer.
>
> Any idea ?
>
> Thank you very much
>
> SecRule TX:'/^981172.*/'             "@rx .*" "chain,phase:2,t:none,nolog,
> noauditlog,pass,msg:'WHITELISTING  %{rule.id}: Allowed false positive
> %{TX:0}',severity:'6',id:450010"
>
> SecRule REQUEST_COOKIES:'/^(Mycookie1|Mycookie2|Mycookie3|Mycookie4)/'
> "!^$"   "t:none,setvar:!tx.%{tx.1},setvar:tx.anomaly_score=-20"
>
>
>
> Log
>
>
>
> --9d781c6e-H--
>
> Message: Warning. Pattern match "([\\~\\!\\@\\#\\$\\%\\^\\&\\*
> \\(\\)\\-\\+\\=\\{\\}\\[\\]\\|\\:\\;\"\\'\\\xc2\xb4\\\xe2\
> x80\x99\\\xe2\x80\x98\\`\\<\\>].*?){8,}" at REQUEST_COOKIES:Mycookie1.
> [file "/etc/httpd/modsecurity.d/activated_rules/modsecurity_
> crs_41_sql_injection_attacks.conf"] [line "157"] [id "981172"] [rev "2"]
> [msg "Restricted SQL Character Anomaly Detection Alert - Total # of special
> characters exceeded"] [data "Matched Data: + found within
> REQUEST_COOKIES:Mycookie1: ve11n8OdWASErRyEZrw+29j8ihH2+
> RlST465bWRDDityPELrC/mXxSDAELEf1CSGT+knYFgt/3EWotqMvcFBiLlX0YDfDNxEnZ32pBz
> sp3B+45oPGeOc/lx16tGOY8Q+u1sfbcVEzHeNIpebO3DephHXQ3fz0v
> 66Qh2Qc5umtNSPP4p4pVd7C3gxxuspE4wWJlN7uF2iwVxkm+
> VN1W6wRt4USriw9aQQX0Csz1wKQdMlK5nv/S+uK+QBA7OdVsfOK7BXVrrXkLo7J9GS9oGY
> rnrkzNZ5rzOZRyllaqYRVV2pnm0qrdEq0Fiont4Z2+iHYEpnSuQRJpGi+mAL+
> FMnI1TNOlxIAzOgwV0ENaKXOgyQe3JVHStFc5cVVCptTtkL"] [ver "OWASP_CRS/2.2.9"]
> [maturity "9"] [accuracy "8"] [tag "OWASP_CRS/WEB_ATTACK/SQL_INJECTION"]
>
> Apache-Handler: proxy-server
>
> Stopwatch: 1508316101057039 22395601 (- - -)
>
> Stopwatch2: 1508316101057039 22395601; combined=49089, p1=638, p2=48093,
> p3=3, p4=98, p5=177, sr=141, sw=80, l=0, gc=0
>
> Response-Body-Transformed: Dechunked
>
> Producer: ModSecurity for Apache/2.7.3 (http://www.modsecurity.org/);
> OWASP_CRS/2.2.9.
>
> Server: Apache
>
> Engine-Mode: "ENABLED"
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20171020/cce3389b/attachment.html>

From christian.folini at netnea.com  Fri Oct 20 21:00:10 2017
From: christian.folini at netnea.com (Christian Folini)
Date: Fri, 20 Oct 2017 23:00:10 +0200
Subject: [Owasp-modsecurity-core-rule-set] OWASP Top 10 RC2 is out -
	ModSecurity and CRS are referenced
Message-ID: <20171020210010.v564chve3pbubjjb@leander>

Hello,

The RC2 for the 2017 edition of OWASP Top 10 is out.

The new issue A10: Insufficient Logging & Monitoring mentions
ModSecurity and CRS.

https://github.com/OWASP/Top10/blob/master/2017/OWASP%20Top%2010%202017%20RC2%20Final.pdf

I think thanks are due to Osama Elnaggar who worked behind the lines to 
get us into the document.

Best,

Christian

-- 
https://www.feistyduck.com/training/modsecurity-training-course
https://www.feistyduck.com/books/modsecurity-handbook/
mailto:christian.folini at netnea.com
twitter: @ChrFolini

From christian.folini at netnea.com  Sat Oct 21 20:39:02 2017
From: christian.folini at netnea.com (Christian Folini)
Date: Sat, 21 Oct 2017 22:39:02 +0200
Subject: [Owasp-modsecurity-core-rule-set] mod_security_crs 2.2.9
 modsecurity_crs_48_local_exceptions.conf question
In-Reply-To: <CAH5b-BVEsjXW_wi5oioSyS3pEK2JQS1oXytQVYcEZDFgtJd8pw@mail.gmail.com>
References: <CAH5b-BUn82Lu=OTWQWUEx6PS2yMGxmksBb99-W9xBfcjEsSTqg@mail.gmail.com>
	<CAH5b-BVEsjXW_wi5oioSyS3pEK2JQS1oXytQVYcEZDFgtJd8pw@mail.gmail.com>
Message-ID: <20171021203902.pbrxt6ccq3ii7t56@leander>

Hello,

I see how this tuning approach via negative scoring is meant to work. However
it is quite botched if you excuse my wording. It actually looks like a huge
backdoor. All you need to do is an alert on 981172 and then submit a
cookie Mycookie1/2/3/4 and then get a discount of -20 anomaly scoring point
for each cookie. Bonus points: Each of the four cookies can be submitted more
than once. That should have you covered for really crazy attacks.

Also, your exception does not log at all, so I can not really tell if it
triggered at all. Your "H" audit log blog only points to the rule 981172
that was executed, but the way you handle it in the exceptions you did not
attempt to suppress this alert, but attempted to reduce the score again
post factum.

Under the line, I think you need to start over from scratch. Also, life is
much easier with CRS3 that has a ton less false positive. Namely the annoying
rule 981172 has been banned into the rarely activated Paranoia Level 4.
Unfortunately, CRS3 depends on ModSec 2.8.0 (unless you want to comment
out two key rules by hand in the rule set).

Ahoj,

Christian


On Fri, Oct 20, 2017 at 12:48:41PM +0200, devzero2000 wrote:
>    Hi to all
> 
>      just updated a Centos 7.4 to mod_security_crs 2.2.9 and mod_security
>      2.7.3-5. In the
>      /etc/httpd/modsecurity.d/activated_rules/modsecurity_crs_48_local_exceptions.conf
>      file I have a rule like this that worked in earlier versions but no
>      longer.
> 
>      Any idea ?
> 
>      Thank you very much
> 
>      SecRule TX:'/^981172.*/'???????????????????????? "@rx .*"
>      "chain,phase:2,t:none,nolog,noauditlog,pass,msg:'WHITELISTING?? 
>      %{rule.id}: Allowed false positive %{TX:0}',severity:'6',id:450010"
> 
>      SecRule
>      REQUEST_COOKIES:'/^(Mycookie1|Mycookie2|Mycookie3|Mycookie4)/'????????
>      "!^$"???? "t:none,setvar:!tx.%{tx.1},setvar:tx.anomaly_score=-20"
> 
>      ??
> 
>      Log
> 
>      ??
> 
>      --9d781c6e-H--
> 
>      Message: Warning. Pattern match
>      "([\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\+\\=\\{\\}\\[\\]\\|\\:\\;\"\\'\\\xc2\xb4\\\xe2\x80\x99\\\xe2\x80\x98\\`\\<\\>].*?){8,}"
>      at REQUEST_COOKIES:Mycookie1. [file
>      "/etc/httpd/modsecurity.d/activated_rules/modsecurity_crs_41_sql_injection_attacks.conf"]
>      [line "157"] [id "981172"] [rev "2"] [msg "Restricted SQL Character
>      Anomaly Detection Alert - Total # of special characters exceeded"] [data
>      "Matched Data: + found within REQUEST_COOKIES:Mycookie1:
>      ve11n8OdWASErRyEZrw+29j8ihH2+RlST465bWRDDityPELrC/mXxSDAELEf1CSGT+knYFgt/3EWotqMvcFBiLlX0YDfDNxEnZ32pBzsp3B+45oPGeOc/lx16tGOY8Q+u1sfbcVEzHeNIpebO3DephHXQ3fz0v66Qh2Qc5umtNSPP4p4pVd7C3gxxuspE4wWJlN7uF2iwVxkm+VN1W6wRt4USriw9aQQX0Csz1wKQdMlK5nv/S+uK+QBA7OdVsfOK7BXVrrXkLo7J9GS9oGYrnrkzNZ5rzOZRyllaqYRVV2pnm0qrdEq0Fiont4Z2+iHYEpnSuQRJpGi+mAL+FMnI1TNOlxIAzOgwV0ENaKXOgyQe3JVHStFc5cVVCptTtkL"]
>      [ver "OWASP_CRS/2.2.9"] [maturity "9"] [accuracy "8"] [tag
>      "OWASP_CRS/WEB_ATTACK/SQL_INJECTION"]
> 
>      Apache-Handler: proxy-server
> 
>      Stopwatch: 1508316101057039 22395601 (- - -)
> 
>      Stopwatch2: 1508316101057039 22395601; combined=49089, p1=638, p2=48093,
>      p3=3, p4=98, p5=177, sr=141, sw=80, l=0, gc=0
> 
>      Response-Body-Transformed: Dechunked
> 
>      Producer: ModSecurity for Apache/2.7.3 (http://www.modsecurity.org/);
>      OWASP_CRS/2.2.9.
> 
>      Server: Apache
> 
>      Engine-Mode: "ENABLED"

> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set


-- 
ModSecurity courses Oct 2017 in London and Zurich
https://www.feistyduck.com/training/modsecurity-training-course
https://www.feistyduck.com/books/modsecurity-handbook/
mailto:christian.folini at netnea.com
twitter: @ChrFolini

From chaim at chaimsanders.com  Sun Oct 22 17:55:28 2017
From: chaim at chaimsanders.com (Chaim Sanders)
Date: Sun, 22 Oct 2017 13:55:28 -0400
Subject: [Owasp-modsecurity-core-rule-set] OWASP Top 10 RC2 is out -
 ModSecurity and CRS are referenced
In-Reply-To: <20171020210010.v564chve3pbubjjb@leander>
References: <20171020210010.v564chve3pbubjjb@leander>
Message-ID: <CAE8hE=p6sdYwFD=YGVCHtFWxqR4gWM42-fa-q1ybFuUZe5q63Q@mail.gmail.com>

VERY COOL! Thanks for keeping us up to date!

On Fri, Oct 20, 2017 at 5:00 PM, Christian Folini <
christian.folini at netnea.com> wrote:

> Hello,
>
> The RC2 for the 2017 edition of OWASP Top 10 is out.
>
> The new issue A10: Insufficient Logging & Monitoring mentions
> ModSecurity and CRS.
>
> https://github.com/OWASP/Top10/blob/master/2017/OWASP%
> 20Top%2010%202017%20RC2%20Final.pdf
>
> I think thanks are due to Osama Elnaggar who worked behind the lines to
> get us into the document.
>
> Best,
>
> Christian
>
> --
> https://www.feistyduck.com/training/modsecurity-training-course
> https://www.feistyduck.com/books/modsecurity-handbook/
> mailto:christian.folini at netnea.com
> twitter: @ChrFolini
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>



-- 
-- 
Chaim Sanders
http://www.ChaimSanders.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20171022/e8ac45f9/attachment.html>

From chaim at chaimsanders.com  Fri Oct 27 23:02:42 2017
From: chaim at chaimsanders.com (Chaim Sanders)
Date: Fri, 27 Oct 2017 19:02:42 -0400
Subject: [Owasp-modsecurity-core-rule-set] Up 11/6: Monthly Project Chat
Message-ID: <CAE8hE=q0TdyxGK6JGW2pEF1ikUHuReqAbsOD_cOkAWieTUAoUw@mail.gmail.com>

Hello everyone,

Coming up on November 6th, we'll have our regular Core Rule Set project chat
.
20:30 CET (14:30 EDT, 18:30 GMT)
on Freenode IRC, channel #modsecurity

If you're interested in learning more about the project or you are
interested in a particular issue/feature, we'd love to hear from you. The
current agenda can be found here:

<goog_2053163377>
https://github.com/SpiderLabs/owasp-modsecurity-crs/issues/925

Cheers,

-- 
-- 
Chaim Sanders
http://www.ChaimSanders.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20171027/840a5757/attachment.html>

