
# -- Default policy ----------------------------------------------------------

# Specify what happens on a rule match. By default we log to the error
# and audit logs, but not block.
#
SecDefaultAction "log,auditlog,pass"

# Example: Block by default
# SecDefaultAction "log,auditlog,deny,status:500"


# -- Parser error handling ---------------------------------------------------

# Verify that we've correctly processed a request body. As a rule of thumb,
# when failing to process a request body you should reject the request (when
# deployed in blocking mode) or log a high-severity alert (when deployed in
# detection-only mode).
#
SecRule REQBODY_PROCESSOR_ERROR "!@eq 0" \
"phase:2,t:none,block,msg:'Failed to parse request body: \
%{REQBODY_PROCESSOR_ERROR_MSG}',severity:2"

# Be strict with what we accept in the multipart/form-data request body.
# If the rule below proves to be too strict for your environment consider
# changing it to detection-only. You are encouraged _not_ to remove it
# altogether.
#
SecRule MULTIPART_STRICT_ERROR "!@eq 0" \
"phase:2,t:none,block,msg:'Multipart request body \
failed strict validation: \
PE %{REQBODY_PROCESSOR_ERROR}, \
BQ %{MULTIPART_BOUNDARY_QUOTED}, \
BW %{MULTIPART_BOUNDARY_WHITESPACE}, \
DB %{MULTIPART_DATA_BEFORE}, \
DA %{MULTIPART_DATA_AFTER}, \
HF %{MULTIPART_HEADER_FOLDING}, \
LF %{MULTIPART_LF_LINE}, \
SM %{MULTIPART_SEMICOLON_MISSING}'"

# Did we see anything that might be a boundary? This rule is too keen. It
# detects anything that looks like a multipart boundary, which means that it
# will emit false positives at a rate that's higher than what you might
# expect. That's why it's commented out by default.
#
#SecRule MULTIPART_UNMATCHED_BOUNDARY "!@eq 0" \
#"phase:2,t:none,log,pass,msg:'Multipart parser detected a possible unmatched boundary.'"


# -- Whitelisting rules ------------------------------------------------------

# Whitelisting is a frequent requirement. We recommend that you don't
# completely bypass your rules for the IP addresses you feel are trusted.
# Using techniques such as CSRF, an attacked can abuse that trust to attack
# your systems. It's much better to whitelist by switching from blocking to
# detection. If you really need to bypass rules, you should try to do so
# only for very specific circumstances.

# Example: Change the rule engine operating mode to detection-only.
#SecRule REMOTE_ADDR "@streq 192.168.1.1" \
#phase:1,nolog,pass,ctl:ruleEngine=DetectOnly

# Example: Suspend rule processing (except phase 5) for a trusted IP address.
#SecRule REMOTE_ADDR "@streq 192.168.1.1" \
#phase:1,nolog,allow