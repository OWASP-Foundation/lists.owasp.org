From christian.folini at netnea.com  Mon Apr  3 12:00:08 2017
From: christian.folini at netnea.com (Christian Folini)
Date: Mon, 3 Apr 2017 14:00:08 +0200
Subject: [Owasp-modsecurity-core-rule-set] Up next Monday: CRS chat
In-Reply-To: <20170331045011.k6z56izlzaqdf3o7@leander>
References: <20170331045011.k6z56izlzaqdf3o7@leander>
Message-ID: <20170403120008.bqd5l7ah4lleqzx3@leander>

Hello,

Just a reminder, the chat is up in 6.5 hours.

I have been notified that will be 20:30 CEST (not 20:30 CET as I
previously stated).

Ahoj,

Christian

out, that the correct name of the time zone is CEST not CET

On Fri, Mar 31, 2017 at 06:50:11AM +0200, Christian Folini wrote:
> Hi there,
> 
> Next Monday, April 3, we'll do our regular Core Rule Set project chat.
> 20:30 CET (14:30 EDT, 18:30 GMT) 
> on Freenode IRC, channel #modsecurity
> 
> The topics will be preparations for the upcoming CRS 3.0.1 release
> and anything else that springs to mind. If you have other things to
> discuss that interests the whole project then please bring it along
> (it might be useful to announce big topics first, though, so people
> can make up their mind beforehand).
> 
> Cheers,
> 
> Christian
> 
> -- 
> https://www.feistyduck.com/training/modsecurity-training-course
> mailto:christian.folini at netnea.com
> twitter: @ChrFolini
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set

-- 
https://www.feistyduck.com/training/modsecurity-training-course
mailto:christian.folini at netnea.com
twitter: @ChrFolini

From christian.folini at netnea.com  Fri Apr  7 11:58:17 2017
From: christian.folini at netnea.com (Christian Folini)
Date: Fri, 7 Apr 2017 13:58:17 +0200
Subject: [Owasp-modsecurity-core-rule-set] News from the Core Rule Set
	(2017-04-07)
Message-ID: <20170407115817.jxqw7ratilnf2avh@leander>


Dear all,

This is the CRS newsletter covering the period from March until today.

What has happened during the last few weeks:

- We held our 2nd community chat last Monday. We have been six people
  this time around and what feels even more important: five out of those
  accepted tasks to solve open issues.
  The next community chats will be held on the following dates:
  - May 1, 2017, 20:30 CEST (14:30 EST, 19:30 GMT)
  - June 5, 2017, 20:30 CEST
  - Jul 3, 2017, 20:30 CEST
  - Aug 7, 2017, 20:30 CEST
  - Sep 4, 2017, 20:30 CEST
  - Oct 2, 2017, 20:30 CEST
  - Nov 6, 2017, 20:30 CET
  - Dec 4, 2017, 20:30 CET

- We settled on a general release policy. Point releases (3.0.1, 3.0.2,
  etc.) will be maintenance releases concentrating on reducing false
  positives. No new rules will be introduced in a point release, unless
  we split a rule to solve a false positive. We will of course also look
  into bugs and documentation issues, but the idea with point release is
  to reduce strain on users updating CRS and give them confidence that
  no new blocks of legitimate traffic will occur. It is thus safe to
  update. The next release with new rules / features will be 3.1.0.

- We plan to take up development for an eventual 3.1.0 after the 3.0.1 
  release.

- 3.0.1 will come out in the next few weeks. We have assigned the
  remaining issues 
  https://github.com/SpiderLabs/owasp-modsecurity-crs/issues?q=is%3Aissue+is%3Aopen+label%3A%22v3.0-dev+Development%22
  and are confident to solve them quite fast now.
  We will also freeze for new false positives on Monday, April 10.
  This means: False positives reported until April 10 will likely
  be fixed in time for 3.0.1. FPs reported after that date will have
  to wait for 3.0.2.

- We discovered a new bug on rule 941150. Github user @UncleIS had
  pointed to a bug in this rule before, but now we realised that
  this PL1 rule raises the incoming anomaly score without writing an alert.
  FPs are relatively rare here, but you might not notice unless
  you pay very close attention to the anomaly scores.
  You can follow the discussions via github issue 704:
  https://github.com/SpiderLabs/owasp-modsecurity-crs/issues/704

- Github user @emphazer points to RFC 3902 and the fact that SOAP
  requests are meant to be sent with content-type application/soap+xml
  We will adopt the allowed content-types accordingly, but you also
  have to define the value in the offical base rules of the ModSecurity
  project itself, where you defing the XML request body processor
  based on the content-type request header.
  https://github.com/SpiderLabs/owasp-modsecurity-crs/pull/721

- CRS project lead Chaim Sanders has quit his job at Trustwave and
  continues his commitment to our project. We remain in close touch with
  Trustwave via ModSecurity lead developer Felipe and new TW team member
  Victor.

- The TYPO 3 side project kind of stalled, but lately github user
  @emphazer contributed with new TYPO3 pull requests against my
  CRS/TYPO3 branch.

- The testing of CRS3 with several security scanners is making good
  progress, though. We have done Burp, Kkipfish and the bleeding
  edge Zap 2.6.0. Arachni is being tested as I write this.

- We have been pondering over the idea to have a CRS project logo.
  We want to lean on the OWASP logo and getting OWASP's permission
  to do so took a surprisingly long time. But now Hugo Costa, the
  designer of the CRS3 release poster, is working on the project.

What is thus planned for the next few weeks:

- The release of CRS 3.0.1, maybe with a preliminary RC first.

- First results of the security scanner tests.

- More news from the logo project.

- The CRS meetup at AppSecEU is going to be on Wednesday May 10
  in Belfast. Time and place not yet defined.

- My Core Rule Set 3.0 Intro talk at AppSecEU in Belfast has been
  scheduled for Thursday May 11, 4.15pm. Would be cool to see
  you.

- Next CRS chat: May 1, 2017, 20:30 CEST on Freenode IRC, channel
  #modsecurity (14:30 EST, 19:30 GMT)

Ahoj,

Christian


-- 
https://www.feistyduck.com/training/modsecurity-training-course
mailto:christian.folini at netnea.com
twitter: @ChrFolini

From christian.folini at netnea.com  Wed Apr 12 04:00:40 2017
From: christian.folini at netnea.com (Christian Folini)
Date: Wed, 12 Apr 2017 06:00:40 +0200
Subject: [Owasp-modsecurity-core-rule-set] fwd: [oelnaggar04@gmail.com:
 [mod-security-users] OWASP Top 10 2017 RC1]
Message-ID: <20170412040040.jtt2iqwsf2jxyktd@leander>

This might be of interest for this mailinglist too.

Cheers,

Christian

----- Forwarded message from Osama Elnaggar <oelnaggar04 at gmail.com> -----

Date: Mon, 10 Apr 2017 21:31:56 -0400
From: Osama Elnaggar <oelnaggar04 at gmail.com>
To: mod-security-users at lists.sourceforge.net
Subject: [mod-security-users] OWASP Top 10 2017 RC1
Reply-To: mod-security-users at lists.sourceforge.net

Hi,

Not sure if you guys saw this, but the new OWASP Top 10 (2017 RC1) was
released yesterday -
https://github.com/OWASP/Top10/raw/master/2017/OWASP%20Top%2010%20-%202017%20RC1-English.pdf


I found it interesting that under A7: Insufficient Attack Protection, it
specifically mentions looking into WAFs, RASP and OWASP AppSensor to detect
automatic attacks and block them.  This is the first time that the OWASP
Top 10 mentions WAFs as far as I can tell.

Perhaps this is a good for some ModSecurity marketing and promotion?

-- 
Osama Elnaggar

------------------------------------------------------------------------------
Check out the vibrant tech community on one of the world's most
engaging tech sites, Slashdot.org! http://sdm.link/slashdot

_______________________________________________
mod-security-users mailing list
mod-security-users at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/mod-security-users
Commercial ModSecurity Rules and Support from Trustwave's SpiderLabs:
http://www.modsecurity.org/projects/commercial/rules/
http://www.modsecurity.org/projects/commercial/support/


----- End forwarded message -----

-- 
https://www.feistyduck.com/training/modsecurity-training-course
mailto:christian.folini at netnea.com
twitter: @ChrFolini

From christian.folini at netnea.com  Wed Apr 12 04:06:11 2017
From: christian.folini at netnea.com (Christian Folini)
Date: Wed, 12 Apr 2017 06:06:11 +0200
Subject: [Owasp-modsecurity-core-rule-set] OWASP Top 10 2017 RC1
In-Reply-To: <CACva_gF25LoO0+t+o2Cc3Hik5ZRFCeY1y3u-s81rKAJbKixuBA@mail.gmail.com>
References: <CACva_gF25LoO0+t+o2Cc3Hik5ZRFCeY1y3u-s81rKAJbKixuBA@mail.gmail.com>
Message-ID: <20170412040611.asxrs566tvdvy45c@leander>

Osama,

Thank you for the link. I was not aware of that development.
I love the new risk matrix and the added content. Very good read.

Ahoj,

Christian

On Mon, Apr 10, 2017 at 09:31:56PM -0400, Osama Elnaggar wrote:
> Hi,
> 
> Not sure if you guys saw this, but the new OWASP Top 10 (2017 RC1) was
> released yesterday -
> https://github.com/OWASP/Top10/raw/master/2017/OWASP%20Top%2010%20-%202017%20RC1-English.pdf
> 
> 
> I found it interesting that under A7: Insufficient Attack Protection, it
> specifically mentions looking into WAFs, RASP and OWASP AppSensor to detect
> automatic attacks and block them.  This is the first time that the OWASP
> Top 10 mentions WAFs as far as I can tell.
> 
> Perhaps this is a good for some ModSecurity marketing and promotion?
> 
> -- 
> Osama Elnaggar

> ------------------------------------------------------------------------------
> Check out the vibrant tech community on one of the world's most
> engaging tech sites, Slashdot.org! http://sdm.link/slashdot

> _______________________________________________
> mod-security-users mailing list
> mod-security-users at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/mod-security-users
> Commercial ModSecurity Rules and Support from Trustwave's SpiderLabs:
> http://www.modsecurity.org/projects/commercial/rules/
> http://www.modsecurity.org/projects/commercial/support/


-- 
https://www.feistyduck.com/training/modsecurity-training-course
mailto:christian.folini at netnea.com
twitter: @ChrFolini

From oelnaggar04 at gmail.com  Wed Apr 12 06:43:25 2017
From: oelnaggar04 at gmail.com (Osama Elnaggar)
Date: Wed, 12 Apr 2017 02:43:25 -0400
Subject: [Owasp-modsecurity-core-rule-set] OWASP Top 10 2017 RC1
In-Reply-To: <20170412040611.asxrs566tvdvy45c@leander>
References: <CACva_gF25LoO0+t+o2Cc3Hik5ZRFCeY1y3u-s81rKAJbKixuBA@mail.gmail.com>
	<20170412040611.asxrs566tvdvy45c@leander>
Message-ID: <CACva_gGHjkhThJ5tWoepYV7ozh6=dNZsZgwNQc_huSzhyv_KWg@mail.gmail.com>

Thanks.  Just to be clear, this is still a release candidate and there are
now discussions on the OWASP Top Ten mailing list, especially around A7
(which mentions WAFs) as some people want to remove it / modify it while
others don't.  But it's an interesting development.

Personally, I'm for keeping it but focusing on detection rather than
prevention and having logging at the application tier with WAF as an
additional layer, especially for virtual patching.

-- 
Osama Elnaggar

On April 12, 2017 at 2:07:46 PM, Christian Folini (
christian.folini at netnea.com) wrote:

Osama,

Thank you for the link. I was not aware of that development.
I love the new risk matrix and the added content. Very good read.

Ahoj,

Christian

On Mon, Apr 10, 2017 at 09:31:56PM -0400, Osama Elnaggar wrote:
> Hi,
>
> Not sure if you guys saw this, but the new OWASP Top 10 (2017 RC1) was
> released yesterday -
>
https://github.com/OWASP/Top10/raw/master/2017/OWASP%20Top%2010%20-%202017%20RC1-English.pdf
>
>
> I found it interesting that under A7: Insufficient Attack Protection, it
> specifically mentions looking into WAFs, RASP and OWASP AppSensor to
detect
> automatic attacks and block them. This is the first time that the OWASP
> Top 10 mentions WAFs as far as I can tell.
>
> Perhaps this is a good for some ModSecurity marketing and promotion?
>
> --
> Osama Elnaggar

>
------------------------------------------------------------------------------

> Check out the vibrant tech community on one of the world's most
> engaging tech sites, Slashdot.org! http://sdm.link/slashdot

> _______________________________________________
> mod-security-users mailing list
> mod-security-users at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/mod-security-users
> Commercial ModSecurity Rules and Support from Trustwave's SpiderLabs:
> http://www.modsecurity.org/projects/commercial/rules/
> http://www.modsecurity.org/projects/commercial/support/


-- 
https://www.feistyduck.com/training/modsecurity-training-course
mailto:christian.folini at netnea.com
twitter: @ChrFolini
_______________________________________________
Owasp-modsecurity-core-rule-set mailing list
Owasp-modsecurity-core-rule-set at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20170412/e46916df/attachment.html>

From airween at gmail.com  Sun Apr 16 19:26:12 2017
From: airween at gmail.com (Ervin Hegedus)
Date: Sun, 16 Apr 2017 21:26:12 +0200
Subject: [Owasp-modsecurity-core-rule-set] Session fixating test - general
	CRS test
Message-ID: <20170416192612.GA25130@arxnet.hu>

Hi all,

I'm new in Modsecurity. A few days ago, I've been created few
packages for my Debian (8) systems from Github repos:
- libmodsecurity 3.0, v3/master, sha1: b58f713
- nginx 1.6.2 (patched the official Debian package with
  modsecurity-nginx module, master, sha1: 3de175)
- owasp-modsecutiy-crs 3.0, v3.0/master, sha1: d1692b

I'm using the Nginx as frontend proxy for my Apache webservers,
which runs in containers (LXC). The patched nginx and another
components are works as well. I could run few basic checks, and I
could demonstrate the advantages of WAF to my collegues. But
there were only two basic attack, what I could show them: XSS and
SQL injection.

My 2 cents question is: how can I demonstrate another features? I
meant, it could be show the session fixating: I put a simple PHP
script to a webroot, load the page in a browser. I found the
PHPSESSID cookie, and then I tried to load the page in another
browser (on another host) - but there didn't happened anything...
the page had been loaded as well with the hijacked session.

What did I miss, or how can I show this feature?

In general way, how can I show the all features of Modsecurity,
and OWASP CRS?


Thank you,


Ervin


-- 
I ? UTF-8

From spartantri at gmail.com  Sun Apr 16 19:54:22 2017
From: spartantri at gmail.com (Manuel Spartan)
Date: Sun, 16 Apr 2017 21:54:22 +0200
Subject: [Owasp-modsecurity-core-rule-set] Session fixating test -
 general CRS test
In-Reply-To: <20170416192612.GA25130@arxnet.hu>
References: <20170416192612.GA25130@arxnet.hu>
Message-ID: <CAN6xG9vCmgmarbKhvTUR67qMcB-Ob+_dJUVwpYxjizABxs0_bA@mail.gmail.com>

Hi Ervin,

The lfi, rfi are always nice, cookie stealing with xss, csrf, rce, those
can be tested with a dvwa or similar webapps and having the low security
setying in dvwa you can show how easy it isnto exploit and that modsec with
crs will block most of the malicious requests.

Regards,
Manuel

On Apr 16, 2017 14:27, "Ervin Hegedus" <airween at gmail.com> wrote:

> Hi all,
>
> I'm new in Modsecurity. A few days ago, I've been created few
> packages for my Debian (8) systems from Github repos:
> - libmodsecurity 3.0, v3/master, sha1: b58f713
> - nginx 1.6.2 (patched the official Debian package with
>   modsecurity-nginx module, master, sha1: 3de175)
> - owasp-modsecutiy-crs 3.0, v3.0/master, sha1: d1692b
>
> I'm using the Nginx as frontend proxy for my Apache webservers,
> which runs in containers (LXC). The patched nginx and another
> components are works as well. I could run few basic checks, and I
> could demonstrate the advantages of WAF to my collegues. But
> there were only two basic attack, what I could show them: XSS and
> SQL injection.
>
> My 2 cents question is: how can I demonstrate another features? I
> meant, it could be show the session fixating: I put a simple PHP
> script to a webroot, load the page in a browser. I found the
> PHPSESSID cookie, and then I tried to load the page in another
> browser (on another host) - but there didn't happened anything...
> the page had been loaded as well with the hijacked session.
>
> What did I miss, or how can I show this feature?
>
> In general way, how can I show the all features of Modsecurity,
> and OWASP CRS?
>
>
> Thank you,
>
>
> Ervin
>
>
> --
> I ? UTF-8
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20170416/4bf52a7d/attachment.html>

From barry_pollard at hotmail.com  Sun Apr 16 20:46:44 2017
From: barry_pollard at hotmail.com (Barry Pollard)
Date: Sun, 16 Apr 2017 20:46:44 +0000
Subject: [Owasp-modsecurity-core-rule-set] Session fixating test -
	general	CRS test
In-Reply-To: <20170416192612.GA25130@arxnet.hu>
References: <20170416192612.GA25130@arxnet.hu>
Message-ID: <DB6PR0902MB2197BE7F9EF5B752E1E341A082070@DB6PR0902MB2197.eurprd09.prod.outlook.com>

This is a VERY subjective topic, but my opinions are below.

On 16 Apr 2017, at 20:26, Ervin Hegedus <

...and I
could demonstrate the advantages of WAF to my collegues. But
there were only two basic attack, what I could show them: XSS and
SQL injection.

My 2 cents question is: how can I demonstrate another features? I
meant, it could be show the session fixating: I put a simple PHP
script to a webroot, load the page in a browser. I found the
PHPSESSID cookie, and then I tried to load the page in another
browser (on another host) - but there didn't happened anything...
the page had been loaded as well with the hijacked session.

What did I miss, or how can I show this feature?

The Session Fixation protection in the OWASP CRS won't protect against you coping and pasting the session id to another browser (I presume that's what you did btw?). To do that it would need to either 1) keep a collection of Session ids versus IP addresses or 2) Somehow inject the session id into the page and check it again as a XSRF-type protection. ModSecurity CAN do both of these things but is not very good at either to be honest.

The OWASP Session-Fixation protection (https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/v3.0/master/rules/REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION.conf) has basically three protections:

1) It looks for attempts to manipulation HTTP data (e.g. "set-cookie" mentions in request arguments), which shouldn't be sent and may be examples of someone trying to use XSS or software bugs/flaws to reflect the setting of the cookie back.
2) It looks for requests where the arguments include common session variable names and the referrer domain is different from the host domain, which may be examples of a phishing attempt being used to provide these variables.
3) It looks for request where the arguments include common session variable names and the referrer domain is not supplied (similar to above).

In general way, how can I show the all features of Modsecurity,
and OWASP CRS?

That's a VERY subjective question. In my opinion XSS, SQL injection are two of the most useful protections of ModSecurity (though SQLi in particular is prone to false alterting!).

Other benefits, many of which are easily demonstrable, include:

1) Full logging of requests (including POST arguments). Very useful extra feature - even if running in DetectionOnly mode as you should when you first install this. The ability to Debug issues and/or retrospectively review logs after and incident is invaluable. Though make sure you set it up properly and sanitise passwords, credit cards and other personal data or you're just creating security issues!

2) Virtual Patching. If a particular attack is identified it's often a lot easier to write and deploy a ModSecurity rule, than to fix in the code. This gives you protection immediately and time to do the proper fix instead of rushing out a half-baked, half tested fix. Though this short be seen as a short term fix and the proper fix should be applied. Who knows when you'll move away from a webserver that supports ModSecurity and/or turn it or this additional rule off (either accidentally or on purpose for some reason)?

3) Path traversal or remote code execution attacks. E.g. it's easy to block requests looking for /etc/password or variants in arguments. Or any request looking for .exe or .bat files.

4) Identification and/or blocking of bots and other scripts that use malformed requests. On one side, often these are harmless, but on other most browsers behave and send valid request so why not block the noise and let you concentrate on real requests.

5) Data leakages - including stack traces and the like. Though scanning of outbound data is usually a bigger overhead than inbound due to the size of the requests involved so think carefully before you turn this on. But it's very easy to write a rule so a 500 response code, triggers checks for stack traces for example.

A lot of the other protections that it COULD give, are not as robust - and used to be in a folder called "experimental for that reason in CRSv2. They involve using collections (which don't work well in ModSecurity once you get any volume) and/or content injection (which I personally don't think a WAF should do). Don't mean to sound negative and I'm a big fan of ModSecurity and all it can do, but just warning you to not get too excited by DoS protection (thankful removed from OWASP CRS page as used to be stated as a feature there) or the like. At least until you understand how it could implement that and the downsides of its implementation.

To really get the most out of ModSecurity I recommend the ModSecurity handbook (https://www.feistyduck.com/books/modsecurity-handbook/) originally written by ModSecurity's created Ivan Risti? (who's since moved on to other things in the security industry) and recently updated by Christian Folini (who's pretty active on this mailing list and I'm sure will pipe up with his own answer - possibly before I hit send on this one!). They also run a training course on same site.

To read up a bit more explanation as to how the OWASP CRS protects, and also see some proof of concepts with the more advanced techniques (though in my opinion they shouldn't all be used in production systems) then the "Web Application Defender's Cookbook" by Ryan Barnett gives some food for thought. The book isn't without flaws, but does show how you could push ModSecurity to cover more. Ryan also used to be heavily involved in maintaining both ModSecurity and OWASP CRS but has also moved on (though does lurk here so apologies to him if he takes the "flawed" statement above personally!).

Not sure how this mailing list feels about blatant recommendations like that, but since I'm not directly affiliated with ModSecurity, OWASP or either if the books above, hopefully no one will mind me sharing my opinion.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20170416/e47145d5/attachment-0001.html>

From airween at gmail.com  Mon Apr 17 07:19:59 2017
From: airween at gmail.com (Ervin =?utf-8?Q?Heged=C3=BCs?=)
Date: Mon, 17 Apr 2017 09:19:59 +0200
Subject: [Owasp-modsecurity-core-rule-set] Session fixating test -
 general CRS test
In-Reply-To: <CAN6xG9vCmgmarbKhvTUR67qMcB-Ob+_dJUVwpYxjizABxs0_bA@mail.gmail.com>
References: <20170416192612.GA25130@arxnet.hu>
	<CAN6xG9vCmgmarbKhvTUR67qMcB-Ob+_dJUVwpYxjizABxs0_bA@mail.gmail.com>
Message-ID: <20170417071959.GA27548@arxnet.hu>

Hi Manuel,

thanks for your reply.

I've seen DVWA, but I didn't found any "testing" functions. Looks
like it proposes some coding ideas to avoid the listed attacks,
but that isn't a testing tool. (Or I just missed out something...  :))


Thanks again,


a.

On Sun, Apr 16, 2017 at 09:54:22PM +0200, Manuel Spartan wrote:
> Hi Ervin,
> 
> The lfi, rfi are always nice, cookie stealing with xss, csrf, rce, those
> can be tested with a dvwa or similar webapps and having the low security
> setying in dvwa you can show how easy it isnto exploit and that modsec with
> crs will block most of the malicious requests.
> 
> Regards,
> Manuel
> 
> On Apr 16, 2017 14:27, "Ervin Hegedus" <airween at gmail.com> wrote:
> 
> > Hi all,
> >
> > I'm new in Modsecurity. A few days ago, I've been created few
> > packages for my Debian (8) systems from Github repos:
> > - libmodsecurity 3.0, v3/master, sha1: b58f713
> > - nginx 1.6.2 (patched the official Debian package with
> >   modsecurity-nginx module, master, sha1: 3de175)
> > - owasp-modsecutiy-crs 3.0, v3.0/master, sha1: d1692b
> >
> > I'm using the Nginx as frontend proxy for my Apache webservers,
> > which runs in containers (LXC). The patched nginx and another
> > components are works as well. I could run few basic checks, and I
> > could demonstrate the advantages of WAF to my collegues. But
> > there were only two basic attack, what I could show them: XSS and
> > SQL injection.
> >
> > My 2 cents question is: how can I demonstrate another features? I
> > meant, it could be show the session fixating: I put a simple PHP
> > script to a webroot, load the page in a browser. I found the
> > PHPSESSID cookie, and then I tried to load the page in another
> > browser (on another host) - but there didn't happened anything...
> > the page had been loaded as well with the hijacked session.
> >
> > What did I miss, or how can I show this feature?
> >
> > In general way, how can I show the all features of Modsecurity,
> > and OWASP CRS?
> >
> >
> > Thank you,
> >
> >
> > Ervin
> >
> >
> > --
> > I ? UTF-8
> > _______________________________________________
> > Owasp-modsecurity-core-rule-set mailing list
> > Owasp-modsecurity-core-rule-set at lists.owasp.org
> > https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
> >

-- 
I ? UTF-8

From airween at gmail.com  Mon Apr 17 07:41:16 2017
From: airween at gmail.com (Ervin =?utf-8?Q?Heged=C3=BCs?=)
Date: Mon, 17 Apr 2017 09:41:16 +0200
Subject: [Owasp-modsecurity-core-rule-set] Session fixating test -
 general CRS test
In-Reply-To: <DB6PR0902MB2197BE7F9EF5B752E1E341A082070@DB6PR0902MB2197.eurprd09.prod.outlook.com>
References: <20170416192612.GA25130@arxnet.hu>
	<DB6PR0902MB2197BE7F9EF5B752E1E341A082070@DB6PR0902MB2197.eurprd09.prod.outlook.com>
Message-ID: <20170417074116.GB27548@arxnet.hu>

Hi Barry,

first, thank you for your very detailed answer.

On Sun, Apr 16, 2017 at 08:46:44PM +0000, Barry Pollard wrote:
> This is a VERY subjective topic, but my opinions are below.
> 
> On 16 Apr 2017, at 20:26, Ervin Hegedus <
> 
>> ...and I
>> could demonstrate the advantages of WAF to my collegues. But
>> there were only two basic attack, what I could show them: XSS and
>> SQL injection.
>> 
>> My 2 cents question is: how can I demonstrate another features? I
>> meant, it could be show the session fixating: I put a simple PHP
>> script to a webroot, load the page in a browser. I found the
>> PHPSESSID cookie, and then I tried to load the page in another
>> browser (on another host) - but there didn't happened anything...
>> the page had been loaded as well with the hijacked session.
>> 
>> What did I miss, or how can I show this feature?
> 
> The Session Fixation protection in the OWASP CRS won't protect
> against you coping and pasting the session id to another browser
> (I presume that's what you did btw?).

yes, I just tried to that.

> To do that it would need to either 1) keep a collection of Session
> ids versus IP addresses or 2) Somehow inject the session id into
> the page and check it again as a XSRF-type protection. ModSecurity
> CAN do both of these things but is not very good at either to be honest.

I thought through that before, but I thought Modsecurity stores
it in memory... I've found few e-mails on mailing lists, where
users discusses about hash tables for session/ip, session/UA, but
I didn't dound any other information about that.

Anyway, is there any information about it in Modsecurity DOCS?

> The OWASP Session-Fixation protection
> (https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/v3.0/master/rules/REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION.conf)
> has basically three protections:
> 
> 1) It looks for attempts to manipulation HTTP data (e.g. "set-cookie"
> mentions in request arguments), which shouldn't be sent and may be
> examples of someone trying to use XSS or software bugs/flaws to
> reflect the setting of the cookie back.
> 2) It looks for requests where the arguments include common session
> variable names and the referrer domain is different from the host
> domain, which may be examples of a phishing attempt being used to
> provide these variables.
> 3) It looks for request where the arguments include common session
> variable names and the referrer domain is not supplied (similar to
> above).

well, now that's clear, many thanks for your explanation.

>> In general way, how can I show the all features of Modsecurity,
>> and OWASP CRS?
> 
> That's a VERY subjective question. In my opinion XSS, SQL injection
> are two of the most useful protections of ModSecurity (though SQLi
> in particular is prone to false alterting!).

yes, I found those features and I could tested them.

> Other benefits, many of which are easily demonstrable, include:
> 
> 1) Full logging of requests (including POST arguments). Very useful
> extra feature - even if running in DetectionOnly mode as you should
> when you first install this. The ability to Debug issues and/or
> retrospectively review logs after and incident is invaluable.
> Though make sure you set it up properly and sanitise passwords,
> credit cards and other personal data or you're just creating security
> issues!

right,

> 2) Virtual Patching. If a particular attack is identified it's often
> a lot easier to write and deploy a ModSecurity rule, than to fix in
> the code. This gives you protection immediately and time to do the
> proper fix instead of rushing out a half-baked, half tested fix.
> Though this short be seen as a short term fix and the proper fix
> should be applied. Who knows when you'll move away from a webserver
> that supports ModSecurity and/or turn it or this additional rule
> off (either accidentally or on purpose for some reason)?

yes, but this answer indicates new question(s) :). Eg. is there a
good documentation about the ruleset language? I mean, where can
I see the BNF of language? Where can I find any documentation how
can I write a custom own rules?

(Sorry, I know that's these questions aren't relates to CRS,
rather to libmodsecurity.)

> 3) Path traversal or remote code execution attacks. E.g. it's
> easy to block requests looking for /etc/password or variants in
> arguments. Or any request looking for .exe or .bat files.

good feature,

> 4) Identification and/or blocking of bots and other scripts that
> use malformed requests. On one side, often these are harmless,
> but on other most browsers behave and send valid request so why
> not block the noise and let you concentrate on real requests.

I'ld like to protect my webservers against the attackers, not the
"regular" users, so I think that's a good and useful feature :).

> 5) Data leakages - including stack traces and the like. Though
> scanning of outbound data is usually a bigger overhead than
> inbound due to the size of the requests involved so think
> carefully before you turn this on. But it's very easy to
> write a rule so a 500 response code, triggers checks for stack
> traces for example.

I could't reached this point - as I wrote above, I'm looking up a
mini-howto, or any other doc about the own rules.

> A lot of the other protections that it COULD give, are not as
> robust - and used to be in a folder called "experimental for
> that reason in CRSv2. They involve using collections (which
> don't work well in ModSecurity once you get any volume) and/or
> content injection (which I personally don't think a WAF should
> do). Don't mean to sound negative and I'm a big fan of
> ModSecurity and all it can do, but just warning you to not get
> too excited by DoS protection (thankful removed from OWASP CRS
> page as used to be stated as a feature there) or the like. At
> least until you understand how it could implement that and the
> downsides of its implementation.

well, thanks for your personal opinion. I don't want to confide
the full protection to Modsecurity, but I think that would be a
good additional module for a full stack.

> To really get the most out of ModSecurity I recommend the
> ModSecurity handbook (https://www.feistyduck.com/books/modsecurity-handbook/)
> originally written by ModSecurity's created Ivan Risti? (who's
> since moved on to other things in the security industry) and
> recently updated by Christian Folini (who's pretty active on
> this mailing list and I'm sure will pipe up with his own
> answer - possibly before I hit send on this one!). They also
> run a training course on same site.

thanks for your tips, I'll review those.

> To read up a bit more explanation as to how the OWASP CRS
> protects, and also see some proof of concepts with the more
> advanced techniques (though in my opinion they shouldn't all
> be used in production systems) then the "Web Application
> Defender's Cookbook" by Ryan Barnett gives some food for
> thought. The book isn't without flaws, but does show how you
> could push ModSecurity to cover more. Ryan also used to be
> heavily involved in maintaining both ModSecurity and OWASP
> CRS but has also moved on (though does lurk here so apologies
> to him if he takes the "flawed" statement above personally!).

thanks too,

> Not sure how this mailing list feels about blatant
> recommendations like that, but since I'm not directly
> affiliated with ModSecurity, OWASP or either if the books
> above, hopefully no one will mind me sharing my opinion.

yes, you're right, I know - and apologize for this thread.


Many thanks for your help again.



a.

-- 
I ? UTF-8

From barry_pollard at hotmail.com  Mon Apr 17 08:13:08 2017
From: barry_pollard at hotmail.com (Barry Pollard)
Date: Mon, 17 Apr 2017 08:13:08 +0000
Subject: [Owasp-modsecurity-core-rule-set] Session fixating test -
 general CRS test
In-Reply-To: <20170417074116.GB27548@arxnet.hu>
References: <20170416192612.GA25130@arxnet.hu>
	<DB6PR0902MB2197BE7F9EF5B752E1E341A082070@DB6PR0902MB2197.eurprd09.prod.outlook.com>,
	<20170417074116.GB27548@arxnet.hu>
Message-ID: <DB6PR0902MB21973F83C9A3A8AC2894D53982060@DB6PR0902MB2197.eurprd09.prod.outlook.com>


I thought through that before, but I thought Modsecurity stores
it in memory... I've found few e-mails on mailing lists, where
users discusses about hash tables for session/ip, session/UA, but
I didn't dound any other information about that.

These are "collections" that I mentioned. They are stored in a file persisted to disk in a key based SDBM format. Unfortunately this does not scale for even a moderately busy webserver as many threads attempt to access the collections at same time, and they clash and fail. More info here:

https://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/2016-May/002145.html

Anyway, is there any information about it in Modsecurity DOCS?

The ModSecurity handbook discusses them in depth though don't think it mentions the unreliability of them much when it should IMHO. It's not expensive and well worth it if you really intend to use ModSecurity.

2) Virtual Patching. If a particular attack is identified it's often
a lot easier to write and deploy a ModSecurity rule, than to fix in
the code.

yes, but this answer indicates new question(s) :). Eg. is there a
good documentation about the ruleset language? I mean, where can
I see the BNF of language? Where can I find any documentation how
can I write a custom own rules?

(Sorry, I know that's these questions aren't relates to CRS,
rather to libmodsecurity.)

The ModSecurity handbook is best for this, supplemented by the reference manual (https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual) which I think came from the handbook originally. Or vice versa.

There's also a mailing list similar to this for ModSecurity issues rather than OWASP CRS issues. See here for details: http://modsecurity.org/help.html

And then there's GitHub repositories for both for issue and change tracking:

ModSecurity: https://github.com/SpiderLabs/ModSecurity
OWASP CRS: https://github.com/SpiderLabs/owasp-modsecurity-crs

Finally Christian also published some free tutorials as a series of blog post, which are well worth a read, though they do concentrate more on getting it up and running, which you seem to have got to on your own already: https://www.netnea.com/cms/apache-tutorials/

One of the best ways to learn the rules is to use them :-) Look at the CRS rules which are all just text based, human readable config files (though they often have very complex regex that is difficult to follow) and use Audit and Debug logs to understand them - rather than just turning them on and hoping for the best.

To be honest the CRS could do with a book in itself, or greater documentation as some of the reasoning for the rules has been lost in time and isn't the easiest to understand for beginners. Ryan's book almost does that for some of them but could do with even more explanation IMHO.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20170417/b68d6aca/attachment-0001.html>

From jeanraymondferrer at gmail.com  Mon Apr 17 08:27:49 2017
From: jeanraymondferrer at gmail.com (Jean-Raymond Ferrer)
Date: Mon, 17 Apr 2017 10:27:49 +0200
Subject: [Owasp-modsecurity-core-rule-set] Session fixating test -
 general CRS test
In-Reply-To: <CAMe1vgugM5r2yEv+OvQ3PAhm9hHHuTDJHWzWO4VCcL5-i+jrsw@mail.gmail.com>
References: <20170416192612.GA25130@arxnet.hu>
	<CAMe1vgugM5r2yEv+OvQ3PAhm9hHHuTDJHWzWO4VCcL5-i+jrsw@mail.gmail.com>
Message-ID: <CAMe1vgspWNZR3ivgvzcr9JuJd+hqgchY9GbceKhm5EmhRBgrKw@mail.gmail.com>

Hi all

I read this :
modsecurity-nginx module, master, sha1: 3de175)

Knowing that sha1 is broken and considered as weak, some bad guy could
potentially replace genuine package with corrupt one.

Has this issue been considered at Modsecurity management level?

Kind regards,

Jean-Raymond Ferrer

Le dim. 16 avr. 2017 21:27, Ervin Hegedus <airween at gmail.com> a ?crit :

> Hi all,
>
> I'm new in Modsecurity. A few days ago, I've been created few
> packages for my Debian (8) systems from Github repos:
> - libmodsecurity 3.0, v3/master, sha1: b58f713
> - nginx 1.6.2 (patched the official Debian package with
>   modsecurity-nginx module, master, sha1: 3de175)
> - owasp-modsecutiy-crs 3.0, v3.0/master, sha1: d1692b
>
> I'm using the Nginx as frontend proxy for my Apache webservers,
> which runs in containers (LXC). The patched nginx and another
> components are works as well. I could run few basic checks, and I
> could demonstrate the advantages of WAF to my collegues. But
> there were only two basic attack, what I could show them: XSS and
> SQL injection.
>
> My 2 cents question is: how can I demonstrate another features? I
> meant, it could be show the session fixating: I put a simple PHP
> script to a webroot, load the page in a browser. I found the
> PHPSESSID cookie, and then I tried to load the page in another
> browser (on another host) - but there didn't happened anything...
> the page had been loaded as well with the hijacked session.
>
> What did I miss, or how can I show this feature?
>
> In general way, how can I show the all features of Modsecurity,
> and OWASP CRS?
>
>
> Thank you,
>
>
> Ervin
>
>
> --
> I ? UTF-8
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-modsecurity-core-rule-set/attachments/20170417/1f6541b0/attachment.html>

From airween at gmail.com  Mon Apr 17 09:12:32 2017
From: airween at gmail.com (Ervin =?utf-8?Q?Heged=C3=BCs?=)
Date: Mon, 17 Apr 2017 11:12:32 +0200
Subject: [Owasp-modsecurity-core-rule-set] Session fixating test -
 general CRS test
In-Reply-To: <CAMe1vgspWNZR3ivgvzcr9JuJd+hqgchY9GbceKhm5EmhRBgrKw@mail.gmail.com>
References: <20170416192612.GA25130@arxnet.hu>
	<CAMe1vgugM5r2yEv+OvQ3PAhm9hHHuTDJHWzWO4VCcL5-i+jrsw@mail.gmail.com>
	<CAMe1vgspWNZR3ivgvzcr9JuJd+hqgchY9GbceKhm5EmhRBgrKw@mail.gmail.com>
Message-ID: <20170417091232.GA28260@arxnet.hu>

Hi Jean-Raymond,

On Mon, Apr 17, 2017 at 10:27:49AM +0200, Jean-Raymond Ferrer wrote:
> Hi all
> 
> I read this :
> modsecurity-nginx module, master, sha1: 3de175)
> 
> Knowing that sha1 is broken and considered as weak, some bad guy could
> potentially replace genuine package with corrupt one.
> 
> Has this issue been considered at Modsecurity management level?

I think it's NO. The sha1 value above just shows the current
version of code in Git repository.

See:

https://github.com/SpiderLabs/ModSecurity-nginx

and you can see the latest commit at top-right corner of inside
div:

"Latest commit 3de175b 14 days"

For more infos about Git commit identifiers:
http://stackoverflow.com/questions/9392365/how-would-git-handle-a-sha-1-collision-on-a-blob



a.

 
> Kind regards,
> 
> Jean-Raymond Ferrer
> 
> Le dim. 16 avr. 2017 21:27, Ervin Hegedus <airween at gmail.com> a ?crit :
> 
> > Hi all,
> >
> > I'm new in Modsecurity. A few days ago, I've been created few
> > packages for my Debian (8) systems from Github repos:
> > - libmodsecurity 3.0, v3/master, sha1: b58f713
> > - nginx 1.6.2 (patched the official Debian package with
> >   modsecurity-nginx module, master, sha1: 3de175)
> > - owasp-modsecutiy-crs 3.0, v3.0/master, sha1: d1692b
> >
> > I'm using the Nginx as frontend proxy for my Apache webservers,
> > which runs in containers (LXC). The patched nginx and another
> > components are works as well. I could run few basic checks, and I
> > could demonstrate the advantages of WAF to my collegues. But
> > there were only two basic attack, what I could show them: XSS and
> > SQL injection.
> >
> > My 2 cents question is: how can I demonstrate another features? I
> > meant, it could be show the session fixating: I put a simple PHP
> > script to a webroot, load the page in a browser. I found the
> > PHPSESSID cookie, and then I tried to load the page in another
> > browser (on another host) - but there didn't happened anything...
> > the page had been loaded as well with the hijacked session.
> >
> > What did I miss, or how can I show this feature?
> >
> > In general way, how can I show the all features of Modsecurity,
> > and OWASP CRS?
> >
> >
> > Thank you,
> >
> >
> > Ervin
> >
> >
> > --
> > I ? UTF-8
> > _______________________________________________
> > Owasp-modsecurity-core-rule-set mailing list
> > Owasp-modsecurity-core-rule-set at lists.owasp.org
> > https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set
> >

-- 
I ? UTF-8

From edg at greenberg.org  Fri Apr 21 12:11:27 2017
From: edg at greenberg.org (Ed Greenberg)
Date: Fri, 21 Apr 2017 08:11:27 -0400
Subject: [Owasp-modsecurity-core-rule-set] Is this the right place for
 questions about the rules, or is this mostly for developers?
Message-ID: <345aac18-b547-3a54-f0ed-cf95755f9ac4@greenberg.org>

If this is not the right place for me to ask about rule violations, and 
false positives and such, can somebody point me to a better forum?


Thanks,

Ed Greenberg



From christian.folini at netnea.com  Fri Apr 21 12:18:09 2017
From: christian.folini at netnea.com (Christian Folini)
Date: Fri, 21 Apr 2017 14:18:09 +0200
Subject: [Owasp-modsecurity-core-rule-set] Is this the right place for
 questions about the rules, or is this mostly for developers?
In-Reply-To: <345aac18-b547-3a54-f0ed-cf95755f9ac4@greenberg.org>
References: <345aac18-b547-3a54-f0ed-cf95755f9ac4@greenberg.org>
Message-ID: <20170421121809.wz7yow4naiwx3rdd@leander>

Hi Ed,

This is totally the right place. Just speak up!

Cheers,

Christian


On Fri, Apr 21, 2017 at 08:11:27AM -0400, Ed Greenberg wrote:
> If this is not the right place for me to ask about rule violations, and
> false positives and such, can somebody point me to a better forum?
> 
> 
> Thanks,
> 
> Ed Greenberg
> 
> 
> _______________________________________________
> Owasp-modsecurity-core-rule-set mailing list
> Owasp-modsecurity-core-rule-set at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-modsecurity-core-rule-set

-- 
https://www.feistyduck.com/training/modsecurity-training-course
mailto:christian.folini at netnea.com
twitter: @ChrFolini

From arthurjohnston at verizon.net  Sat Apr 22 16:42:42 2017
From: arthurjohnston at verizon.net (Arthur E. Johnston)
Date: Sat, 22 Apr 2017 09:42:42 -0700
Subject: [Owasp-modsecurity-core-rule-set] Modsecurity CRS for. Joomla! ??
Message-ID: <EEA98D1F-EE6E-48C7-B9C0-D1BD6531EE4E@verizon.net>

Does a CRS ver.3.0 exist for Joomla!

The only version currently available for Joomla! is 2.9 and that is very outdated/not usable with current versions. 

Thank you in advance. 

Arthur Johnston

Sent from my iPhone.  Please excuse
The typos.



From christian.folini at netnea.com  Sun Apr 23 04:50:28 2017
From: christian.folini at netnea.com (Christian Folini)
Date: Sun, 23 Apr 2017 06:50:28 +0200
Subject: [Owasp-modsecurity-core-rule-set] Modsecurity CRS for. Joomla!
	??
In-Reply-To: <EEA98D1F-EE6E-48C7-B9C0-D1BD6531EE4E@verizon.net>
References: <EEA98D1F-EE6E-48C7-B9C0-D1BD6531EE4E@verizon.net>
Message-ID: <20170423045028.glbrdrc6xepqfxsi@leander>

Arthur,

On Sat, Apr 22, 2017 at 09:42:42AM -0700, Arthur E. Johnston wrote:
> Does a CRS ver.3.0 exist for Joomla!
> 
> The only version currently available for Joomla! is 2.9 and that is very outdated/not usable with current versions. 

Honestly, I do not really understand what you are trying to express.

CRS version jumped from 2.2.9 to 3.0.

We do not build versions specific for certain applications (but we started
to include rule exclusion packs to go with certain applications.
Joomla is not on the list, though).

Are you possibly talking about the commercial Trustwave rules?

Ahoj,

Christian


-- 
Freedom is the freedom to say that two plus two make four. If that
is granted, all else follows.
--- George Orwell in Nineteen Eighty-Four

From christian.folini at netnea.com  Sat Apr 29 04:41:47 2017
From: christian.folini at netnea.com (Christian Folini)
Date: Sat, 29 Apr 2017 06:41:47 +0200
Subject: [Owasp-modsecurity-core-rule-set] Up next Monday: CRS chat
Message-ID: <20170429044147.lif2l33d6chp3xgb@leander>

Hi there,

Next Monday, May 1, we'll do our regular Core Rule Set project chat.
20:30 CET (14:30 EDT, 18:30 GMT)
on Freenode IRC, channel #modsecurity

The topics will be the last preparations for the upcoming CRS 3.0.1 
which is almost done now, then better support for Travis testing,
the possibility of a regular CRS blog and two or three additional
things. If you have anything else to talk about, then please bring it
along. New faces welcome.

Cheers,

Christian

--
https://www.feistyduck.com/training/modsecurity-training-course
mailto:christian.folini at netnea.com
twitter: @ChrFolini

