From dominique.righetto at owasp.org  Thu Nov  8 05:33:00 2018
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Thu, 8 Nov 2018 06:33:00 +0100
Subject: [OWASP-cheat-sheets] Application Threat Modeling Cheatsheet
In-Reply-To: <CAPNaUNuweE0jPhEG9oatk=uGBBOo-9TTNFNKp6wkLUS53GBaNg@mail.gmail.com>
References: <CAPNaUNsse7bCp-201W8DZabDSpGJSma=etZUbMMzUAcstWC1jw@mail.gmail.com>
	<c8e74a53-447e-65a1-d5b2-cc2ce3932623@owasp.org>
	<CAHPWRQhSmpSsJ732Y-C6hyTqcZzRCaZsm8LLexpSkLZfCVY2nA@mail.gmail.com>
	<CAPNaUNt8iqiJbS2akDmm55asfd0Zu4i65-MsO7OV9eME=6=f6Q@mail.gmail.com>
	<CAHPWRQiaHxQ5zofA6o3kRQDWMHN+zgu58gswd_a_iqW_7=cCdw@mail.gmail.com>
	<CAPNaUNu+36gjv2-Lom3pbfYM_ssoLzhm-ZUevV7GJmyAuP9uyQ@mail.gmail.com>
	<94a5da90-f4c5-4fca-b1dc-c8b494e0fb9a@owasp.org>
	<CAPNaUNs=iuLsJw7DxhJ+ZqEBV4+w9yyLBqdq13D8WMHsOnKb3w@mail.gmail.com>
	<CAPNaUNu5gfEfTbcPR3SG13aOtPdnA3_UhkachOMjRvTa6nQ5Lg@mail.gmail.com>
	<1b7b5632-f365-919c-4a27-e79e828e1e43@owasp.org>
	<CAPNaUNthkBWge1_XKt1m=F86d8ykcV6YbkL9tg4bBwGP7gtc6Q@mail.gmail.com>
	<0382ed9e-fe1f-b9c3-bbf7-ac6ba399097a@owasp.org>
	<CAPNaUNuweE0jPhEG9oatk=uGBBOo-9TTNFNKp6wkLUS53GBaNg@mail.gmail.com>
Message-ID: <CANos97dPahNH4NMZP8xms8F2Udq=Xgpp4gxSxCY2OOjRTgoR5Q@mail.gmail.com>

Hi Mohamed,

I think also that it is a good idea to publish it as a draft on the CS
project section.

You can update the content of the current dedicated CS with this content
unless Jim disagree...

Thanks for your contribution.

--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com
<dominique.righetto at gmail.com>dominique.righetto at owasp.org
<dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Thu, Nov 8, 2018 at 6:29 AM Mohamed Alfateh <mohamed.alfateh at owasp.org>
wrote:

> Hi Jim,
>
> Actually, once you requested some one to work on this cheat sheet, you
> linked us with Shruti Kulkarni. Then we started reviewing it with Tony UV
> till we have the current version.
>
> Is it possible to publish it on OWASP portal as a draft so we can ask the
> community to review and get comments on it ? Would you recommend some one
> else to review it?
>
> Regards
> Fateh
>
> On Thu, Nov 8, 2018 at 12:01 AM Jim Manico <jim.manico at owasp.org> wrote:
>
>> I am not an expert in Threat Modeling. Can we get other OWASP folks who
>> are threat modeling experts to review this?
>>
>> - Jim
>>
>> On 11/4/18 11:21 AM, Mohamed Alfateh wrote:
>>
>> Hi Jim,
>> This is a soft reminder :)
>>
>> On Fri, Oct 19, 2018 at 7:51 AM Jim Manico <jim.manico at owasp.org> wrote:
>>
>>> I am very busy over the next week. A little overwhelmed and short on
>>> time. Can you ask me again next week? I'm sorry folks. It's been a rough
>>> week....
>>>
>>> Aloha, Jim
>>>
>>>
>>>
>>> On 10/18/18 8:51 AM, Mohamed Alfateh wrote:
>>>
>>> Hi Jim,
>>>
>>> Please let me know if you received my below email, and if you have any
>>> comments or feedback to share with us.
>>>
>>> Regards
>>> Fateh
>>>
>>> On Sun, Sep 30, 2018 at 6:54 PM Mohamed Alfateh <
>>> mohamed.alfateh at owasp.org> wrote:
>>>
>>>> Hello Jim,
>>>>
>>>> Please find attached the final version of the cheat sheet.
>>>>
>>>> Regards
>>>> Fateh
>>>>
>>>> On Sat, Sep 1, 2018 at 3:45 PM Jim Manico <jim.manico at owasp.org> wrote:
>>>>
>>>>> I'm very grateful to see progress here. Thanks all!
>>>>>
>>>>> Aloha, Jim
>>>>>
>>>>> On 9/1/18 7:26 AM, Mohamed Alfateh wrote:
>>>>>
>>>>> Thank you Tony,
>>>>> I?ll work with Kanoma to update the final version.
>>>>>
>>>>> Regards
>>>>> Fateh
>>>>>
>>>>> On Sun, Jul 29, 2018 at 6:20 AM Tony UV <tonyuv at owasp.org> wrote:
>>>>>
>>>>>> Hi Fateh and Ahmed,
>>>>>>
>>>>>> Sorry again for the delay.  Never enough time. Below inline and
>>>>>> highlighted are my thoughts and feedback.
>>>>>>
>>>>>> Tony UV
>>>>>>
>>>>>> On Sun, May 13, 2018 at 7:48 AM, Mohamed Alfateh <
>>>>>> mohamed.alfateh at owasp.org> wrote:
>>>>>>
>>>>>>> Hi Tony,
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>> Sorry for the delay, a lot of business travels and then
>>>>>>> family time during vacations.
>>>>>>>
>>>>>>> We have updated the cheat sheet, please check the attached file and
>>>>>>> let us know if you will have any feedback,
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>> Also please find my comments for your feedback inline below:
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>>    - I reviewed the other cheat sheets that have been released as
>>>>>>>    final or release candidate ready and I think that this cheat cheat is a bit
>>>>>>>    less instructional and to the point as the others.  I would suggest that
>>>>>>>    you simply provide prescriptive measures that are poignant for the activity
>>>>>>>    that you are covering (i.e. - identify application components, define trust
>>>>>>>    boundaries, etc.)
>>>>>>>
>>>>>>> We have edited the cheat sheet to be more instructional. However, we
>>>>>>> just noticed that not all CS are written in the same way, here are number
>>>>>>> of CSs that you can check out: Yes, agreed that there are different
>>>>>>> formats and I feel that the best are both the online and offline content
>>>>>>> where a downloadable copy for deskside references would be successful, much
>>>>>>> like a lot of the other nice, polished downloadable content that OWASP
>>>>>>> provides.
>>>>>>>
>>>>>>> 1-
>>>>>>> https://www.owasp.org/index.php/Attack_Surface_Analysis_Cheat_Sheet
>>>>>>>
>>>>>>>
>>>>>>> 2- https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series
>>>>>>>
>>>>>>> 3- https://www.owasp.org/images/9/9a/OWASP_Cheatsheets_Book.pdf
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>>    - The other sheets also seem to be divided into different
>>>>>>>    categories such as Developer/ Builder - Assessment/ Breaker, etc. I think
>>>>>>>    that this is pretty useful since the approach selected would be slightly
>>>>>>>    different per user of the process.  I wouldn't let prior sheets
>>>>>>>    guide you for how you organize a threat modeling cheat sheet b/c the
>>>>>>>    reality is that application threat modeling can be used for all roles.  As
>>>>>>>    a builder, during the design phase for earlier application security
>>>>>>>    adoption.  As a breaker for knowing where to spending your time in breaking
>>>>>>>    best, particularly if you a risk centric approach like PASTA - instead of
>>>>>>>    boiling the ocean for POC exploits, focus on exploits or attack patterns
>>>>>>>    that support a threat model that is more realistic and most impacting.
>>>>>>>    For example, threat modeling for the developer or architect will be useful
>>>>>>>    for them to think about where to build security in while the assessor or
>>>>>>>    breaker will be on how to pen test better for areas of greater threat
>>>>>>>    likelihood, business impact, etc.  I also think that within the developer
>>>>>>>    track, the threat modeling cheat sheet guidance should be different for new
>>>>>>>    apps vs. existing apps.  Some of the steps or cheat sheet items simply
>>>>>>>    wouldn't apply and my understanding is that many consumers of OWASP cheat
>>>>>>>    sheet series are looking for prescriptive guidance that they can even take
>>>>>>>    as a checklist to doing that respective cheat sheet guidance.  Prescriptive
>>>>>>>    guidance is key but will vary all depending on when do you want to apply
>>>>>>>    it, depending on the approach.  You can build controls or countermeasures
>>>>>>>    solely on the basis of use cases and the attack surface makeup of IT assets
>>>>>>>    (COTS, 3rd party libs, frameworks) and mapping to hardening guidelines but
>>>>>>>    devoid of threat context and then you can do the inverse but that would be
>>>>>>>    after correlating threats and demonstrating attack patterns that are viable
>>>>>>>    via POC attacks.
>>>>>>>
>>>>>>> We have added an intro to the cheat sheet to clarify the audience of
>>>>>>> this cheat sheet. We have divided the sheet to target both Architects and
>>>>>>> Assessors. I would take out Assessors or define what you mean by
>>>>>>> Assessors?  If they are the security champion or threat modeling SME, I
>>>>>>> would define what this means b/c some may take it as simply a security
>>>>>>> assessor which may very well be 1 shade of grey from an auditor,
>>>>>>> which they don't possess the security rationale and dynamic thinking needed
>>>>>>> in order to conduct effective threat models, since their profession is very
>>>>>>> binary in nature.  The cheat sheet can work for both existing apps
>>>>>>> and new apps and we have emphasized that. I think that is a good
>>>>>>> and distinctive quality that is important to have.  For developers;
>>>>>>> I think they may not be in charge of building the TM document,
>>>>>>> they may be responsible to implement the recommended/missing controls
>>>>>>> resulted from the TM. Please advise if they should be part of
>>>>>>> Threat modeling activity?
>>>>>>>
>>>>>>>
>>>>>>>    - Section 1.4 is confusing.  Many of the views and described
>>>>>>>    activities don't correlate and some of them sound like they overlap based
>>>>>>>    upon their own descriptions.  I think you have a good basis but check out
>>>>>>>    1.4.1. and 1.4.5 - both reference use cases so you run the risk of
>>>>>>>    confusing the reader or simply the reader picking one of those and always
>>>>>>>    ignoring the other.  Design considerations revolve around use cases so they
>>>>>>>    both reference some of that. Also, 1.4.4 may be out of scope to most OWASP
>>>>>>>    audience members since its a body of developers and architects.  Not saying
>>>>>>>    its not useful. but with threat modeling, there is a lot of content and
>>>>>>>    just thinking about making something that is pretty lean for consumption
>>>>>>>    and use for different roles.  On top of that you have the approach.
>>>>>>>
>>>>>>> First, section 1.4 is now section 2.2. Reference to 4+1 view model
>>>>>>> of architecture:
>>>>>>> http://ieeexplore.ieee.org/abstract/document/469759/?reload=true
>>>>>>>
>>>>>>> MS DLS and Cigital Toutpoints methodologies noted that the TM should
>>>>>>> be done in the design phase, and as per our experiences with the market,
>>>>>>> the more detailed design we have the more comprehensive threat model we
>>>>>>> can generate, that's why it is better to understand all details about the
>>>>>>> design. We have also highlighted that the CS reader
>>>>>>> can choose another design model. Agreed, don't know where we
>>>>>>> disagree here previously but commenting anyway.
>>>>>>>
>>>>>>>
>>>>>>>    - Speaking of approach, there are things that are missing if
>>>>>>>    this is to be a risk centric approach.  BTW, don't know if you heard of
>>>>>>>    PASTA, but its a risk centric approach that I co-authored with Marco Morana
>>>>>>>    from OWASP.  Its being taught a various universities and has been
>>>>>>>    implemented at various global organizations.  I can simply build an
>>>>>>>    infographic around PASTA and give it to OWASP but interested in @Jim
>>>>>>>    Manico's thoughts on this.
>>>>>>>
>>>>>>> We have reviewed PASTA approach, it looks very comprehensive,  my
>>>>>>> recommendations (away from this CS) is to develop complete use cases
>>>>>>> (similar to the ones you presented in the OWASP last year).
>>>>>>> one suggestion is to open a new OWASP project that perform TM for
>>>>>>> Webgoat application and keep it public, I believe we can find
>>>>>>> many volunteers interested to join this.  Agreed.  I think a OWASP
>>>>>>> flavor, while still citing others would be most applicable. That and
>>>>>>> besides, most tech people don't care about risk perspectives but rather
>>>>>>> improved, resilient and high integrity application features.
>>>>>>>
>>>>>>>
>>>>>>> In general, I think we cover many of the introduced activities in
>>>>>>> each stage, I have added section in the preparation phase regarding the
>>>>>>> identification for business objectives and compliance requirements,
>>>>>>> also added a reference for PASTA in the risk analysis in section 5.
>>>>>>>
>>>>>>> Please note that we are not introducing a new risk analysis
>>>>>>> methodology here, the provided approach is based on collection of
>>>>>>> information from different OWASP resources, AppSec talks, Books
>>>>>>> and presentations, we tried to make it generic as much as we can and
>>>>>>> provide sample of approaches, so the reader can understand the steps and
>>>>>>> follow the provided approach or any other ones.
>>>>>>>
>>>>>>>    - Before you diagram info flows, you have to enumerate your app
>>>>>>>    components, so that is missing under 5 or move 5.2 prior to identifying
>>>>>>>    flows.
>>>>>>>
>>>>>>> 5.2 is 3.1 and it has been move above.
>>>>>>>
>>>>>> This section is moved to section 2. We have added the objective for
>>>>>>> that section in the beginning of the section 3.
>>>>>>>
>>>>>>>
>>>>>>>    - for 5.1.2, its MVC, not MCV.  Common references in frameworks
>>>>>>>    is MVC.
>>>>>>>
>>>>>>> It has been corrected
>>>>>>>
>>>>>>>    - I suggest renaming 6.5 mapping abuse cases to use cases since
>>>>>>>    use cases have been previously identified
>>>>>>>
>>>>>>> It has been edited
>>>>>>>
>>>>>>>    - 6.1 perverses the use of the word threat to include the list
>>>>>>>    of what I presume are threat libraries.  None of those are threat libraries
>>>>>>>    and the problem today is that security practioners are using the inverse of
>>>>>>>    a lot of that in order to represent a threat library.  Also, many of those
>>>>>>>    lists, like the OWASP Top 10 aren't even backed by data to support that
>>>>>>>    they are the top 10 risks. Since the top ten are risks and not threats, not
>>>>>>>    a good reference as a threat lib. Nor the SANS top 25
>>>>>>>
>>>>>>> Totally agree, what we mean here is to use those references to
>>>>>>> figure out the threats from the list of risks or threat libraries, we have
>>>>>>> edited this section to reflect that.
>>>>>>>
>>>>>>>    - 6.3 should be a subset of 6.1
>>>>>>>
>>>>>>> Done
>>>>>>>
>>>>>>>    - Don't understand the need for 6.6.
>>>>>>>
>>>>>>> To make it clear, We have added the following to the cheat sheet:
>>>>>>>
>>>>>>> In most cases after defining the attack vectors, the compromised
>>>>>>> user role could lead to further attacks into the application. For
>>>>>>> example, assuming that an internet banking user credentials could be
>>>>>>> compromised, the user of this cheat sheet has to then redefine the attack
>>>>>>> vectors that could result from compromising the user?s credentials and so
>>>>>>> on.
>>>>>>>
>>>>>>>    - in PASTA, impact is addressed earlier b/c the audience that
>>>>>>>    knows impact knows the consdequences of product or use case failures more
>>>>>>>    than participants in the threat analysis phase.  Biased obviously but think
>>>>>>>    the PASTA steps are more condusive for collaboration amongst a diverse
>>>>>>>    group of people that may have knowledge of different parts of a threat
>>>>>>>    model and the variables of a risk formula.
>>>>>>>
>>>>>>> PASTA is great to integrate the application threat modeling within
>>>>>>> the risk management process, but we have to consider that even the
>>>>>>> methodologies for IT risk analysis may not address the impact early on in the
>>>>>>> analysis phase. To cover this new approach, we have added a section
>>>>>>> in the preparation phase, this will help the readers select whatever
>>>>>>> approach they will use.  PASTA is intended to integrate during an
>>>>>>> S-SDLC suite of phase for a new application or as part of a security review
>>>>>>> for an existing application.  I don't believe in application security risk
>>>>>>> assessments anymore (as those that may be conducted by the likes of ISACA
>>>>>>> types) b/c they are very binary and leverage a control framework
>>>>>>> basis for denoting risks versus contextually looking at threats, impacts,
>>>>>>> probability, effectiveness of countermeasures that may be present.
>>>>>>> R=(T*V*P*I)/Countermeasures
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>> Regards
>>>>>>>
>>>>>>> Fateh
>>>>>>>
>>>>>>
>>>>>>>
>>>>>>> On Thu, Aug 31, 2017 at 1:15 AM, Tony UV <tonyuv at owasp.org> wrote:
>>>>>>>
>>>>>>>> Hi Mohamed,
>>>>>>>>
>>>>>>>> Sorry again for the delay.
>>>>>>>>
>>>>>>>> I read the cheat sheet and below are my points and suggestions.
>>>>>>>> Happy to hop on a hangouts to chat around some of the below mentioned.
>>>>>>>>
>>>>>>>>
>>>>>>>>    - I reviewed the other cheat sheets that have been released as
>>>>>>>>    final or release candidate ready and I think that this cheat cheat is a bit
>>>>>>>>    less instructional and to the point as the others.  I would suggest that
>>>>>>>>    you simply provide prescriptive measures that are poignant for the activity
>>>>>>>>    that you are covering (i.e. - identify application components, define trust
>>>>>>>>    boundaries, etc.)
>>>>>>>>    - The other sheets also seem to be divided into different
>>>>>>>>    categories such as Developer/ Builder - Assessment/ Breaker, etc. I think
>>>>>>>>    that this is pretty useful since the approach selected would be slightly
>>>>>>>>    different per user of the process.  For example, threat modeling for the
>>>>>>>>    developer or architect will be useful for them to think about where to
>>>>>>>>    build security in while the assessor or breaker will be on how to pen test
>>>>>>>>    better for areas of greater threat likelihood, business impact, etc.  I
>>>>>>>>    also think that within the developer track, the threat modeling cheat sheet
>>>>>>>>    guidance should be different for new apps vs. existing apps.  Some of the
>>>>>>>>    steps or cheat sheet items simply wouldn't apply and my understanding is
>>>>>>>>    that many consumers of OWASP cheat sheet series are looking for
>>>>>>>>    prescriptive guidance that they can even take as a checklist to doing that
>>>>>>>>    respective cheat sheet guidance.
>>>>>>>>    - Section 1.4 is confusing.  Many of the views and described
>>>>>>>>    activities don't correlate and some of them sound like they overlap based
>>>>>>>>    upon their own descriptoins.  I think you have a good basis but check out
>>>>>>>>    1.4.1. and 1.4.5 - both reference use cases so you run the risk of
>>>>>>>>    confusing the reader or simply the reader picking one of those and always
>>>>>>>>    ignoring the other.  Design considerations revolve around use cases so they
>>>>>>>>    both reference some of that. Also, 1.4.4 may be out of scope to most OWASP
>>>>>>>>    audience members since its a body of developers and architects.  Not saying
>>>>>>>>    its not useful. but with threat modeling, there is a lot of content and
>>>>>>>>    just thinking about making something that is pretty lean for consumption
>>>>>>>>    and use for different roles.  On top of that you have the approach.
>>>>>>>>    - Speaking of approach, there are things that are missing if
>>>>>>>>    this is to be a risk centric approach.  BTW, don't know if you heard of
>>>>>>>>    PASTA, but its a risk centric approach that I co-authored with Marco Morana
>>>>>>>>    from OWASP.  Its being taught a various universities and has been
>>>>>>>>    implemented at various global organizations.  I can simply build an
>>>>>>>>    infographic around PASTA and give it to OWASP but interested in @Jim
>>>>>>>>    Manico's thoughts on this.
>>>>>>>>    - Before you diagram info flows, you have to enumerate your app
>>>>>>>>    components, so that is missing under 5 or move 5.2 prior to identifying
>>>>>>>>    flows.
>>>>>>>>    - for 5.1.2, its MVC, not MCV.  Common references in frameworks
>>>>>>>>    is MVC.
>>>>>>>>    - I suggest renaming 6.5 mapping abuse cases to use cases since
>>>>>>>>    use cases have been previously identified
>>>>>>>>    - 6.1 perverses the use of the word threat to include the list
>>>>>>>>    of what I presume are threat libraries.  None of those are threat libraries
>>>>>>>>    and the problem today is that security practioners are using the inverse of
>>>>>>>>    a lot of that in order to represent a threat library.  Also, many of those
>>>>>>>>    lists, like the OWASP Top 10 aren't even backed by data to support that
>>>>>>>>    they are the top 10 risks. Since the top ten are risks and not threats, not
>>>>>>>>    a good reference as a threat lib. Nor the SANS top 25
>>>>>>>>    - 6.3 should be a subset of 6.1
>>>>>>>>    - Don't understand the need for 6.6.
>>>>>>>>    - in PASTA, impact is addressed earlier b/c the audience that
>>>>>>>>    knows impact knows the consdequences of product or use case failures more
>>>>>>>>    than participants in the threat analysis phase.  Biased obviously but think
>>>>>>>>    the PASTA steps are more condusive for collaboration amongst a diverse
>>>>>>>>    group of people that may have knowledge of different parts of a threat
>>>>>>>>    model and the variables of a risk formula.
>>>>>>>>
>>>>>>>>
>>>>>>>>
>>>>>>>> Happy to jump on a hangout to speak further on the above mentioned.
>>>>>>>>
>>>>>>>> On Thu, Jul 20, 2017 at 3:53 PM, Jim Manico <jim.manico at owasp.org>
>>>>>>>> wrote:
>>>>>>>>
>>>>>>>>> Tony,
>>>>>>>>>
>>>>>>>>> Fateh would like to add the following threat modeling cheatsheet
>>>>>>>>> to the OWASP project.
>>>>>>>>>
>>>>>>>>> Can you take a quick look?
>>>>>>>>>
>>>>>>>>> Aloha, Jim
>>>>>>>>>
>>>>>>>>>
>>>>>>>>> -------- Forwarded Message --------
>>>>>>>>> Subject: Application Threat Modeling Cheatsheet
>>>>>>>>> Date: Wed, 19 Jul 2017 16:25:23 +0200
>>>>>>>>> From: Mohamed Alfateh <mohamed.alfateh at owasp.org>
>>>>>>>>> <mohamed.alfateh at owasp.org>
>>>>>>>>> To: Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>
>>>>>>>>>
>>>>>>>>> Hi Jim,
>>>>>>>>>
>>>>>>>>> I'm following up for the Application Threat Modeling Cheatsheet
>>>>>>>>> that I worked on before, seems it was not uploaded yet online.
>>>>>>>>>
>>>>>>>>> I have worked with my colleague (Ahmed Kanoma) to come with an
>>>>>>>>> updated version (attached the draft), please let me know if you have any
>>>>>>>>> comments, and what is the required from my side to update the current
>>>>>>>>> online version.
>>>>>>>>>
>>>>>>>>> Regards
>>>>>>>>> Fateh
>>>>>>>>>
>>>>>>>>>
>>>>>>>>
>>>>>>>>
>>>>>>>
>>>>>
>>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181108/127b03b6/attachment-0001.html>

From dominique.righetto at owasp.org  Mon Nov 26 13:03:23 2018
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Mon, 26 Nov 2018 14:03:23 +0100
Subject: [OWASP-cheat-sheets] Add Log Injection Prevention to:
	Injection_Prevention_Cheat_Sheet_in_Java
In-Reply-To: <CAMVdSy7B8WuevoL15rOC-HiZx=3aNNB9xg4DUr-10k1ezJq66g@mail.gmail.com>
References: <CAMVdSy7B8WuevoL15rOC-HiZx=3aNNB9xg4DUr-10k1ezJq66g@mail.gmail.com>
Message-ID: <CANos97fBT7rTtY=iArx6tnb-hz73NX2hE6aNKL5OOgG5KkkVrw@mail.gmail.com>

Hi,

Info has been added:

https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet_in_Java#Log_Injection

--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com
<dominique.righetto at gmail.com>dominique.righetto at owasp.org
<dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Wed, Oct 31, 2018 at 6:01 PM Dave Wichers <dwichers at gmail.com> wrote:

> Hey, I was looking at:
>
> https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet_in_Java
>
> And noticed it does not cover Java log injection. There aren't any good
> articles on this subject really, but I did find this blog post:
>
> https://github.com/javabeanz/owasp-security-logging/wiki/Log-Forging
>
> Could you take the time to add a section on Log Injection prevent and
> reference/include this recommendation, and anything else good you can find
> for the Java world??
>
> Thanks, Dave
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181126/f0eae8c6/attachment.html>

From dominique.righetto at owasp.org  Mon Nov 26 18:44:33 2018
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Mon, 26 Nov 2018 19:44:33 +0100
Subject: [OWASP-cheat-sheets] Add Log Injection Prevention to:
	Injection_Prevention_Cheat_Sheet_in_Java
In-Reply-To: <CANos97dehjC=trrDRqpiW3XPM5VcPZnvTVfPF0HBSiviJjjzNg@mail.gmail.com>
References: <CAMVdSy7B8WuevoL15rOC-HiZx=3aNNB9xg4DUr-10k1ezJq66g@mail.gmail.com>
	<CANos97fBT7rTtY=iArx6tnb-hz73NX2hE6aNKL5OOgG5KkkVrw@mail.gmail.com>
	<CAMVdSy47XWa7Ub9TQDcmnYmK1ZpKhxCY157ouF8tYLzUFjvCLw@mail.gmail.com>
	<CAMVdSy60NEFmr7W7dWOR7Mc2A5snOB=cSaPtnEsR5Xq_XmpqOw@mail.gmail.com>
	<CANos97cL_EH2AvV48yi8isMpjYQV7PrjkuWOejdAxQ83t0uVUQ@mail.gmail.com>
	<CANos97ex=EgX8sX-T5JTEZ-imKVwJ7xyYyAon5iBoL=S_i+gbQ@mail.gmail.com>
	<CAMVdSy5cGnF9D80XUNktYF2=EaPsFD4ZwmTY0tEm4f865LvNJg@mail.gmail.com>
	<CANos97dcuSX84_Hpp9aJ-DsS9jdogawVMzcHcRnn_mctLDEyaw@mail.gmail.com>
	<CAMVdSy7fxovosi767YC-oyKO34_7mR-rjPz9uRUKC05-pYeKQA@mail.gmail.com>
	<CANos97dehjC=trrDRqpiW3XPM5VcPZnvTVfPF0HBSiviJjjzNg@mail.gmail.com>
Message-ID: <CANos97cWETcr=W44mpqPR=EFq9SkT-xbj0pXaJsGxNbDgA2iiw@mail.gmail.com>

Jim, can we consider it ok for a go live?

Le lun. 26 nov. 2018 ? 18:46, Dominique Righetto <
dominique.righetto at owasp.org> a ?crit :

> OK thanks you.
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
> <dominique.righetto at gmail.com>dominique.righetto at owasp.org
> <dominique.righetto at gmail.com>
> https://righettod.eu
> GPG: 323D19BA
>
>
> On Mon, Nov 26, 2018 at 6:42 PM Dave Wichers <dwichers at gmail.com> wrote:
>
>> OK. I tweaked this new content a bit, and removed the under construction
>> label as I don't think its necessary now.
>>
>> On Mon, Nov 26, 2018 at 12:11 PM Dominique Righetto <
>> dominique.righetto at owasp.org> wrote:
>>
>>> i have added the config for logback in a way allowing a "direct" usage
>>> by a dev team and in the same approach than for LOG4JV2.
>>> --
>>> Cordialement, Best regards,
>>> Dominique Righetto
>>> dominique.righetto at gmail.com
>>> <dominique.righetto at gmail.com>dominique.righetto at owasp.org
>>> <dominique.righetto at gmail.com>
>>> https://righettod.eu
>>> GPG: 323D19BA
>>>
>>>
>>> On Mon, Nov 26, 2018 at 5:38 PM Dave Wichers <dwichers at gmail.com> wrote:
>>>
>>>> 'We' are OWASP :-)   So 'We' can say whatever we want. So yes, it is
>>>> now official, unless Jim, August, whomever talks us out of it :-)
>>>>
>>>> Re; Logback, yes, I think repeating their recommendation, and
>>>> referencing their log injection defense page would be a good enhancement to
>>>> this page.
>>>>
>>>> -Dave
>>>>
>>>>
>>>> On Mon, Nov 26, 2018 at 11:24 AM Dominique Righetto <
>>>> dominique.righetto at owasp.org> wrote:
>>>>
>>>>> I have updated the section in the CS to reflect the discussion.
>>>>>
>>>>> About:
>>>>> "OWASP recommends defending against XSS attacks in such situations in
>>>>> the log viewer application itself, not by preencoding all the log messages
>>>>> with HTML encoding as such log entries may be used/viewed in many other log
>>>>> viewing/analysis tools that don't expect the log data to be pre-HTML
>>>>> encoded."
>>>>>
>>>>> There is a official statment about that point?
>>>>>
>>>>> For logack API, I think that for the moment, we can propose the usage
>>>>> of the project "owasp-security-logging" because there not currently a
>>>>> solution on logback side and, as logback is a very used (at least in the
>>>>> project i see), we must propose a solution even if is temporal and more
>>>>> heavy than a upgrade to LOG4J v2.
>>>>>
>>>>> Moreover it help to promote this OWASP project too and help dev team
>>>>> to use a centralized/maintained API...
>>>>>
>>>>> OK on that ?
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> --
>>>>> Cordialement, Best regards,
>>>>> Dominique Righetto
>>>>> dominique.righetto at gmail.com
>>>>> <dominique.righetto at gmail.com>dominique.righetto at owasp.org
>>>>> <dominique.righetto at gmail.com>
>>>>> https://righettod.eu
>>>>> GPG: 323D19BA
>>>>>
>>>>>
>>>>> On Mon, Nov 26, 2018 at 4:56 PM Dominique Righetto <
>>>>> dominique.righetto at owasp.org> wrote:
>>>>>
>>>>>> As discussion are prending, i have added a warning in the section to
>>>>>> indicate the "WORK IN PROGRESS" state.
>>>>>> --
>>>>>> Cordialement, Best regards,
>>>>>> Dominique Righetto
>>>>>> dominique.righetto at gmail.com
>>>>>> <dominique.righetto at gmail.com>dominique.righetto at owasp.org
>>>>>> <dominique.righetto at gmail.com>
>>>>>> https://righettod.eu
>>>>>> GPG: 323D19BA
>>>>>>
>>>>>>
>>>>>> On Mon, Nov 26, 2018 at 4:40 PM Dave Wichers <dwichers at gmail.com>
>>>>>> wrote:
>>>>>>
>>>>>>> I just ran across this:
>>>>>>>
>>>>>>> https://github.com/javabeanz/owasp-security-logging/wiki/Log-Forging
>>>>>>>
>>>>>>> I think their recommendation to use the default enc{} function in
>>>>>>> log4j2 is incorrect, but I'll talk to them about that. Their recommendation
>>>>>>> for Logback is great! (Didn't know that), and I think we should repeat it
>>>>>>> here, and also reference this specific page of the project, rather than the
>>>>>>> overall project itself.
>>>>>>>
>>>>>>> -Dave
>>>>>>>
>>>>>>>
>>>>>>> On Mon, Nov 26, 2018 at 10:19 AM Dave Wichers <dwichers at gmail.com>
>>>>>>> wrote:
>>>>>>>
>>>>>>>> Thanks Dominique!!
>>>>>>>>
>>>>>>>> I made some tweaks and have a question. The major point of my
>>>>>>>> changes is that the {CRLF} encoding scheme MUST be used to prevent log
>>>>>>>> injection as that is the scheme that encoded CRLF chars. The default
>>>>>>>> encoding scheme for the {encode} function is HTML, which is dumb in my
>>>>>>>> opinion. That prevents XSS, but does it by forcing encoding before the data
>>>>>>>> is even sent to a browser, which I think is wrong.
>>>>>>>>
>>>>>>>> I'd also prefer to give people the option to make a simple change,
>>>>>>>> and asking them to pull in the OWASP Secure Logging Project isn't
>>>>>>>> necessarily simple. In fact, I'm not use exactly what the project does to
>>>>>>>> help prevent log injection. I'm not sure the comment: "The OWASP
>>>>>>>> Security Logging Project
>>>>>>>> <https://www.owasp.org/index.php/OWASP_Security_Logging_Project> can
>>>>>>>> be used to protect the application log against *Log Injection* attacks."
>>>>>>>> is actually true.  Can you get Jim to introduce you to August (one of the
>>>>>>>> project leads), to answer that question?  If that project doesn't prevent
>>>>>>>> log injection by default maybe it can be enhanced to do so by using the
>>>>>>>> enc{}{CRLF} function in Log4j2. However, if that project also supports
>>>>>>>> Logback or other loggers, then it might have to use (or provide) different
>>>>>>>> mechanisms to prevent Log injection using those frameworks.
>>>>>>>>
>>>>>>>> If anyone is aware of any Log Injection defense mechanisms built
>>>>>>>> into Logback that we can leverage, and describe on this page, please let me
>>>>>>>> know, or simply update the article!
>>>>>>>>
>>>>>>>> I pulled out any references to the OWASP Secure Logging Project
>>>>>>>> from the example, as I don't think it is required to implement what is
>>>>>>>> shown there now.
>>>>>>>>
>>>>>>>> Thanks, Dave
>>>>>>>>
>>>>>>>> On Mon, Nov 26, 2018 at 8:03 AM Dominique Righetto <
>>>>>>>> dominique.righetto at owasp.org> wrote:
>>>>>>>>
>>>>>>>>> Hi,
>>>>>>>>>
>>>>>>>>> Info has been added:
>>>>>>>>>
>>>>>>>>>
>>>>>>>>> https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet_in_Java#Log_Injection
>>>>>>>>>
>>>>>>>>> --
>>>>>>>>> Cordialement, Best regards,
>>>>>>>>> Dominique Righetto
>>>>>>>>> dominique.righetto at gmail.com
>>>>>>>>> <dominique.righetto at gmail.com>dominique.righetto at owasp.org
>>>>>>>>> <dominique.righetto at gmail.com>
>>>>>>>>> https://righettod.eu
>>>>>>>>> GPG: 323D19BA
>>>>>>>>>
>>>>>>>>>
>>>>>>>>> On Wed, Oct 31, 2018 at 6:01 PM Dave Wichers <dwichers at gmail.com>
>>>>>>>>> wrote:
>>>>>>>>>
>>>>>>>>>> Hey, I was looking at:
>>>>>>>>>>
>>>>>>>>>>
>>>>>>>>>> https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet_in_Java
>>>>>>>>>>
>>>>>>>>>> And noticed it does not cover Java log injection. There aren't
>>>>>>>>>> any good articles on this subject really, but I did find this blog post:
>>>>>>>>>>
>>>>>>>>>>
>>>>>>>>>> https://github.com/javabeanz/owasp-security-logging/wiki/Log-Forging
>>>>>>>>>>
>>>>>>>>>> Could you take the time to add a section on Log Injection prevent
>>>>>>>>>> and reference/include this recommendation, and anything else good you can
>>>>>>>>>> find for the Java world??
>>>>>>>>>>
>>>>>>>>>> Thanks, Dave
>>>>>>>>>>
>>>>>>>>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181126/d93d4b87/attachment-0001.html>

From jim.manico at owasp.org  Tue Nov 27 12:56:20 2018
From: jim.manico at owasp.org (Jim Manico)
Date: Tue, 27 Nov 2018 18:26:20 +0530
Subject: [OWASP-cheat-sheets] Add Log Injection Prevention to:
 Injection_Prevention_Cheat_Sheet_in_Java
In-Reply-To: <CANos97cWETcr=W44mpqPR=EFq9SkT-xbj0pXaJsGxNbDgA2iiw@mail.gmail.com>
References: <CAMVdSy7B8WuevoL15rOC-HiZx=3aNNB9xg4DUr-10k1ezJq66g@mail.gmail.com>
	<CANos97fBT7rTtY=iArx6tnb-hz73NX2hE6aNKL5OOgG5KkkVrw@mail.gmail.com>
	<CAMVdSy47XWa7Ub9TQDcmnYmK1ZpKhxCY157ouF8tYLzUFjvCLw@mail.gmail.com>
	<CAMVdSy60NEFmr7W7dWOR7Mc2A5snOB=cSaPtnEsR5Xq_XmpqOw@mail.gmail.com>
	<CANos97cL_EH2AvV48yi8isMpjYQV7PrjkuWOejdAxQ83t0uVUQ@mail.gmail.com>
	<CANos97ex=EgX8sX-T5JTEZ-imKVwJ7xyYyAon5iBoL=S_i+gbQ@mail.gmail.com>
	<CAMVdSy5cGnF9D80XUNktYF2=EaPsFD4ZwmTY0tEm4f865LvNJg@mail.gmail.com>
	<CANos97dcuSX84_Hpp9aJ-DsS9jdogawVMzcHcRnn_mctLDEyaw@mail.gmail.com>
	<CAMVdSy7fxovosi767YC-oyKO34_7mR-rjPz9uRUKC05-pYeKQA@mail.gmail.com>
	<CANos97dehjC=trrDRqpiW3XPM5VcPZnvTVfPF0HBSiviJjjzNg@mail.gmail.com>
	<CANos97cWETcr=W44mpqPR=EFq9SkT-xbj0pXaJsGxNbDgA2iiw@mail.gmail.com>
Message-ID: <d3dfca39-aa06-0bef-390d-9c605cb01a91@owasp.org>

I think we're good to go live. Nice work folks.

?- Jim

On 11/27/18 12:14 AM, Dominique Righetto wrote:
> Jim, can we consider it ok for a go live?
>
> Le lun. 26 nov. 2018 ? 18:46, Dominique Righetto
> <dominique.righetto at owasp.org <mailto:dominique.righetto at owasp.org>> a
> ?crit?:
>
>     OK thanks you.
>
>     --
>     Cordialement, Best regards,
>     Dominique Righetto
>     dominique.righetto at gmail.com <mailto:dominique.righetto at gmail.com>
>     <mailto:dominique.righetto at gmail.com>dominique.righetto at owasp.org
>     <mailto:dominique.righetto at gmail.com>
>     https://righettod.eu
>     GPG: 323D19BA
>
>
>     On Mon, Nov 26, 2018 at 6:42 PM Dave Wichers <dwichers at gmail.com
>     <mailto:dwichers at gmail.com>> wrote:
>
>         OK. I tweaked this new content a bit, and removed the under
>         construction label as I don't think its necessary now.
>
>         On Mon, Nov 26, 2018 at 12:11 PM Dominique Righetto
>         <dominique.righetto at owasp.org
>         <mailto:dominique.righetto at owasp.org>> wrote:
>
>             i have added the config for logback in a way allowing a
>             "direct" usage by a dev team and in the same approach than
>             for LOG4JV2.
>             --
>             Cordialement, Best regards,
>             Dominique Righetto
>             dominique.righetto at gmail.com
>             <mailto:dominique.righetto at gmail.com>
>             <mailto:dominique.righetto at gmail.com>dominique.righetto at owasp.org
>             <mailto:dominique.righetto at gmail.com>
>             https://righettod.eu
>             GPG: 323D19BA
>
>
>             On Mon, Nov 26, 2018 at 5:38 PM Dave Wichers
>             <dwichers at gmail.com <mailto:dwichers at gmail.com>> wrote:
>
>                 'We' are OWASP :-)? ?So 'We' can say whatever we want.
>                 So yes, it is now official, unless Jim, August,
>                 whomever talks us out of it :-)
>
>                 Re; Logback, yes, I think repeating their
>                 recommendation, and referencing their log injection
>                 defense page would be a good enhancement to this page.
>
>                 -Dave
>
>
>                 On Mon, Nov 26, 2018 at 11:24 AM Dominique Righetto
>                 <dominique.righetto at owasp.org
>                 <mailto:dominique.righetto at owasp.org>> wrote:
>
>                     I have updated the section in the CS to reflect
>                     the discussion.
>
>                     About:
>                     "OWASP recommends defending against XSS attacks in
>                     such situations in the log viewer application
>                     itself, not by preencoding all the log messages
>                     with HTML encoding as such log entries may be
>                     used/viewed in many other log viewing/analysis
>                     tools that don't expect the log data to be
>                     pre-HTML encoded."
>
>                     There is a official statment about that point?
>
>                     For logack API, I think that for the moment, we
>                     can propose the usage of the project
>                     "owasp-security-logging" because there not
>                     currently a solution on logback side and, as
>                     logback is a very used (at least in the project i
>                     see), we must propose a solution even if is
>                     temporal and more heavy than a upgrade to LOG4J v2.
>
>                     Moreover it help to promote this OWASP project too
>                     and help dev team to use a centralized/maintained
>                     API...
>
>                     OK on that ?
>
>
>
>
>                     --
>                     Cordialement, Best regards,
>                     Dominique Righetto
>                     dominique.righetto at gmail.com
>                     <mailto:dominique.righetto at gmail.com>
>                     <mailto:dominique.righetto at gmail.com>dominique.righetto at owasp.org
>                     <mailto:dominique.righetto at gmail.com>
>                     https://righettod.eu
>                     GPG: 323D19BA
>
>
>                     On Mon, Nov 26, 2018 at 4:56 PM Dominique Righetto
>                     <dominique.righetto at owasp.org
>                     <mailto:dominique.righetto at owasp.org>> wrote:
>
>                         As discussion are prending, i have added a
>                         warning in the section to indicate the "WORK
>                         IN PROGRESS" state.
>                         --
>                         Cordialement, Best regards,
>                         Dominique Righetto
>                         dominique.righetto at gmail.com
>                         <mailto:dominique.righetto at gmail.com>
>                         <mailto:dominique.righetto at gmail.com>dominique.righetto at owasp.org
>                         <mailto:dominique.righetto at gmail.com>
>                         https://righettod.eu
>                         GPG: 323D19BA
>
>
>                         On Mon, Nov 26, 2018 at 4:40 PM Dave Wichers
>                         <dwichers at gmail.com
>                         <mailto:dwichers at gmail.com>> wrote:
>
>                             I just ran across this:
>
>                             https://github.com/javabeanz/owasp-security-logging/wiki/Log-Forging
>
>                             I think their recommendation to use the
>                             default enc{} function in log4j2 is
>                             incorrect, but I'll talk to them about
>                             that. Their recommendation for Logback is
>                             great! (Didn't know that), and I think we
>                             should repeat it here, and also reference
>                             this specific page of the project, rather
>                             than the overall project itself.
>
>                             -Dave
>
>
>                             On Mon, Nov 26, 2018 at 10:19 AM Dave
>                             Wichers <dwichers at gmail.com
>                             <mailto:dwichers at gmail.com>> wrote:
>
>                                 Thanks Dominique!!
>
>                                 I made some tweaks and have a
>                                 question. The major point of my
>                                 changes is that the {CRLF} encoding
>                                 scheme MUST be used to prevent log
>                                 injection as that is the scheme that
>                                 encoded CRLF chars. The default
>                                 encoding scheme for the {encode}
>                                 function is HTML, which is dumb in my
>                                 opinion. That prevents XSS, but does
>                                 it by forcing encoding before the data
>                                 is even sent to a browser, which I
>                                 think is wrong.
>
>                                 I'd also prefer to give people the
>                                 option to make a simple change, and
>                                 asking them to pull in the OWASP
>                                 Secure Logging Project isn't
>                                 necessarily simple. In fact, I'm not
>                                 use exactly what the project does to
>                                 help prevent log injection. I'm not
>                                 sure the comment: "The?OWASP Security
>                                 Logging Project
>                                 <https://www.owasp.org/index.php/OWASP_Security_Logging_Project>?can
>                                 be used to protect the application log
>                                 against?/Log Injection/?attacks." is
>                                 actually true.? Can you get Jim to
>                                 introduce you to August (one of the
>                                 project leads), to answer that
>                                 question?? If that project doesn't
>                                 prevent log injection by default maybe
>                                 it can be enhanced to do so by using
>                                 the enc{}{CRLF} function in Log4j2.
>                                 However, if that project also supports
>                                 Logback or other loggers, then it
>                                 might have to use (or provide)
>                                 different mechanisms to prevent Log
>                                 injection using those frameworks.
>
>                                 If anyone is aware of any Log
>                                 Injection defense mechanisms built
>                                 into Logback that we can leverage, and
>                                 describe on this page, please let me
>                                 know, or simply update the article!
>
>                                 I pulled out any references to
>                                 the?OWASP Secure Logging Project from
>                                 the example, as I don't think it is
>                                 required to implement what is shown
>                                 there now.
>
>                                 Thanks, Dave
>
>                                 On Mon, Nov 26, 2018 at 8:03 AM
>                                 Dominique Righetto
>                                 <dominique.righetto at owasp.org
>                                 <mailto:dominique.righetto at owasp.org>>
>                                 wrote:
>
>                                     Hi,
>
>                                     Info has been added:
>
>                                     https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet_in_Java#Log_Injection
>
>                                     --
>                                     Cordialement, Best regards,
>                                     Dominique Righetto
>                                     dominique.righetto at gmail.com
>                                     <mailto:dominique.righetto at gmail.com>
>                                     <mailto:dominique.righetto at gmail.com>dominique.righetto at owasp.org
>                                     <mailto:dominique.righetto at gmail.com>
>                                     https://righettod.eu
>                                     GPG: 323D19BA
>
>
>                                     On Wed, Oct 31, 2018 at 6:01 PM
>                                     Dave Wichers <dwichers at gmail.com
>                                     <mailto:dwichers at gmail.com>> wrote:
>
>                                         Hey, I was looking at:
>
>                                         https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet_in_Java
>
>                                         And noticed it does not cover
>                                         Java log injection. There
>                                         aren't any good articles on
>                                         this subject really, but I did
>                                         find this blog post:
>
>                                         https://github.com/javabeanz/owasp-security-logging/wiki/Log-Forging
>
>                                         Could you take the time to add
>                                         a section on Log Injection
>                                         prevent and reference/include
>                                         this recommendation, and
>                                         anything else good you can
>                                         find for the Java world??
>
>                                         Thanks, Dave
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181127/b410ccd3/attachment-0001.html>

From dominique.righetto at owasp.org  Tue Nov 27 14:28:44 2018
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Tue, 27 Nov 2018 15:28:44 +0100
Subject: [OWASP-cheat-sheets] Add Log Injection Prevention to:
	Injection_Prevention_Cheat_Sheet_in_Java
In-Reply-To: <d3dfca39-aa06-0bef-390d-9c605cb01a91@owasp.org>
References: <CAMVdSy7B8WuevoL15rOC-HiZx=3aNNB9xg4DUr-10k1ezJq66g@mail.gmail.com>
	<CANos97fBT7rTtY=iArx6tnb-hz73NX2hE6aNKL5OOgG5KkkVrw@mail.gmail.com>
	<CAMVdSy47XWa7Ub9TQDcmnYmK1ZpKhxCY157ouF8tYLzUFjvCLw@mail.gmail.com>
	<CAMVdSy60NEFmr7W7dWOR7Mc2A5snOB=cSaPtnEsR5Xq_XmpqOw@mail.gmail.com>
	<CANos97cL_EH2AvV48yi8isMpjYQV7PrjkuWOejdAxQ83t0uVUQ@mail.gmail.com>
	<CANos97ex=EgX8sX-T5JTEZ-imKVwJ7xyYyAon5iBoL=S_i+gbQ@mail.gmail.com>
	<CAMVdSy5cGnF9D80XUNktYF2=EaPsFD4ZwmTY0tEm4f865LvNJg@mail.gmail.com>
	<CANos97dcuSX84_Hpp9aJ-DsS9jdogawVMzcHcRnn_mctLDEyaw@mail.gmail.com>
	<CAMVdSy7fxovosi767YC-oyKO34_7mR-rjPz9uRUKC05-pYeKQA@mail.gmail.com>
	<CANos97dehjC=trrDRqpiW3XPM5VcPZnvTVfPF0HBSiviJjjzNg@mail.gmail.com>
	<CANos97cWETcr=W44mpqPR=EFq9SkT-xbj0pXaJsGxNbDgA2iiw@mail.gmail.com>
	<d3dfca39-aa06-0bef-390d-9c605cb01a91@owasp.org>
Message-ID: <CANos97d57aFGQwTZnjxuz-gvUqZLKBaqypnpMz1nrf+ZE+0DGg@mail.gmail.com>

Ok i will do the rest...

Le mar. 27 nov. 2018 ? 13:56, Jim Manico <jim.manico at owasp.org> a ?crit :

> I think we're good to go live. Nice work folks.
>
>  - Jim
> On 11/27/18 12:14 AM, Dominique Righetto wrote:
>
> Jim, can we consider it ok for a go live?
>
> Le lun. 26 nov. 2018 ? 18:46, Dominique Righetto <
> dominique.righetto at owasp.org> a ?crit :
>
>> OK thanks you.
>>
>> --
>> Cordialement, Best regards,
>> Dominique Righetto
>> dominique.righetto at gmail.com
>> <dominique.righetto at gmail.com>dominique.righetto at owasp.org
>> <dominique.righetto at gmail.com>
>> https://righettod.eu
>> GPG: 323D19BA
>>
>>
>> On Mon, Nov 26, 2018 at 6:42 PM Dave Wichers <dwichers at gmail.com> wrote:
>>
>>> OK. I tweaked this new content a bit, and removed the under construction
>>> label as I don't think its necessary now.
>>>
>>> On Mon, Nov 26, 2018 at 12:11 PM Dominique Righetto <
>>> dominique.righetto at owasp.org> wrote:
>>>
>>>> i have added the config for logback in a way allowing a "direct" usage
>>>> by a dev team and in the same approach than for LOG4JV2.
>>>> --
>>>> Cordialement, Best regards,
>>>> Dominique Righetto
>>>> dominique.righetto at gmail.com
>>>> <dominique.righetto at gmail.com>dominique.righetto at owasp.org
>>>> <dominique.righetto at gmail.com>
>>>> https://righettod.eu
>>>> GPG: 323D19BA
>>>>
>>>>
>>>> On Mon, Nov 26, 2018 at 5:38 PM Dave Wichers <dwichers at gmail.com>
>>>> wrote:
>>>>
>>>>> 'We' are OWASP :-)   So 'We' can say whatever we want. So yes, it is
>>>>> now official, unless Jim, August, whomever talks us out of it :-)
>>>>>
>>>>> Re; Logback, yes, I think repeating their recommendation, and
>>>>> referencing their log injection defense page would be a good enhancement to
>>>>> this page.
>>>>>
>>>>> -Dave
>>>>>
>>>>>
>>>>> On Mon, Nov 26, 2018 at 11:24 AM Dominique Righetto <
>>>>> dominique.righetto at owasp.org> wrote:
>>>>>
>>>>>> I have updated the section in the CS to reflect the discussion.
>>>>>>
>>>>>> About:
>>>>>> "OWASP recommends defending against XSS attacks in such situations in
>>>>>> the log viewer application itself, not by preencoding all the log messages
>>>>>> with HTML encoding as such log entries may be used/viewed in many other log
>>>>>> viewing/analysis tools that don't expect the log data to be pre-HTML
>>>>>> encoded."
>>>>>>
>>>>>> There is a official statment about that point?
>>>>>>
>>>>>> For logack API, I think that for the moment, we can propose the usage
>>>>>> of the project "owasp-security-logging" because there not currently a
>>>>>> solution on logback side and, as logback is a very used (at least in the
>>>>>> project i see), we must propose a solution even if is temporal and more
>>>>>> heavy than a upgrade to LOG4J v2.
>>>>>>
>>>>>> Moreover it help to promote this OWASP project too and help dev team
>>>>>> to use a centralized/maintained API...
>>>>>>
>>>>>> OK on that ?
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>> --
>>>>>> Cordialement, Best regards,
>>>>>> Dominique Righetto
>>>>>> dominique.righetto at gmail.com
>>>>>> <dominique.righetto at gmail.com>dominique.righetto at owasp.org
>>>>>> <dominique.righetto at gmail.com>
>>>>>> https://righettod.eu
>>>>>> GPG: 323D19BA
>>>>>>
>>>>>>
>>>>>> On Mon, Nov 26, 2018 at 4:56 PM Dominique Righetto <
>>>>>> dominique.righetto at owasp.org> wrote:
>>>>>>
>>>>>>> As discussion are prending, i have added a warning in the section to
>>>>>>> indicate the "WORK IN PROGRESS" state.
>>>>>>> --
>>>>>>> Cordialement, Best regards,
>>>>>>> Dominique Righetto
>>>>>>> dominique.righetto at gmail.com
>>>>>>> <dominique.righetto at gmail.com>dominique.righetto at owasp.org
>>>>>>> <dominique.righetto at gmail.com>
>>>>>>> https://righettod.eu
>>>>>>> GPG: 323D19BA
>>>>>>>
>>>>>>>
>>>>>>> On Mon, Nov 26, 2018 at 4:40 PM Dave Wichers <dwichers at gmail.com>
>>>>>>> wrote:
>>>>>>>
>>>>>>>> I just ran across this:
>>>>>>>>
>>>>>>>> https://github.com/javabeanz/owasp-security-logging/wiki/Log-Forging
>>>>>>>>
>>>>>>>> I think their recommendation to use the default enc{} function in
>>>>>>>> log4j2 is incorrect, but I'll talk to them about that. Their recommendation
>>>>>>>> for Logback is great! (Didn't know that), and I think we should repeat it
>>>>>>>> here, and also reference this specific page of the project, rather than the
>>>>>>>> overall project itself.
>>>>>>>>
>>>>>>>> -Dave
>>>>>>>>
>>>>>>>>
>>>>>>>> On Mon, Nov 26, 2018 at 10:19 AM Dave Wichers <dwichers at gmail.com>
>>>>>>>> wrote:
>>>>>>>>
>>>>>>>>> Thanks Dominique!!
>>>>>>>>>
>>>>>>>>> I made some tweaks and have a question. The major point of my
>>>>>>>>> changes is that the {CRLF} encoding scheme MUST be used to prevent log
>>>>>>>>> injection as that is the scheme that encoded CRLF chars. The default
>>>>>>>>> encoding scheme for the {encode} function is HTML, which is dumb in my
>>>>>>>>> opinion. That prevents XSS, but does it by forcing encoding before the data
>>>>>>>>> is even sent to a browser, which I think is wrong.
>>>>>>>>>
>>>>>>>>> I'd also prefer to give people the option to make a simple change,
>>>>>>>>> and asking them to pull in the OWASP Secure Logging Project isn't
>>>>>>>>> necessarily simple. In fact, I'm not use exactly what the project does to
>>>>>>>>> help prevent log injection. I'm not sure the comment: "The OWASP
>>>>>>>>> Security Logging Project
>>>>>>>>> <https://www.owasp.org/index.php/OWASP_Security_Logging_Project> can
>>>>>>>>> be used to protect the application log against *Log Injection* attacks."
>>>>>>>>> is actually true.  Can you get Jim to introduce you to August (one of the
>>>>>>>>> project leads), to answer that question?  If that project doesn't prevent
>>>>>>>>> log injection by default maybe it can be enhanced to do so by using the
>>>>>>>>> enc{}{CRLF} function in Log4j2. However, if that project also supports
>>>>>>>>> Logback or other loggers, then it might have to use (or provide) different
>>>>>>>>> mechanisms to prevent Log injection using those frameworks.
>>>>>>>>>
>>>>>>>>> If anyone is aware of any Log Injection defense mechanisms built
>>>>>>>>> into Logback that we can leverage, and describe on this page, please let me
>>>>>>>>> know, or simply update the article!
>>>>>>>>>
>>>>>>>>> I pulled out any references to the OWASP Secure Logging Project
>>>>>>>>> from the example, as I don't think it is required to implement what is
>>>>>>>>> shown there now.
>>>>>>>>>
>>>>>>>>> Thanks, Dave
>>>>>>>>>
>>>>>>>>> On Mon, Nov 26, 2018 at 8:03 AM Dominique Righetto <
>>>>>>>>> dominique.righetto at owasp.org> wrote:
>>>>>>>>>
>>>>>>>>>> Hi,
>>>>>>>>>>
>>>>>>>>>> Info has been added:
>>>>>>>>>>
>>>>>>>>>>
>>>>>>>>>> https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet_in_Java#Log_Injection
>>>>>>>>>>
>>>>>>>>>> --
>>>>>>>>>> Cordialement, Best regards,
>>>>>>>>>> Dominique Righetto
>>>>>>>>>> dominique.righetto at gmail.com
>>>>>>>>>> <dominique.righetto at gmail.com>dominique.righetto at owasp.org
>>>>>>>>>> <dominique.righetto at gmail.com>
>>>>>>>>>> https://righettod.eu
>>>>>>>>>> GPG: 323D19BA
>>>>>>>>>>
>>>>>>>>>>
>>>>>>>>>> On Wed, Oct 31, 2018 at 6:01 PM Dave Wichers <dwichers at gmail.com>
>>>>>>>>>> wrote:
>>>>>>>>>>
>>>>>>>>>>> Hey, I was looking at:
>>>>>>>>>>>
>>>>>>>>>>>
>>>>>>>>>>> https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet_in_Java
>>>>>>>>>>>
>>>>>>>>>>> And noticed it does not cover Java log injection. There aren't
>>>>>>>>>>> any good articles on this subject really, but I did find this blog post:
>>>>>>>>>>>
>>>>>>>>>>>
>>>>>>>>>>> https://github.com/javabeanz/owasp-security-logging/wiki/Log-Forging
>>>>>>>>>>>
>>>>>>>>>>> Could you take the time to add a section on Log Injection
>>>>>>>>>>> prevent and reference/include this recommendation, and anything else good
>>>>>>>>>>> you can find for the Java world??
>>>>>>>>>>>
>>>>>>>>>>> Thanks, Dave
>>>>>>>>>>>
>>>>>>>>>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181127/413e0158/attachment-0001.html>

