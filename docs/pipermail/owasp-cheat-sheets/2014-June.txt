From torsten.gigler at owasp.org  Tue Jun  3 14:50:04 2014
From: torsten.gigler at owasp.org (Torsten Gigler)
Date: Tue, 3 Jun 2014 16:50:04 +0200
Subject: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet: Strong
 Protocols and Ciphers for TLS/SSL
Message-ID: <CA+M5M1d+Zhxi2K9Wuo47i=p_jJsu=1vd17CHcwa4mEAPtC0tBQ@mail.gmail.com>

Hi,

during the last months, I have done some researches about how to find a
good Protocol and Cipher Policy for TLS/SSL.
The resuls are documented in Top 10 Developer Edition, in German
<https://www.owasp.org/index.php/Germany/Projekte/Top_10_fuer_Entwickler-2013/A6-Verlust_der_Vertraulichkeit_sensibler_Daten#tab=JAVA2>,
yet.

I'd like to discuss them here and add them in the Transport Layer
Protection Cheat Sheet. <http://Transport Layer Protection Cheat Sheet>
Do you have any comments. Should I add my input in a new 'DRAFT:'-Copy of
the document before transfering it to the Cheat Sheet?
Perhaps you find more points that should be updated.

Kind Regards
Torsten


*Only Support Strong Cryptographic Ciphers:*
?

* use the very latest recommendations, they may be volantile these days
* Secure length for cryptographic keys and parameters (like DH-parameter)
>=2048 bits or equivalent Elliptic Curves

Example for a Policy to get a Whitelist for recommenderd Ciphers:
* Activate to set the Cipher Order by the Server
* Highest Priority for Ciphers that support 'Forward Secrecy'
* Favor DHE over ECDHE, ECDHE lacks now of really reliable Elliptic Curves,
cf. http://safecurves.cr.yp.to;
* Use RSA-Keys (no DSA/DSS, cf. https://projectbullrun.org/dual-ec/tls.html)
* Favor GCM over CBC regardless of the cipher size
* Priorize the ciphers by the sizes of the Cipher and the MAC
* Disable weak ciphers without diabling latency browsers and bots that have
to be supported (find the best compromise), actually the cipher
TLS_RSA_WITH_3DES_EDE_CBC_SHA (0xa) does this job.
* Ciphers should be usable for DH-Pamameters >= 2048 bits, without blocking
latency browsers (The cipher ?DHE-RSA-AES128-SHA? is suppressed as some
browsers like to use it but are not capable to cope with DH-Params > 1024
bits.)
* Define a Cipher String that works with different Versions of your encryption
tool, like openssl,
* Verify your cipher string
  ? with an autit-tool, like OWASP 'O-Saft'
<https://www.owasp.org/index.php/O-Saft>
  ? listing it manually with your encryption software, e.g. openssl ciphers
-v <cipher-string> (the result may differ by version), e.g.: openssl
ciphers -v
'EDH+aRSA+AESGCM:EDH+aRSA+AES:DHE-RSA-AES256-SHA:EECDH+aRSA+AESGCM:EECDH+aRSA+AES:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:RSA+AESGCM:RSA+AES+SHA:DES-CBC3-SHA:-DHE-RSA-AES128-SHA'
#add optionally
':!aNULL:!eNULL:!LOW:!MD5:!EXP:!PSK:!DSS:!RC4:!SEED:!ECDSA:!ADH:!IDEA' to
protect older Versions of OpenSSL

* This results in this recommended Cpihers and their Order:

0x00,0x9F - DHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=DH       Au=RSA
Enc=AESGCM(256) Mac=AEAD
0x00,0x9E - DHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=DH       Au=RSA
Enc=AESGCM(128) Mac=AEAD
0x00,0x6B - DHE-RSA-AES256-SHA256   TLSv1.2 Kx=DH       Au=RSA
Enc=AES(256)  Mac=SHA256
0x00,0x39 - DHE-RSA-AES256-SHA      SSLv3 Kx=DH       Au=RSA
Enc=AES(256)  Mac=SHA1
0x00,0x67 - DHE-RSA-AES128-SHA256   TLSv1.2 Kx=DH       Au=RSA
Enc=AES(128)  Mac=SHA256
0xC0,0x30 - ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=RSA
Enc=AESGCM(256) Mac=AEAD
0xC0,0x2F - ECDHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=RSA
Enc=AESGCM(128) Mac=AEAD
0xC0,0x28 - ECDHE-RSA-AES256-SHA384 TLSv1.2 Kx=ECDH     Au=RSA
Enc=AES(256)  Mac=SHA384
0xC0,0x14 - ECDHE-RSA-AES256-SHA    SSLv3 Kx=ECDH     Au=RSA
Enc=AES(256)  Mac=SHA1
0xC0,0x27 - ECDHE-RSA-AES128-SHA256 TLSv1.2 Kx=ECDH     Au=RSA
Enc=AES(128)  Mac=SHA256
0xC0,0x13 - ECDHE-RSA-AES128-SHA    SSLv3 Kx=ECDH     Au=RSA
Enc=AES(128)  Mac=SHA1
0x00,0x9D - AES256-GCM-SHA384       TLSv1.2 Kx=RSA      Au=RSA
Enc=AESGCM(256) Mac=AEAD
0x00,0x9C - AES128-GCM-SHA256       TLSv1.2 Kx=RSA      Au=RSA
Enc=AESGCM(128) Mac=AEAD
0x00,0x35 - AES256-SHA              SSLv3 Kx=RSA      Au=RSA
Enc=AES(256)  Mac=SHA1
0x00,0x2F - AES128-SHA              SSLv3 Kx=RSA      Au=RSA
Enc=AES(128)  Mac=SHA1
0x00,0x0A - DES-CBC3-SHA            SSLv3 Kx=RSA      Au=RSA
Enc=3DES(168) Mac=SHA1

Remarks:
- According to my researches the most common browsers should be
supported with this setting, too.
- Monitor the performance of your server, e.g. the TLS handshake with
DHE hinders the CPU abt 2.4 times than ECDHE (cf. [Vincent Bernat,
2011] <http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html#some-benchmarks>)


*On additional Point:*
I'd like to launch also a discussion if we should find references to good
practices that are not dependant on Documents from NIST.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140603/b7301e29/attachment.html>

From jim.manico at owasp.org  Sat Jun  7 03:46:09 2014
From: jim.manico at owasp.org (Jim Manico)
Date: Fri, 6 Jun 2014 17:46:09 -1000
Subject: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet:
 Strong Protocols and Ciphers for TLS/SSL
In-Reply-To: <CA+M5M1d+Zhxi2K9Wuo47i=p_jJsu=1vd17CHcwa4mEAPtC0tBQ@mail.gmail.com>
References: <CA+M5M1d+Zhxi2K9Wuo47i=p_jJsu=1vd17CHcwa4mEAPtC0tBQ@mail.gmail.com>
Message-ID: <61133c9f643210c08f1e69e4473c9bd2@mail.gmail.com>

Please go ahead and just edit that directly, I trust you ? anything else
you can do to update the TLS Cheatsheet , please go for it!



I?ll review when you are done.



Cool?



Aloha,

Jim



*From:* owasp-cheat-sheets-bounces at lists.owasp.org [mailto:
owasp-cheat-sheets-bounces at lists.owasp.org] *On Behalf Of *Torsten Gigler
*Sent:* Tuesday, June 03, 2014 4:50 AM
*To:* owasp-cheat-sheets at lists.owasp.org
*Subject:* [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet:
Strong Protocols and Ciphers for TLS/SSL



Hi,

during the last months, I have done some researches about how to find a
good Protocol and Cipher Policy for TLS/SSL.

The resuls are documented in Top 10 Developer Edition, in German
<https://www.owasp.org/index.php/Germany/Projekte/Top_10_fuer_Entwickler-2013/A6-Verlust_der_Vertraulichkeit_sensibler_Daten#tab=JAVA2>,
yet.

I'd like to discuss them here and add them in the Transport Layer
Protection Cheat Sheet.
<http://Transport%20Layer%20Protection%20Cheat%20Sheet>

Do you have any comments. Should I add my input in a new 'DRAFT:'-Copy of
the document before transfering it to the Cheat Sheet?

Perhaps you find more points that should be updated.


Kind Regards

Torsten



*Only Support Strong Cryptographic Ciphers:*
?

* use the very latest recommendations, they may be volantile these days
* Secure length for cryptographic keys and parameters (like DH-parameter)
>=2048 bits or equivalent Elliptic Curves

Example for a Policy to get a Whitelist for recommenderd Ciphers:
* Activate to set the Cipher Order by the Server
* Highest Priority for Ciphers that support 'Forward Secrecy'
* Favor DHE over ECDHE, ECDHE lacks now of really reliable Elliptic Curves,
cf. http://safecurves.cr.yp.to;
* Use RSA-Keys (no DSA/DSS, cf. https://projectbullrun.org/dual-ec/tls.html)
* Favor GCM over CBC regardless of the cipher size
* Priorize the ciphers by the sizes of the Cipher and the MAC
* Disable weak ciphers without diabling latency browsers and bots that have
to be supported (find the best compromise), actually the cipher
TLS_RSA_WITH_3DES_EDE_CBC_SHA (0xa) does this job.
* Ciphers should be usable for DH-Pamameters >= 2048 bits, without blocking
latency browsers (The cipher ?DHE-RSA-AES128-SHA? is suppressed as some
browsers like to use it but are not capable to cope with DH-Params > 1024
bits.)

* Define a Cipher String that works with different Versions of your
encryption tool, like openssl,
* Verify your cipher string
  ? with an autit-tool, like OWASP 'O-Saft'
<https://www.owasp.org/index.php/O-Saft>
  ? listing it manually with your encryption software, e.g. openssl ciphers
-v <cipher-string> (the result may differ by version), e.g.: openssl
ciphers -v
'EDH+aRSA+AESGCM:EDH+aRSA+AES:DHE-RSA-AES256-SHA:EECDH+aRSA+AESGCM:EECDH+aRSA+AES:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:RSA+AESGCM:RSA+AES+SHA:DES-CBC3-SHA:-DHE-RSA-AES128-SHA'
#add optionally
':!aNULL:!eNULL:!LOW:!MD5:!EXP:!PSK:!DSS:!RC4:!SEED:!ECDSA:!ADH:!IDEA' to
protect older Versions of OpenSSL

* This results in this recommended Cpihers and their Order:

0x00,0x9F - DHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=DH       Au=RSA
Enc=AESGCM(256) Mac=AEAD

0x00,0x9E - DHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=DH       Au=RSA
Enc=AESGCM(128) Mac=AEAD

0x00,0x6B - DHE-RSA-AES256-SHA256   TLSv1.2 Kx=DH       Au=RSA
Enc=AES(256)  Mac=SHA256

0x00,0x39 - DHE-RSA-AES256-SHA      SSLv3 Kx=DH       Au=RSA
Enc=AES(256)  Mac=SHA1

0x00,0x67 - DHE-RSA-AES128-SHA256   TLSv1.2 Kx=DH       Au=RSA
Enc=AES(128)  Mac=SHA256

0xC0,0x30 - ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=RSA
Enc=AESGCM(256) Mac=AEAD

0xC0,0x2F - ECDHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=RSA
Enc=AESGCM(128) Mac=AEAD

0xC0,0x28 - ECDHE-RSA-AES256-SHA384 TLSv1.2 Kx=ECDH     Au=RSA
Enc=AES(256)  Mac=SHA384

0xC0,0x14 - ECDHE-RSA-AES256-SHA    SSLv3 Kx=ECDH     Au=RSA
Enc=AES(256)  Mac=SHA1

0xC0,0x27 - ECDHE-RSA-AES128-SHA256 TLSv1.2 Kx=ECDH     Au=RSA
Enc=AES(128)  Mac=SHA256

0xC0,0x13 - ECDHE-RSA-AES128-SHA    SSLv3 Kx=ECDH     Au=RSA
Enc=AES(128)  Mac=SHA1

0x00,0x9D - AES256-GCM-SHA384       TLSv1.2 Kx=RSA      Au=RSA
Enc=AESGCM(256) Mac=AEAD

0x00,0x9C - AES128-GCM-SHA256       TLSv1.2 Kx=RSA      Au=RSA
Enc=AESGCM(128) Mac=AEAD

0x00,0x35 - AES256-SHA              SSLv3 Kx=RSA      Au=RSA
Enc=AES(256)  Mac=SHA1

0x00,0x2F - AES128-SHA              SSLv3 Kx=RSA      Au=RSA
Enc=AES(128)  Mac=SHA1

0x00,0x0A - DES-CBC3-SHA            SSLv3 Kx=RSA      Au=RSA
Enc=3DES(168) Mac=SHA1

Remarks:
- According to my researches the most common browsers should be
supported with this setting, too.
- Monitor the performance of your server, e.g. the TLS handshake with
DHE hinders the CPU abt 2.4 times than ECDHE (cf. [Vincent Bernat,
2011] <http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html#some-benchmarks>)


*On additional Point:*
I'd like to launch also a discussion if we should find references to good
practices that are not dependant on Documents from NIST.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140606/ba4e9200/attachment.html>

From d.holmes at f5.com  Sat Jun  7 13:49:54 2014
From: d.holmes at f5.com (David Holmes)
Date: Sat, 7 Jun 2014 13:49:54 +0000
Subject: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet:
 Strong Protocols and Ciphers for TLS/SSL
In-Reply-To: <61133c9f643210c08f1e69e4473c9bd2@mail.gmail.com>
References: <CA+M5M1d+Zhxi2K9Wuo47i=p_jJsu=1vd17CHcwa4mEAPtC0tBQ@mail.gmail.com>
	<61133c9f643210c08f1e69e4473c9bd2@mail.gmail.com>
Message-ID: <859F43324A6FEC448BFEA30C90405FA9050353@SEAEMBX02.olympus.F5Net.com>

Torsten,

Overall, very nice work!

I was a little surprised about the promotion of DHE over ECDHE ciphers. Has the crypto community as a whole already demoted EC ciphers? While some curves have been found to be suboptimal, is that enough to eschew the CPU savings ECDHE is supposed to offer?

From: owasp-cheat-sheets-bounces at lists.owasp.org [mailto:owasp-cheat-sheets-bounces at lists.owasp.org] On Behalf Of Jim Manico
Sent: Friday, June 06, 2014 9:46 PM
To: Torsten Gigler; owasp-cheat-sheets at lists.owasp.org
Subject: Re: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet: Strong Protocols and Ciphers for TLS/SSL

Please go ahead and just edit that directly, I trust you ? anything else you can do to update the TLS Cheatsheet , please go for it!

I?ll review when you are done.

Cool?

Aloha,
Jim

From: owasp-cheat-sheets-bounces at lists.owasp.org<mailto:owasp-cheat-sheets-bounces at lists.owasp.org> [mailto:owasp-cheat-sheets-bounces at lists.owasp.org<mailto:owasp-cheat-sheets-bounces at lists.owasp.org>] On Behalf Of Torsten Gigler
Sent: Tuesday, June 03, 2014 4:50 AM
To: owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet: Strong Protocols and Ciphers for TLS/SSL

Hi,
during the last months, I have done some researches about how to find a good Protocol and Cipher Policy for TLS/SSL.
The resuls are documented in Top 10 Developer Edition, in German<https://www.owasp.org/index.php/Germany/Projekte/Top_10_fuer_Entwickler-2013/A6-Verlust_der_Vertraulichkeit_sensibler_Daten#tab=JAVA2>, yet.
I'd like to discuss them here and add them in the Transport Layer Protection Cheat Sheet.<http://Transport%20Layer%20Protection%20Cheat%20Sheet>
Do you have any comments. Should I add my input in a new 'DRAFT:'-Copy of the document before transfering it to the Cheat Sheet?
Perhaps you find more points that should be updated.

Kind Regards
Torsten


Only Support Strong Cryptographic Ciphers:
?

* use the very latest recommendations, they may be volantile these days
* Secure length for cryptographic keys and parameters (like DH-parameter) >=2048 bits or equivalent Elliptic Curves

Example for a Policy to get a Whitelist for recommenderd Ciphers:
* Activate to set the Cipher Order by the Server
* Highest Priority for Ciphers that support 'Forward Secrecy'
* Favor DHE over ECDHE, ECDHE lacks now of really reliable Elliptic Curves, cf. http://safecurves.cr.yp.to;
* Use RSA-Keys (no DSA/DSS, cf. https://projectbullrun.org/dual-ec/tls.html)
* Favor GCM over CBC regardless of the cipher size
* Priorize the ciphers by the sizes of the Cipher and the MAC
* Disable weak ciphers without diabling latency browsers and bots that have to be supported (find the best compromise), actually the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA (0xa) does this job.
* Ciphers should be usable for DH-Pamameters >= 2048 bits, without blocking latency browsers (The cipher ?DHE-RSA-AES128-SHA? is suppressed as some browsers like to use it but are not capable to cope with DH-Params > 1024 bits.)
* Define a Cipher String that works with different Versions of your encryption tool, like openssl,
* Verify your cipher string
  ? with an autit-tool, like OWASP 'O-Saft'<https://www.owasp.org/index.php/O-Saft>
  ? listing it manually with your encryption software, e.g. openssl ciphers -v <cipher-string> (the result may differ by version), e.g.: openssl ciphers -v 'EDH+aRSA+AESGCM:EDH+aRSA+AES:DHE-RSA-AES256-SHA:EECDH+aRSA+AESGCM:EECDH+aRSA+AES:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:RSA+AESGCM:RSA+AES+SHA:DES-CBC3-SHA:-DHE-RSA-AES128-SHA'
#add optionally ':!aNULL:!eNULL:!LOW:!MD5:!EXP:!PSK:!DSS:!RC4:!SEED:!ECDSA:!ADH:!IDEA' to protect older Versions of OpenSSL

* This results in this recommended Cpihers and their Order:

0x00,0x9F - DHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=DH       Au=RSA  Enc=AESGCM(256) Mac=AEAD

0x00,0x9E - DHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=DH       Au=RSA  Enc=AESGCM(128) Mac=AEAD

0x00,0x6B - DHE-RSA-AES256-SHA256   TLSv1.2 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA256

0x00,0x39 - DHE-RSA-AES256-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA1

0x00,0x67 - DHE-RSA-AES128-SHA256   TLSv1.2 Kx=DH       Au=RSA  Enc=AES(128)  Mac=SHA256

0xC0,0x30 - ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AESGCM(256) Mac=AEAD

0xC0,0x2F - ECDHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AESGCM(128) Mac=AEAD

0xC0,0x28 - ECDHE-RSA-AES256-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AES(256)  Mac=SHA384

0xC0,0x14 - ECDHE-RSA-AES256-SHA    SSLv3 Kx=ECDH     Au=RSA  Enc=AES(256)  Mac=SHA1

0xC0,0x27 - ECDHE-RSA-AES128-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AES(128)  Mac=SHA256

0xC0,0x13 - ECDHE-RSA-AES128-SHA    SSLv3 Kx=ECDH     Au=RSA  Enc=AES(128)  Mac=SHA1

0x00,0x9D - AES256-GCM-SHA384       TLSv1.2 Kx=RSA      Au=RSA  Enc=AESGCM(256) Mac=AEAD

0x00,0x9C - AES128-GCM-SHA256       TLSv1.2 Kx=RSA      Au=RSA  Enc=AESGCM(128) Mac=AEAD

0x00,0x35 - AES256-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(256)  Mac=SHA1

0x00,0x2F - AES128-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(128)  Mac=SHA1

0x00,0x0A - DES-CBC3-SHA            SSLv3 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=SHA1

Remarks:
- According to my researches the most common browsers should be supported with this setting, too.
- Monitor the performance of your server, e.g. the TLS handshake with DHE hinders the CPU abt 2.4 times than ECDHE (cf. [Vincent Bernat, 2011]<http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html#some-benchmarks>)

On additional Point:
I'd like to launch also a discussion if we should find references to good practices that are not dependant on Documents from NIST.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140607/73b00442/attachment.html>

From jim.manico at owasp.org  Tue Jun 10 04:09:14 2014
From: jim.manico at owasp.org (Jim Manico)
Date: Mon, 9 Jun 2014 21:09:14 -0700
Subject: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet:
 Strong Protocols and Ciphers for TLS/SSL
In-Reply-To: <859F43324A6FEC448BFEA30C90405FA9050353@SEAEMBX02.olympus.F5Net.com>
References: <CA+M5M1d+Zhxi2K9Wuo47i=p_jJsu=1vd17CHcwa4mEAPtC0tBQ@mail.gmail.com>
	<61133c9f643210c08f1e69e4473c9bd2@mail.gmail.com>
	<859F43324A6FEC448BFEA30C90405FA9050353@SEAEMBX02.olympus.F5Net.com>
Message-ID: <5586370951357755218@unknownmsgid>

Did this get answered David?

Aloha,
--
Jim Manico
@Manicode
(808) 652-3805

On Jun 7, 2014, at 6:49 AM, David Holmes <d.holmes at f5.com> wrote:

  Torsten,



Overall, very nice work!



I was a little surprised about the promotion of DHE over ECDHE ciphers. Has
the crypto community as a whole already demoted EC ciphers? While some
curves have been found to be suboptimal, is that enough to eschew the CPU
savings ECDHE is supposed to offer?



*From:* owasp-cheat-sheets-bounces at lists.owasp.org [
mailto:owasp-cheat-sheets-bounces at lists.owasp.org
<owasp-cheat-sheets-bounces at lists.owasp.org>] *On Behalf Of *Jim Manico
*Sent:* Friday, June 06, 2014 9:46 PM
*To:* Torsten Gigler; owasp-cheat-sheets at lists.owasp.org
*Subject:* Re: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet:
Strong Protocols and Ciphers for TLS/SSL



Please go ahead and just edit that directly, I trust you ? anything else
you can do to update the TLS Cheatsheet , please go for it!



I?ll review when you are done.



Cool?



Aloha,

Jim



*From:* owasp-cheat-sheets-bounces at lists.owasp.org [mailto:
owasp-cheat-sheets-bounces at lists.owasp.org] *On Behalf Of *Torsten Gigler
*Sent:* Tuesday, June 03, 2014 4:50 AM
*To:* owasp-cheat-sheets at lists.owasp.org
*Subject:* [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet:
Strong Protocols and Ciphers for TLS/SSL



Hi,

during the last months, I have done some researches about how to find a
good Protocol and Cipher Policy for TLS/SSL.

The resuls are documented in Top 10 Developer Edition, in German
<https://www.owasp.org/index.php/Germany/Projekte/Top_10_fuer_Entwickler-2013/A6-Verlust_der_Vertraulichkeit_sensibler_Daten#tab=JAVA2>,
yet.

I'd like to discuss them here and add them in the Transport Layer
Protection Cheat Sheet.
<http://Transport%20Layer%20Protection%20Cheat%20Sheet>

Do you have any comments. Should I add my input in a new 'DRAFT:'-Copy of
the document before transfering it to the Cheat Sheet?

Perhaps you find more points that should be updated.


Kind Regards

Torsten



* Only Support Strong Cryptographic Ciphers:*
?

* use the very latest recommendations, they may be volantile these days
* Secure length for cryptographic keys and parameters (like DH-parameter)
>=2048 bits or equivalent Elliptic Curves

Example for a Policy to get a Whitelist for recommenderd Ciphers:
* Activate to set the Cipher Order by the Server
* Highest Priority for Ciphers that support 'Forward Secrecy'
* Favor DHE over ECDHE, ECDHE lacks now of really reliable Elliptic Curves,
cf. http://safecurves.cr.yp.to;
* Use RSA-Keys (no DSA/DSS, cf. https://projectbullrun.org/dual-ec/tls.html)
* Favor GCM over CBC regardless of the cipher size
* Priorize the ciphers by the sizes of the Cipher and the MAC
* Disable weak ciphers without diabling latency browsers and bots that have
to be supported (find the best compromise), actually the cipher
TLS_RSA_WITH_3DES_EDE_CBC_SHA (0xa) does this job.
* Ciphers should be usable for DH-Pamameters >= 2048 bits, without blocking
latency browsers (The cipher ?DHE-RSA-AES128-SHA? is suppressed as some
browsers like to use it but are not capable to cope with DH-Params > 1024
bits.)

* Define a Cipher String that works with different Versions of your
encryption tool, like openssl,
* Verify your cipher string
  ? with an autit-tool, like OWASP 'O-Saft'
<https://www.owasp.org/index.php/O-Saft>
  ? listing it manually with your encryption software, e.g. openssl ciphers
-v <cipher-string> (the result may differ by version), e.g.: openssl
ciphers -v
'EDH+aRSA+AESGCM:EDH+aRSA+AES:DHE-RSA-AES256-SHA:EECDH+aRSA+AESGCM:EECDH+aRSA+AES:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:RSA+AESGCM:RSA+AES+SHA:DES-CBC3-SHA:-DHE-RSA-AES128-SHA'
#add optionally
':!aNULL:!eNULL:!LOW:!MD5:!EXP:!PSK:!DSS:!RC4:!SEED:!ECDSA:!ADH:!IDEA' to
protect older Versions of OpenSSL

* This results in this recommended Cpihers and their Order:

0x00,0x9F - DHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=DH       Au=RSA
Enc=AESGCM(256) Mac=AEAD

0x00,0x9E - DHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=DH       Au=RSA
Enc=AESGCM(128) Mac=AEAD

0x00,0x6B - DHE-RSA-AES256-SHA256   TLSv1.2 Kx=DH       Au=RSA
Enc=AES(256)  Mac=SHA256

0x00,0x39 - DHE-RSA-AES256-SHA      SSLv3 Kx=DH       Au=RSA
Enc=AES(256)  Mac=SHA1

0x00,0x67 - DHE-RSA-AES128-SHA256   TLSv1.2 Kx=DH       Au=RSA
Enc=AES(128)  Mac=SHA256

0xC0,0x30 - ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=RSA
Enc=AESGCM(256) Mac=AEAD

0xC0,0x2F - ECDHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=RSA
Enc=AESGCM(128) Mac=AEAD

0xC0,0x28 - ECDHE-RSA-AES256-SHA384 TLSv1.2 Kx=ECDH     Au=RSA
Enc=AES(256)  Mac=SHA384

0xC0,0x14 - ECDHE-RSA-AES256-SHA    SSLv3 Kx=ECDH     Au=RSA
Enc=AES(256)  Mac=SHA1

0xC0,0x27 - ECDHE-RSA-AES128-SHA256 TLSv1.2 Kx=ECDH     Au=RSA
Enc=AES(128)  Mac=SHA256

0xC0,0x13 - ECDHE-RSA-AES128-SHA    SSLv3 Kx=ECDH     Au=RSA
Enc=AES(128)  Mac=SHA1

0x00,0x9D - AES256-GCM-SHA384       TLSv1.2 Kx=RSA      Au=RSA
Enc=AESGCM(256) Mac=AEAD

0x00,0x9C - AES128-GCM-SHA256       TLSv1.2 Kx=RSA      Au=RSA
Enc=AESGCM(128) Mac=AEAD

0x00,0x35 - AES256-SHA              SSLv3 Kx=RSA      Au=RSA
Enc=AES(256)  Mac=SHA1

0x00,0x2F - AES128-SHA              SSLv3 Kx=RSA      Au=RSA
Enc=AES(128)  Mac=SHA1

0x00,0x0A - DES-CBC3-SHA            SSLv3 Kx=RSA      Au=RSA
Enc=3DES(168) Mac=SHA1

Remarks:
- According to my researches the most common browsers should be
supported with this setting, too.
- Monitor the performance of your server, e.g. the TLS handshake with
DHE hinders the CPU abt 2.4 times than ECDHE (cf. [Vincent Bernat,
2011] <http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html#some-benchmarks>)


*On additional Point:*
I'd like to launch also a discussion if we should find references to good
practices that are not dependant on Documents from NIST.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140609/69ba8d4c/attachment.html>

From d.holmes at f5.com  Tue Jun 10 16:45:01 2014
From: d.holmes at f5.com (David Holmes)
Date: Tue, 10 Jun 2014 16:45:01 +0000
Subject: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet:
 Strong Protocols and Ciphers for TLS/SSL
In-Reply-To: <5586370951357755218@unknownmsgid>
References: <CA+M5M1d+Zhxi2K9Wuo47i=p_jJsu=1vd17CHcwa4mEAPtC0tBQ@mail.gmail.com>
	<61133c9f643210c08f1e69e4473c9bd2@mail.gmail.com>
	<859F43324A6FEC448BFEA30C90405FA9050353@SEAEMBX02.olympus.F5Net.com>
	<5586370951357755218@unknownmsgid>
Message-ID: <859F43324A6FEC448BFEA30C90405FA9052BAF@SEAEMBX02.olympus.F5Net.com>

Hm, no never did an answer.

From: Jim Manico [mailto:jim.manico at owasp.org]
Sent: Monday, June 09, 2014 10:09 PM
To: David Holmes
Cc: Torsten Gigler; owasp-cheat-sheets at lists.owasp.org
Subject: Re: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet: Strong Protocols and Ciphers for TLS/SSL

Did this get answered David?

Aloha,
--
Jim Manico
@Manicode
(808) 652-3805

On Jun 7, 2014, at 6:49 AM, David Holmes <d.holmes at f5.com<mailto:d.holmes at f5.com>> wrote:
Torsten,

Overall, very nice work!

I was a little surprised about the promotion of DHE over ECDHE ciphers. Has the crypto community as a whole already demoted EC ciphers? While some curves have been found to be suboptimal, is that enough to eschew the CPU savings ECDHE is supposed to offer?

From: owasp-cheat-sheets-bounces at lists.owasp.org<mailto:owasp-cheat-sheets-bounces at lists.owasp.org> [mailto:owasp-cheat-sheets-bounces at lists.owasp.org] On Behalf Of Jim Manico
Sent: Friday, June 06, 2014 9:46 PM
To: Torsten Gigler; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet: Strong Protocols and Ciphers for TLS/SSL

Please go ahead and just edit that directly, I trust you ? anything else you can do to update the TLS Cheatsheet , please go for it!

I?ll review when you are done.

Cool?

Aloha,
Jim

From: owasp-cheat-sheets-bounces at lists.owasp.org<mailto:owasp-cheat-sheets-bounces at lists.owasp.org> [mailto:owasp-cheat-sheets-bounces at lists.owasp.org<mailto:owasp-cheat-sheets-bounces at lists.owasp.org>] On Behalf Of Torsten Gigler
Sent: Tuesday, June 03, 2014 4:50 AM
To: owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet: Strong Protocols and Ciphers for TLS/SSL

Hi,
during the last months, I have done some researches about how to find a good Protocol and Cipher Policy for TLS/SSL.
The resuls are documented in Top 10 Developer Edition, in German<https://www.owasp.org/index.php/Germany/Projekte/Top_10_fuer_Entwickler-2013/A6-Verlust_der_Vertraulichkeit_sensibler_Daten#tab=JAVA2>, yet.
I'd like to discuss them here and add them in the Transport Layer Protection Cheat Sheet.<http://Transport%20Layer%20Protection%20Cheat%20Sheet>
Do you have any comments. Should I add my input in a new 'DRAFT:'-Copy of the document before transfering it to the Cheat Sheet?
Perhaps you find more points that should be updated.

Kind Regards
Torsten


Only Support Strong Cryptographic Ciphers:
?

* use the very latest recommendations, they may be volantile these days
* Secure length for cryptographic keys and parameters (like DH-parameter) >=2048 bits or equivalent Elliptic Curves

Example for a Policy to get a Whitelist for recommenderd Ciphers:
* Activate to set the Cipher Order by the Server
* Highest Priority for Ciphers that support 'Forward Secrecy'
* Favor DHE over ECDHE, ECDHE lacks now of really reliable Elliptic Curves, cf. http://safecurves.cr.yp.to;
* Use RSA-Keys (no DSA/DSS, cf. https://projectbullrun.org/dual-ec/tls.html)
* Favor GCM over CBC regardless of the cipher size
* Priorize the ciphers by the sizes of the Cipher and the MAC
* Disable weak ciphers without diabling latency browsers and bots that have to be supported (find the best compromise), actually the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA (0xa) does this job.
* Ciphers should be usable for DH-Pamameters >= 2048 bits, without blocking latency browsers (The cipher ?DHE-RSA-AES128-SHA? is suppressed as some browsers like to use it but are not capable to cope with DH-Params > 1024 bits.)
* Define a Cipher String that works with different Versions of your encryption tool, like openssl,
* Verify your cipher string
  ? with an autit-tool, like OWASP 'O-Saft'<https://www.owasp.org/index.php/O-Saft>
  ? listing it manually with your encryption software, e.g. openssl ciphers -v <cipher-string> (the result may differ by version), e.g.: openssl ciphers -v 'EDH+aRSA+AESGCM:EDH+aRSA+AES:DHE-RSA-AES256-SHA:EECDH+aRSA+AESGCM:EECDH+aRSA+AES:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:RSA+AESGCM:RSA+AES+SHA:DES-CBC3-SHA:-DHE-RSA-AES128-SHA'
#add optionally ':!aNULL:!eNULL:!LOW:!MD5:!EXP:!PSK:!DSS:!RC4:!SEED:!ECDSA:!ADH:!IDEA' to protect older Versions of OpenSSL

* This results in this recommended Cpihers and their Order:

0x00,0x9F - DHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=DH       Au=RSA  Enc=AESGCM(256) Mac=AEAD

0x00,0x9E - DHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=DH       Au=RSA  Enc=AESGCM(128) Mac=AEAD

0x00,0x6B - DHE-RSA-AES256-SHA256   TLSv1.2 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA256

0x00,0x39 - DHE-RSA-AES256-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA1

0x00,0x67 - DHE-RSA-AES128-SHA256   TLSv1.2 Kx=DH       Au=RSA  Enc=AES(128)  Mac=SHA256

0xC0,0x30 - ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AESGCM(256) Mac=AEAD

0xC0,0x2F - ECDHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AESGCM(128) Mac=AEAD

0xC0,0x28 - ECDHE-RSA-AES256-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AES(256)  Mac=SHA384

0xC0,0x14 - ECDHE-RSA-AES256-SHA    SSLv3 Kx=ECDH     Au=RSA  Enc=AES(256)  Mac=SHA1

0xC0,0x27 - ECDHE-RSA-AES128-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AES(128)  Mac=SHA256

0xC0,0x13 - ECDHE-RSA-AES128-SHA    SSLv3 Kx=ECDH     Au=RSA  Enc=AES(128)  Mac=SHA1

0x00,0x9D - AES256-GCM-SHA384       TLSv1.2 Kx=RSA      Au=RSA  Enc=AESGCM(256) Mac=AEAD

0x00,0x9C - AES128-GCM-SHA256       TLSv1.2 Kx=RSA      Au=RSA  Enc=AESGCM(128) Mac=AEAD

0x00,0x35 - AES256-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(256)  Mac=SHA1

0x00,0x2F - AES128-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(128)  Mac=SHA1

0x00,0x0A - DES-CBC3-SHA            SSLv3 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=SHA1

Remarks:
- According to my researches the most common browsers should be supported with this setting, too.
- Monitor the performance of your server, e.g. the TLS handshake with DHE hinders the CPU abt 2.4 times than ECDHE (cf. [Vincent Bernat, 2011]<http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html#some-benchmarks>)

On additional Point:
I'd like to launch also a discussion if we should find references to good practices that are not dependant on Documents from NIST.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140610/9b4ff976/attachment-0001.html>

From jim.manico at owasp.org  Thu Jun 12 17:49:39 2014
From: jim.manico at owasp.org (Jim Manico)
Date: Thu, 12 Jun 2014 07:49:39 -1000
Subject: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet:
 Strong Protocols and Ciphers for TLS/SSL
In-Reply-To: <859F43324A6FEC448BFEA30C90405FA9052BAF@SEAEMBX02.olympus.F5Net.com>
References: <CA+M5M1d+Zhxi2K9Wuo47i=p_jJsu=1vd17CHcwa4mEAPtC0tBQ@mail.gmail.com>
	<61133c9f643210c08f1e69e4473c9bd2@mail.gmail.com>
	<859F43324A6FEC448BFEA30C90405FA9050353@SEAEMBX02.olympus.F5Net.com>
	<5586370951357755218@unknownmsgid>
	<859F43324A6FEC448BFEA30C90405FA9052BAF@SEAEMBX02.olympus.F5Net.com>
Message-ID: <5399E833.9060706@owasp.org>

Without ANY doubt, ephemeral cipher suites need to be prioritized ciphers.

David, can you propose specific changes and I'll update the wiki for 
you? Or can I get you a wiki account?

Aloha,
Jim



On 6/10/14, 6:45 AM, David Holmes wrote:
>
> Hm, no never did an answer.
>
> *From:*Jim Manico [mailto:jim.manico at owasp.org]
> *Sent:* Monday, June 09, 2014 10:09 PM
> *To:* David Holmes
> *Cc:* Torsten Gigler; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets] Transport Layer Protection Cheat 
> Sheet: Strong Protocols and Ciphers for TLS/SSL
>
> Did this get answered David?
>
> Aloha,
>
> --
>
> Jim Manico
>
> @Manicode
>
> (808) 652-3805
>
>
> On Jun 7, 2014, at 6:49 AM, David Holmes <d.holmes at f5.com 
> <mailto:d.holmes at f5.com>> wrote:
>
>     Torsten,
>
>     Overall, very nice work!
>
>     I was a little surprised about the promotion of DHE over ECDHE
>     ciphers. Has the crypto community as a whole already demoted EC
>     ciphers? While some curves have been found to be suboptimal, is
>     that enough to eschew the CPU savings ECDHE is supposed to offer?
>
>     *From:*owasp-cheat-sheets-bounces at lists.owasp.org
>     <mailto:owasp-cheat-sheets-bounces at lists.owasp.org>
>     [mailto:owasp-cheat-sheets-bounces at lists.owasp.org] *On Behalf Of
>     *Jim Manico
>     *Sent:* Friday, June 06, 2014 9:46 PM
>     *To:* Torsten Gigler; owasp-cheat-sheets at lists.owasp.org
>     <mailto:owasp-cheat-sheets at lists.owasp.org>
>     *Subject:* Re: [OWASP-cheat-sheets] Transport Layer Protection
>     Cheat Sheet: Strong Protocols and Ciphers for TLS/SSL
>
>     Please go ahead and just edit that directly, I trust you ?
>     anything else you can do to update the TLS Cheatsheet , please go
>     for it!
>
>     I?ll review when you are done.
>
>     Cool?
>
>     Aloha,
>
>     Jim
>
>     *From:*owasp-cheat-sheets-bounces at lists.owasp.org
>     <mailto:owasp-cheat-sheets-bounces at lists.owasp.org>
>     [mailto:owasp-cheat-sheets-bounces at lists.owasp.org
>     <mailto:owasp-cheat-sheets-bounces at lists.owasp.org>] *On Behalf Of
>     *Torsten Gigler
>     *Sent:* Tuesday, June 03, 2014 4:50 AM
>     *To:* owasp-cheat-sheets at lists.owasp.org
>     <mailto:owasp-cheat-sheets at lists.owasp.org>
>     *Subject:* [OWASP-cheat-sheets] Transport Layer Protection Cheat
>     Sheet: Strong Protocols and Ciphers for TLS/SSL
>
>     Hi,
>
>     during the last months, I have done some researches about how to
>     find a good Protocol and Cipher Policy for TLS/SSL.
>
>     The resuls are documented in Top 10 Developer Edition, in German
>     <https://www.owasp.org/index.php/Germany/Projekte/Top_10_fuer_Entwickler-2013/A6-Verlust_der_Vertraulichkeit_sensibler_Daten#tab=JAVA2>,
>     yet.
>
>     I'd like to discuss them here and add them in the Transport Layer
>     Protection Cheat Sheet.
>     <http://Transport%20Layer%20Protection%20Cheat%20Sheet>
>
>     Do you have any comments. Should I add my input in a new
>     'DRAFT:'-Copy of the document before transfering it to the Cheat
>     Sheet?
>
>     Perhaps you find more points that should be updated.
>
>
>     Kind Regards
>
>     Torsten
>
>
>     *
>     Only Support Strong Cryptographic Ciphers:*
>     ?
>
>     * use the very latest recommendations, they may be volantile these
>     days
>     * Secure length for cryptographic keys and parameters (like
>     DH-parameter) >=2048 bits or equivalent Elliptic Curves
>
>     Example for a Policy to get a Whitelist for recommenderd Ciphers:
>     * Activate to set the Cipher Order by the Server
>     * Highest Priority for Ciphers that support 'Forward Secrecy'
>     * Favor DHE over ECDHE, ECDHE lacks now of really reliable
>     Elliptic Curves, cf. http://safecurves.cr.yp.to
>     <http://safecurves.cr.yp.to>;
>     * Use RSA-Keys (no DSA/DSS, cf.
>     https://projectbullrun.org/dual-ec/tls.html
>     <https://projectbullrun.org/dual-ec/tls.html>)
>     * Favor GCM over CBC regardless of the cipher size
>     * Priorize the ciphers by the sizes of the Cipher and the MAC
>     * Disable weak ciphers without diabling latency browsers and bots
>     that have to be supported (find the best compromise), actually the
>     cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA (0xa) does this job.
>     * Ciphers should be usable for DH-Pamameters >= 2048 bits, without
>     blocking latency browsers (The cipher ?DHE-RSA-AES128-SHA? is
>     suppressed as some browsers like to use it but are not capable to
>     cope with DH-Params > 1024 bits.)
>
>     * Define a Cipher String that works with different Versions of
>     your encryption tool, like openssl,
>     * Verify your cipher string
>       ? with an autit-tool, like OWASP 'O-Saft'
>     <https://www.owasp.org/index.php/O-Saft>
>       ? listing it manually with your encryption software, e.g.
>     openssl ciphers -v <cipher-string> (the result may differ by
>     version), e.g.: openssl ciphers -v
>     'EDH+aRSA+AESGCM:EDH+aRSA+AES:DHE-RSA-AES256-SHA:EECDH+aRSA+AESGCM:EECDH+aRSA+AES:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:RSA+AESGCM:RSA+AES+SHA:DES-CBC3-SHA:-DHE-RSA-AES128-SHA'
>     #add optionally
>     ':!aNULL:!eNULL:!LOW:!MD5:!EXP:!PSK:!DSS:!RC4:!SEED:!ECDSA:!ADH:!IDEA'
>     to protect older Versions of OpenSSL
>
>     * This results in this recommended Cpihers and their Order:
>
>     0x00,0x9F - DHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=DH       Au=RSA  Enc=AESGCM(256) Mac=AEAD
>
>     0x00,0x9E - DHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=DH       Au=RSA  Enc=AESGCM(128) Mac=AEAD
>
>     0x00,0x6B - DHE-RSA-AES256-SHA256   TLSv1.2 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA256
>
>     0x00,0x39 - DHE-RSA-AES256-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA1
>
>     0x00,0x67 - DHE-RSA-AES128-SHA256   TLSv1.2 Kx=DH       Au=RSA  Enc=AES(128)  Mac=SHA256
>
>     0xC0,0x30 - ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AESGCM(256) Mac=AEAD
>
>     0xC0,0x2F - ECDHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AESGCM(128) Mac=AEAD
>
>     0xC0,0x28 - ECDHE-RSA-AES256-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AES(256)  Mac=SHA384
>
>     0xC0,0x14 - ECDHE-RSA-AES256-SHA    SSLv3 Kx=ECDH     Au=RSA  Enc=AES(256)  Mac=SHA1
>
>     0xC0,0x27 - ECDHE-RSA-AES128-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AES(128)  Mac=SHA256
>
>     0xC0,0x13 - ECDHE-RSA-AES128-SHA    SSLv3 Kx=ECDH     Au=RSA  Enc=AES(128)  Mac=SHA1
>
>     0x00,0x9D - AES256-GCM-SHA384       TLSv1.2 Kx=RSA      Au=RSA  Enc=AESGCM(256) Mac=AEAD
>
>     0x00,0x9C - AES128-GCM-SHA256       TLSv1.2 Kx=RSA      Au=RSA  Enc=AESGCM(128) Mac=AEAD
>
>     0x00,0x35 - AES256-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(256)  Mac=SHA1
>
>     0x00,0x2F - AES128-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(128)  Mac=SHA1
>
>     0x00,0x0A - DES-CBC3-SHA            SSLv3 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=SHA1
>
>     Remarks:
>     - According to my researches the most common browsers should be supported with this setting, too.
>     - Monitor the performance of your server, e.g. the TLS handshake with DHE hinders the CPU abt 2.4 times than ECDHE (cf.[Vincent Bernat, 2011]  <http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html#some-benchmarks>)
>
>
>     *On additional Point:*
>     I'd like to launch also a discussion if we should find references
>     to good practices that are not dependant on Documents from NIST.
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140612/c8159d6b/attachment.html>

From torsten.gigler at owasp.org  Thu Jun 12 20:07:28 2014
From: torsten.gigler at owasp.org (Torsten Gigler)
Date: Thu, 12 Jun 2014 22:07:28 +0200
Subject: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet:
 Strong Protocols and Ciphers for TLS/SSL
In-Reply-To: <5399E833.9060706@owasp.org>
References: <CA+M5M1d+Zhxi2K9Wuo47i=p_jJsu=1vd17CHcwa4mEAPtC0tBQ@mail.gmail.com>
	<61133c9f643210c08f1e69e4473c9bd2@mail.gmail.com>
	<859F43324A6FEC448BFEA30C90405FA9050353@SEAEMBX02.olympus.F5Net.com>
	<5586370951357755218@unknownmsgid>
	<859F43324A6FEC448BFEA30C90405FA9052BAF@SEAEMBX02.olympus.F5Net.com>
	<5399E833.9060706@owasp.org>
Message-ID: <539A0880.5010304@owasp.org>

Hi David,

sorry for the delay of my answer, I had been offline the last 8 days.

I'd like to say that I am not a cryptographic specialist. The last months I read what I could find
about Ciphers that remain to be usable these days.

So the issue with ECDHE is that there are no(!) really reliable Elliptic Curves, cf.
http://safecurves.cr.yp.to <http://safecurves.cr.yp.to>;
http://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-8,

The most promising candidate is https://tools.ietf.org/html/draft-josefsson-tls-curve25519-05

Could you verity the results of[Vincent Bernat, 2011]
<http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html#some-benchmarks> with your
systems that the TLS handshake with DHE hinders the CPU abt 2.4 times than ECDHE?
If there are any performance issues I'd recommend to invert the Rule "Priorize the ciphers by the
sizes of the Cipher and the MAC"
So I think you could start with DHE-RSA-AES128-GCM-SHA256, or DHE-RSA-AES128-SHA256.
If you do so, please check also for a good cipher string that is usable by different versions of
openssl (1.0.1 and 0.9.8-families).
I did it with some versions manually and Aaron from ach at lists.cert.at (bettercrypto.org) tested it
with all automatically compiled versions.
 
Is it generally OK for you to promote DHE over ECDHE ciphers? Or do you see any practical issues?

Kind regards
Torsten

Am 12.06.2014 19:49, schrieb Jim Manico:
> Without ANY doubt, ephemeral cipher suites need to be prioritized ciphers.
>
> David, can you propose specific changes and I'll update the wiki for you? Or can I get you a wiki
> account?
>
> Aloha,
> Jim
>
>
>
> On 6/10/14, 6:45 AM, David Holmes wrote:
>>
>> Hm, no never did an answer.
>>
>>  
>>
>> *From:*Jim Manico [mailto:jim.manico at owasp.org]
>> *Sent:* Monday, June 09, 2014 10:09 PM
>> *To:* David Holmes
>> *Cc:* Torsten Gigler; owasp-cheat-sheets at lists.owasp.org
>> *Subject:* Re: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet: Strong Protocols and
>> Ciphers for TLS/SSL
>>
>>  
>>
>> Did this get answered David?
>>
>>  
>>
>> Aloha,
>>
>> --
>>
>> Jim Manico
>>
>> @Manicode
>>
>> (808) 652-3805
>>
>>
>> On Jun 7, 2014, at 6:49 AM, David Holmes <d.holmes at f5.com <mailto:d.holmes at f5.com>> wrote:
>>
>>     Torsten,
>>
>>      
>>
>>     Overall, very nice work!
>>
>>      
>>
>>     I was a little surprised about the promotion of DHE over ECDHE ciphers. Has the crypto
>>     community as a whole already demoted EC ciphers? While some curves have been found to be
>>     suboptimal, is that enough to eschew the CPU savings ECDHE is supposed to offer?
>>
>>      
>>
>>     *From:*owasp-cheat-sheets-bounces at lists.owasp.org
>>     <mailto:owasp-cheat-sheets-bounces at lists.owasp.org>
>>     [mailto:owasp-cheat-sheets-bounces at lists.owasp.org] *On Behalf Of *Jim Manico
>>     *Sent:* Friday, June 06, 2014 9:46 PM
>>     *To:* Torsten Gigler; owasp-cheat-sheets at lists.owasp.org
>>     <mailto:owasp-cheat-sheets at lists.owasp.org>
>>     *Subject:* Re: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet: Strong Protocols
>>     and Ciphers for TLS/SSL
>>
>>      
>>
>>     Please go ahead and just edit that directly, I trust you ? anything else you can do to update
>>     the TLS Cheatsheet , please go for it!
>>
>>      
>>
>>     I?ll review when you are done.
>>
>>      
>>
>>     Cool?
>>
>>      
>>
>>     Aloha,
>>
>>     Jim
>>
>>      
>>
>>     *From:*owasp-cheat-sheets-bounces at lists.owasp.org
>>     <mailto:owasp-cheat-sheets-bounces at lists.owasp.org>
>>     [mailto:owasp-cheat-sheets-bounces at lists.owasp.org
>>     <mailto:owasp-cheat-sheets-bounces at lists.owasp.org>] *On Behalf Of *Torsten Gigler
>>     *Sent:* Tuesday, June 03, 2014 4:50 AM
>>     *To:* owasp-cheat-sheets at lists.owasp.org <mailto:owasp-cheat-sheets at lists.owasp.org>
>>     *Subject:* [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet: Strong Protocols and
>>     Ciphers for TLS/SSL
>>
>>      
>>
>>     Hi,
>>
>>     during the last months, I have done some researches about how to find a good Protocol and
>>     Cipher Policy for TLS/SSL.
>>
>>     The resuls are documented in Top 10 Developer Edition, in German
>>     <https://www.owasp.org/index.php/Germany/Projekte/Top_10_fuer_Entwickler-2013/A6-Verlust_der_Vertraulichkeit_sensibler_Daten#tab=JAVA2>,
>>     yet.
>>
>>     I'd like to discuss them here and add them in the Transport Layer Protection Cheat Sheet.
>>     <http://Transport%20Layer%20Protection%20Cheat%20Sheet>
>>
>>     Do you have any comments. Should I add my input in a new 'DRAFT:'-Copy of the document before
>>     transfering it to the Cheat Sheet?
>>
>>     Perhaps you find more points that should be updated.
>>
>>
>>     Kind Regards
>>
>>     Torsten
>>
>>
>>      *
>>     Only Support Strong Cryptographic Ciphers:*
>>     ?
>>
>>     * use the very latest recommendations, they may be volantile these days
>>     * Secure length for cryptographic keys and parameters (like DH-parameter) >=2048 bits or
>>     equivalent Elliptic Curves
>>
>>     Example for a Policy to get a Whitelist for recommenderd Ciphers:
>>     * Activate to set the Cipher Order by the Server
>>     * Highest Priority for Ciphers that support 'Forward Secrecy'
>>     * Favor DHE over ECDHE, ECDHE lacks now of really reliable Elliptic Curves, cf.
>>     http://safecurves.cr.yp.to <http://safecurves.cr.yp.to>;
>>     * Use RSA-Keys (no DSA/DSS, cf. https://projectbullrun.org/dual-ec/tls.html
>>     <https://projectbullrun.org/dual-ec/tls.html>)
>>     * Favor GCM over CBC regardless of the cipher size
>>     * Priorize the ciphers by the sizes of the Cipher and the MAC
>>     * Disable weak ciphers without diabling latency browsers and bots that have to be supported
>>     (find the best compromise), actually the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA (0xa) does this
>>     job.
>>     * Ciphers should be usable for DH-Pamameters >= 2048 bits, without blocking latency browsers
>>     (The cipher ?DHE-RSA-AES128-SHA? is suppressed as some browsers like to use it but are not
>>     capable to cope with DH-Params > 1024 bits.)
>>
>>     * Define a Cipher String that works with different Versions of your encryption tool, like
>>     openssl,
>>     * Verify your cipher string
>>       ? with an autit-tool, like OWASP 'O-Saft' <https://www.owasp.org/index.php/O-Saft>
>>       ? listing it manually with your encryption software, e.g. openssl ciphers -v
>>     <cipher-string> (the result may differ by version), e.g.: openssl ciphers -v
>>     'EDH+aRSA+AESGCM:EDH+aRSA+AES:DHE-RSA-AES256-SHA:EECDH+aRSA+AESGCM:EECDH+aRSA+AES:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:RSA+AESGCM:RSA+AES+SHA:DES-CBC3-SHA:-DHE-RSA-AES128-SHA'
>>     #add optionally ':!aNULL:!eNULL:!LOW:!MD5:!EXP:!PSK:!DSS:!RC4:!SEED:!ECDSA:!ADH:!IDEA' to
>>     protect older Versions of OpenSSL
>>
>>     * This results in this recommended Cpihers and their Order:
>>
>>     0x00,0x9F - DHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=DH       Au=RSA  Enc=AESGCM(256) Mac=AEAD
>>
>>     0x00,0x9E - DHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=DH       Au=RSA  Enc=AESGCM(128) Mac=AEAD
>>
>>     0x00,0x6B - DHE-RSA-AES256-SHA256   TLSv1.2 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA256
>>
>>     0x00,0x39 - DHE-RSA-AES256-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA1
>>
>>     0x00,0x67 - DHE-RSA-AES128-SHA256   TLSv1.2 Kx=DH       Au=RSA  Enc=AES(128)  Mac=SHA256
>>
>>     0xC0,0x30 - ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AESGCM(256) Mac=AEAD
>>
>>     0xC0,0x2F - ECDHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AESGCM(128) Mac=AEAD
>>
>>     0xC0,0x28 - ECDHE-RSA-AES256-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AES(256)  Mac=SHA384
>>
>>     0xC0,0x14 - ECDHE-RSA-AES256-SHA    SSLv3 Kx=ECDH     Au=RSA  Enc=AES(256)  Mac=SHA1
>>
>>     0xC0,0x27 - ECDHE-RSA-AES128-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AES(128)  Mac=SHA256
>>
>>     0xC0,0x13 - ECDHE-RSA-AES128-SHA    SSLv3 Kx=ECDH     Au=RSA  Enc=AES(128)  Mac=SHA1
>>
>>     0x00,0x9D - AES256-GCM-SHA384       TLSv1.2 Kx=RSA      Au=RSA  Enc=AESGCM(256) Mac=AEAD
>>
>>     0x00,0x9C - AES128-GCM-SHA256       TLSv1.2 Kx=RSA      Au=RSA  Enc=AESGCM(128) Mac=AEAD
>>
>>     0x00,0x35 - AES256-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(256)  Mac=SHA1
>>
>>     0x00,0x2F - AES128-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(128)  Mac=SHA1
>>
>>     0x00,0x0A - DES-CBC3-SHA            SSLv3 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=SHA1
>>
>>     Remarks:
>>     - According to my researches the most common browsers should be supported with this setting, too.
>>     - Monitor the performance of your server, e.g. the TLS handshake with DHE hinders the CPU abt 2.4 times than ECDHE (cf. [Vincent Bernat, 2011] <http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html#some-benchmarks>)
>>
>>
>>     *On additional Point:*
>>     I'd like to launch also a discussion if we should find references to good practices that are
>>     not dependant on Documents from NIST.
>>
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140612/22adad27/attachment-0001.html>

From jim.manico at owasp.org  Mon Jun 16 01:35:54 2014
From: jim.manico at owasp.org (Jim Manico)
Date: Mon, 16 Jun 2014 09:35:54 +0800
Subject: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet
In-Reply-To: <539DC470.60504@owasp.org>
References: <539DC470.60504@owasp.org>
Message-ID: <539E49FA.6050108@owasp.org>

Hello cheaters,

We have some nice TLS cheatsheet updates from Torsten. If you have a 
moment, can you take a look and provide comments?

Thank you Torsten! :)

Aloha,
Jim

> Hi Jim,
>
> I made some updates to Transport Layer Protection Cheat Sheet
> (https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet):
> - Cipher (Policy and Cipher String) [Main Edits here]
> - Protocols
> - Test
> - Additional references
>
>  From my side I could integrate my content carrying forward the existing content, besides I did not
> find any TLS ciphers that support AES/CTR-Mode, so I changed the text
> '* Stream Ciphers which XOR the key stream with plaintext (such as AES/CTR mode)' to
> '* Watch also for Stream Ciphers which XOR the key stream with plaintext (such as AES/CTR mode)'
>
> Kind regards
> Torsten


From d.holmes at f5.com  Mon Jun 16 15:58:56 2014
From: d.holmes at f5.com (David Holmes)
Date: Mon, 16 Jun 2014 15:58:56 +0000
Subject: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet:
 Strong Protocols and Ciphers for TLS/SSL
In-Reply-To: <539A0880.5010304@owasp.org>
References: <CA+M5M1d+Zhxi2K9Wuo47i=p_jJsu=1vd17CHcwa4mEAPtC0tBQ@mail.gmail.com>
	<61133c9f643210c08f1e69e4473c9bd2@mail.gmail.com>
	<859F43324A6FEC448BFEA30C90405FA9050353@SEAEMBX02.olympus.F5Net.com>
	<5586370951357755218@unknownmsgid>
	<859F43324A6FEC448BFEA30C90405FA9052BAF@SEAEMBX02.olympus.F5Net.com>
	<5399E833.9060706@owasp.org> <539A0880.5010304@owasp.org>
Message-ID: <859F43324A6FEC448BFEA30C90405FA905A62E@SEAEMBX02.olympus.F5Net.com>

Sorry for my delay. I checked around F5 and we?re neutral on the issue of DHE vs ECDHE. So we are okay with this ciphers as you proposed them (at least in that regards)

From: Torsten Gigler [mailto:torsten.gigler at owasp.org]
Sent: Thursday, June 12, 2014 2:07 PM
To: David Holmes
Cc: Jim Manico; owasp-cheat-sheets at lists.owasp.org
Subject: Re: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet: Strong Protocols and Ciphers for TLS/SSL

Hi David,

sorry for the delay of my answer, I had been offline the last 8 days.

I'd like to say that I am not a cryptographic specialist. The last months I read what I could find about Ciphers that remain to be usable these days.

So the issue with ECDHE is that there are no(!) really reliable Elliptic Curves, cf. http://safecurves.cr.yp.to;
http://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-8,

The most promising candidate is https://tools.ietf.org/html/draft-josefsson-tls-curve25519-05

Could you verity the results of [Vincent Bernat, 2011]<http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html#some-benchmarks> with your systems that the TLS handshake with DHE hinders the CPU abt 2.4 times than ECDHE?
If there are any performance issues I'd recommend to invert the Rule "Priorize the ciphers by the sizes of the Cipher and the MAC"
So I think you could start with DHE-RSA-AES128-GCM-SHA256, or DHE-RSA-AES128-SHA256.
If you do so, please check also for a good cipher string that is usable by different versions of openssl (1.0.1 and 0.9.8-families).
I did it with some versions manually and Aaron from ach at lists.cert.at<mailto:ach at lists.cert.at> (bettercrypto.org) tested it with all automatically compiled versions.

Is it generally OK for you to promote DHE over ECDHE ciphers? Or do you see any practical issues?

Kind regards
Torsten

Am 12.06.2014 19:49, schrieb Jim Manico:
Without ANY doubt, ephemeral cipher suites need to be prioritized ciphers.

David, can you propose specific changes and I'll update the wiki for you? Or can I get you a wiki account?

Aloha,
Jim

On 6/10/14, 6:45 AM, David Holmes wrote:
Hm, no never did an answer.

From: Jim Manico [mailto:jim.manico at owasp.org]
Sent: Monday, June 09, 2014 10:09 PM
To: David Holmes
Cc: Torsten Gigler; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet: Strong Protocols and Ciphers for TLS/SSL

Did this get answered David?

Aloha,
--
Jim Manico
@Manicode
(808) 652-3805

On Jun 7, 2014, at 6:49 AM, David Holmes <d.holmes at f5.com<mailto:d.holmes at f5.com>> wrote:
Torsten,

Overall, very nice work!

I was a little surprised about the promotion of DHE over ECDHE ciphers. Has the crypto community as a whole already demoted EC ciphers? While some curves have been found to be suboptimal, is that enough to eschew the CPU savings ECDHE is supposed to offer?

From: owasp-cheat-sheets-bounces at lists.owasp.org<mailto:owasp-cheat-sheets-bounces at lists.owasp.org> [mailto:owasp-cheat-sheets-bounces at lists.owasp.org] On Behalf Of Jim Manico
Sent: Friday, June 06, 2014 9:46 PM
To: Torsten Gigler; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet: Strong Protocols and Ciphers for TLS/SSL

Please go ahead and just edit that directly, I trust you ? anything else you can do to update the TLS Cheatsheet , please go for it!

I?ll review when you are done.

Cool?

Aloha,
Jim

From: owasp-cheat-sheets-bounces at lists.owasp.org<mailto:owasp-cheat-sheets-bounces at lists.owasp.org> [mailto:owasp-cheat-sheets-bounces at lists.owasp.org<mailto:owasp-cheat-sheets-bounces at lists.owasp.org>] On Behalf Of Torsten Gigler
Sent: Tuesday, June 03, 2014 4:50 AM
To: owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet: Strong Protocols and Ciphers for TLS/SSL

Hi,
during the last months, I have done some researches about how to find a good Protocol and Cipher Policy for TLS/SSL.
The resuls are documented in Top 10 Developer Edition, in German<https://www.owasp.org/index.php/Germany/Projekte/Top_10_fuer_Entwickler-2013/A6-Verlust_der_Vertraulichkeit_sensibler_Daten#tab=JAVA2>, yet.
I'd like to discuss them here and add them in the Transport Layer Protection Cheat Sheet.<http://Transport%20Layer%20Protection%20Cheat%20Sheet>
Do you have any comments. Should I add my input in a new 'DRAFT:'-Copy of the document before transfering it to the Cheat Sheet?
Perhaps you find more points that should be updated.

Kind Regards
Torsten


Only Support Strong Cryptographic Ciphers:
?

* use the very latest recommendations, they may be volantile these days
* Secure length for cryptographic keys and parameters (like DH-parameter) >=2048 bits or equivalent Elliptic Curves

Example for a Policy to get a Whitelist for recommenderd Ciphers:
* Activate to set the Cipher Order by the Server
* Highest Priority for Ciphers that support 'Forward Secrecy'
* Favor DHE over ECDHE, ECDHE lacks now of really reliable Elliptic Curves, cf. http://safecurves.cr.yp.to;
* Use RSA-Keys (no DSA/DSS, cf. https://projectbullrun.org/dual-ec/tls.html)
* Favor GCM over CBC regardless of the cipher size
* Priorize the ciphers by the sizes of the Cipher and the MAC
* Disable weak ciphers without diabling latency browsers and bots that have to be supported (find the best compromise), actually the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA (0xa) does this job.
* Ciphers should be usable for DH-Pamameters >= 2048 bits, without blocking latency browsers (The cipher ?DHE-RSA-AES128-SHA? is suppressed as some browsers like to use it but are not capable to cope with DH-Params > 1024 bits.)
* Define a Cipher String that works with different Versions of your encryption tool, like openssl,
* Verify your cipher string
  ? with an autit-tool, like OWASP 'O-Saft'<https://www.owasp.org/index.php/O-Saft>
  ? listing it manually with your encryption software, e.g. openssl ciphers -v <cipher-string> (the result may differ by version), e.g.: openssl ciphers -v 'EDH+aRSA+AESGCM:EDH+aRSA+AES:DHE-RSA-AES256-SHA:EECDH+aRSA+AESGCM:EECDH+aRSA+AES:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:RSA+AESGCM:RSA+AES+SHA:DES-CBC3-SHA:-DHE-RSA-AES128-SHA'
#add optionally ':!aNULL:!eNULL:!LOW:!MD5:!EXP:!PSK:!DSS:!RC4:!SEED:!ECDSA:!ADH:!IDEA' to protect older Versions of OpenSSL

* This results in this recommended Cpihers and their Order:

0x00,0x9F - DHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=DH       Au=RSA  Enc=AESGCM(256) Mac=AEAD

0x00,0x9E - DHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=DH       Au=RSA  Enc=AESGCM(128) Mac=AEAD

0x00,0x6B - DHE-RSA-AES256-SHA256   TLSv1.2 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA256

0x00,0x39 - DHE-RSA-AES256-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA1

0x00,0x67 - DHE-RSA-AES128-SHA256   TLSv1.2 Kx=DH       Au=RSA  Enc=AES(128)  Mac=SHA256

0xC0,0x30 - ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AESGCM(256) Mac=AEAD

0xC0,0x2F - ECDHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AESGCM(128) Mac=AEAD

0xC0,0x28 - ECDHE-RSA-AES256-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AES(256)  Mac=SHA384

0xC0,0x14 - ECDHE-RSA-AES256-SHA    SSLv3 Kx=ECDH     Au=RSA  Enc=AES(256)  Mac=SHA1

0xC0,0x27 - ECDHE-RSA-AES128-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AES(128)  Mac=SHA256

0xC0,0x13 - ECDHE-RSA-AES128-SHA    SSLv3 Kx=ECDH     Au=RSA  Enc=AES(128)  Mac=SHA1

0x00,0x9D - AES256-GCM-SHA384       TLSv1.2 Kx=RSA      Au=RSA  Enc=AESGCM(256) Mac=AEAD

0x00,0x9C - AES128-GCM-SHA256       TLSv1.2 Kx=RSA      Au=RSA  Enc=AESGCM(128) Mac=AEAD

0x00,0x35 - AES256-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(256)  Mac=SHA1

0x00,0x2F - AES128-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(128)  Mac=SHA1

0x00,0x0A - DES-CBC3-SHA            SSLv3 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=SHA1

Remarks:

- According to my researches the most common browsers should be supported with this setting, too.

- Monitor the performance of your server, e.g. the TLS handshake with DHE hinders the CPU abt 2.4 times than ECDHE (cf. [Vincent Bernat, 2011]<http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html#some-benchmarks>)

On additional Point:
I'd like to launch also a discussion if we should find references to good practices that are not dependant on Documents from NIST.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140616/86f2fe0c/attachment-0001.html>

From torsten.gigler at owasp.org  Mon Jun 16 23:04:55 2014
From: torsten.gigler at owasp.org (Torsten Gigler)
Date: Tue, 17 Jun 2014 01:04:55 +0200
Subject: [OWASP-cheat-sheets] Transport Layer Protection Cheat Sheet:
 Strong Protocols and Ciphers for TLS/SSL
In-Reply-To: <859F43324A6FEC448BFEA30C90405FA905A62E@SEAEMBX02.olympus.F5Net.com>
References: <CA+M5M1d+Zhxi2K9Wuo47i=p_jJsu=1vd17CHcwa4mEAPtC0tBQ@mail.gmail.com>
	<61133c9f643210c08f1e69e4473c9bd2@mail.gmail.com>
	<859F43324A6FEC448BFEA30C90405FA9050353@SEAEMBX02.olympus.F5Net.com>
	<5586370951357755218@unknownmsgid>
	<859F43324A6FEC448BFEA30C90405FA9052BAF@SEAEMBX02.olympus.F5Net.com>
	<5399E833.9060706@owasp.org> <539A0880.5010304@owasp.org>
	<859F43324A6FEC448BFEA30C90405FA905A62E@SEAEMBX02.olympus.F5Net.com>
Message-ID: <539F7817.7010801@owasp.org>

Hi David,

thank you for your researches.

Yesterday I put my proposed additions direct to the wiki: Transport 
Layer Protection Cheat Sheet. 
<http://Transport%20Layer%20Protection%20Cheat%20Sheet> Please feel free 
to review it.

Kind regards
Torsten


Am 16.06.2014 17:58, schrieb David Holmes:
> Sorry for my delay. I checked around F5 and we?re neutral on the issue 
> of DHE vs ECDHE. So we are okay with this ciphers as you proposed them 
> (at least in that regards)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140617/5b74647f/attachment.html>

From jim.manico at owasp.org  Wed Jun 18 08:33:52 2014
From: jim.manico at owasp.org (Jim Manico)
Date: Wed, 18 Jun 2014 16:33:52 +0800
Subject: [OWASP-cheat-sheets] ECDHE is better
Message-ID: <7820459236356906816@unknownmsgid>

PS: ECDHE is _much_ faster and generally should be more secure.

(From Ivan)

--
Jim Manico
@Manicode
(808) 652-3805

From torsten.gigler at owasp.org  Thu Jun 19 16:01:35 2014
From: torsten.gigler at owasp.org (Torsten Gigler)
Date: Thu, 19 Jun 2014 18:01:35 +0200
Subject: [OWASP-cheat-sheets] ECDHE is better
In-Reply-To: <7820459236356906816@unknownmsgid>
References: <7820459236356906816@unknownmsgid>
Message-ID: <53A3095F.6000206@owasp.org>

Hi Jim,

Thank you for forwarding the feedback.

Yes DHE versus ECDHE a very interesting part of the latest discussion, 
how to set up Perfect Secrecy.
I have not found *any open Whitelist* saying this or that Elliptic Curve 
defined for TLS and used by server and client implementations is secure 
(as far as this can be proved today). I found only 4 Curves in 
http://safecurves.cr.yp.to, that were all 4 marked *not* to be safe! 
 From those marked to be safe, I did not find any that match to the 
definitions of TLS (RFC4492, Appendix A).

Do you see any possibility as OWASP to support researches on this, or to 
add Curves like Curve 25519 to the TLS standard?

As conclusion for the cheat sheet, I do think to favor a slower and more 
secure TLS Cipher over a faster and less secure one (ECDHE) as long as 
there do not appear any new inependantly approved Elliptic Curves. 
Additionally the disadvantage of the the speed is concerning only the 
TLS handshake . This happens only at the begin of a SSL/TLS connection 
and if necessary following renegotiation phases, *not* the Data 
Encryption itself.

I added a hint on this discussion, and a link to the Note about the CPU 
usage to the wiki:

"* Favor DHE over ECDHE (and monitor the CPU usage, see Notes below), 
ECDHE lacks now of really reliable Elliptic Curves, see discussion about 
secp{224,256,384,521}r1 and secp256k1, cf. [2] 
<http://safecurves.cr.yp.to>, [3] 
<https://www.schneier.com/blog/archives/2013/09/the_nsa_is_brea.html#c1675929>; 
One solution might be to use Edwards Curves 
<http://eprint.iacr.org/2007/286>. The most promising candidate is 
'Curve25519' 
<https://tools.ietf.org/html/draft-josefsson-tls-curve25519-05>, that is 
not yet defined for TLS, cf. IANA 
<http://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-8>
...
*Notes:**
...**Monitor the performance of your server, e.g. the TLS handshake with 
DHE hinders the CPU abt 2.4 times more than ECDHE, cf. Vincent Bernat, 
2011 
<http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html#some-benchmarks>."

Kind Regards
Torsten

PS: By the way: 'owap. org' does not support any ECDHE ciphers at the 
moment, the first 6 Ciphers for TLSv12 are DHE ones ;-)
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x0300009E, 
DHE-RSA-AES128-GCM-SHA256       , DHE_RSA_WITH_AES_128_GCM_SHA256
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x0300009F, 
DHE-RSA-AES256-GCM-SHA384       , DHE_RSA_WITH_AES_256_GCM_SHA384
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000067, 
DHE-RSA-AES128-SHA256           , DHE_RSA_WITH_AES_128_SHA256
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000033, 
DHE-RSA-AES128-SHA              , DHE_RSA_WITH_AES_128_SHA
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x0300006B, 
DHE-RSA-AES256-SHA256           , DHE_RSA_WITH_AES_256_SHA256
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000039, 
DHE-RSA-AES256-SHA              , DHE_RSA_WITH_AES_256_SHA
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x0300009C, 
AES128-GCM-SHA256               , RSA_WITH_AES_128_GCM_SHA256
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x0300009D, 
AES256-GCM-SHA384               , RSA_WITH_AES_256_GCM_SHA384
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x0300003C, 
AES128-SHA256                   , RSA_WITH_AES_128_SHA256
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x0300002F, 
AES128-SHA                      , RSA_WITH_AES_128_SHA
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x0300003D, 
AES256-SHA256                   , RSA_WITH_AES_256_SHA256
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000035, 
AES256-SHA                      , RSA_WITH_AES_256_SHA
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000005, 
RC4-SHA                         , RSA_RC4_128_SHA
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000088, 
DHE-RSA-CAMELLIA256-SHA         , DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000084, 
CAMELLIA256-SHA                 , RSA_WITH_CAMELLIA_256_CBC_SHA
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000045, 
DHE-RSA-CAMELLIA128-SHA         , DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000041, 
CAMELLIA128-SHA                 , RSA_WITH_CAMELLIA_128_CBC_SHA

If a commonly accepted cipher string is found, I'd suggest to set up 
owasp.org as a reference installation ....

Am 18.06.2014 10:33, schrieb Jim Manico:
> PS: ECDHE is _much_ faster and generally should be more secure.
>
> (From Ivan)
>
> --
> Jim Manico
> @Manicode
> (808) 652-3805
> _______________________________________________
> OWASP-cheat-sheets mailing list
> OWASP-cheat-sheets at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140619/b5bb8c0f/attachment.html>

From jim.manico at owasp.org  Sat Jun 21 18:17:54 2014
From: jim.manico at owasp.org (Jim Manico)
Date: Sat, 21 Jun 2014 19:17:54 +0100
Subject: [OWASP-cheat-sheets] ECDHE is better
In-Reply-To: <53A3095F.6000206@owasp.org>
References: <7820459236356906816@unknownmsgid> <53A3095F.6000206@owasp.org>
Message-ID: <5396065680934957796@unknownmsgid>

Torsten,

(from another expert who shall remain nameless)

If your threat model includes the NSA -- which are suspected to be
behind the parameters of the NIST curves -- then you shouldn't be using TLS
in the first place. That line of thinking isn't very productive. 99.99% of
sites don't have the NSA as their adversary.

It's important to understand what you're defending against.

Some further points:

- I haven't seen any actual _evidence_ that the NIST curves are insecure.
They might or might not be (insecure), but you can't make decisions based
on speculation alone.

- Without ECDHE you're unlikely to have _any_ forward secrecy with
Microsoft platforms. SSL Labs warns about this for OWASP:

https://dev.ssllabs.com/ssltest/analyze.html?d=owasp.org&hideResults=on

- As a rule of thumb, resumption works 50% of the time.

- Curve 25519 is being added to TLS.

- OWASP's DH parameters are only 1024 DH bits, which is about 80 bits
of security. With ECDHE, you'd have super-strong 128 bits. That's a
fact, not speculation ;)

--
Jim Manico
@Manicode
(808) 652-3805

On Jun 19, 2014, at 5:01 PM, Torsten Gigler <torsten.gigler at owasp.org>
wrote:

 Hi Jim,

Thank you for forwarding the feedback.

Yes DHE versus ECDHE a very interesting part of the latest discussion, how
to set up Perfect Secrecy.
I have not found *any open Whitelist* saying this or that Elliptic Curve
defined for TLS and used by server and client implementations is secure (as
far as this can be proved today). I found only 4 Curves in
http://safecurves.cr.yp.to, that were all 4 marked *not* to be safe! From
those marked to be safe, I did not find any that match to the definitions
of TLS (RFC4492, Appendix A).

Do you see any possibility as OWASP to support researches on this, or to
add Curves like Curve 25519 to the TLS standard?

As conclusion for the cheat sheet, I do think to favor a slower and more
secure TLS Cipher over a faster and less secure one (ECDHE) as long as
there do not appear any new inependantly approved Elliptic Curves.
Additionally the disadvantage of the the speed is concerning only the TLS
handshake . This happens only at the begin of a SSL/TLS connection and if
necessary following renegotiation phases, *not* the Data Encryption itself.

I added a hint on this discussion, and a link to the Note about the CPU
usage to the wiki:

"* Favor DHE over ECDHE (and monitor the CPU usage, see Notes below), ECDHE
lacks now of really reliable Elliptic Curves, see discussion about
secp{224,256,384,521}r1 and secp256k1, cf. [2] <http://safecurves.cr.yp.to>,
[3]
<https://www.schneier.com/blog/archives/2013/09/the_nsa_is_brea.html#c1675929>;
One solution might be to use Edwards Curves
<http://eprint.iacr.org/2007/286>. The most promising candidate is
'Curve25519' <https://tools.ietf.org/html/draft-josefsson-tls-curve25519-05>,
that is not yet defined for TLS, cf. IANA
<http://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-8>
...
*Notes:*
* ...**Monitor the performance of your server, e.g. the TLS handshake with
DHE hinders the CPU abt 2.4 times more than ECDHE, cf. Vincent Bernat, 2011
<http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html#some-benchmarks>
."

Kind Regards
Torsten

PS: By the way: 'owap. org' does not support any ECDHE ciphers at the
moment, the first 6 Ciphers for TLSv12 are DHE ones ;-)
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x0300009E,
DHE-RSA-AES128-GCM-SHA256       , DHE_RSA_WITH_AES_128_GCM_SHA256
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x0300009F,
DHE-RSA-AES256-GCM-SHA384       , DHE_RSA_WITH_AES_256_GCM_SHA384
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000067,
DHE-RSA-AES128-SHA256           , DHE_RSA_WITH_AES_128_SHA256
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000033,
DHE-RSA-AES128-SHA              , DHE_RSA_WITH_AES_128_SHA
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x0300006B,
DHE-RSA-AES256-SHA256           , DHE_RSA_WITH_AES_256_SHA256
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000039,
DHE-RSA-AES256-SHA              , DHE_RSA_WITH_AES_256_SHA
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x0300009C,
AES128-GCM-SHA256               , RSA_WITH_AES_128_GCM_SHA256
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x0300009D,
AES256-GCM-SHA384               , RSA_WITH_AES_256_GCM_SHA384
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x0300003C,
AES128-SHA256                   , RSA_WITH_AES_128_SHA256
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x0300002F,
AES128-SHA                      , RSA_WITH_AES_128_SHA
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x0300003D,
AES256-SHA256                   , RSA_WITH_AES_256_SHA256
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000035,
AES256-SHA                      , RSA_WITH_AES_256_SHA
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000005,
RC4-SHA                         , RSA_RC4_128_SHA
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000088,
DHE-RSA-CAMELLIA256-SHA         , DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000084,
CAMELLIA256-SHA                 , RSA_WITH_CAMELLIA_256_CBC_SHA
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000045,
DHE-RSA-CAMELLIA128-SHA         , DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
owasp.org,   443, TLSv12 (0x0303), no SNI, Server Order, 0x03000041,
CAMELLIA128-SHA                 , RSA_WITH_CAMELLIA_128_CBC_SHA

If a commonly accepted cipher string is found, I'd suggest to set up
owasp.org as a reference installation ....

Am 18.06.2014 10:33, schrieb Jim Manico:

PS: ECDHE is _much_ faster and generally should be more secure.

(From Ivan)

--
Jim Manico
@Manicode
(808) 652-3805
_______________________________________________
OWASP-cheat-sheets mailing
listOWASP-cheat-sheets at lists.owasp.orghttps://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140621/7b044545/attachment.html>

From torsten.gigler at owasp.org  Sun Jun 22 19:20:33 2014
From: torsten.gigler at owasp.org (Torsten Gigler)
Date: Sun, 22 Jun 2014 21:20:33 +0200
Subject: [OWASP-cheat-sheets] DHE versus ECDHE
In-Reply-To: <5396065680934957796@unknownmsgid>
References: <7820459236356906816@unknownmsgid> <53A3095F.6000206@owasp.org>
	<5396065680934957796@unknownmsgid>
Message-ID: <53A72C81.8060200@owasp.org>

Dear Jim,

thank you for forwarding this feedback.

Am 21.06.2014 20:17, schrieb Jim Manico:
> Torsten,
>
> (from another expert who shall remain nameless)
It's a pity, it is is easier to discuss with somebody with a name.
>
> If your threat model includes the NSA -- which are suspected to be
> behind the parameters of the NIST curves -- then you shouldn't be 
> using TLS in the first place. That line of thinking isn't very 
> productive. 99.99% of sites don't have the NSA as their adversary.
>
> It's important to understand what you're defending against.
Well, I run for Web Application Security in general. I see this as a 
fundamental Trade-Off between Security, Costs and Usability.
I do see for the decision DHE versus ECDHE in this case:
- Security: There are 2 Ways to realize Perfect Forward Secrecy (PFS) 
with TLS (to obtain long term security for the Transported Data):
   + DHE:     I have not found fundamental discussions about the 
security of this Protocol, which is considered as a reliable indicator 
for that it is simply doing for what is developed
   + ECDHE: There are serious discussions about the security of the 
NIST-Curves: Main issue is that 'Coefficients (are) generated by hashing 
the unexplained seed'. It had been claimed that this was done for 
'performance reasons'. As some cryptography specialists with the highest 
reputation could not confirm this, they even figured out just the 
opposite: "Subsequent research ... showed that essentially all of these 
efficiency-related decisions were suboptimal, that many of them actively 
damaged efficiency, and that some of them were bad for security" 
[http://safecurves.cr.yp.to/], "I no longer trust the constants. I 
believe the NSA has manipulated them through their relationships with 
industry." 
[https://www.schneier.com/blog/archives/2013/09/the_nsa_is_brea.html#c1675929]. 

   => As a conclusion DHE is considered as the *first* and ECDHE only as 
the *second* best practice (from security aspect).

- Costs: As mentioned in the Cheat Sheet "*TLS handshake* with DHE 
hinders the CPU abt 2.4 times more than ECDHE, cf. Vincent Bernat, 2011 
<http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html#some-benchmarks>." 
-> I think this is (generally) OK.

- Usability: The Ciphers are transparent for the users, so the worst 
that could happen should be some milliseconds longer time to wait -> OK

So I do think it is a good practice to favor DHE over ECDHE (The server 
negotiates DHE with Browsers that support DHE+ECDHE or DHE, and ECDHE 
with Browsers that support solely ECDHE (like Internet Explorer))
Protection: I think, we should protect our services against any attacker 
if we can bring these 3 things in a line. All other things may be a 
local decision according to a personal risk assessment.
> Some further points:
>
> - I haven't seen any actual _evidence_ that the NIST curves 
> are insecure. They might or might not be (insecure), but you can't 
> make decisions based on speculation alone.
I consider the above results as a fact that the line of arguments about 
the claimed use of the ECDHE parameters is not conclusive in itself (at 
least it could be seen as 'security by obscurity', as long as the 
responsible standardization institution does not explain more detailed 
the reason why the parameters are like they are). So why take the second 
quality? This may change when commonly accepted Curves will be available.
>
> - Without ECDHE you're unlikely to have _any_ forward secrecy with
> Microsoft platforms. SSL Labs warns about this for OWASP:
>
> https://dev.ssllabs.com/ssltest/analyze.html?d=owasp.org&hideResults=on
>
Yes, I agree with this. ECDHE is part of the cipher suite I am 
suggesting in the Cheat Sheet, but as second quality as a fall back for 
software and hardware that does *not* support DHE: E.g. IE7-11 on Vista 
and newer use 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)' according to 
my cipher simulation. Latency browsers like IE6/IE8 on XP/Win2003 will 
fall back to 'TLS_RSA_WITH_3DES_EDE_CBC_SHA (0xa)' (without perfect 
forward secrecy).
> - As a rule of thumb, resumption works 50% of the time.
Thanks for this input. I'd like to add this to the 'Notes' section. Do 
you have any link for this?
>
> - Curve 25519 is being added to TLS.
I have *not* found it in the IANA standard, yet: 
http://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-8
Do you have a latest information on this? Do you know implementations 
for TLS?
>
> - OWASP's DH parameters are only 1024 DH bits, which is about 80 bits 
> of security. With ECDHE, you'd have super-strong 128 bits. That's a 
> fact, not speculation ;)
>
This is an issue of this site of today. I agree with you that this 
should be changed, too: "If a commonly accepted cipher string is found, 
I'd suggest to set up owasp.org <http://owasp.org> as a reference 
installation ...." (this goes beyond the cipher sting). But this is a 
different discussion...

Kind regards and stay secure
Torsten
> --
> Jim Manico
> @Manicode
> (808) 652-3805
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140622/e58ed2b2/attachment.html>

From jim.manico at owasp.org  Sat Jun 28 08:44:18 2014
From: jim.manico at owasp.org (Jim Manico)
Date: Sat, 28 Jun 2014 09:44:18 +0100
Subject: [OWASP-cheat-sheets] Cheat sheet changes in Sept 2012
In-Reply-To: <CAOPE6PiwbqpDnveEekEfZCLiWgD6oJWCBs1W54b6dGWMqByx6Q@mail.gmail.com>
References: <CADUV2kAH9xsqRhePObkj8ittq7WC3NfXLGU_BABdSiQDeSxABA@mail.gmail.com>	<CAOPE6Pgs9RTnD-Ya4xyj961TJW0W-Pzi=+s85Zedfbm0yb4feg@mail.gmail.com>	<CADUV2kDBDnBMsB4o2BHMM2xeu7TAYvFmXvFXahyqzy6DnMYbyA@mail.gmail.com>	<3267715073786215079@unknownmsgid>
	<CAOPE6PiwbqpDnveEekEfZCLiWgD6oJWCBs1W54b6dGWMqByx6Q@mail.gmail.com>
Message-ID: <53AE8062.1070002@owasp.org>

We clawed, we chained cheat sheets in vain
We edited the wiki never asking why
New cheatsheet, I fell under your spell.
A contribution no one could deny

Don't you ever say I just walked away
I will always edit you
I can't contribute a lie, running for my life
I will always forget you (password)

/I edited like a wrecking ball//
//I never wikied so hard in OWASP//
//All I wanted was to break your walls//
//All you ever did was ... edit me//
//Yeah, you, you ... edit me/

I never meant to start a wiki war
I just wanted you to let my edits in
And instead of using force
I guess I should've let you win
I never meant to start a wiki war
I just wanted you to let my edits in...
I guess I should've let you win

*wink*

For Kevin and Dave,
Aloha,
Jim

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140628/b66a2ed6/attachment.html>

From jim.manico at owasp.org  Sat Jun 28 15:23:27 2014
From: jim.manico at owasp.org (Jim Manico)
Date: Sat, 28 Jun 2014 16:23:27 +0100
Subject: [OWASP-cheat-sheets] Cheat sheet changes in Sept 2012
In-Reply-To: <CAOPE6PhfTdh6yCjYPT2LaOBn523oVojdDHt2zXvE8BvF-3HNNw@mail.gmail.com>
References: <CADUV2kAH9xsqRhePObkj8ittq7WC3NfXLGU_BABdSiQDeSxABA@mail.gmail.com>	<CAOPE6Pgs9RTnD-Ya4xyj961TJW0W-Pzi=+s85Zedfbm0yb4feg@mail.gmail.com>	<CADUV2kDBDnBMsB4o2BHMM2xeu7TAYvFmXvFXahyqzy6DnMYbyA@mail.gmail.com>	<3267715073786215079@unknownmsgid>	<CAOPE6PiwbqpDnveEekEfZCLiWgD6oJWCBs1W54b6dGWMqByx6Q@mail.gmail.com>	<53AE8062.1070002@owasp.org>
	<CAOPE6PhfTdh6yCjYPT2LaOBn523oVojdDHt2zXvE8BvF-3HNNw@mail.gmail.com>
Message-ID: <53AEDDEF.3020802@owasp.org>

 > LOL. Is that going to be played by the OWASP band at the next AppSec USA?

Oh my no. :)

 > You should definitely put it up on the wiki. ;-)

Heck no, but it's a wiki and I can't stop you (other than reverting your 
changes)

*wink*

Aloha Kevin,
Jim

> -kevin
> Sent from my Droid; please excuse typos.
>
> On Jun 28, 2014 4:44 AM, "Jim Manico" <jim.manico at owasp.org 
> <mailto:jim.manico at owasp.org>> wrote:
>
>     We clawed, we chained cheat sheets in vain
>     We edited the wiki never asking why
>     New cheatsheet, I fell under your spell.
>     A contribution no one could deny
>
>     Don't you ever say I just walked away
>     I will always edit you
>     I can't contribute a lie, running for my life
>     I will always forget you (password)
>
>     /I edited like a wrecking ball//
>     //I never wikied so hard in OWASP//
>     //All I wanted was to break your walls//
>     //All you ever did was ... edit me//
>     //Yeah, you, you ... edit me/
>
>     I never meant to start a wiki war
>     I just wanted you to let my edits in
>     And instead of using force
>     I guess I should've let you win
>     I never meant to start a wiki war
>     I just wanted you to let my edits in...
>     I guess I should've let you win
>
>     *wink*
>
>     For Kevin and Dave,
>     Aloha,
>     Jim
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140628/511f804a/attachment.html>

