From mkonakan at amazon.com  Mon Oct  1 21:41:42 2018
From: mkonakan at amazon.com (Konakandla, Manideep)
Date: Mon, 1 Oct 2018 21:41:42 +0000
Subject: [OWASP-cheat-sheets]
 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<CANos97dDU1AZh3DV=3oLZefvLp3pW80ib6nDz9Qw6FVj3OPeqg@mail.gmail.com>
	<babd67cd35484563936bd0326fda0518@EX13D11UWB004.ant.amazon.com>
	<CANos97dEyEOiExVrJ1qGr4uDbOMraRtQK9+U61jugoSc7PBPGA@mail.gmail.com>
	<6d53af0e5d9d459aacec5565c49d1f6b@EX13D11UWB004.ant.amazon.com>
	<CANos97cbaHSc9uUyc6G1-SPnM7pyY0AF7D2pmEV30yGmqbS_+A@mail.gmail.com>
	<e05fc4606d4447f994abfeb25130a711@EX13D11UWB004.ant.amazon.com>
	<CANos97em5kiaScJggFf2NetwXF709-TNaxvaCdv+yQ4Wk9iDYA@mail.gmail.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com> 
Message-ID: <d817238c296641fc8b1089d9c81d2e31@EX13D11UWB004.ant.amazon.com>

For now, I removed the reference to DWR and also added a generic statement about .NET protection till someone knows and updates the in-details of its current state.

I also wanted to let you guys know that I will be off for vacation from 16th of October to end of November with very limited access to my work resources and quite sure will be tied up with office work for a while after I return. So, let?s plan to get the updated document on OWASP page before October 16th. I am trying my level best from my side to get it out ASAP to you guys for review.

Are there anything?s that need to be taken care now so that we can save some time after I get the document to you people for review?

From: Konakandla, Manideep
Sent: Friday, September 28, 2018 6:35 PM
To: 'Jim Manico' <jim at manicode.com>
Cc: Dominique Righetto <dominique.righetto at owasp.org>; Jim Manico <jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>; eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
Subject: RE: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Login CSRF is a way of exploiting CSRF on login forms (details here<https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a line about it in referrer validation section, it was not explained clearly and how it can scale with other techniques such as token based mitigation. No worries, I added a section about it!

Finally, I am done with the document from my side and its sent for internal reviews now. It should take 1-2 weeks before it comes to you guys. Meanwhile, I still need help on below items from you guys. If no one was able to find references for a), we can very well remove it.


a.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

b.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked in current cheatsheet

Happy weekend folks ?

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Thursday, September 27, 2018 3:02 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

...as for (d) I dont see any problems with passing tokens as headers or parameters

I dont understand (e) can you explain that again?
--
Jim Manico
@Manicode
Secure Coding Education
+1 (808) 652-3805

On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
2 more questions added  (Jim already started helping me on #a)


a.     I requested for an OWASP account and it?s still in pending. @JIM ? Can you please help me in getting my account approved? (registered with mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>)

b.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

c.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked

d.     At few places within the wiki, I have seen recommending to include token in headers for Ajax requests. I also don?t see a problem in passing them as parameters as well. Do you guys see any?

e.     I also have not seen at any place within the wiki talking about login CSRF issues and how each of the techniques described can be prone/immune to it. Is there any reason for it or are we open to include that?

From: Konakandla, Manideep
Sent: Wednesday, September 26, 2018 5:27 PM
To: 'Jim Manico' <jim at manicode.com<mailto:jim at manicode.com>>; 'Dominique Righetto' <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Cc: 'Jim Manico' <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; 'Dave Wichers' <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; 'eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>' <eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: RE: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Yeah. My understanding of the breadth of exploitation of XSS in an application protected with just origin/referrer and other application protected with just token based mitigation earlier was wrong. Dominique earlier email thread cleared that to me (breadth of exploitation is same in both the cases. i.e., if an XSS vulnerability is found in any individual application protected with only one of those techniques, it still can exploit all state changing operations on entire application [though the complexity of exploitation is easy in origin/referrer check than token based mitigation]).

Anyway, I am all clear and also almost done with re-factoring the cheatsheet  [1] ? Should be fully completed by Friday unless something comes up meanwhile. I will then send it to my colleagues for review and then for Legal, PR approvals. Before that, I need help from you guys on below items


a.     I requested for an OWASP account and it?s still in pending. @JIM ? Can you please help me in getting my account approved? (registered with mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>)

b.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

c.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked

[1] Below are changes done so far
a. Switched primary, secondary defense and our reasoning behind it (added lot of reasons on issues with origin/referrer header check and why token should be made primary)
b. Added CSRF mitigation myths (CORS, content-type validation etc.)
c. Added a section called ?Not so popular CSRF mitigations? (mentioned details about triple submit cookie)
d. Included limitations / issues associated with double submit cookie, same site cookie, captcha as a CSRF defense etc.
e. Removed lot of obsolete content and added some new content to some of the mitigations
f. Made document look more better by adding RFC?s links wherever possible and lot of other minor changes.

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Wednesday, September 26, 2018 4:19 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet


Well tokens can be placed in cookies.

The real answer to avoid CSRF is tokens in JavaScript variable as opposed to cookies. They are not automatically sent and indeed make CSRF impossible - at the expense of tokens being fully stolen via XSS. Pick your poison!

I recommend a COMBO of these defenses. For web apps, sychronizer token + header verification + re-authentication for sensitive features.

For API's double-cookie submit or just use JavaScript variable based tokens + header verification for same-site API's + re-authentication for sensitive features.
> [1] If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operationswithin that domain done to that AJAX endpoint. Do you agree?

Absolutely!

On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
Yeah, I understand that any XSS and CSRF game is over but I am stressing out on the highlighted part in [1]. I am trying to highlight and get an affirmation on why my understanding on token based mitigation is better than origin/referrer header check will also apply to ?token based mitigation Vs custom header mitigation (if static tokens are used in custom headers)?.

In case of tokens, we have an option to use different tokens on each page (taking things like URL, timestamp etc. into consideration) and hence XSS vulnerability on one page will only make state changing operations in that page vulnerable to CSRF but not state changing operations on other pages within that domain (because token value is different) but whereas in origin/referrer header check and custom header check, the token value is constant and hence XSS vulnerability in one page will also cause state changing operations in other pages to be vulnerable to CSRF as well. Off course, this can be mitigated in custom header checks by adding tokens to custom headers rather than static constant but this cannot be mitigated in origin/referrer check because those headers cannot be modified. So, yeah a single XSS any CSRF is bypassed but the breadth of the impact is different for each of them.

Regarding code samples ? I currently was able to allocate only some time for this task and I don?t think I will be able to do code samples within this time frame. I am also leaving for a long vacation starting Oct 12 and hence let?s try to get this out first and we can add code samples later on considering my work load after I return from vacation.

[1] If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

From: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Sent: Thursday, September 20, 2018 8:45 AM
To: Jim Manico <jim at manicode.com><mailto:jim at manicode.com>
Cc: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>; Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hi,

Thanks for your contribution.

I like very much your plan ?

I ask for some favor in addition :
- can you provide code sample (in one language like java or .net or the one you want but it must be easy to read and understand) or libraires along your proposal for each section?
- can you use the syntaxhighlight tag for code?

I'am agree with Jim, XSS  means game over because your browsing context can be used as proxy so csrf protection will be defeated because request came from the legitimate user.

Thanks you again for all your help ???

Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com<mailto:jim at manicode.com>> a ?crit :

> If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

Any XSS is game over and all CSRF are useless in the face of XSS. I Agree!

- Jim

On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
Hey Guys,

[1] is what I said for origin/referrer header check in this e-mail thread. I also believe that this applies for custom headers for AJAX endpoints as well. If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

Here is how I am keeping the new re-factored cheatsheet. Does this look good to you guys?


1.       Use token based method as primary defense

a.       Can use synchronizer pattern for stateful applications

b.       Can use hah based/ encryption based token pattern for stateless applications

2.       Defense in depth measures along with drawbacks of each one

a.       Origin/referrer header check

b.       Double submit cookie

c.       Samesite cookie

d.       Custom headers (people still need to use tokens for forms etc. if they have mix of ajax endpoints and general HTML)

3.       Strong CSRF defenses but very less usable : captcha etc.

4.       CSRF Myths / techniques that do not work section

[1] if we solely rely on origin/referrer header check - an XSS vulnerability within a single page on that domain will also give CSRF vulnerability to all other state changing operations under that entire domain.

From: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Sent: Wednesday, September 12, 2018 1:31 PM
To: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>
Cc: Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi

Thanks you very much for the update

Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Just an update: I started working on this along with other sprint tasks of mine today. I am hoping to get it completed by end of next week and then send it for legal/PR approvals.

From: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>
Sent: Thursday, August 23, 2018 6:49 AM
To: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>


Awesome! Thank you! :)

- Jim

On 8/23/18 2:41 AM, Dominique Righetto wrote:
You are welcome :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Thu, Aug 23, 2018 at 10:33 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Np. I will keep u guys posted. Thanks for the support and have good rest of your day!

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Thursday, August 23, 2018 1:29 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi,

Sounds goods for me.

Thanks again for the contribution :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Thu, Aug 23, 2018 at 10:03 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Ok, I received necessary approvals for working on this. I am hoping to start the work in 2 weeks and then deliver the document to you guys for review by end of September/1st week of October (might be 1-2 weeks delay if approvals from Legal and other teams get delayed). My plan is to work on below things ? Please let me know if I missed anything/you feel something else has to be added to this list.


1.       Change the order of primary and defense in depth measures

2.       Include the pitfalls/caveats for each CSRF mitigation technique (origin/referrer header, samesite, double submit cookie etc.)

3.       Re-structure entire page and remove outdated/ non-relevant stuff

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Thursday, August 16, 2018 12:02 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Ok i perfectly understand.
Thanks for the info.

Le jeu. 16 ao?t 2018 ? 20:33, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
I had an offline discussion with Jim and informed him that I will have to check few details before I give any commitment to update the guidance?s here.

Update: I got approval internally from my team to work on this (fix issues and re-structure entire page) but I still need to get approval from Legal team to work on this. I will let you guys know when I hear back from them. Most likely they will ask me to just get it reviewed with them before sending it to you guys for review/get it published on OWASP page.

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Tuesday, August 14, 2018 11:02 PM
To: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>
Cc: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Roadmap has been updated: https://trello.com/b/w020m3jQ/cs-roadmap
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Mon, Aug 13, 2018 at 6:03 AM Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>> wrote:
I have finally achieved to read the thread, very interesting  ?

I understand the need to simplify the cheat sheet and the solutions proposed. It is one of the reason why i have add code sample. So this contribution is a very good point.

Just a little thing about header, take care to ensure that the referrer policy of the site is not set to no-referrer otherwise you cannot use origin/referrer headers couple to create a protection layer.

Tanks you for the helps proposal ?


Le dim. 12 ao?t 2018 ? 22:21, Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>> a ?crit :

That makes sense. We're not going to get consensus but you demonstrated mastery over this material. I am impressed.

Please consider yourself owner of the page and edit as you see fit. I'll keep an eye on your edits and make comments as you go.

But please go ahead and charge.

> I also personally don?t recommend double submit cookies for enterprises that have lot of subdomains for which they might not be sure if they are 100% secure

Makes sense, but what DO you suggest for stateless services and CSRF defense?

Aloha, Jim

On 8/10/18 10:41 AM, Konakandla, Manideep wrote:
Thanks. I also personally don?t recommend double submit cookies for enterprises that have lot of subdomains for which they might not be sure if they are 100% secure. More details are explained here<https://media.blackhat.com/eu-13/briefings/Lundeen/bh-eu-13-deputies-still-confused-lundeen-wp.pdf> (section 2.1.1). I think this is something that has to be mentioned in the wiki as well.

Do we have a consensus process before we edit the page? Or current discussion is enough?  How do we want to go next? I am not quite sure at the moment if I will be able to contribute (I can let you know after checking few details).

From: Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>
Sent: Friday, August 10, 2018 1:23 PM
To: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>; Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Cc: Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>


All I'm saying is that it's a good idea to split browser standard based CSRF defense and defenses that require tokens.
And you know, I am not at all opposed to making tokens the primary defense. I think that's totally fair. In fact for my words its...

1) Use a token method - either normal syncronizer tokens or double-submit-cookies for stateless services. This is the main defense in use today.

2) I also do header defense and think it's secondary. I only use headers by themselves for lower risk services and it's normally easy to deploy as long as I only need to defense posts. If get and posts transact, this becomes tough to deploy.

3) I always use the samesite cookie for single-domain applications. This gets weird in mash-up cases.

So yea, I am totally ok for moving tokens to the primary defense of this guide.

- Jim
On 8/10/18 10:16 AM, Konakandla, Manideep wrote:

This is a false argument.

>> I am not sure if you got the context there. It was is in response to Dominique statement which said that we are delegating part of protection to browsers if we solely reply on referrer/origin headers properly and hence we need to depend on token as well (for which you +1?ed). I am confused now that you are saying it as an browser standard (which means nothing should wrong and we don?t need to worry about delegating protection to browser). The discussion was also about browsers handling the data. Origin/referrer header check is not easy deployment as well (considering proxies, individual domains when a company has, around 50+ subdomains etc.). I feel token mitigation is more easy using some OWASP libraries that provide auto-tokening (this anyway is my personal opinion).

One more thing we need to remember is that, if we solely rely on origin/referrer header check - an XSS vulnerability within a single page on that domain will also give CSRF vulnerability to all other state changing operations under that entire domain. Considering that and also that depending on browsers to send origin/referrer header ? I feel token should be used as a primary mitigation and origin/referrer header check as defense-in-depth. Do we have any similar issues for tokens? If not ? maybe we should just do that. Either ways, it?s just my opinion ? if there is no consensus for it, we can just stop the debate and let it be the way it is. I will be more than happy to always learn if there is something that I am missing ?

> Also, I know that samesite cookie itself is not supported on all browsers but I?m more looking towards the text written on the wiki (provides some protection against cross-site request forgery attacks), is the ?some? here refers to the partial support of the browsers? ? Yes

It frankly does not provide that impression here. When me/couple of other colleagues/friends of mine read it, we were thinking on the angle of issue with the technology itself. I will be more than happy to edit it if you guys agree or else again ? we can just let the way it is :)

From: Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>
Sent: Friday, August 10, 2018 12:51 PM
To: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>; Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Cc: Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>


> In a sense/In fact, we rely on browsers to protect CSRF tokens as well ? so if we do not trust browsers for sending referrer/origin headers properly, we shouldn?t be trusting them to secure our tokens

This is a false argument. One of these is fully controlled by the browser via browser standards, one of these is controlled by individual programmers.

> Unless there is anything additional that origin/referrer header check provides that?s not provided by token based mitigation

What it also provides is VERY easy deployment capabilities like the same site token. One of these is based on browser standards and again tokens


--

Jim Manico

Manicode Security

https://www.manicode.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181001/d636560b/attachment-0001.html>

From jim.manico at owasp.org  Tue Oct  2 01:54:04 2018
From: jim.manico at owasp.org (Jim Manico)
Date: Mon, 1 Oct 2018 18:54:04 -0700
Subject: [OWASP-cheat-sheets]
 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <d817238c296641fc8b1089d9c81d2e31@EX13D11UWB004.ant.amazon.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<CANos97cbaHSc9uUyc6G1-SPnM7pyY0AF7D2pmEV30yGmqbS_+A@mail.gmail.com>
	<e05fc4606d4447f994abfeb25130a711@EX13D11UWB004.ant.amazon.com>
	<CANos97em5kiaScJggFf2NetwXF709-TNaxvaCdv+yQ4Wk9iDYA@mail.gmail.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<d817238c296641fc8b1089d9c81d2e31@EX13D11UWB004.ant.amazon.com>
Message-ID: <7d8d7a7e-1b55-43cc-d151-93c7c25c3353@owasp.org>

No rush and no timeline. Let me know when you want our review to start!

Aloha, Jim


On 10/1/18 2:41 PM, Konakandla, Manideep wrote:
>
> For now, I removed the reference to DWR and also added a generic
> statement about .NET protection till someone knows and updates the
> in-details of its current state.
>
> ?
>
> I also wanted to let you guys know that I will be off for vacation
> from 16^th of October to end of November with very limited access to
> my work resources and quite sure will be tied up with office work for
> a while after I return. So, let?s plan to get the updated document on
> OWASP page before October 16th. I am trying my level best from my side
> to get it out ASAP to you guys for review.
>
> ?
>
> Are there anything?s that need to be taken care now so that we can
> save some time after I get the document to you people for review?
>
> ?
>
> *From:*Konakandla, Manideep
> *Sent:* Friday, September 28, 2018 6:35 PM
> *To:* 'Jim Manico' <jim at manicode.com>
> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Jim Manico
> <jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
> *Subject:* RE:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
> ?
>
> Login CSRF is a way of exploiting CSRF on login forms (details here
> <https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a
> line about it in referrer validation section, it was not explained
> clearly and how it can scale with other techniques such as token based
> mitigation. No worries, I added a section about it!
>
> ?
>
> Finally, I am done with the document from my side and its sent for
> internal reviews now. It should take 1-2 weeks before it comes to you
> guys. Meanwhile, I still need help on below items from you guys. If no
> one was able to find references for a), we can very well remove it.
>
> ?
>
> a.???? Under double submit cookie section, it is mentioned that DWR
> uses that approach but I could not find that anywhere within DWR
> documentation that it uses double submit cookie. Can someone help me
> finding reference if they know any?
>
> b.???? One thing I wouldn?t be reviewing is the ASP.NET
> <http://ASP.NET> references mentioned in the wiki
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
> Can someone with .NET expertize verify if these are still accurate?
> Looks to me like there are latest resources than the one?s linked in
> current cheatsheet
>
> ?
>
> Happy weekend folks J
>
> ?
>
> *From:*Jim Manico <jim at manicode.com <mailto:jim at manicode.com>>
> *Sent:* Thursday, September 27, 2018 3:02 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com
> <mailto:mkonakan at amazon.com>>
> *Cc:* Dominique Righetto <dominique.righetto at owasp.org
> <mailto:dominique.righetto at owasp.org>>; Jim Manico
> <jim.manico at owasp.org <mailto:jim.manico at owasp.org>>; Dave Wichers
> <dave.wichers at owasp.org <mailto:dave.wichers at owasp.org>>;
> eric.sheridan at owasp.org <mailto:eric.sheridan at owasp.org>;
> owasp-cheat-sheets at lists.owasp.org
> <mailto:owasp-cheat-sheets at lists.owasp.org>
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
> ?
>
> ...as for (d) I dont see any problems with passing tokens as headers
> or parameters
>
> ?
>
> I dont understand (e) can you explain that again?
>
> --
>
> Jim Manico
>
> @Manicode
>
> Secure Coding Education
>
> +1 (808) 652-3805
>
>
> On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com
> <mailto:mkonakan at amazon.com>> wrote:
>
>     2 more questions added ?(Jim already started helping me on #a)
>
>     ?
>
>     a.???? I requested for an OWASP account and it?s still in pending.
>     @JIM ? Can you please help me in getting my account approved?
>     (registered with mani.konakandla at gmail.com
>     <mailto:mani.konakandla at gmail.com>)
>
>     b.???? Under double submit cookie section, it is mentioned that
>     DWR uses that approach but I could not find that anywhere within
>     DWR documentation that it uses double submit cookie. Can someone
>     help me finding reference if they know any?
>
>     c.???? One thing I wouldn?t be reviewing is the ASP.NET
>     <http://ASP.NET> references mentioned in the wiki
>     <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>     Can someone with .NET expertize verify if these are still
>     accurate? Looks to me like there are latest resources than the
>     one?s linked
>
>     d.???? At few places within the wiki, I have seen recommending to
>     include token in headers for Ajax requests. I also don?t see a
>     problem in passing them as parameters as well. Do you guys see any?
>
>     e.???? I also have not seen at any place within the wiki talking
>     about login CSRF issues and how each of the techniques described
>     can be prone/immune to it. Is there any reason for it or are we
>     open to include that?
>
>     ?
>
>     *From:*Konakandla, Manideep
>     *Sent:* Wednesday, September 26, 2018 5:27 PM
>     *To:* 'Jim Manico' <jim at manicode.com <mailto:jim at manicode.com>>;
>     'Dominique Righetto' <dominique.righetto at owasp.org
>     <mailto:dominique.righetto at owasp.org>>
>     *Cc:* 'Jim Manico' <jim.manico at owasp.org
>     <mailto:jim.manico at owasp.org>>; 'Dave Wichers'
>     <dave.wichers at owasp.org <mailto:dave.wichers at owasp.org>>;
>     'eric.sheridan at owasp.org <mailto:eric.sheridan at owasp.org>'
>     <eric.sheridan at owasp.org <mailto:eric.sheridan at owasp.org>>;
>     owasp-cheat-sheets at lists.owasp.org
>     <mailto:owasp-cheat-sheets at lists.owasp.org>
>     *Subject:* RE:
>     https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>     <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>     ?
>
>     Yeah. My understanding of the breadth of exploitation of XSS in an
>     application protected with just origin/referrer and other
>     application protected with just token based mitigation earlier was
>     wrong. Dominique earlier email thread cleared that to me (breadth
>     of exploitation is same in both the cases. i.e., if an XSS
>     vulnerability is found in any individual application protected
>     with only one of those techniques, it still can exploit all state
>     changing operations on entire application [though the complexity
>     of exploitation is easy in origin/referrer check than token based
>     mitigation]).
>
>     ?
>
>     Anyway, I am all clear and also almost done with re-factoring the
>     cheatsheet ?[1] JShould be fully completed by Friday unless
>     something comes up meanwhile. I will then send it to my colleagues
>     for review and then for Legal, PR approvals. Before that, I need
>     help from you guys on below items
>
>     ?
>
>     a.???? I requested for an OWASP account and it?s still in pending.
>     @JIM ? Can you please help me in getting my account approved?
>     (registered with mani.konakandla at gmail.com
>     <mailto:mani.konakandla at gmail.com>)
>
>     b.???? Under double submit cookie section, it is mentioned that
>     DWR uses that approach but I could not find that anywhere within
>     DWR documentation that it uses double submit cookie. Can someone
>     help me finding reference if they know any?
>
>     c.???? One thing I wouldn?t be reviewing is the ASP.NET
>     <http://ASP.NET> references mentioned in the wiki
>     <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>     Can someone with .NET expertize verify if these are still
>     accurate? Looks to me like there are latest resources than the
>     one?s linked
>
>     ?
>
>     [1] Below are changes done so far
>
>     a. Switched primary, secondary defense and our reasoning behind it
>     (added lot of reasons on issues with origin/referrer header check
>     and why token should be made primary)
>
>     b. Added CSRF mitigation myths (CORS, content-type validation etc.)
>
>     c. Added a section called ?Not so popular CSRF mitigations?
>     (mentioned details about triple submit cookie)
>
>     d. Included limitations / issues associated with double submit
>     cookie, same site cookie, captcha as a CSRF defense etc.
>
>     e. Removed lot of obsolete content and added some new content to
>     some of the mitigations
>
>     f. Made document look more better by adding RFC?s links wherever
>     possible and lot of other minor changes.
>
>     ?
>
>     *From:*Jim Manico <jim at manicode.com <mailto:jim at manicode.com>>
>     *Sent:* Wednesday, September 26, 2018 4:19 PM
>     *To:* Konakandla, Manideep <mkonakan at amazon.com
>     <mailto:mkonakan at amazon.com>>; Dominique Righetto
>     <dominique.righetto at owasp.org <mailto:dominique.righetto at owasp.org>>
>     *Cc:* Jim Manico <jim.manico at owasp.org
>     <mailto:jim.manico at owasp.org>>; Dave Wichers
>     <dave.wichers at owasp.org <mailto:dave.wichers at owasp.org>>;
>     eric.sheridan at owasp.org <mailto:eric.sheridan at owasp.org>
>     *Subject:* Re:
>     https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>     <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>     ?
>
>     Well tokens can be placed in cookies.
>
>     The real answer to avoid CSRF is tokens in JavaScript variable as
>     opposed to cookies. They are not automatically sent and indeed
>     make CSRF impossible - at the expense of tokens being fully stolen
>     via XSS. Pick your poison!
>
>     I recommend a COMBO of these defenses. For web apps, sychronizer
>     token + header verification + re-authentication for sensitive
>     features.
>
>     For API's double-cookie submit or just use JavaScript variable
>     based tokens + header verification for same-site API's +
>     re-authentication for sensitive features.
>
>     > [1] If there is an XSS vulnerability at a single place on a
>     domain (it can add custom header), it can be used to make CSRF
>     */on all other state changing operationswithin that domain /*done
>     to that AJAX endpoint. Do you agree?
>
>     ?
>
>     Absolutely!
>
>     ?
>
>     On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
>
>         Yeah, I understand that any XSS and CSRF game is over but I am
>         stressing out on the highlighted part in [1]. I am trying to
>         highlight and get an affirmation on why my understanding on
>         token based mitigation is better than origin/referrer header
>         check will also apply to ?token based mitigation Vs custom
>         header mitigation (if static tokens are used in custom headers)?.
>
>         ?
>
>         In case of tokens, we have an option to use different tokens
>         on each page (taking things like URL, timestamp etc. into
>         consideration) and hence XSS vulnerability on one page will
>         only make state changing operations in that page vulnerable to
>         CSRF but not state changing operations on other pages within
>         that domain (because token value is different) but whereas in
>         origin/referrer header check and custom header check, the
>         token value is constant and hence XSS vulnerability in one
>         page will also cause state changing operations in other pages
>         to be vulnerable to CSRF as well. Off course, this can be
>         mitigated in custom header checks by adding tokens to custom
>         headers rather than static constant but this cannot be
>         mitigated in origin/referrer check because those headers
>         cannot be modified. So, yeah a single XSS any CSRF is bypassed
>         but the breadth of the impact is different for each of them.
>
>         ?
>
>         Regarding code samples ? I currently was able to allocate only
>         some time for this task and I don?t think I will be able to do
>         code samples within this time frame. I am also leaving for a
>         long vacation starting Oct 12 and hence let?s try to get this
>         out first and we can add code samples later on considering my
>         work load after I return from vacation.
>
>         ?
>
>         [1] If there is an XSS vulnerability at a single place on a
>         domain (it can add custom header), it can be used to make CSRF
>         */on all other state changing operations/**/within that domain
>         /*done to that AJAX endpoint. Do you agree?
>
>         ?
>
>         *From:*Dominique Righetto <dominique.righetto at owasp.org>
>         <mailto:dominique.righetto at owasp.org>
>         *Sent:* Thursday, September 20, 2018 8:45 AM
>         *To:* Jim Manico <jim at manicode.com> <mailto:jim at manicode.com>
>         *Cc:* Konakandla, Manideep <mkonakan at amazon.com>
>         <mailto:mkonakan at amazon.com>; Jim Manico
>         <jim.manico at owasp.org> <mailto:jim.manico at owasp.org>; Dave
>         Wichers <dave.wichers at owasp.org>
>         <mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org
>         <mailto:eric.sheridan at owasp.org>
>         *Subject:* Re:
>         https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>         <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>         ?
>
>         Hi,
>
>         ?
>
>         Thanks for your contribution.
>
>         ?
>
>         I like very much your plan ?
>
>         ?
>
>         I ask for some favor in addition :
>
>         - can you provide code sample (in one language like java or
>         .net or the one you want but it must be easy to read and
>         understand) or libraires along your proposal for each section?
>
>         - can you use the syntaxhighlight tag for code?
>
>         ?
>
>         I'am agree with Jim, XSS? means game over because your
>         browsing context can be used as proxy so csrf protection will
>         be defeated because request came from the legitimate user.
>
>         ?
>
>         Thanks you again for all your help ???
>
>         ?
>
>         Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com
>         <mailto:jim at manicode.com>> a ?crit?:
>
>             > If there is an XSS vulnerability at a single place on a
>             domain (it can add custom header), it can be used to make
>             CSRF on all other state changing operations within that
>             domain done to that AJAX endpoint. Do you agree?
>
>             Any XSS is game over and all CSRF are useless in the face
>             of XSS. I Agree!
>
>             - Jim
>
>             ?
>
>             On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
>
>                 Hey Guys,
>
>                 ?
>
>                 [1] is what I said for origin/referrer header check in
>                 this e-mail thread. I also believe that this applies
>                 for custom headers for AJAX endpoints as well. If
>                 there is an XSS vulnerability at a single place on a
>                 domain (it can add custom header), it can be used to
>                 make CSRF on all other state changing operations
>                 within that domain done to that AJAX endpoint. Do you
>                 agree?
>
>                 ?
>
>                 Here is how I am keeping the new re-factored
>                 cheatsheet. Does this look good to you guys?
>
>                 ?
>
>                 1.?????? Use token based method as primary defense
>
>                 a.?????? Can use synchronizer pattern for stateful
>                 applications
>
>                 b.?????? Can use hah based/ encryption based token
>                 pattern for stateless applications
>
>                 2.?????? Defense in depth measures along with
>                 drawbacks of each one
>
>                 a.?????? Origin/referrer header check
>
>                 b.?????? Double submit cookie
>
>                 c.?????? Samesite cookie
>
>                 d.?????? Custom headers (people still need to use
>                 tokens for forms etc. if they have mix of ajax
>                 endpoints and general HTML)
>
>                 3.?????? Strong CSRF defenses but very less usable :
>                 captcha etc.
>
>                 4.?????? CSRF Myths / techniques that do not work section
>
>                 ?
>
>                 [1] if we solely rely on origin/referrer header check
>                 - an XSS vulnerability within a single page on that
>                 domain will also give CSRF vulnerability to all other
>                 state changing operations under that entire domain.
>
>                 ?
>
>                 *From:*Dominique Righetto
>                 <dominique.righetto at owasp.org>
>                 <mailto:dominique.righetto at owasp.org>
>                 *Sent:* Wednesday, September 12, 2018 1:31 PM
>                 *To:* Konakandla, Manideep <mkonakan at amazon.com>
>                 <mailto:mkonakan at amazon.com>
>                 *Cc:* Jim Manico <jim.manico at owasp.org>
>                 <mailto:jim.manico at owasp.org>; Dave Wichers
>                 <dave.wichers at owasp.org>
>                 <mailto:dave.wichers at owasp.org>;
>                 eric.sheridan at owasp.org <mailto:eric.sheridan at owasp.org>
>                 *Subject:* Re:
>                 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>                 <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>                 ?
>
>                 Hi
>
>                 ?
>
>                 Thanks you very much for the update?
>
>                 ?
>
>                 Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep
>                 <mkonakan at amazon.com <mailto:mkonakan at amazon.com>> a
>                 ?crit?:
>
>                     Just an update: I started working on this along
>                     with other sprint tasks of mine today. I am hoping
>                     to get it completed by end of next week and then
>                     send it for legal/PR approvals.
>
>                     ?
>
>                     *From:*Jim Manico <jim.manico at owasp.org
>                     <mailto:jim.manico at owasp.org>>
>                     *Sent:* Thursday, August 23, 2018 6:49 AM
>                     *To:* Dominique Righetto
>                     <dominique.righetto at owasp.org
>                     <mailto:dominique.righetto at owasp.org>>;
>                     Konakandla, Manideep <mkonakan at amazon.com
>                     <mailto:mkonakan at amazon.com>>
>                     *Cc:* Dave Wichers <dave.wichers at owasp.org
>                     <mailto:dave.wichers at owasp.org>>;
>                     eric.sheridan at owasp.org
>                     <mailto:eric.sheridan at owasp.org>
>                     *Subject:* Re:
>                     https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>                     <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>                     ?
>
>                     Awesome! Thank you! :)
>
>                     - Jim
>
>                     ?
>
>                     On 8/23/18 2:41 AM, Dominique Righetto wrote:
>
>                         You are welcome :)
>
>                         --
>                         Cordialement, Best regards,
>                         Dominique Righetto
>                         dominique.righetto at gmail.com
>                         <mailto:dominique.righetto at gmail.com>
>
>                         dominique.righetto at owasp.org
>                         <mailto:dominique.righetto at gmail.com>
>
>                         https://righettod.eu
>                         GPG: 323D19BA
>
>                         ?
>
>                         ?
>
>                         On Thu, Aug 23, 2018 at 10:33 AM Konakandla,
>                         Manideep <mkonakan at amazon.com
>                         <mailto:mkonakan at amazon.com>> wrote:
>
>                             Np. I will keep u guys posted. Thanks for
>                             the support and have good rest of your day!
>
>                             ?
>
>                             *From:*Dominique Righetto
>                             <dominique.righetto at owasp.org
>                             <mailto:dominique.righetto at owasp.org>>
>                             *Sent:* Thursday, August 23, 2018 1:29 AM
>                             *To:* Konakandla, Manideep
>                             <mkonakan at amazon.com
>                             <mailto:mkonakan at amazon.com>>
>                             *Cc:* Jim Manico <jim.manico at owasp.org
>                             <mailto:jim.manico at owasp.org>>; Dave
>                             Wichers <dave.wichers at owasp.org
>                             <mailto:dave.wichers at owasp.org>>;
>                             eric.sheridan at owasp.org
>                             <mailto:eric.sheridan at owasp.org>
>                             *Subject:* Re:
>                             https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>                             <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>                             ?
>
>                             Hi,
>
>                             ?
>
>                             Sounds goods for me.
>
>                             ?
>
>                             Thanks again for the contribution :)
>
>                             --
>                             Cordialement, Best regards,
>                             Dominique Righetto
>                             dominique.righetto at gmail.com
>                             <mailto:dominique.righetto at gmail.com>
>
>                             dominique.righetto at owasp.org
>                             <mailto:dominique.righetto at gmail.com>
>
>                             https://righettod.eu
>                             GPG: 323D19BA
>
>                             ?
>
>                             ?
>
>                             On Thu, Aug 23, 2018 at 10:03 AM
>                             Konakandla, Manideep <mkonakan at amazon.com
>                             <mailto:mkonakan at amazon.com>> wrote:
>
>                                 Ok, I received necessary approvals for
>                                 working on this. I am hoping to start
>                                 the work in 2 weeks and then deliver
>                                 the document to you guys for review by
>                                 end of September/1^st week of October
>                                 (might be 1-2 weeks delay if approvals
>                                 from Legal and other teams get
>                                 delayed). My plan is to work on below
>                                 things ? Please let me know if I
>                                 missed anything/you feel something
>                                 else has to be added to this list.
>
>                                 ?????????????
>
>                                 1.?????? Change the order of primary
>                                 and defense in depth measures
>
>                                 2.?????? Include the pitfalls/caveats
>                                 for each CSRF mitigation technique
>                                 (origin/referrer header, samesite,
>                                 double submit cookie etc.)
>
>                                 3.?????? Re-structure entire page and
>                                 remove outdated/ non-relevant stuff
>
>                                 ?
>
>                                 *From:*Dominique Righetto
>                                 <dominique.righetto at owasp.org
>                                 <mailto:dominique.righetto at owasp.org>>
>                                 *Sent:* Thursday, August 16, 2018 12:02 PM
>                                 *To:* Konakandla, Manideep
>                                 <mkonakan at amazon.com
>                                 <mailto:mkonakan at amazon.com>>
>                                 *Cc:* Jim Manico <jim.manico at owasp.org
>                                 <mailto:jim.manico at owasp.org>>; Dave
>                                 Wichers <dave.wichers at owasp.org
>                                 <mailto:dave.wichers at owasp.org>>;
>                                 eric.sheridan at owasp.org
>                                 <mailto:eric.sheridan at owasp.org>
>                                 *Subject:* Re:
>                                 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>                                 <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>                                 ?
>
>                                 Ok i perfectly understand.
>
>                                 Thanks for the info.
>
>                                 ?
>
>                                 Le jeu. 16 ao?t 2018 ? 20:33,
>                                 Konakandla, Manideep
>                                 <mkonakan at amazon.com
>                                 <mailto:mkonakan at amazon.com>> a ?crit?:
>
>                                     I had an offline discussion with
>                                     Jim and informed him that I will
>                                     have to check few details before I
>                                     give any commitment to update the
>                                     guidance?s here.
>
>                                     ?
>
>                                     Update: I got approval internally
>                                     from my team to work on this (fix
>                                     issues and re-structure entire
>                                     page) but I still need to get
>                                     approval from Legal team to work
>                                     on this. I will let you guys know
>                                     when I hear back from them. Most
>                                     likely they will ask me to just
>                                     get it reviewed with them before
>                                     sending it to you guys for
>                                     review/get it published on OWASP page.
>
>                                     ?
>
>                                     *From:*Dominique Righetto
>                                     <dominique.righetto at owasp.org
>                                     <mailto:dominique.righetto at owasp.org>>
>
>                                     *Sent:* Tuesday, August 14, 2018
>                                     11:02 PM
>                                     *To:* Jim Manico
>                                     <jim.manico at owasp.org
>                                     <mailto:jim.manico at owasp.org>>
>                                     *Cc:* Konakandla, Manideep
>                                     <mkonakan at amazon.com
>                                     <mailto:mkonakan at amazon.com>>;
>                                     Dave Wichers
>                                     <dave.wichers at owasp.org
>                                     <mailto:dave.wichers at owasp.org>>;
>                                     eric.sheridan at owasp.org
>                                     <mailto:eric.sheridan at owasp.org>
>                                     *Subject:* Re:
>                                     https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>                                     <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>                                     ?
>
>                                     Roadmap has been updated:
>                                     https://trello.com/b/w020m3jQ/cs-roadmap
>
>                                     --
>                                     Cordialement, Best regards,
>                                     Dominique Righetto
>                                     dominique.righetto at gmail.com
>                                     <mailto:dominique.righetto at gmail.com>
>
>                                     dominique.righetto at owasp.org
>                                     <mailto:dominique.righetto at gmail.com>
>
>                                     https://righettod.eu
>                                     GPG: 323D19BA
>
>                                     ?
>
>                                     ?
>
>                                     On Mon, Aug 13, 2018 at 6:03 AM
>                                     Dominique Righetto
>                                     <dominique.righetto at owasp.org
>                                     <mailto:dominique.righetto at owasp.org>>
>                                     wrote:
>
>                                         I have finally achieved to
>                                         read the thread, very
>                                         interesting? ?
>
>                                         ?
>
>                                         I understand the need to
>                                         simplify the cheat sheet and
>                                         the solutions proposed. It is
>                                         one of the reason why i have
>                                         add code sample. So this
>                                         contribution is a very good point.
>
>                                         ?
>
>                                         Just a little thing about
>                                         header, take care to ensure
>                                         that the referrer policy of
>                                         the site is not set to
>                                         no-referrer otherwise you
>                                         cannot use origin/referrer
>                                         headers couple to create a
>                                         protection layer.
>
>                                         ?
>
>                                         Tanks you for the helps
>                                         proposal ?
>
>                                         ?
>
>                                         ?
>
>                                         Le dim. 12 ao?t 2018 ? 22:21,
>                                         Jim Manico
>                                         <jim.manico at owasp.org
>                                         <mailto:jim.manico at owasp.org>>
>                                         a ?crit?:
>
>                                             That makes sense. We're
>                                             not going to get consensus
>                                             but you demonstrated
>                                             mastery over this
>                                             material. I am impressed.
>
>                                             Please consider yourself
>                                             owner of the page and edit
>                                             as you see fit. I'll keep
>                                             an eye on your edits and
>                                             make comments as you go.
>
>                                             But please go ahead and
>                                             charge.
>
>                                             > I also personally don?t
>                                             recommend double submit
>                                             cookies for enterprises
>                                             that have lot of
>                                             subdomains for which they
>                                             might not be sure if they
>                                             are 100% secure
>
>                                             Makes sense, but what DO
>                                             you suggest for stateless
>                                             services and CSRF defense?
>
>                                             Aloha, Jim
>
>                                             ?
>
>                                             On 8/10/18 10:41 AM,
>                                             Konakandla, Manideep wrote:
>
>                                                 Thanks. I also
>                                                 personally don?t
>                                                 recommend double
>                                                 submit cookies for
>                                                 enterprises that have
>                                                 lot of subdomains for
>                                                 which they might not
>                                                 be sure if they are
>                                                 100% secure. More
>                                                 details are explained
>                                                 here
>                                                 <https://media.blackhat.com/eu-13/briefings/Lundeen/bh-eu-13-deputies-still-confused-lundeen-wp.pdf>(section
>                                                 2.1.1). I think this
>                                                 is something that has
>                                                 to be mentioned in the
>                                                 wiki as well.
>
>                                                 ?
>
>                                                 Do we have a consensus
>                                                 process before we edit
>                                                 the page? Or current
>                                                 discussion is enough??
>                                                 How do we want to go
>                                                 next? I am not quite
>                                                 sure at the moment if
>                                                 I will be able to
>                                                 contribute (I can let
>                                                 you know after
>                                                 checking few details).
>
>                                                 ?
>
>                                                 *From:*Jim Manico
>                                                 <jim.manico at owasp.org>
>                                                 <mailto:jim.manico at owasp.org>
>                                                 *Sent:* Friday, August
>                                                 10, 2018 1:23 PM
>                                                 *To:* Konakandla,
>                                                 Manideep
>                                                 <mkonakan at amazon.com>
>                                                 <mailto:mkonakan at amazon.com>;
>                                                 Dominique Righetto
>                                                 <dominique.righetto at owasp.org>
>                                                 <mailto:dominique.righetto at owasp.org>
>                                                 *Cc:* Dave Wichers
>                                                 <dave.wichers at owasp.org>
>                                                 <mailto:dave.wichers at owasp.org>;
>                                                 eric.sheridan at owasp.org
>                                                 <mailto:eric.sheridan at owasp.org>
>                                                 *Subject:* Re:
>                                                 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>                                                 <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>                                                 ?
>
>                                                 All I'm saying is that
>                                                 it's a good idea to
>                                                 split browser standard
>                                                 based CSRF defense and
>                                                 defenses that require
>                                                 tokens.
>
>                                                 And you know, I am not
>                                                 at all opposed to
>                                                 making tokens the
>                                                 primary defense. I
>                                                 think that's totally
>                                                 fair. In fact for my
>                                                 words its...
>
>                                                 1) Use a token method
>                                                 - either normal
>                                                 syncronizer tokens or
>                                                 double-submit-cookies
>                                                 for stateless
>                                                 services. This is the
>                                                 main defense in use today.
>
>                                                 2) I also do header
>                                                 defense and think it's
>                                                 secondary. I only use
>                                                 headers by themselves
>                                                 for lower risk
>                                                 services and it's
>                                                 normally easy to
>                                                 deploy as long as I
>                                                 only need to defense
>                                                 posts. If get and
>                                                 posts transact, this
>                                                 becomes tough to deploy.
>
>                                                 3) I always use the
>                                                 samesite cookie for
>                                                 single-domain
>                                                 applications. This
>                                                 gets weird in mash-up
>                                                 cases.
>
>                                                 So yea, I am totally
>                                                 ok for moving tokens
>                                                 to the primary defense
>                                                 of this guide.
>
>                                                 - Jim
>
>                                                 On 8/10/18 10:16 AM,
>                                                 Konakandla, Manideep
>                                                 wrote:
>
>                                                     *This is a false
>                                                     argument. *
>
>                                                     >> I am not sure if
>                                                     you got the
>                                                     context there. It
>                                                     was is in response
>                                                     to Dominique
>                                                     statement which
>                                                     said that we are
>                                                     delegating part of
>                                                     protection to
>                                                     browsers if we
>                                                     solely reply on
>                                                     referrer/origin
>                                                     headers properly
>                                                     and hence we need
>                                                     to depend on token
>                                                     as well (for which
>                                                     you +1?ed). I am
>                                                     confused now that
>                                                     you are saying it
>                                                     as an browser
>                                                     standard (which
>                                                     means nothing
>                                                     should wrong and
>                                                     we don?t need to
>                                                     worry about
>                                                     delegating
>                                                     protection to
>                                                     browser). The
>                                                     discussion was
>                                                     also about
>                                                     browsers handling
>                                                     the data.
>                                                     Origin/referrer
>                                                     header check is
>                                                     not easy
>                                                     deployment as well
>                                                     (considering
>                                                     proxies,
>                                                     individual domains
>                                                     when a company
>                                                     has, around 50+
>                                                     subdomains etc.).
>                                                     I feel token
>                                                     mitigation is more
>                                                     easy using some
>                                                     OWASP libraries
>                                                     that provide
>                                                     auto-tokening
>                                                     (this anyway is my
>                                                     personal opinion).
>
>                                                     One more thing we
>                                                     need to remember
>                                                     is that, if we
>                                                     solely rely on
>                                                     origin/referrer
>                                                     header check - an
>                                                     XSS vulnerability
>                                                     within a single
>                                                     page on that
>                                                     domain will also
>                                                     give CSRF
>                                                     vulnerability to
>                                                     all other state
>                                                     changing
>                                                     operations under
>                                                     that entire
>                                                     domain.
>                                                     Considering that
>                                                     and also that
>                                                     depending on
>                                                     browsers to send
>                                                     origin/referrer
>                                                     header ? I feel
>                                                     token should be
>                                                     used as a primary
>                                                     mitigation and
>                                                     origin/referrer
>                                                     header check as
>                                                     defense-in-depth.
>                                                     Do we have any
>                                                     similar issues for
>                                                     tokens? If not ?
>                                                     maybe we should
>                                                     just do that.
>                                                     Either ways, it?s
>                                                     just my opinion ?
>                                                     if there is no
>                                                     consensus for it,
>                                                     we can just stop
>                                                     the debate and let
>                                                     it be the way it
>                                                     is. I will be more
>                                                     than happy to
>                                                     always learn if
>                                                     there is something
>                                                     that I am missing J
>
>                                                     *> **Also, I know
>                                                     that samesite
>                                                     cookie itself is
>                                                     not supported on
>                                                     all browsers but
>                                                     I?m more looking
>                                                     towards the text
>                                                     written on the
>                                                     wiki (provides
>                                                     /some/ protection
>                                                     against cross-site
>                                                     request forgery
>                                                     attacks), is the
>                                                     ?some? here refers
>                                                     to the partial
>                                                     support of the
>                                                     browsers? ? Yes*
>
>                                                     It frankly does
>                                                     not provide that
>                                                     impression here.
>                                                     When me/couple of
>                                                     other
>                                                     colleagues/friends
>                                                     of mine read it,
>                                                     we were thinking
>                                                     on the angle of
>                                                     issue with the
>                                                     technology itself.
>                                                     I will be more
>                                                     than happy to edit
>                                                     it if you guys
>                                                     agree or else
>                                                     again ? we can
>                                                     just let the way
>                                                     it is :)
>
>                                                     ?
>
>                                                     *From:*Jim Manico
>                                                     <jim.manico at owasp.org>
>                                                     <mailto:jim.manico at owasp.org>
>                                                     *Sent:* Friday,
>                                                     August 10, 2018
>                                                     12:51 PM
>                                                     *To:* Konakandla,
>                                                     Manideep
>                                                     <mkonakan at amazon.com>
>                                                     <mailto:mkonakan at amazon.com>;
>                                                     Dominique Righetto
>                                                     <dominique.righetto at owasp.org>
>                                                     <mailto:dominique.righetto at owasp.org>
>                                                     *Cc:* Dave Wichers
>                                                     <dave.wichers at owasp.org>
>                                                     <mailto:dave.wichers at owasp.org>;
>                                                     eric.sheridan at owasp.org
>                                                     <mailto:eric.sheridan at owasp.org>
>                                                     *Subject:* Re:
>                                                     https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>                                                     <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>                                                     ?
>
>                                                     > In a sense/In
>                                                     fact, we rely on
>                                                     browsers to
>                                                     protect CSRF
>                                                     tokens as well ?
>                                                     so if we do not
>                                                     trust browsers for
>                                                     sending
>                                                     referrer/origin
>                                                     headers properly,
>                                                     we shouldn?t be
>                                                     trusting them to
>                                                     secure our tokens
>
>                                                     This is a false
>                                                     argument. One of
>                                                     these is fully
>                                                     controlled by the
>                                                     browser via
>                                                     browser standards,
>                                                     one of these is
>                                                     controlled by
>                                                     individual
>                                                     programmers.
>
>                                                     > Unless there is
>                                                     anything
>                                                     additional that
>                                                     origin/referrer
>                                                     header check
>                                                     provides that?s
>                                                     not provided by
>                                                     token based mitigation
>
>                                                     What it also
>                                                     provides is VERY
>                                                     easy deployment
>                                                     capabilities like
>                                                     the same site
>                                                     token. One of
>                                                     these is based on
>                                                     browser standards
>                                                     and again tokens
>
>     ?
>
>     -- 
>
>     Jim Manico
>
>     Manicode Security
>
>     https://www.manicode.com
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181001/3e821f28/attachment-0001.html>

From mkonakan at amazon.com  Tue Oct  2 23:37:08 2018
From: mkonakan at amazon.com (Konakandla, Manideep)
Date: Tue, 2 Oct 2018 23:37:08 +0000
Subject: [OWASP-cheat-sheets]
 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CANos97cS+wQ2foQQh_OhMAf5NunQqmjnUFdqScFZU5onu+=zkg@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<CANos97cbaHSc9uUyc6G1-SPnM7pyY0AF7D2pmEV30yGmqbS_+A@mail.gmail.com>
	<e05fc4606d4447f994abfeb25130a711@EX13D11UWB004.ant.amazon.com>
	<CANos97em5kiaScJggFf2NetwXF709-TNaxvaCdv+yQ4Wk9iDYA@mail.gmail.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<d817238c296641fc8b1089d9c81d2e31@EX13D11UWB004.ant.amazon.com>
	<7d8d7a7e-1b55-43cc-d151-93c7c25c3353@owasp.org>
	<CANos97cS+wQ2foQQh_OhMAf5NunQqmjnUFdqScFZU5onu+=zkg@mail.gmail.com>
Message-ID: <e9a0d4fd71524da98d70b1f2131445c5@EX13D11UWB004.ant.amazon.com>

Hey Dominique ? I very quickly reviewed your sample implementation example in the cheat sheet (GREAT work!) and have few questions. Is this code supposed to be a full pledged PoC or it?s just for a reference example? I am asking this because


1.       I cannot see a port/host/protocol level validation on referrer header as its being done for origin header

2.       There is no section where the flow will go if origin/referrer check succeeds

3.       Double submit cookie only assumes that the tokens are in headers (and hence ajax calls) and not in form tags. (we can try to make it explicit here that only ajax calls are being protected in this sample).

From: Dominique Righetto <dominique.righetto at owasp.org>
Sent: Monday, October 1, 2018 8:25 PM
To: Jim Manico <jim.manico at owasp.org>
Cc: Konakandla, Manideep <mkonakan at amazon.com>; Jim Manico <jim at manicode.com>; Dave Wichers <dave.wichers at owasp.org>; eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

For sure, take all the time you need.
Take pleasure on this and thanks again for your help ?

Le mar. 2 oct. 2018 ? 03:54, Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>> a ?crit :

No rush and no timeline. Let me know when you want our review to start!

Aloha, Jim

On 10/1/18 2:41 PM, Konakandla, Manideep wrote:
For now, I removed the reference to DWR and also added a generic statement about .NET protection till someone knows and updates the in-details of its current state.

I also wanted to let you guys know that I will be off for vacation from 16th of October to end of November with very limited access to my work resources and quite sure will be tied up with office work for a while after I return. So, let?s plan to get the updated document on OWASP page before October 16th. I am trying my level best from my side to get it out ASAP to you guys for review.

Are there anything?s that need to be taken care now so that we can save some time after I get the document to you people for review?

From: Konakandla, Manideep
Sent: Friday, September 28, 2018 6:35 PM
To: 'Jim Manico' <jim at manicode.com><mailto:jim at manicode.com>
Cc: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>; Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: RE: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Login CSRF is a way of exploiting CSRF on login forms (details here<https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a line about it in referrer validation section, it was not explained clearly and how it can scale with other techniques such as token based mitigation. No worries, I added a section about it!

Finally, I am done with the document from my side and its sent for internal reviews now. It should take 1-2 weeks before it comes to you guys. Meanwhile, I still need help on below items from you guys. If no one was able to find references for a), we can very well remove it.


a.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

b.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked in current cheatsheet

Happy weekend folks ?

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Thursday, September 27, 2018 3:02 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

...as for (d) I dont see any problems with passing tokens as headers or parameters

I dont understand (e) can you explain that again?
--
Jim Manico
@Manicode
Secure Coding Education
+1 (808) 652-3805

On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
2 more questions added  (Jim already started helping me on #a)


a.     I requested for an OWASP account and it?s still in pending. @JIM ? Can you please help me in getting my account approved? (registered with mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>)

b.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

c.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked

d.     At few places within the wiki, I have seen recommending to include token in headers for Ajax requests. I also don?t see a problem in passing them as parameters as well. Do you guys see any?

e.     I also have not seen at any place within the wiki talking about login CSRF issues and how each of the techniques described can be prone/immune to it. Is there any reason for it or are we open to include that?

From: Konakandla, Manideep
Sent: Wednesday, September 26, 2018 5:27 PM
To: 'Jim Manico' <jim at manicode.com<mailto:jim at manicode.com>>; 'Dominique Righetto' <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Cc: 'Jim Manico' <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; 'Dave Wichers' <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; 'eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>' <eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: RE: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Yeah. My understanding of the breadth of exploitation of XSS in an application protected with just origin/referrer and other application protected with just token based mitigation earlier was wrong. Dominique earlier email thread cleared that to me (breadth of exploitation is same in both the cases. i.e., if an XSS vulnerability is found in any individual application protected with only one of those techniques, it still can exploit all state changing operations on entire application [though the complexity of exploitation is easy in origin/referrer check than token based mitigation]).

Anyway, I am all clear and also almost done with re-factoring the cheatsheet  [1] ? Should be fully completed by Friday unless something comes up meanwhile. I will then send it to my colleagues for review and then for Legal, PR approvals. Before that, I need help from you guys on below items


a.     I requested for an OWASP account and it?s still in pending. @JIM ? Can you please help me in getting my account approved? (registered with mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>)

b.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

c.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked

[1] Below are changes done so far
a. Switched primary, secondary defense and our reasoning behind it (added lot of reasons on issues with origin/referrer header check and why token should be made primary)
b. Added CSRF mitigation myths (CORS, content-type validation etc.)
c. Added a section called ?Not so popular CSRF mitigations? (mentioned details about triple submit cookie)
d. Included limitations / issues associated with double submit cookie, same site cookie, captcha as a CSRF defense etc.
e. Removed lot of obsolete content and added some new content to some of the mitigations
f. Made document look more better by adding RFC?s links wherever possible and lot of other minor changes.

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Wednesday, September 26, 2018 4:19 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>


Well tokens can be placed in cookies.

The real answer to avoid CSRF is tokens in JavaScript variable as opposed to cookies. They are not automatically sent and indeed make CSRF impossible - at the expense of tokens being fully stolen via XSS. Pick your poison!

I recommend a COMBO of these defenses. For web apps, sychronizer token + header verification + re-authentication for sensitive features.

For API's double-cookie submit or just use JavaScript variable based tokens + header verification for same-site API's + re-authentication for sensitive features.
> [1] If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operationswithin that domain done to that AJAX endpoint. Do you agree?

Absolutely!

On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
Yeah, I understand that any XSS and CSRF game is over but I am stressing out on the highlighted part in [1]. I am trying to highlight and get an affirmation on why my understanding on token based mitigation is better than origin/referrer header check will also apply to ?token based mitigation Vs custom header mitigation (if static tokens are used in custom headers)?.

In case of tokens, we have an option to use different tokens on each page (taking things like URL, timestamp etc. into consideration) and hence XSS vulnerability on one page will only make state changing operations in that page vulnerable to CSRF but not state changing operations on other pages within that domain (because token value is different) but whereas in origin/referrer header check and custom header check, the token value is constant and hence XSS vulnerability in one page will also cause state changing operations in other pages to be vulnerable to CSRF as well. Off course, this can be mitigated in custom header checks by adding tokens to custom headers rather than static constant but this cannot be mitigated in origin/referrer check because those headers cannot be modified. So, yeah a single XSS any CSRF is bypassed but the breadth of the impact is different for each of them.

Regarding code samples ? I currently was able to allocate only some time for this task and I don?t think I will be able to do code samples within this time frame. I am also leaving for a long vacation starting Oct 12 and hence let?s try to get this out first and we can add code samples later on considering my work load after I return from vacation.

[1] If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

From: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Sent: Thursday, September 20, 2018 8:45 AM
To: Jim Manico <jim at manicode.com><mailto:jim at manicode.com>
Cc: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>; Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi,

Thanks for your contribution.

I like very much your plan ?

I ask for some favor in addition :
- can you provide code sample (in one language like java or .net or the one you want but it must be easy to read and understand) or libraires along your proposal for each section?
- can you use the syntaxhighlight tag for code?

I'am agree with Jim, XSS  means game over because your browsing context can be used as proxy so csrf protection will be defeated because request came from the legitimate user.

Thanks you again for all your help ???

Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com<mailto:jim at manicode.com>> a ?crit :

> If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

Any XSS is game over and all CSRF are useless in the face of XSS. I Agree!

- Jim

On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
Hey Guys,

[1] is what I said for origin/referrer header check in this e-mail thread. I also believe that this applies for custom headers for AJAX endpoints as well. If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

Here is how I am keeping the new re-factored cheatsheet. Does this look good to you guys?


1.       Use token based method as primary defense

a.       Can use synchronizer pattern for stateful applications

b.       Can use hah based/ encryption based token pattern for stateless applications

2.       Defense in depth measures along with drawbacks of each one

a.       Origin/referrer header check

b.       Double submit cookie

c.       Samesite cookie

d.       Custom headers (people still need to use tokens for forms etc. if they have mix of ajax endpoints and general HTML)

3.       Strong CSRF defenses but very less usable : captcha etc.

4.       CSRF Myths / techniques that do not work section

[1] if we solely rely on origin/referrer header check - an XSS vulnerability within a single page on that domain will also give CSRF vulnerability to all other state changing operations under that entire domain.

From: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Sent: Wednesday, September 12, 2018 1:31 PM
To: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>
Cc: Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi

Thanks you very much for the update

Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Just an update: I started working on this along with other sprint tasks of mine today. I am hoping to get it completed by end of next week and then send it for legal/PR approvals.

From: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>
Sent: Thursday, August 23, 2018 6:49 AM
To: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>


Awesome! Thank you! :)

- Jim

On 8/23/18 2:41 AM, Dominique Righetto wrote:
You are welcome :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Thu, Aug 23, 2018 at 10:33 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Np. I will keep u guys posted. Thanks for the support and have good rest of your day!

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Thursday, August 23, 2018 1:29 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi,

Sounds goods for me.

Thanks again for the contribution :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Thu, Aug 23, 2018 at 10:03 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Ok, I received necessary approvals for working on this. I am hoping to start the work in 2 weeks and then deliver the document to you guys for review by end of September/1st week of October (might be 1-2 weeks delay if approvals from Legal and other teams get delayed). My plan is to work on below things ? Please let me know if I missed anything/you feel something else has to be added to this list.


1.       Change the order of primary and defense in depth measures

2.       Include the pitfalls/caveats for each CSRF mitigation technique (origin/referrer header, samesite, double submit cookie etc.)

3.       Re-structure entire page and remove outdated/ non-relevant stuff

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Thursday, August 16, 2018 12:02 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Ok i perfectly understand.
Thanks for the info.

Le jeu. 16 ao?t 2018 ? 20:33, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
I had an offline discussion with Jim and informed him that I will have to check few details before I give any commitment to update the guidance?s here.

Update: I got approval internally from my team to work on this (fix issues and re-structure entire page) but I still need to get approval from Legal team to work on this. I will let you guys know when I hear back from them. Most likely they will ask me to just get it reviewed with them before sending it to you guys for review/get it published on OWASP page.

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Tuesday, August 14, 2018 11:02 PM
To: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>
Cc: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; Dave Wichers
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181002/947c3765/attachment-0001.html>

From jim.manico at owasp.org  Wed Oct  3 01:35:06 2018
From: jim.manico at owasp.org (Jim Manico)
Date: Tue, 2 Oct 2018 18:35:06 -0700
Subject: [OWASP-cheat-sheets]
 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <e9a0d4fd71524da98d70b1f2131445c5@EX13D11UWB004.ant.amazon.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<CANos97em5kiaScJggFf2NetwXF709-TNaxvaCdv+yQ4Wk9iDYA@mail.gmail.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<d817238c296641fc8b1089d9c81d2e31@EX13D11UWB004.ant.amazon.com>
	<7d8d7a7e-1b55-43cc-d151-93c7c25c3353@owasp.org>
	<CANos97cS+wQ2foQQh_OhMAf5NunQqmjnUFdqScFZU5onu+=zkg@mail.gmail.com>
	<e9a0d4fd71524da98d70b1f2131445c5@EX13D11UWB004.ant.amazon.com>
Message-ID: <b2ece167-3c69-2ef8-aa7f-d435dbfe5eab@owasp.org>

Double cookie submit is ok to submit the tokens values in both a cookie
and anywhere else in the request, it does not need to be a header.
- Jim

On 10/2/18 4:37 PM, Konakandla, Manideep wrote:
>
> Hey Dominique ? I very quickly reviewed your sample implementation
> example in the cheat sheet (GREAT work!) and have few questions. Is
> this code supposed to be a full pledged PoC or it?s just for a
> reference example? I am asking this because
>
> ?
>
> 1.?????? I cannot see a port/host/protocol level validation on
> referrer header as its being done for origin header
>
> 2.?????? There is no section where the flow will go if origin/referrer
> check succeeds
>
> 3.?????? Double submit cookie only assumes that the tokens are in
> headers (and hence ajax calls) and not in form tags. (we can try to
> make it explicit here that only ajax calls are being protected in this
> sample).
>
> ?
>
> *From:*Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Monday, October 1, 2018 8:25 PM
> *To:* Jim Manico <jim.manico at owasp.org>
> *Cc:* Konakandla, Manideep <mkonakan at amazon.com>; Jim Manico
> <jim at manicode.com>; Dave Wichers <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
> ?
>
> For sure, take all the time you need.
>
> Take pleasure on this and thanks again for your help ?
>
> ?
>
> Le mar. 2 oct. 2018 ? 03:54, Jim Manico <jim.manico at owasp.org
> <mailto:jim.manico at owasp.org>> a ?crit?:
>
>     No rush and no timeline. Let me know when you want our review to
>     start!
>
>     Aloha, Jim
>
>     ?
>
>     On 10/1/18 2:41 PM, Konakandla, Manideep wrote:
>
>         For now, I removed the reference to DWR and also added a
>         generic statement about .NET protection till someone knows and
>         updates the in-details of its current state.
>
>         ?
>
>         I also wanted to let you guys know that I will be off for
>         vacation from 16^th of October to end of November with very
>         limited access to my work resources and quite sure will be
>         tied up with office work for a while after I return. So, let?s
>         plan to get the updated document on OWASP page before October
>         16th. I am trying my level best from my side to get it out
>         ASAP to you guys for review.
>
>         ?
>
>         Are there anything?s that need to be taken care now so that we
>         can save some time after I get the document to you people for
>         review?
>
>         ?
>
>         *From:*Konakandla, Manideep
>         *Sent:* Friday, September 28, 2018 6:35 PM
>         *To:* 'Jim Manico' <jim at manicode.com> <mailto:jim at manicode.com>
>         *Cc:* Dominique Righetto <dominique.righetto at owasp.org>
>         <mailto:dominique.righetto at owasp.org>; Jim Manico
>         <jim.manico at owasp.org> <mailto:jim.manico at owasp.org>; Dave
>         Wichers <dave.wichers at owasp.org>
>         <mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org
>         <mailto:eric.sheridan at owasp.org>;
>         owasp-cheat-sheets at lists.owasp.org
>         <mailto:owasp-cheat-sheets at lists.owasp.org>
>         *Subject:* RE:
>         https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>         <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>         ?
>
>         Login CSRF is a way of exploiting CSRF on login forms (details
>         here <https://seclab.stanford.edu/websec/csrf/csrf.pdf>).
>         Though there is a line about it in referrer validation
>         section, it was not explained clearly and how it can scale
>         with other techniques such as token based mitigation. No
>         worries, I added a section about it!
>
>         ?
>
>         Finally, I am done with the document from my side and its sent
>         for internal reviews now. It should take 1-2 weeks before it
>         comes to you guys. Meanwhile, I still need help on below items
>         from you guys. If no one was able to find references for a),
>         we can very well remove it.
>
>         ?
>
>         a.???? Under double submit cookie section, it is mentioned
>         that DWR uses that approach but I could not find that anywhere
>         within DWR documentation that it uses double submit cookie.
>         Can someone help me finding reference if they know any?
>
>         b.???? One thing I wouldn?t be reviewing is the ASP.NET
>         <http://ASP.NET> references mentioned in the wiki
>         <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>         Can someone with .NET expertize verify if these are still
>         accurate? Looks to me like there are latest resources than the
>         one?s linked in current cheatsheet
>
>         ?
>
>         Happy weekend folks J
>
>         ?
>
>         *From:*Jim Manico <jim at manicode.com <mailto:jim at manicode.com>>
>         *Sent:* Thursday, September 27, 2018 3:02 AM
>         *To:* Konakandla, Manideep <mkonakan at amazon.com
>         <mailto:mkonakan at amazon.com>>
>         *Cc:* Dominique Righetto <dominique.righetto at owasp.org
>         <mailto:dominique.righetto at owasp.org>>; Jim Manico
>         <jim.manico at owasp.org <mailto:jim.manico at owasp.org>>; Dave
>         Wichers <dave.wichers at owasp.org
>         <mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org
>         <mailto:eric.sheridan at owasp.org>;
>         owasp-cheat-sheets at lists.owasp.org
>         <mailto:owasp-cheat-sheets at lists.owasp.org>
>         *Subject:* Re:
>         https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>         <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>         ?
>
>         ...as for (d) I dont see any problems with passing tokens as
>         headers or parameters
>
>         ?
>
>         I dont understand (e) can you explain that again?
>
>         --
>
>         Jim Manico
>
>         @Manicode
>
>         Secure Coding Education
>
>         +1 (808) 652-3805
>
>
>         On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep
>         <mkonakan at amazon.com <mailto:mkonakan at amazon.com>> wrote:
>
>             2 more questions added ?(Jim already started helping me on #a)
>
>             ?
>
>             a.???? I requested for an OWASP account and it?s still in
>             pending. @JIM ? Can you please help me in getting my
>             account approved? (registered with
>             mani.konakandla at gmail.com <mailto:mani.konakandla at gmail.com>)
>
>             b.???? Under double submit cookie section, it is mentioned
>             that DWR uses that approach but I could not find that
>             anywhere within DWR documentation that it uses double
>             submit cookie. Can someone help me finding reference if
>             they know any?
>
>             c.???? One thing I wouldn?t be reviewing is the ASP.NET
>             <http://ASP.NET> references mentioned in the wiki
>             <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>             Can someone with .NET expertize verify if these are still
>             accurate? Looks to me like there are latest resources than
>             the one?s linked
>
>             d.???? At few places within the wiki, I have seen
>             recommending to include token in headers for Ajax
>             requests. I also don?t see a problem in passing them as
>             parameters as well. Do you guys see any?
>
>             e.???? I also have not seen at any place within the wiki
>             talking about login CSRF issues and how each of the
>             techniques described can be prone/immune to it. Is there
>             any reason for it or are we open to include that?
>
>             ?
>
>             *From:*Konakandla, Manideep
>             *Sent:* Wednesday, September 26, 2018 5:27 PM
>             *To:* 'Jim Manico' <jim at manicode.com
>             <mailto:jim at manicode.com>>; 'Dominique Righetto'
>             <dominique.righetto at owasp.org
>             <mailto:dominique.righetto at owasp.org>>
>             *Cc:* 'Jim Manico' <jim.manico at owasp.org
>             <mailto:jim.manico at owasp.org>>; 'Dave Wichers'
>             <dave.wichers at owasp.org <mailto:dave.wichers at owasp.org>>;
>             'eric.sheridan at owasp.org <mailto:eric.sheridan at owasp.org>'
>             <eric.sheridan at owasp.org
>             <mailto:eric.sheridan at owasp.org>>;
>             owasp-cheat-sheets at lists.owasp.org
>             <mailto:owasp-cheat-sheets at lists.owasp.org>
>             *Subject:* RE:
>             https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>             <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>             ?
>
>             Yeah. My understanding of the breadth of exploitation of
>             XSS in an application protected with just origin/referrer
>             and other application protected with just token based
>             mitigation earlier was wrong. Dominique earlier email
>             thread cleared that to me (breadth of exploitation is same
>             in both the cases. i.e., if an XSS vulnerability is found
>             in any individual application protected with only one of
>             those techniques, it still can exploit all state changing
>             operations on entire application [though the complexity of
>             exploitation is easy in origin/referrer check than token
>             based mitigation]).
>
>             ?
>
>             Anyway, I am all clear and also almost done with
>             re-factoring the cheatsheet ?[1] JShould be fully
>             completed by Friday unless something comes up meanwhile. I
>             will then send it to my colleagues for review and then for
>             Legal, PR approvals. Before that, I need help from you
>             guys on below items
>
>             ?
>
>             a.???? I requested for an OWASP account and it?s still in
>             pending. @JIM ? Can you please help me in getting my
>             account approved? (registered with
>             mani.konakandla at gmail.com <mailto:mani.konakandla at gmail.com>)
>
>             b.???? Under double submit cookie section, it is mentioned
>             that DWR uses that approach but I could not find that
>             anywhere within DWR documentation that it uses double
>             submit cookie. Can someone help me finding reference if
>             they know any?
>
>             c.???? One thing I wouldn?t be reviewing is the ASP.NET
>             <http://ASP.NET> references mentioned in the wiki
>             <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>             Can someone with .NET expertize verify if these are still
>             accurate? Looks to me like there are latest resources than
>             the one?s linked
>
>             ?
>
>             [1] Below are changes done so far
>
>             a. Switched primary, secondary defense and our reasoning
>             behind it (added lot of reasons on issues with
>             origin/referrer header check and why token should be made
>             primary)
>
>             b. Added CSRF mitigation myths (CORS, content-type
>             validation etc.)
>
>             c. Added a section called ?Not so popular CSRF
>             mitigations? (mentioned details about triple submit cookie)
>
>             d. Included limitations / issues associated with double
>             submit cookie, same site cookie, captcha as a CSRF defense
>             etc.
>
>             e. Removed lot of obsolete content and added some new
>             content to some of the mitigations
>
>             f. Made document look more better by adding RFC?s links
>             wherever possible and lot of other minor changes.
>
>             ?
>
>             *From:*Jim Manico <jim at manicode.com
>             <mailto:jim at manicode.com>>
>             *Sent:* Wednesday, September 26, 2018 4:19 PM
>             *To:* Konakandla, Manideep <mkonakan at amazon.com
>             <mailto:mkonakan at amazon.com>>; Dominique Righetto
>             <dominique.righetto at owasp.org
>             <mailto:dominique.righetto at owasp.org>>
>             *Cc:* Jim Manico <jim.manico at owasp.org
>             <mailto:jim.manico at owasp.org>>; Dave Wichers
>             <dave.wichers at owasp.org <mailto:dave.wichers at owasp.org>>;
>             eric.sheridan at owasp.org <mailto:eric.sheridan at owasp.org>
>             *Subject:* Re:
>             https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>             <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>             ?
>
>             Well tokens can be placed in cookies.
>
>             The real answer to avoid CSRF is tokens in JavaScript
>             variable as opposed to cookies. They are not automatically
>             sent and indeed make CSRF impossible - at the expense of
>             tokens being fully stolen via XSS. Pick your poison!
>
>             I recommend a COMBO of these defenses. For web apps,
>             sychronizer token + header verification +
>             re-authentication for sensitive features.
>
>             For API's double-cookie submit or just use JavaScript
>             variable based tokens + header verification for same-site
>             API's + re-authentication for sensitive features.
>
>             > [1] If there is an XSS vulnerability at a single place
>             on a domain (it can add custom header), it can be used to
>             make CSRF */on all other state changing operationswithin
>             that domain /*done to that AJAX endpoint. Do you agree?
>
>             ?
>
>             Absolutely!
>
>             ?
>
>             On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
>
>                 Yeah, I understand that any XSS and CSRF game is over
>                 but I am stressing out on the highlighted part in [1].
>                 I am trying to highlight and get an affirmation on why
>                 my understanding on token based mitigation is better
>                 than origin/referrer header check will also apply to
>                 ?token based mitigation Vs custom header mitigation
>                 (if static tokens are used in custom headers)?.
>
>                 ?
>
>                 In case of tokens, we have an option to use different
>                 tokens on each page (taking things like URL, timestamp
>                 etc. into consideration) and hence XSS vulnerability
>                 on one page will only make state changing operations
>                 in that page vulnerable to CSRF but not state changing
>                 operations on other pages within that domain (because
>                 token value is different) but whereas in
>                 origin/referrer header check and custom header check,
>                 the token value is constant and hence XSS
>                 vulnerability in one page will also cause state
>                 changing operations in other pages to be vulnerable to
>                 CSRF as well. Off course, this can be mitigated in
>                 custom header checks by adding tokens to custom
>                 headers rather than static constant but this cannot be
>                 mitigated in origin/referrer check because those
>                 headers cannot be modified. So, yeah a single XSS any
>                 CSRF is bypassed but the breadth of the impact is
>                 different for each of them.
>
>                 ?
>
>                 Regarding code samples ? I currently was able to
>                 allocate only some time for this task and I don?t
>                 think I will be able to do code samples within this
>                 time frame. I am also leaving for a long vacation
>                 starting Oct 12 and hence let?s try to get this out
>                 first and we can add code samples later on considering
>                 my work load after I return from vacation.
>
>                 ?
>
>                 [1] If there is an XSS vulnerability at a single place
>                 on a domain (it can add custom header), it can be used
>                 to make CSRF */on all other state changing
>                 operations/**/within that domain /*done to that AJAX
>                 endpoint. Do you agree?
>
>                 ?
>
>                 *From:*Dominique Righetto
>                 <dominique.righetto at owasp.org>
>                 <mailto:dominique.righetto at owasp.org>
>                 *Sent:* Thursday, September 20, 2018 8:45 AM
>                 *To:* Jim Manico <jim at manicode.com>
>                 <mailto:jim at manicode.com>
>                 *Cc:* Konakandla, Manideep <mkonakan at amazon.com>
>                 <mailto:mkonakan at amazon.com>; Jim Manico
>                 <jim.manico at owasp.org> <mailto:jim.manico at owasp.org>;
>                 Dave Wichers <dave.wichers at owasp.org>
>                 <mailto:dave.wichers at owasp.org>;
>                 eric.sheridan at owasp.org <mailto:eric.sheridan at owasp.org>
>                 *Subject:* Re:
>                 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>                 <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>                 ?
>
>                 Hi,
>
>                 ?
>
>                 Thanks for your contribution.
>
>                 ?
>
>                 I like very much your plan ?
>
>                 ?
>
>                 I ask for some favor in addition :
>
>                 - can you provide code sample (in one language like
>                 java or .net or the one you want but it must be easy
>                 to read and understand) or libraires along your
>                 proposal for each section?
>
>                 - can you use the syntaxhighlight tag for code?
>
>                 ?
>
>                 I'am agree with Jim, XSS? means game over because your
>                 browsing context can be used as proxy so csrf
>                 protection will be defeated because request came from
>                 the legitimate user.
>
>                 ?
>
>                 Thanks you again for all your help ???
>
>                 ?
>
>                 Le jeu. 20 sept. 2018 ? 18:31, Jim Manico
>                 <jim at manicode.com <mailto:jim at manicode.com>> a ?crit?:
>
>                     > If there is an XSS vulnerability at a single
>                     place on a domain (it can add custom header), it
>                     can be used to make CSRF on all other state
>                     changing operations within that domain done to
>                     that AJAX endpoint. Do you agree?
>
>                     Any XSS is game over and all CSRF are useless in
>                     the face of XSS. I Agree!
>
>                     - Jim
>
>                     ?
>
>                     On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
>
>                         Hey Guys,
>
>                         ?
>
>                         [1] is what I said for origin/referrer header
>                         check in this e-mail thread. I also believe
>                         that this applies for custom headers for AJAX
>                         endpoints as well. If there is an XSS
>                         vulnerability at a single place on a domain
>                         (it can add custom header), it can be used to
>                         make CSRF on all other state changing
>                         operations within that domain done to that
>                         AJAX endpoint. Do you agree?
>
>                         ?
>
>                         Here is how I am keeping the new re-factored
>                         cheatsheet. Does this look good to you guys?
>
>                         ?
>
>                         1.?????? Use token based method as primary defense
>
>                         a.?????? Can use synchronizer pattern for
>                         stateful applications
>
>                         b.?????? Can use hah based/ encryption based
>                         token pattern for stateless applications
>
>                         2.?????? Defense in depth measures along with
>                         drawbacks of each one
>
>                         a.?????? Origin/referrer header check
>
>                         b.?????? Double submit cookie
>
>                         c.?????? Samesite cookie
>
>                         d.?????? Custom headers (people still need to
>                         use tokens for forms etc. if they have mix of
>                         ajax endpoints and general HTML)
>
>                         3.?????? Strong CSRF defenses but very less
>                         usable : captcha etc.
>
>                         4.?????? CSRF Myths / techniques that do not
>                         work section
>
>                         ?
>
>                         [1] if we solely rely on origin/referrer
>                         header check - an XSS vulnerability within a
>                         single page on that domain will also give CSRF
>                         vulnerability to all other state changing
>                         operations under that entire domain.
>
>                         ?
>
>                         *From:*Dominique Righetto
>                         <dominique.righetto at owasp.org>
>                         <mailto:dominique.righetto at owasp.org>
>                         *Sent:* Wednesday, September 12, 2018 1:31 PM
>                         *To:* Konakandla, Manideep
>                         <mkonakan at amazon.com> <mailto:mkonakan at amazon.com>
>                         *Cc:* Jim Manico <jim.manico at owasp.org>
>                         <mailto:jim.manico at owasp.org>; Dave Wichers
>                         <dave.wichers at owasp.org>
>                         <mailto:dave.wichers at owasp.org>;
>                         eric.sheridan at owasp.org
>                         <mailto:eric.sheridan at owasp.org>
>                         *Subject:* Re:
>                         https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>                         <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>                         ?
>
>                         Hi
>
>                         ?
>
>                         Thanks you very much for the update?
>
>                         ?
>
>                         Le mer. 12 sept. 2018 ? 21:33, Konakandla,
>                         Manideep <mkonakan at amazon.com
>                         <mailto:mkonakan at amazon.com>> a ?crit?:
>
>                             Just an update: I started working on this
>                             along with other sprint tasks of mine
>                             today. I am hoping to get it completed by
>                             end of next week and then send it for
>                             legal/PR approvals.
>
>                             ?
>
>                             *From:*Jim Manico <jim.manico at owasp.org
>                             <mailto:jim.manico at owasp.org>>
>                             *Sent:* Thursday, August 23, 2018 6:49 AM
>                             *To:* Dominique Righetto
>                             <dominique.righetto at owasp.org
>                             <mailto:dominique.righetto at owasp.org>>;
>                             Konakandla, Manideep <mkonakan at amazon.com
>                             <mailto:mkonakan at amazon.com>>
>                             *Cc:* Dave Wichers <dave.wichers at owasp.org
>                             <mailto:dave.wichers at owasp.org>>;
>                             eric.sheridan at owasp.org
>                             <mailto:eric.sheridan at owasp.org>
>                             *Subject:* Re:
>                             https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>                             <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>                             ?
>
>                             Awesome! Thank you! :)
>
>                             - Jim
>
>                             ?
>
>                             On 8/23/18 2:41 AM, Dominique Righetto wrote:
>
>                                 You are welcome :)
>
>                                 --
>                                 Cordialement, Best regards,
>                                 Dominique Righetto
>                                 dominique.righetto at gmail.com
>                                 <mailto:dominique.righetto at gmail.com>
>
>                                 dominique.righetto at owasp.org
>                                 <mailto:dominique.righetto at gmail.com>
>
>                                 https://righettod.eu
>                                 GPG: 323D19BA
>
>                                 ?
>
>                                 ?
>
>                                 On Thu, Aug 23, 2018 at 10:33 AM
>                                 Konakandla, Manideep
>                                 <mkonakan at amazon.com
>                                 <mailto:mkonakan at amazon.com>> wrote:
>
>                                     Np. I will keep u guys posted.
>                                     Thanks for the support and have
>                                     good rest of your day!
>
>                                     ?
>
>                                     *From:*Dominique Righetto
>                                     <dominique.righetto at owasp.org
>                                     <mailto:dominique.righetto at owasp.org>>
>
>                                     *Sent:* Thursday, August 23, 2018
>                                     1:29 AM
>                                     *To:* Konakandla, Manideep
>                                     <mkonakan at amazon.com
>                                     <mailto:mkonakan at amazon.com>>
>                                     *Cc:* Jim Manico
>                                     <jim.manico at owasp.org
>                                     <mailto:jim.manico at owasp.org>>;
>                                     Dave Wichers
>                                     <dave.wichers at owasp.org
>                                     <mailto:dave.wichers at owasp.org>>;
>                                     eric.sheridan at owasp.org
>                                     <mailto:eric.sheridan at owasp.org>
>                                     *Subject:* Re:
>                                     https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>                                     <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>                                     ?
>
>                                     Hi,
>
>                                     ?
>
>                                     Sounds goods for me.
>
>                                     ?
>
>                                     Thanks again for the contribution :)
>
>                                     --
>                                     Cordialement, Best regards,
>                                     Dominique Righetto
>                                     dominique.righetto at gmail.com
>                                     <mailto:dominique.righetto at gmail.com>
>
>                                     dominique.righetto at owasp.org
>                                     <mailto:dominique.righetto at gmail.com>
>
>                                     https://righettod.eu
>                                     GPG: 323D19BA
>
>                                     ?
>
>                                     ?
>
>                                     On Thu, Aug 23, 2018 at 10:03 AM
>                                     Konakandla, Manideep
>                                     <mkonakan at amazon.com
>                                     <mailto:mkonakan at amazon.com>> wrote:
>
>                                         Ok, I received necessary
>                                         approvals for working on this.
>                                         I am hoping to start the work
>                                         in 2 weeks and then deliver
>                                         the document to you guys for
>                                         review by end of
>                                         September/1^st week of October
>                                         (might be 1-2 weeks delay if
>                                         approvals from Legal and other
>                                         teams get delayed). My plan is
>                                         to work on below things ?
>                                         Please let me know if I missed
>                                         anything/you feel something
>                                         else has to be added to this list.
>
>                                         ?????????????
>
>                                         1.?????? Change the order of
>                                         primary and defense in depth
>                                         measures
>
>                                         2.?????? Include the
>                                         pitfalls/caveats for each CSRF
>                                         mitigation technique
>                                         (origin/referrer header,
>                                         samesite, double submit cookie
>                                         etc.)
>
>                                         3.?????? Re-structure entire
>                                         page and remove outdated/
>                                         non-relevant stuff
>
>                                         ?
>
>                                         *From:*Dominique Righetto
>                                         <dominique.righetto at owasp.org
>                                         <mailto:dominique.righetto at owasp.org>>
>
>                                         *Sent:* Thursday, August 16,
>                                         2018 12:02 PM
>                                         *To:* Konakandla, Manideep
>                                         <mkonakan at amazon.com
>                                         <mailto:mkonakan at amazon.com>>
>                                         *Cc:* Jim Manico
>                                         <jim.manico at owasp.org
>                                         <mailto:jim.manico at owasp.org>>;
>                                         Dave Wichers
>                                         <dave.wichers at owasp.org
>                                         <mailto:dave.wichers at owasp.org>>;
>                                         eric.sheridan at owasp.org
>                                         <mailto:eric.sheridan at owasp.org>
>                                         *Subject:* Re:
>                                         https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>                                         <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>                                         ?
>
>                                         Ok i perfectly understand.
>
>                                         Thanks for the info.
>
>                                         ?
>
>                                         Le jeu. 16 ao?t 2018 ? 20:33,
>                                         Konakandla, Manideep
>                                         <mkonakan at amazon.com
>                                         <mailto:mkonakan at amazon.com>>
>                                         a ?crit?:
>
>                                             I had an offline
>                                             discussion with Jim and
>                                             informed him that I will
>                                             have to check few details
>                                             before I give any
>                                             commitment to update the
>                                             guidance?s here.
>
>                                             ?
>
>                                             Update: I got approval
>                                             internally from my team to
>                                             work on this (fix issues
>                                             and re-structure entire
>                                             page) but I still need to
>                                             get approval from Legal
>                                             team to work on this. I
>                                             will let you guys know
>                                             when I hear back from
>                                             them. Most likely they
>                                             will ask me to just get it
>                                             reviewed with them before
>                                             sending it to you guys for
>                                             review/get it published on
>                                             OWASP page.
>
>                                             ?
>
>                                             *From:*Dominique Righetto
>                                             <dominique.righetto at owasp.org
>                                             <mailto:dominique.righetto at owasp.org>>
>
>                                             *Sent:* Tuesday, August
>                                             14, 2018 11:02 PM
>                                             *To:* Jim Manico
>                                             <jim.manico at owasp.org
>                                             <mailto:jim.manico at owasp.org>>
>                                             *Cc:* Konakandla, Manideep
>                                             <mkonakan at amazon.com
>                                             <mailto:mkonakan at amazon.com>>;
>                                             Dave Wichers
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181002/c3c7efc2/attachment-0001.html>

From dominique.righetto at owasp.org  Fri Oct  5 06:34:04 2018
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Fri, 5 Oct 2018 08:34:04 +0200
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <52721eb72b5e4572842482f2cfcafecf@EX13D11UWB004.ant.amazon.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<CANos97cbaHSc9uUyc6G1-SPnM7pyY0AF7D2pmEV30yGmqbS_+A@mail.gmail.com>
	<e05fc4606d4447f994abfeb25130a711@EX13D11UWB004.ant.amazon.com>
	<CANos97em5kiaScJggFf2NetwXF709-TNaxvaCdv+yQ4Wk9iDYA@mail.gmail.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<d817238c296641fc8b1089d9c81d2e31@EX13D11UWB004.ant.amazon.com>
	<7d8d7a7e-1b55-43cc-d151-93c7c25c3353@owasp.org>
	<CANos97cS+wQ2foQQh_OhMAf5NunQqmjnUFdqScFZU5onu+=zkg@mail.gmail.com>
	<52721eb72b5e4572842482f2cfcafecf@EX13D11UWB004.ant.amazon.com>
Message-ID: <CANos97cuFCSZ3_WXf1i=o-vE23QikQ6=CFcpb6j3-3yofk-BSA@mail.gmail.com>

Hi, sorry for the delay but i'm busy currently so i have expected to answer
this we...sorry...

For your question, the code was just example of implementation of the
following approach:

   - Verifying same origin with standard headers
   - CSRF specific defense:
      - Double submit cookie (stateless)
      - Leverage *SameSite* cookie attribute

Feel free to update or replace it during your refactoring...
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com
<dominique.righetto at gmail.com>dominique.righetto at owasp.org
<dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Oct 5, 2018 at 8:30 AM Konakandla, Manideep <mkonakan at amazon.com>
wrote:

> Any comments on my questions in trailing e-mail?
>
>
>
> *From:* Konakandla, Manideep
> *Sent:* Tuesday, October 2, 2018 4:37 PM
> *To:* 'Dominique Righetto' <dominique.righetto at owasp.org>; Jim Manico <
> jim.manico at owasp.org>
> *Cc:* Jim Manico <jim at manicode.com>; Dave Wichers <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
> *Subject:* RE:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hey Dominique ? I very quickly reviewed your sample implementation example
> in the cheat sheet (GREAT work!) and have few questions. Is this code
> supposed to be a full pledged PoC or it?s just for a reference example? I
> am asking this because
>
>
>
> 1.       I cannot see a port/host/protocol level validation on referrer
> header as its being done for origin header
>
> 2.       There is no section where the flow will go if origin/referrer
> check succeeds
>
> 3.       Double submit cookie only assumes that the tokens are in headers
> (and hence ajax calls) and not in form tags. (we can try to make it
> explicit here that only ajax calls are being protected in this sample).
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Monday, October 1, 2018 8:25 PM
> *To:* Jim Manico <jim.manico at owasp.org>
> *Cc:* Konakandla, Manideep <mkonakan at amazon.com>; Jim Manico <
> jim at manicode.com>; Dave Wichers <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> For sure, take all the time you need.
>
> Take pleasure on this and thanks again for your help ?
>
>
>
> Le mar. 2 oct. 2018 ? 03:54, Jim Manico <jim.manico at owasp.org> a ?crit :
>
> No rush and no timeline. Let me know when you want our review to start!
>
> Aloha, Jim
>
>
>
> On 10/1/18 2:41 PM, Konakandla, Manideep wrote:
>
> For now, I removed the reference to DWR and also added a generic statement
> about .NET protection till someone knows and updates the in-details of its
> current state.
>
>
>
> I also wanted to let you guys know that I will be off for vacation from 16
> th of October to end of November with very limited access to my work
> resources and quite sure will be tied up with office work for a while after
> I return. So, let?s plan to get the updated document on OWASP page before
> October 16th. I am trying my level best from my side to get it out ASAP to
> you guys for review.
>
>
>
> Are there anything?s that need to be taken care now so that we can save
> some time after I get the document to you people for review?
>
>
>
> *From:* Konakandla, Manideep
> *Sent:* Friday, September 28, 2018 6:35 PM
> *To:* 'Jim Manico' <jim at manicode.com> <jim at manicode.com>
> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>
> <dominique.righetto at owasp.org>; Jim Manico <jim.manico at owasp.org>
> <jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>
> <dave.wichers at owasp.org>; eric.sheridan at owasp.org;
> owasp-cheat-sheets at lists.owasp.org
> *Subject:* RE:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Login CSRF is a way of exploiting CSRF on login forms (details here
> <https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a
> line about it in referrer validation section, it was not explained clearly
> and how it can scale with other techniques such as token based mitigation.
> No worries, I added a section about it!
>
>
>
> Finally, I am done with the document from my side and its sent for
> internal reviews now. It should take 1-2 weeks before it comes to you guys.
> Meanwhile, I still need help on below items from you guys. If no one was
> able to find references for a), we can very well remove it.
>
>
>
> a.     Under double submit cookie section, it is mentioned that DWR uses
> that approach but I could not find that anywhere within DWR documentation
> that it uses double submit cookie. Can someone help me finding reference if
> they know any?
>
> b.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
> in the wiki
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
> Can someone with .NET expertize verify if these are still accurate? Looks
> to me like there are latest resources than the one?s linked in current
> cheatsheet
>
>
>
> Happy weekend folks J
>
>
>
> *From:* Jim Manico <jim at manicode.com>
> *Sent:* Thursday, September 27, 2018 3:02 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Jim Manico <
> jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> ...as for (d) I dont see any problems with passing tokens as headers or
> parameters
>
>
>
> I dont understand (e) can you explain that again?
>
> --
>
> Jim Manico
>
> @Manicode
>
> Secure Coding Education
>
> +1 (808) 652-3805
>
>
> On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> 2 more questions added  (Jim already started helping me on #a)
>
>
>
> a.     I requested for an OWASP account and it?s still in pending. @JIM ?
> Can you please help me in getting my account approved? (registered with
> mani.konakandla at gmail.com)
>
> b.     Under double submit cookie section, it is mentioned that DWR uses
> that approach but I could not find that anywhere within DWR documentation
> that it uses double submit cookie. Can someone help me finding reference if
> they know any?
>
> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
> in the wiki
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
> Can someone with .NET expertize verify if these are still accurate? Looks
> to me like there are latest resources than the one?s linked
>
> d.     At few places within the wiki, I have seen recommending to include
> token in headers for Ajax requests. I also don?t see a problem in passing
> them as parameters as well. Do you guys see any?
>
> e.     I also have not seen at any place within the wiki talking about
> login CSRF issues and how each of the techniques described can be
> prone/immune to it. Is there any reason for it or are we open to include
> that?
>
>
>
> *From:* Konakandla, Manideep
> *Sent:* Wednesday, September 26, 2018 5:27 PM
> *To:* 'Jim Manico' <jim at manicode.com>; 'Dominique Righetto' <
> dominique.righetto at owasp.org>
> *Cc:* 'Jim Manico' <jim.manico at owasp.org>; 'Dave Wichers' <
> dave.wichers at owasp.org>; 'eric.sheridan at owasp.org' <
> eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* RE:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Yeah. My understanding of the breadth of exploitation of XSS in an
> application protected with just origin/referrer and other application
> protected with just token based mitigation earlier was wrong. Dominique
> earlier email thread cleared that to me (breadth of exploitation is same in
> both the cases. i.e., if an XSS vulnerability is found in any individual
> application protected with only one of those techniques, it still can
> exploit all state changing operations on entire application [though the
> complexity of exploitation is easy in origin/referrer check than token
> based mitigation]).
>
>
>
> Anyway, I am all clear and also almost done with re-factoring the
> cheatsheet  [1] J Should be fully completed by Friday unless something
> comes up meanwhile. I will then send it to my colleagues for review and
> then for Legal, PR approvals. Before that, I need help from you guys on
> below items
>
>
>
> a.     I requested for an OWASP account and it?s still in pending. @JIM ?
> Can you please help me in getting my account approved? (registered with
> mani.konakandla at gmail.com)
>
> b.     Under double submit cookie section, it is mentioned that DWR uses
> that approach but I could not find that anywhere within DWR documentation
> that it uses double submit cookie. Can someone help me finding reference if
> they know any?
>
> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
> in the wiki
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
> Can someone with .NET expertize verify if these are still accurate? Looks
> to me like there are latest resources than the one?s linked
>
>
>
> [1] Below are changes done so far
>
> a. Switched primary, secondary defense and our reasoning behind it (added
> lot of reasons on issues with origin/referrer header check and why token
> should be made primary)
>
> b. Added CSRF mitigation myths (CORS, content-type validation etc.)
>
> c. Added a section called ?Not so popular CSRF mitigations? (mentioned
> details about triple submit cookie)
>
> d. Included limitations / issues associated with double submit cookie,
> same site cookie, captcha as a CSRF defense etc.
>
> e. Removed lot of obsolete content and added some new content to some of
> the mitigations
>
> f. Made document look more better by adding RFC?s links wherever possible
> and lot of other minor changes.
>
>
>
> *From:* Jim Manico <jim at manicode.com>
> *Sent:* Wednesday, September 26, 2018 4:19 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>; Dominique Righetto <
> dominique.righetto at owasp.org>
> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
> dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Well tokens can be placed in cookies.
>
> The real answer to avoid CSRF is tokens in JavaScript variable as opposed
> to cookies. They are not automatically sent and indeed make CSRF impossible
> - at the expense of tokens being fully stolen via XSS. Pick your poison!
>
> I recommend a COMBO of these defenses. For web apps, sychronizer token +
> header verification + re-authentication for sensitive features.
>
> For API's double-cookie submit or just use JavaScript variable based
> tokens + header verification for same-site API's + re-authentication for
> sensitive features.
>
> > [1] If there is an XSS vulnerability at a single place on a domain (it
> can add custom header), it can be used to make CSRF *on all other state
> changing operationswithin that domain *done to that AJAX endpoint. Do you
> agree?
>
>
>
> Absolutely!
>
>
>
> On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
>
> Yeah, I understand that any XSS and CSRF game is over but I am stressing
> out on the highlighted part in [1]. I am trying to highlight and get an
> affirmation on why my understanding on token based mitigation is better
> than origin/referrer header check will also apply to ?token based
> mitigation Vs custom header mitigation (if static tokens are used in custom
> headers)?.
>
>
>
> In case of tokens, we have an option to use different tokens on each page
> (taking things like URL, timestamp etc. into consideration) and hence XSS
> vulnerability on one page will only make state changing operations in that
> page vulnerable to CSRF but not state changing operations on other pages
> within that domain (because token value is different) but whereas in
> origin/referrer header check and custom header check, the token value is
> constant and hence XSS vulnerability in one page will also cause state
> changing operations in other pages to be vulnerable to CSRF as well. Off
> course, this can be mitigated in custom header checks by adding tokens to
> custom headers rather than static constant but this cannot be mitigated in
> origin/referrer check because those headers cannot be modified. So, yeah a
> single XSS any CSRF is bypassed but the breadth of the impact is different
> for each of them.
>
>
>
> Regarding code samples ? I currently was able to allocate only some time
> for this task and I don?t think I will be able to do code samples within
> this time frame. I am also leaving for a long vacation starting Oct 12 and
> hence let?s try to get this out first and we can add code samples later on
> considering my work load after I return from vacation.
>
>
>
> [1] If there is an XSS vulnerability at a single place on a domain (it can
> add custom header), it can be used to make CSRF *on all other state
> changing operations* *within that domain *done to that AJAX endpoint. Do
> you agree?
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> <dominique.righetto at owasp.org>
> *Sent:* Thursday, September 20, 2018 8:45 AM
> *To:* Jim Manico <jim at manicode.com> <jim at manicode.com>
> *Cc:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
> Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave Wichers
> <dave.wichers at owasp.org> <dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi,
>
>
>
> Thanks for your contribution.
>
>
>
> I like very much your plan ?
>
>
>
> I ask for some favor in addition :
>
> - can you provide code sample (in one language like java or .net or the
> one you want but it must be easy to read and understand) or libraires along
> your proposal for each section?
>
> - can you use the syntaxhighlight tag for code?
>
>
>
> I'am agree with Jim, XSS  means game over because your browsing context
> can be used as proxy so csrf protection will be defeated because request
> came from the legitimate user.
>
>
>
> Thanks you again for all your help ???
>
>
>
> Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com> a ?crit :
>
> > If there is an XSS vulnerability at a single place on a domain (it can
> add custom header), it can be used to make CSRF on all other state changing
> operations within that domain done to that AJAX endpoint. Do you agree?
>
> Any XSS is game over and all CSRF are useless in the face of XSS. I Agree!
>
> - Jim
>
>
>
> On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
>
> Hey Guys,
>
>
>
> [1] is what I said for origin/referrer header check in this e-mail thread.
> I also believe that this applies for custom headers for AJAX endpoints as
> well. If there is an XSS vulnerability at a single place on a domain (it
> can add custom header), it can be used to make CSRF on all other state
> changing operations within that domain done to that AJAX endpoint. Do you
> agree?
>
>
>
> Here is how I am keeping the new re-factored cheatsheet. Does this look
> good to you guys?
>
>
>
> 1.       Use token based method as primary defense
>
> a.       Can use synchronizer pattern for stateful applications
>
> b.       Can use hah based/ encryption based token pattern for stateless
> applications
>
> 2.       Defense in depth measures along with drawbacks of each one
>
> a.       Origin/referrer header check
>
> b.       Double submit cookie
>
> c.       Samesite cookie
>
> d.       Custom headers (people still need to use tokens for forms etc.
> if they have mix of ajax endpoints and general HTML)
>
> 3.       Strong CSRF defenses but very less usable : captcha etc.
>
> 4.       CSRF Myths / techniques that do not work section
>
>
>
> [1] if we solely rely on origin/referrer header check - an XSS
> vulnerability within a single page on that domain will also give CSRF
> vulnerability to all other state changing operations under that entire
> domain.
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> <dominique.righetto at owasp.org>
> *Sent:* Wednesday, September 12, 2018 1:31 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave
> Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi
>
>
>
> Thanks you very much for the update
>
>
>
> Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep <mkonakan at amazon.com>
> a ?crit :
>
> Just an update: I started working on this along with other sprint tasks of
> mine today. I am hoping to get it completed by end of next week and then
> send it for legal/PR approvals.
>
>
>
> *From:* Jim Manico <jim.manico at owasp.org>
> *Sent:* Thursday, August 23, 2018 6:49 AM
> *To:* Dominique Righetto <dominique.righetto at owasp.org>; Konakandla,
> Manideep <mkonakan at amazon.com>
> *Cc:* Dave Wichers <dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Awesome! Thank you! :)
>
> - Jim
>
>
>
> On 8/23/18 2:41 AM, Dominique Righetto wrote:
>
> You are welcome :)
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Thu, Aug 23, 2018 at 10:33 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Np. I will keep u guys posted. Thanks for the support and have good rest
> of your day!
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Thursday, August 23, 2018 1:29 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
> dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi,
>
>
>
> Sounds goods for me.
>
>
>
> Thanks again for the contribution :)
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Thu, Aug 23, 2018 at 10:03 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Ok, I received necessary approvals for working on this. I am hoping to
> start the work in 2 weeks and then deliver the document to you guys for
> review by end of September/1st week of October (might be 1-2 weeks delay
> if approvals from Legal and other teams get delayed). My plan is to work on
> below things ? Please let me know if I missed anything/you feel something
> else has to be added to this list.
>
>
>
> 1.       Change the order of primary and defense in depth measures
>
> 2.       Include the pitfalls/caveats for each CSRF mitigation technique
> (origin/referrer header, samesite, double submit cookie etc.)
>
> 3.       Re-structure entire page and remove outdated/ non-relevant stuff
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Thursday, August 16, 2018 12:02 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
> dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Ok i perfectly understand.
>
> Thanks for the info.
>
>
>
> Le jeu. 16 ao?t 2018 ? 20:33, Konakandla, Manideep <mkonakan at amazon.com>
> a ?crit :
>
> I had an offline discussion with Jim and informed him that I will have to
> check few details before I give any commitment to update the guidance?s
> here.
>
>
>
> Update: I got approval internally from my team to work on this (fix issues
> and re-structure entire page) but I still need to get approval from Legal
> team to work on this. I will let you guys know when I hear back from them.
> Most likely they will ask me to just get it reviewed with them before
> sending it to you guys for review/get it published on OWASP page.
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Tuesday, August 14, 2018 11:02 PM
> *To:* Jim Manico <jim.manico at owasp.org>
> *Cc:* Konakandla, Manideep <mkonakan at amazon.com>; Dave Wichers
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181005/8bc93e4e/attachment-0001.html>

From mkonakan at amazon.com  Fri Oct  5 06:45:00 2018
From: mkonakan at amazon.com (Konakandla, Manideep)
Date: Fri, 5 Oct 2018 06:45:00 +0000
Subject: [OWASP-cheat-sheets]
 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CANos97cuFCSZ3_WXf1i=o-vE23QikQ6=CFcpb6j3-3yofk-BSA@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<CANos97cbaHSc9uUyc6G1-SPnM7pyY0AF7D2pmEV30yGmqbS_+A@mail.gmail.com>
	<e05fc4606d4447f994abfeb25130a711@EX13D11UWB004.ant.amazon.com>
	<CANos97em5kiaScJggFf2NetwXF709-TNaxvaCdv+yQ4Wk9iDYA@mail.gmail.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<d817238c296641fc8b1089d9c81d2e31@EX13D11UWB004.ant.amazon.com>
	<7d8d7a7e-1b55-43cc-d151-93c7c25c3353@owasp.org>
	<CANos97cS+wQ2foQQh_OhMAf5NunQqmjnUFdqScFZU5onu+=zkg@mail.gmail.com>
	<52721eb72b5e4572842482f2cfcafecf@EX13D11UWB004.ant.amazon.com>
	<CANos97cuFCSZ3_WXf1i=o-vE23QikQ6=CFcpb6j3-3yofk-BSA@mail.gmail.com>
Message-ID: <40d751c80bba4bf29886d6f473022800@EX13D11UWB004.ant.amazon.com>

No problem. Yeah, code doesn?t look to me like it?s an full implementation but can definitely act as an reference sample. I am going to make the distinction clear in the new cheat sheet.

Thanks for your response ?

From: Dominique Righetto <dominique.righetto at owasp.org>
Sent: Thursday, October 4, 2018 11:34 PM
To: Konakandla, Manideep <mkonakan at amazon.com>
Cc: Jim Manico <jim.manico at owasp.org>; Jim Manico <jim at manicode.com>; Dave Wichers <dave.wichers at owasp.org>; eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hi, sorry for the delay but i'm busy currently so i have expected to answer this we...sorry...

For your question, the code was just example of implementation of the following approach:

  *   Verifying same origin with standard headers
  *   CSRF specific defense:

     *   Double submit cookie (stateless)
     *   Leverage SameSite cookie attribute
Feel free to update or replace it during your refactoring...
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Oct 5, 2018 at 8:30 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Any comments on my questions in trailing e-mail?

From: Konakandla, Manideep
Sent: Tuesday, October 2, 2018 4:37 PM
To: 'Dominique Righetto' <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: RE: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hey Dominique ? I very quickly reviewed your sample implementation example in the cheat sheet (GREAT work!) and have few questions. Is this code supposed to be a full pledged PoC or it?s just for a reference example? I am asking this because


1.       I cannot see a port/host/protocol level validation on referrer header as its being done for origin header

2.       There is no section where the flow will go if origin/referrer check succeeds

3.       Double submit cookie only assumes that the tokens are in headers (and hence ajax calls) and not in form tags. (we can try to make it explicit here that only ajax calls are being protected in this sample).

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Monday, October 1, 2018 8:25 PM
To: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>
Cc: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

For sure, take all the time you need.
Take pleasure on this and thanks again for your help ?

Le mar. 2 oct. 2018 ? 03:54, Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>> a ?crit :

No rush and no timeline. Let me know when you want our review to start!

Aloha, Jim

On 10/1/18 2:41 PM, Konakandla, Manideep wrote:
For now, I removed the reference to DWR and also added a generic statement about .NET protection till someone knows and updates the in-details of its current state.

I also wanted to let you guys know that I will be off for vacation from 16th of October to end of November with very limited access to my work resources and quite sure will be tied up with office work for a while after I return. So, let?s plan to get the updated document on OWASP page before October 16th. I am trying my level best from my side to get it out ASAP to you guys for review.

Are there anything?s that need to be taken care now so that we can save some time after I get the document to you people for review?

From: Konakandla, Manideep
Sent: Friday, September 28, 2018 6:35 PM
To: 'Jim Manico' <jim at manicode.com><mailto:jim at manicode.com>
Cc: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>; Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: RE: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Login CSRF is a way of exploiting CSRF on login forms (details here<https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a line about it in referrer validation section, it was not explained clearly and how it can scale with other techniques such as token based mitigation. No worries, I added a section about it!

Finally, I am done with the document from my side and its sent for internal reviews now. It should take 1-2 weeks before it comes to you guys. Meanwhile, I still need help on below items from you guys. If no one was able to find references for a), we can very well remove it.


a.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

b.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked in current cheatsheet

Happy weekend folks ?

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Thursday, September 27, 2018 3:02 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

...as for (d) I dont see any problems with passing tokens as headers or parameters

I dont understand (e) can you explain that again?
--
Jim Manico
@Manicode
Secure Coding Education
+1 (808) 652-3805

On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
2 more questions added  (Jim already started helping me on #a)


a.     I requested for an OWASP account and it?s still in pending. @JIM ? Can you please help me in getting my account approved? (registered with mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>)

b.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

c.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked

d.     At few places within the wiki, I have seen recommending to include token in headers for Ajax requests. I also don?t see a problem in passing them as parameters as well. Do you guys see any?

e.     I also have not seen at any place within the wiki talking about login CSRF issues and how each of the techniques described can be prone/immune to it. Is there any reason for it or are we open to include that?

From: Konakandla, Manideep
Sent: Wednesday, September 26, 2018 5:27 PM
To: 'Jim Manico' <jim at manicode.com<mailto:jim at manicode.com>>; 'Dominique Righetto' <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Cc: 'Jim Manico' <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; 'Dave Wichers' <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; 'eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>' <eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: RE: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Yeah. My understanding of the breadth of exploitation of XSS in an application protected with just origin/referrer and other application protected with just token based mitigation earlier was wrong. Dominique earlier email thread cleared that to me (breadth of exploitation is same in both the cases. i.e., if an XSS vulnerability is found in any individual application protected with only one of those techniques, it still can exploit all state changing operations on entire application [though the complexity of exploitation is easy in origin/referrer check than token based mitigation]).

Anyway, I am all clear and also almost done with re-factoring the cheatsheet  [1] ? Should be fully completed by Friday unless something comes up meanwhile. I will then send it to my colleagues for review and then for Legal, PR approvals. Before that, I need help from you guys on below items


a.     I requested for an OWASP account and it?s still in pending. @JIM ? Can you please help me in getting my account approved? (registered with mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>)

b.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

c.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked

[1] Below are changes done so far
a. Switched primary, secondary defense and our reasoning behind it (added lot of reasons on issues with origin/referrer header check and why token should be made primary)
b. Added CSRF mitigation myths (CORS, content-type validation etc.)
c. Added a section called ?Not so popular CSRF mitigations? (mentioned details about triple submit cookie)
d. Included limitations / issues associated with double submit cookie, same site cookie, captcha as a CSRF defense etc.
e. Removed lot of obsolete content and added some new content to some of the mitigations
f. Made document look more better by adding RFC?s links wherever possible and lot of other minor changes.

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Wednesday, September 26, 2018 4:19 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>


Well tokens can be placed in cookies.

The real answer to avoid CSRF is tokens in JavaScript variable as opposed to cookies. They are not automatically sent and indeed make CSRF impossible - at the expense of tokens being fully stolen via XSS. Pick your poison!

I recommend a COMBO of these defenses. For web apps, sychronizer token + header verification + re-authentication for sensitive features.

For API's double-cookie submit or just use JavaScript variable based tokens + header verification for same-site API's + re-authentication for sensitive features.
> [1] If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operationswithin that domain done to that AJAX endpoint. Do you agree?

Absolutely!

On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
Yeah, I understand that any XSS and CSRF game is over but I am stressing out on the highlighted part in [1]. I am trying to highlight and get an affirmation on why my understanding on token based mitigation is better than origin/referrer header check will also apply to ?token based mitigation Vs custom header mitigation (if static tokens are used in custom headers)?.

In case of tokens, we have an option to use different tokens on each page (taking things like URL, timestamp etc. into consideration) and hence XSS vulnerability on one page will only make state changing operations in that page vulnerable to CSRF but not state changing operations on other pages within that domain (because token value is different) but whereas in origin/referrer header check and custom header check, the token value is constant and hence XSS vulnerability in one page will also cause state changing operations in other pages to be vulnerable to CSRF as well. Off course, this can be mitigated in custom header checks by adding tokens to custom headers rather than static constant but this cannot be mitigated in origin/referrer check because those headers cannot be modified. So, yeah a single XSS any CSRF is bypassed but the breadth of the impact is different for each of them.

Regarding code samples ? I currently was able to allocate only some time for this task and I don?t think I will be able to do code samples within this time frame. I am also leaving for a long vacation starting Oct 12 and hence let?s try to get this out first and we can add code samples later on considering my work load after I return from vacation.

[1] If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

From: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Sent: Thursday, September 20, 2018 8:45 AM
To: Jim Manico <jim at manicode.com><mailto:jim at manicode.com>
Cc: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>; Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi,

Thanks for your contribution.

I like very much your plan ?

I ask for some favor in addition :
- can you provide code sample (in one language like java or .net or the one you want but it must be easy to read and understand) or libraires along your proposal for each section?
- can you use the syntaxhighlight tag for code?

I'am agree with Jim, XSS  means game over because your browsing context can be used as proxy so csrf protection will be defeated because request came from the legitimate user.

Thanks you again for all your help ???

Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com<mailto:jim at manicode.com>> a ?crit :

> If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

Any XSS is game over and all CSRF are useless in the face of XSS. I Agree!

- Jim

On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
Hey Guys,

[1] is what I said for origin/referrer header check in this e-mail thread. I also believe that this applies for custom headers for AJAX endpoints as well. If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

Here is how I am keeping the new re-factored cheatsheet. Does this look good to you guys?


1.       Use token based method as primary defense

a.       Can use synchronizer pattern for stateful applications

b.       Can use hah based/ encryption based token pattern for stateless applications

2.       Defense in depth measures along with drawbacks of each one

a.       Origin/referrer header check

b.       Double submit cookie

c.       Samesite cookie

d.       Custom headers (people still need to use tokens for forms etc. if they have mix of ajax endpoints and general HTML)

3.       Strong CSRF defenses but very less usable : captcha etc.

4.       CSRF Myths / techniques that do not work section

[1] if we solely rely on origin/referrer header check - an XSS vulnerability within a single page on that domain will also give CSRF vulnerability to all other state changing operations under that entire domain.

From: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Sent: Wednesday, September 12, 2018 1:31 PM
To: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>
Cc: Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi

Thanks you very much for the update

Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Just an update: I started working on this along with other sprint tasks of mine today. I am hoping to get it completed by end of next week and then send it for legal/PR approvals.

From: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>
Sent: Thursday, August 23, 2018 6:49 AM
To: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>


Awesome! Thank you! :)

- Jim

On 8/23/18 2:41 AM, Dominique Righetto wrote:
You are welcome :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Thu, Aug 23, 2018 at 10:33 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Np. I will keep u guys posted. Thanks for the support and have good rest of your day!

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Thursday, August 23, 2018 1:29 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi,

Sounds goods for me.

Thanks again for the contribution :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Thu, Aug 23, 2018 at 10:03 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Ok, I received necessary approvals for working on this. I am hoping to start the work in 2 weeks and then deliver the document to you guys for review by end of September/1st week of October (might be 1-2 weeks delay if approvals from Legal and other teams get delayed). My plan is to work on below things ? Please let me know if I missed anything/you feel something else has to be added to this list.


1.       Change the order of primary and defense in depth measures

2.       Include the pitfalls/caveats for each CSRF mitigation technique (origin/referrer header, samesite, double submit cookie etc.)

3.       Re-structure entire page and remove outdated/ non-relevant stuff

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Thursday, August 16, 2018 12:02 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Ok i perfectly understand.
Thanks for the info.

Le jeu. 16 ao?t 2018 ? 20:33, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
I had an offline discussion with Jim and informed him that I will have to check few details before I give any commitment to update the guidance?s here.

Update: I got approval internally from my team to work on this (fix issues and re-structure entire page) but I still need to get approval from Legal team to work on this. I will let you guys know when I hear back from them. Most likely they will ask me to just get it reviewed with them before sending it to you guys for review/get it published on OWASP page.

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Tuesday, August 14, 2018 11:02 PM
To: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>
Cc: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; Dave Wichers
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181005/8559b974/attachment-0001.html>

From dominique.righetto at owasp.org  Fri Oct  5 06:58:59 2018
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Fri, 5 Oct 2018 08:58:59 +0200
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <40d751c80bba4bf29886d6f473022800@EX13D11UWB004.ant.amazon.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<CANos97cbaHSc9uUyc6G1-SPnM7pyY0AF7D2pmEV30yGmqbS_+A@mail.gmail.com>
	<e05fc4606d4447f994abfeb25130a711@EX13D11UWB004.ant.amazon.com>
	<CANos97em5kiaScJggFf2NetwXF709-TNaxvaCdv+yQ4Wk9iDYA@mail.gmail.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<d817238c296641fc8b1089d9c81d2e31@EX13D11UWB004.ant.amazon.com>
	<7d8d7a7e-1b55-43cc-d151-93c7c25c3353@owasp.org>
	<CANos97cS+wQ2foQQh_OhMAf5NunQqmjnUFdqScFZU5onu+=zkg@mail.gmail.com>
	<52721eb72b5e4572842482f2cfcafecf@EX13D11UWB004.ant.amazon.com>
	<CANos97cuFCSZ3_WXf1i=o-vE23QikQ6=CFcpb6j3-3yofk-BSA@mail.gmail.com>
	<40d751c80bba4bf29886d6f473022800@EX13D11UWB004.ant.amazon.com>
Message-ID: <CANos97eN1K_n5h-8pGzUtZwNCDe3oHTMh0LAWaBWgPc0jVrBYQ@mail.gmail.com>

Thanks for your feedback and your help :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com
<dominique.righetto at gmail.com>dominique.righetto at owasp.org
<dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Oct 5, 2018 at 8:45 AM Konakandla, Manideep <mkonakan at amazon.com>
wrote:

> No problem. Yeah, code doesn?t look to me like it?s an full implementation
> but can definitely act as an reference sample. I am going to make the
> distinction clear in the new cheat sheet.
>
>
>
> Thanks for your response J
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Thursday, October 4, 2018 11:34 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim.manico at owasp.org>; Jim Manico <jim at manicode.com>;
> Dave Wichers <dave.wichers at owasp.org>; eric.sheridan at owasp.org;
> owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi, sorry for the delay but i'm busy currently so i have expected to
> answer this we...sorry...
>
>
>
> For your question, the code was just example of implementation of the
> following approach:
>
>    - Verifying same origin with standard headers
>    - CSRF specific defense:
>
>
>    - Double submit cookie (stateless)
>       - Leverage *SameSite* cookie attribute
>
> Feel free to update or replace it during your refactoring...
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Fri, Oct 5, 2018 at 8:30 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Any comments on my questions in trailing e-mail?
>
>
>
> *From:* Konakandla, Manideep
> *Sent:* Tuesday, October 2, 2018 4:37 PM
> *To:* 'Dominique Righetto' <dominique.righetto at owasp.org>; Jim Manico <
> jim.manico at owasp.org>
> *Cc:* Jim Manico <jim at manicode.com>; Dave Wichers <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
> *Subject:* RE:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hey Dominique ? I very quickly reviewed your sample implementation example
> in the cheat sheet (GREAT work!) and have few questions. Is this code
> supposed to be a full pledged PoC or it?s just for a reference example? I
> am asking this because
>
>
>
> 1.       I cannot see a port/host/protocol level validation on referrer
> header as its being done for origin header
>
> 2.       There is no section where the flow will go if origin/referrer
> check succeeds
>
> 3.       Double submit cookie only assumes that the tokens are in headers
> (and hence ajax calls) and not in form tags. (we can try to make it
> explicit here that only ajax calls are being protected in this sample).
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Monday, October 1, 2018 8:25 PM
> *To:* Jim Manico <jim.manico at owasp.org>
> *Cc:* Konakandla, Manideep <mkonakan at amazon.com>; Jim Manico <
> jim at manicode.com>; Dave Wichers <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> For sure, take all the time you need.
>
> Take pleasure on this and thanks again for your help ?
>
>
>
> Le mar. 2 oct. 2018 ? 03:54, Jim Manico <jim.manico at owasp.org> a ?crit :
>
> No rush and no timeline. Let me know when you want our review to start!
>
> Aloha, Jim
>
>
>
> On 10/1/18 2:41 PM, Konakandla, Manideep wrote:
>
> For now, I removed the reference to DWR and also added a generic statement
> about .NET protection till someone knows and updates the in-details of its
> current state.
>
>
>
> I also wanted to let you guys know that I will be off for vacation from 16
> th of October to end of November with very limited access to my work
> resources and quite sure will be tied up with office work for a while after
> I return. So, let?s plan to get the updated document on OWASP page before
> October 16th. I am trying my level best from my side to get it out ASAP to
> you guys for review.
>
>
>
> Are there anything?s that need to be taken care now so that we can save
> some time after I get the document to you people for review?
>
>
>
> *From:* Konakandla, Manideep
> *Sent:* Friday, September 28, 2018 6:35 PM
> *To:* 'Jim Manico' <jim at manicode.com> <jim at manicode.com>
> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>
> <dominique.righetto at owasp.org>; Jim Manico <jim.manico at owasp.org>
> <jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>
> <dave.wichers at owasp.org>; eric.sheridan at owasp.org;
> owasp-cheat-sheets at lists.owasp.org
> *Subject:* RE:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Login CSRF is a way of exploiting CSRF on login forms (details here
> <https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a
> line about it in referrer validation section, it was not explained clearly
> and how it can scale with other techniques such as token based mitigation.
> No worries, I added a section about it!
>
>
>
> Finally, I am done with the document from my side and its sent for
> internal reviews now. It should take 1-2 weeks before it comes to you guys.
> Meanwhile, I still need help on below items from you guys. If no one was
> able to find references for a), we can very well remove it.
>
>
>
> a.     Under double submit cookie section, it is mentioned that DWR uses
> that approach but I could not find that anywhere within DWR documentation
> that it uses double submit cookie. Can someone help me finding reference if
> they know any?
>
> b.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
> in the wiki
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
> Can someone with .NET expertize verify if these are still accurate? Looks
> to me like there are latest resources than the one?s linked in current
> cheatsheet
>
>
>
> Happy weekend folks J
>
>
>
> *From:* Jim Manico <jim at manicode.com>
> *Sent:* Thursday, September 27, 2018 3:02 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Jim Manico <
> jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> ...as for (d) I dont see any problems with passing tokens as headers or
> parameters
>
>
>
> I dont understand (e) can you explain that again?
>
> --
>
> Jim Manico
>
> @Manicode
>
> Secure Coding Education
>
> +1 (808) 652-3805
>
>
> On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> 2 more questions added  (Jim already started helping me on #a)
>
>
>
> a.     I requested for an OWASP account and it?s still in pending. @JIM ?
> Can you please help me in getting my account approved? (registered with
> mani.konakandla at gmail.com)
>
> b.     Under double submit cookie section, it is mentioned that DWR uses
> that approach but I could not find that anywhere within DWR documentation
> that it uses double submit cookie. Can someone help me finding reference if
> they know any?
>
> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
> in the wiki
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
> Can someone with .NET expertize verify if these are still accurate? Looks
> to me like there are latest resources than the one?s linked
>
> d.     At few places within the wiki, I have seen recommending to include
> token in headers for Ajax requests. I also don?t see a problem in passing
> them as parameters as well. Do you guys see any?
>
> e.     I also have not seen at any place within the wiki talking about
> login CSRF issues and how each of the techniques described can be
> prone/immune to it. Is there any reason for it or are we open to include
> that?
>
>
>
> *From:* Konakandla, Manideep
> *Sent:* Wednesday, September 26, 2018 5:27 PM
> *To:* 'Jim Manico' <jim at manicode.com>; 'Dominique Righetto' <
> dominique.righetto at owasp.org>
> *Cc:* 'Jim Manico' <jim.manico at owasp.org>; 'Dave Wichers' <
> dave.wichers at owasp.org>; 'eric.sheridan at owasp.org' <
> eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* RE:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Yeah. My understanding of the breadth of exploitation of XSS in an
> application protected with just origin/referrer and other application
> protected with just token based mitigation earlier was wrong. Dominique
> earlier email thread cleared that to me (breadth of exploitation is same in
> both the cases. i.e., if an XSS vulnerability is found in any individual
> application protected with only one of those techniques, it still can
> exploit all state changing operations on entire application [though the
> complexity of exploitation is easy in origin/referrer check than token
> based mitigation]).
>
>
>
> Anyway, I am all clear and also almost done with re-factoring the
> cheatsheet  [1] J Should be fully completed by Friday unless something
> comes up meanwhile. I will then send it to my colleagues for review and
> then for Legal, PR approvals. Before that, I need help from you guys on
> below items
>
>
>
> a.     I requested for an OWASP account and it?s still in pending. @JIM ?
> Can you please help me in getting my account approved? (registered with
> mani.konakandla at gmail.com)
>
> b.     Under double submit cookie section, it is mentioned that DWR uses
> that approach but I could not find that anywhere within DWR documentation
> that it uses double submit cookie. Can someone help me finding reference if
> they know any?
>
> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
> in the wiki
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
> Can someone with .NET expertize verify if these are still accurate? Looks
> to me like there are latest resources than the one?s linked
>
>
>
> [1] Below are changes done so far
>
> a. Switched primary, secondary defense and our reasoning behind it (added
> lot of reasons on issues with origin/referrer header check and why token
> should be made primary)
>
> b. Added CSRF mitigation myths (CORS, content-type validation etc.)
>
> c. Added a section called ?Not so popular CSRF mitigations? (mentioned
> details about triple submit cookie)
>
> d. Included limitations / issues associated with double submit cookie,
> same site cookie, captcha as a CSRF defense etc.
>
> e. Removed lot of obsolete content and added some new content to some of
> the mitigations
>
> f. Made document look more better by adding RFC?s links wherever possible
> and lot of other minor changes.
>
>
>
> *From:* Jim Manico <jim at manicode.com>
> *Sent:* Wednesday, September 26, 2018 4:19 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>; Dominique Righetto <
> dominique.righetto at owasp.org>
> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
> dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Well tokens can be placed in cookies.
>
> The real answer to avoid CSRF is tokens in JavaScript variable as opposed
> to cookies. They are not automatically sent and indeed make CSRF impossible
> - at the expense of tokens being fully stolen via XSS. Pick your poison!
>
> I recommend a COMBO of these defenses. For web apps, sychronizer token +
> header verification + re-authentication for sensitive features.
>
> For API's double-cookie submit or just use JavaScript variable based
> tokens + header verification for same-site API's + re-authentication for
> sensitive features.
>
> > [1] If there is an XSS vulnerability at a single place on a domain (it
> can add custom header), it can be used to make CSRF *on all other state
> changing operationswithin that domain *done to that AJAX endpoint. Do you
> agree?
>
>
>
> Absolutely!
>
>
>
> On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
>
> Yeah, I understand that any XSS and CSRF game is over but I am stressing
> out on the highlighted part in [1]. I am trying to highlight and get an
> affirmation on why my understanding on token based mitigation is better
> than origin/referrer header check will also apply to ?token based
> mitigation Vs custom header mitigation (if static tokens are used in custom
> headers)?.
>
>
>
> In case of tokens, we have an option to use different tokens on each page
> (taking things like URL, timestamp etc. into consideration) and hence XSS
> vulnerability on one page will only make state changing operations in that
> page vulnerable to CSRF but not state changing operations on other pages
> within that domain (because token value is different) but whereas in
> origin/referrer header check and custom header check, the token value is
> constant and hence XSS vulnerability in one page will also cause state
> changing operations in other pages to be vulnerable to CSRF as well. Off
> course, this can be mitigated in custom header checks by adding tokens to
> custom headers rather than static constant but this cannot be mitigated in
> origin/referrer check because those headers cannot be modified. So, yeah a
> single XSS any CSRF is bypassed but the breadth of the impact is different
> for each of them.
>
>
>
> Regarding code samples ? I currently was able to allocate only some time
> for this task and I don?t think I will be able to do code samples within
> this time frame. I am also leaving for a long vacation starting Oct 12 and
> hence let?s try to get this out first and we can add code samples later on
> considering my work load after I return from vacation.
>
>
>
> [1] If there is an XSS vulnerability at a single place on a domain (it can
> add custom header), it can be used to make CSRF *on all other state
> changing operations* *within that domain *done to that AJAX endpoint. Do
> you agree?
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> <dominique.righetto at owasp.org>
> *Sent:* Thursday, September 20, 2018 8:45 AM
> *To:* Jim Manico <jim at manicode.com> <jim at manicode.com>
> *Cc:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
> Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave Wichers
> <dave.wichers at owasp.org> <dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi,
>
>
>
> Thanks for your contribution.
>
>
>
> I like very much your plan ?
>
>
>
> I ask for some favor in addition :
>
> - can you provide code sample (in one language like java or .net or the
> one you want but it must be easy to read and understand) or libraires along
> your proposal for each section?
>
> - can you use the syntaxhighlight tag for code?
>
>
>
> I'am agree with Jim, XSS  means game over because your browsing context
> can be used as proxy so csrf protection will be defeated because request
> came from the legitimate user.
>
>
>
> Thanks you again for all your help ???
>
>
>
> Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com> a ?crit :
>
> > If there is an XSS vulnerability at a single place on a domain (it can
> add custom header), it can be used to make CSRF on all other state changing
> operations within that domain done to that AJAX endpoint. Do you agree?
>
> Any XSS is game over and all CSRF are useless in the face of XSS. I Agree!
>
> - Jim
>
>
>
> On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
>
> Hey Guys,
>
>
>
> [1] is what I said for origin/referrer header check in this e-mail thread.
> I also believe that this applies for custom headers for AJAX endpoints as
> well. If there is an XSS vulnerability at a single place on a domain (it
> can add custom header), it can be used to make CSRF on all other state
> changing operations within that domain done to that AJAX endpoint. Do you
> agree?
>
>
>
> Here is how I am keeping the new re-factored cheatsheet. Does this look
> good to you guys?
>
>
>
> 1.       Use token based method as primary defense
>
> a.       Can use synchronizer pattern for stateful applications
>
> b.       Can use hah based/ encryption based token pattern for stateless
> applications
>
> 2.       Defense in depth measures along with drawbacks of each one
>
> a.       Origin/referrer header check
>
> b.       Double submit cookie
>
> c.       Samesite cookie
>
> d.       Custom headers (people still need to use tokens for forms etc.
> if they have mix of ajax endpoints and general HTML)
>
> 3.       Strong CSRF defenses but very less usable : captcha etc.
>
> 4.       CSRF Myths / techniques that do not work section
>
>
>
> [1] if we solely rely on origin/referrer header check - an XSS
> vulnerability within a single page on that domain will also give CSRF
> vulnerability to all other state changing operations under that entire
> domain.
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> <dominique.righetto at owasp.org>
> *Sent:* Wednesday, September 12, 2018 1:31 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave
> Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi
>
>
>
> Thanks you very much for the update
>
>
>
> Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep <mkonakan at amazon.com>
> a ?crit :
>
> Just an update: I started working on this along with other sprint tasks of
> mine today. I am hoping to get it completed by end of next week and then
> send it for legal/PR approvals.
>
>
>
> *From:* Jim Manico <jim.manico at owasp.org>
> *Sent:* Thursday, August 23, 2018 6:49 AM
> *To:* Dominique Righetto <dominique.righetto at owasp.org>; Konakandla,
> Manideep <mkonakan at amazon.com>
> *Cc:* Dave Wichers <dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Awesome! Thank you! :)
>
> - Jim
>
>
>
> On 8/23/18 2:41 AM, Dominique Righetto wrote:
>
> You are welcome :)
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Thu, Aug 23, 2018 at 10:33 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Np. I will keep u guys posted. Thanks for the support and have good rest
> of your day!
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Thursday, August 23, 2018 1:29 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
> dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi,
>
>
>
> Sounds goods for me.
>
>
>
> Thanks again for the contribution :)
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Thu, Aug 23, 2018 at 10:03 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Ok, I received necessary approvals for working on this. I am hoping to
> start the work in 2 weeks and then deliver the document to you guys for
> review by end of September/1st week of October (might be 1-2 weeks delay
> if approvals from Legal and other teams get delayed). My plan is to work on
> below things ? Please let me know if I missed anything/you feel something
> else has to be added to this list.
>
>
>
> 1.       Change the order of primary and defense in depth measures
>
> 2.       Include the pitfalls/caveats for each CSRF mitigation technique
> (origin/referrer header, samesite, double submit cookie etc.)
>
> 3.       Re-structure entire page and remove outdated/ non-relevant stuff
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Thursday, August 16, 2018 12:02 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
> dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Ok i perfectly understand.
>
> Thanks for the info.
>
>
>
> Le jeu. 16 ao?t 2018 ? 20:33, Konakandla, Manideep <mkonakan at amazon.com>
> a ?crit :
>
> I had an offline discussion with Jim and informed him that I will have to
> check few details before I give any commitment to update the guidance?s
> here.
>
>
>
> Update: I got approval internally from my team to work on this (fix issues
> and re-structure entire page) but I still need to get approval from Legal
> team to work on this. I will let you guys know when I hear back from them.
> Most likely they will ask me to just get it reviewed with them before
> sending it to you guys for review/get it published on OWASP page.
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Tuesday, August 14, 2018 11:02 PM
> *To:* Jim Manico <jim.manico at owasp.org>
> *Cc:* Konakandla, Manideep <mkonakan at amazon.com>; Dave Wichers
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181005/fa974a11/attachment-0001.html>

From mkonakan at amazon.com  Sat Oct  6 02:33:28 2018
From: mkonakan at amazon.com (Konakandla, Manideep)
Date: Sat, 6 Oct 2018 02:33:28 +0000
Subject: [OWASP-cheat-sheets]
 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CANos97eN1K_n5h-8pGzUtZwNCDe3oHTMh0LAWaBWgPc0jVrBYQ@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<CANos97cbaHSc9uUyc6G1-SPnM7pyY0AF7D2pmEV30yGmqbS_+A@mail.gmail.com>
	<e05fc4606d4447f994abfeb25130a711@EX13D11UWB004.ant.amazon.com>
	<CANos97em5kiaScJggFf2NetwXF709-TNaxvaCdv+yQ4Wk9iDYA@mail.gmail.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<d817238c296641fc8b1089d9c81d2e31@EX13D11UWB004.ant.amazon.com>
	<7d8d7a7e-1b55-43cc-d151-93c7c25c3353@owasp.org>
	<CANos97cS+wQ2foQQh_OhMAf5NunQqmjnUFdqScFZU5onu+=zkg@mail.gmail.com>
	<52721eb72b5e4572842482f2cfcafecf@EX13D11UWB004.ant.amazon.com>
	<CANos97cuFCSZ3_WXf1i=o-vE23QikQ6=CFcpb6j3-3yofk-BSA@mail.gmail.com>
	<40d751c80bba4bf29886d6f473022800@EX13D11UWB004.ant.amazon.com>
	<CANos97eN1K_n5h-8pGzUtZwNCDe3oHTMh0LAWaBWgPc0jVrBYQ@mail.gmail.com>
Message-ID: <8df7f7bf74df4519807e370fad6db052@EX13D11UWB004.ant.amazon.com>

Hey folks - Everything is done from my side. Here you go https://tinyurl.com/y7k9fded

As I said, I will not be available for a while after 16th November (I am actually making my first travel on 12th itself. I will be working from Ireland from 12-17th). So, if you guys have some time, please post your comments (please do not edit it directly as it might be hard to track) in the document by Tuesday/Wednesday, so that I can work on them before I leave on Friday. My plan is to get the review completed and update it to OWASP by Friday, if it?s possible.

We can schedule a call if there are many things to discuss.

Happy weekend folks ?

----
Regards,
Manideep K
Security Engineer, Amazon
https://in.linkedin.com/in/manideepk
http://www.manideepk.com/

From: Dominique Righetto <dominique.righetto at owasp.org>
Sent: Thursday, October 4, 2018 11:59 PM
To: Konakandla, Manideep <mkonakan at amazon.com>
Cc: Jim Manico <jim.manico at owasp.org>; Jim Manico <jim at manicode.com>; Dave Wichers <dave.wichers at owasp.org>; eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Thanks for your feedback and your help :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Oct 5, 2018 at 8:45 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
No problem. Yeah, code doesn?t look to me like it?s an full implementation but can definitely act as an reference sample. I am going to make the distinction clear in the new cheat sheet.

Thanks for your response ?

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Thursday, October 4, 2018 11:34 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hi, sorry for the delay but i'm busy currently so i have expected to answer this we...sorry...

For your question, the code was just example of implementation of the following approach:

  *   Verifying same origin with standard headers
  *   CSRF specific defense:

     *   Double submit cookie (stateless)
     *   Leverage SameSite cookie attribute
Feel free to update or replace it during your refactoring...
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Oct 5, 2018 at 8:30 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Any comments on my questions in trailing e-mail?

From: Konakandla, Manideep
Sent: Tuesday, October 2, 2018 4:37 PM
To: 'Dominique Righetto' <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: RE: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hey Dominique ? I very quickly reviewed your sample implementation example in the cheat sheet (GREAT work!) and have few questions. Is this code supposed to be a full pledged PoC or it?s just for a reference example? I am asking this because


1.       I cannot see a port/host/protocol level validation on referrer header as its being done for origin header

2.       There is no section where the flow will go if origin/referrer check succeeds

3.       Double submit cookie only assumes that the tokens are in headers (and hence ajax calls) and not in form tags. (we can try to make it explicit here that only ajax calls are being protected in this sample).

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Monday, October 1, 2018 8:25 PM
To: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>
Cc: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

For sure, take all the time you need.
Take pleasure on this and thanks again for your help ?

Le mar. 2 oct. 2018 ? 03:54, Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>> a ?crit :

No rush and no timeline. Let me know when you want our review to start!

Aloha, Jim

On 10/1/18 2:41 PM, Konakandla, Manideep wrote:
For now, I removed the reference to DWR and also added a generic statement about .NET protection till someone knows and updates the in-details of its current state.

I also wanted to let you guys know that I will be off for vacation from 16th of October to end of November with very limited access to my work resources and quite sure will be tied up with office work for a while after I return. So, let?s plan to get the updated document on OWASP page before October 16th. I am trying my level best from my side to get it out ASAP to you guys for review.

Are there anything?s that need to be taken care now so that we can save some time after I get the document to you people for review?

From: Konakandla, Manideep
Sent: Friday, September 28, 2018 6:35 PM
To: 'Jim Manico' <jim at manicode.com><mailto:jim at manicode.com>
Cc: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>; Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: RE: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Login CSRF is a way of exploiting CSRF on login forms (details here<https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a line about it in referrer validation section, it was not explained clearly and how it can scale with other techniques such as token based mitigation. No worries, I added a section about it!

Finally, I am done with the document from my side and its sent for internal reviews now. It should take 1-2 weeks before it comes to you guys. Meanwhile, I still need help on below items from you guys. If no one was able to find references for a), we can very well remove it.


a.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

b.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked in current cheatsheet

Happy weekend folks ?

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Thursday, September 27, 2018 3:02 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

...as for (d) I dont see any problems with passing tokens as headers or parameters

I dont understand (e) can you explain that again?
--
Jim Manico
@Manicode
Secure Coding Education
+1 (808) 652-3805

On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
2 more questions added  (Jim already started helping me on #a)


a.     I requested for an OWASP account and it?s still in pending. @JIM ? Can you please help me in getting my account approved? (registered with mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>)

b.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

c.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked

d.     At few places within the wiki, I have seen recommending to include token in headers for Ajax requests. I also don?t see a problem in passing them as parameters as well. Do you guys see any?

e.     I also have not seen at any place within the wiki talking about login CSRF issues and how each of the techniques described can be prone/immune to it. Is there any reason for it or are we open to include that?

From: Konakandla, Manideep
Sent: Wednesday, September 26, 2018 5:27 PM
To: 'Jim Manico' <jim at manicode.com<mailto:jim at manicode.com>>; 'Dominique Righetto' <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Cc: 'Jim Manico' <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; 'Dave Wichers' <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; 'eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>' <eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: RE: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Yeah. My understanding of the breadth of exploitation of XSS in an application protected with just origin/referrer and other application protected with just token based mitigation earlier was wrong. Dominique earlier email thread cleared that to me (breadth of exploitation is same in both the cases. i.e., if an XSS vulnerability is found in any individual application protected with only one of those techniques, it still can exploit all state changing operations on entire application [though the complexity of exploitation is easy in origin/referrer check than token based mitigation]).

Anyway, I am all clear and also almost done with re-factoring the cheatsheet  [1] ? Should be fully completed by Friday unless something comes up meanwhile. I will then send it to my colleagues for review and then for Legal, PR approvals. Before that, I need help from you guys on below items


a.     I requested for an OWASP account and it?s still in pending. @JIM ? Can you please help me in getting my account approved? (registered with mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>)

b.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

c.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked

[1] Below are changes done so far
a. Switched primary, secondary defense and our reasoning behind it (added lot of reasons on issues with origin/referrer header check and why token should be made primary)
b. Added CSRF mitigation myths (CORS, content-type validation etc.)
c. Added a section called ?Not so popular CSRF mitigations? (mentioned details about triple submit cookie)
d. Included limitations / issues associated with double submit cookie, same site cookie, captcha as a CSRF defense etc.
e. Removed lot of obsolete content and added some new content to some of the mitigations
f. Made document look more better by adding RFC?s links wherever possible and lot of other minor changes.

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Wednesday, September 26, 2018 4:19 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>


Well tokens can be placed in cookies.

The real answer to avoid CSRF is tokens in JavaScript variable as opposed to cookies. They are not automatically sent and indeed make CSRF impossible - at the expense of tokens being fully stolen via XSS. Pick your poison!

I recommend a COMBO of these defenses. For web apps, sychronizer token + header verification + re-authentication for sensitive features.

For API's double-cookie submit or just use JavaScript variable based tokens + header verification for same-site API's + re-authentication for sensitive features.
> [1] If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operationswithin that domain done to that AJAX endpoint. Do you agree?

Absolutely!

On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
Yeah, I understand that any XSS and CSRF game is over but I am stressing out on the highlighted part in [1]. I am trying to highlight and get an affirmation on why my understanding on token based mitigation is better than origin/referrer header check will also apply to ?token based mitigation Vs custom header mitigation (if static tokens are used in custom headers)?.

In case of tokens, we have an option to use different tokens on each page (taking things like URL, timestamp etc. into consideration) and hence XSS vulnerability on one page will only make state changing operations in that page vulnerable to CSRF but not state changing operations on other pages within that domain (because token value is different) but whereas in origin/referrer header check and custom header check, the token value is constant and hence XSS vulnerability in one page will also cause state changing operations in other pages to be vulnerable to CSRF as well. Off course, this can be mitigated in custom header checks by adding tokens to custom headers rather than static constant but this cannot be mitigated in origin/referrer check because those headers cannot be modified. So, yeah a single XSS any CSRF is bypassed but the breadth of the impact is different for each of them.

Regarding code samples ? I currently was able to allocate only some time for this task and I don?t think I will be able to do code samples within this time frame. I am also leaving for a long vacation starting Oct 12 and hence let?s try to get this out first and we can add code samples later on considering my work load after I return from vacation.

[1] If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

From: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Sent: Thursday, September 20, 2018 8:45 AM
To: Jim Manico <jim at manicode.com><mailto:jim at manicode.com>
Cc: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>; Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi,

Thanks for your contribution.

I like very much your plan ?

I ask for some favor in addition :
- can you provide code sample (in one language like java or .net or the one you want but it must be easy to read and understand) or libraires along your proposal for each section?
- can you use the syntaxhighlight tag for code?

I'am agree with Jim, XSS  means game over because your browsing context can be used as proxy so csrf protection will be defeated because request came from the legitimate user.

Thanks you again for all your help ???

Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com<mailto:jim at manicode.com>> a ?crit :

> If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

Any XSS is game over and all CSRF are useless in the face of XSS. I Agree!

- Jim

On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
Hey Guys,

[1] is what I said for origin/referrer header check in this e-mail thread. I also believe that this applies for custom headers for AJAX endpoints as well. If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

Here is how I am keeping the new re-factored cheatsheet. Does this look good to you guys?


1.       Use token based method as primary defense

a.       Can use synchronizer pattern for stateful applications

b.       Can use hah based/ encryption based token pattern for stateless applications

2.       Defense in depth measures along with drawbacks of each one

a.       Origin/referrer header check

b.       Double submit cookie

c.       Samesite cookie

d.       Custom headers (people still need to use tokens for forms etc. if they have mix of ajax endpoints and general HTML)

3.       Strong CSRF defenses but very less usable : captcha etc.

4.       CSRF Myths / techniques that do not work section

[1] if we solely rely on origin/referrer header check - an XSS vulnerability within a single page on that domain will also give CSRF vulnerability to all other state changing operations under that entire domain.

From: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Sent: Wednesday, September 12, 2018 1:31 PM
To: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>
Cc: Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi

Thanks you very much for the update

Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Just an update: I started working on this along with other sprint tasks of mine today. I am hoping to get it completed by end of next week and then send it for legal/PR approvals.

From: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>
Sent: Thursday, August 23, 2018 6:49 AM
To: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>


Awesome! Thank you! :)

- Jim

On 8/23/18 2:41 AM, Dominique Righetto wrote:
You are welcome :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Thu, Aug 23, 2018 at 10:33 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Np. I will keep u guys posted. Thanks for the support and have good rest of your day!

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Thursday, August 23, 2018 1:29 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi,

Sounds goods for me.

Thanks again for the contribution :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Thu, Aug 23, 2018 at 10:03 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Ok, I received necessary approvals for working on this. I am hoping to start the work in 2 weeks and then deliver the document to you guys for review by end of September/1st week of October (might be 1-2 weeks delay if approvals from Legal and other teams get delayed). My plan is to work on below things ? Please let me know if I missed anything/you feel something else has to be added to this list.


1.       Change the order of primary and defense in depth measures

2.       Include the pitfalls/caveats for each CSRF mitigation technique (origin/referrer header, samesite, double submit cookie etc.)

3.       Re-structure entire page and remove outdated/ non-relevant stuff

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Thursday, August 16, 2018 12:02 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Ok i perfectly understand.
Thanks for the info.

Le jeu. 16 ao?t 2018 ? 20:33, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
I had an offline discussion with Jim and informed him that I will have to check few details before I give any commitment to update the guidance?s here.

Update: I got approval internally from my team to work on this (fix issues and re-structure entire page) but I still need to get approval from Legal team to work on this. I will let you guys know when I hear back from them. Most likely they will ask me to just get it reviewed with them before sending it to you guys for review/get it published on OWASP page.

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Tuesday, August 14, 2018 11:02 PM
To: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>
Cc: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; Dave Wichers
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181006/2308802a/attachment-0001.html>

From dominique.righetto at owasp.org  Sat Oct  6 06:33:59 2018
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Sat, 6 Oct 2018 08:33:59 +0200
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <8df7f7bf74df4519807e370fad6db052@EX13D11UWB004.ant.amazon.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<CANos97cbaHSc9uUyc6G1-SPnM7pyY0AF7D2pmEV30yGmqbS_+A@mail.gmail.com>
	<e05fc4606d4447f994abfeb25130a711@EX13D11UWB004.ant.amazon.com>
	<CANos97em5kiaScJggFf2NetwXF709-TNaxvaCdv+yQ4Wk9iDYA@mail.gmail.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<d817238c296641fc8b1089d9c81d2e31@EX13D11UWB004.ant.amazon.com>
	<7d8d7a7e-1b55-43cc-d151-93c7c25c3353@owasp.org>
	<CANos97cS+wQ2foQQh_OhMAf5NunQqmjnUFdqScFZU5onu+=zkg@mail.gmail.com>
	<52721eb72b5e4572842482f2cfcafecf@EX13D11UWB004.ant.amazon.com>
	<CANos97cuFCSZ3_WXf1i=o-vE23QikQ6=CFcpb6j3-3yofk-BSA@mail.gmail.com>
	<40d751c80bba4bf29886d6f473022800@EX13D11UWB004.ant.amazon.com>
	<CANos97eN1K_n5h-8pGzUtZwNCDe3oHTMh0LAWaBWgPc0jVrBYQ@mail.gmail.com>
	<8df7f7bf74df4519807e370fad6db052@EX13D11UWB004.ant.amazon.com>
Message-ID: <CANos97eX_FcH_8FLo0pX_7_V8XmkQ7B=jPWiqkkASyFJX+k3Xw@mail.gmail.com>

Hi,

Many thanks for your work on this topic, i will do my best to made a read
of the document this WE (it will be hard but i will try).
In all case, there no deadline at all, we can discuss the document when you
come back...

Thanks agains for your work ?


--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com
<dominique.righetto at gmail.com>dominique.righetto at owasp.org
<dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Sat, Oct 6, 2018 at 4:33 AM Konakandla, Manideep <mkonakan at amazon.com>
wrote:

> Hey folks - Everything is done from my side. Here you go
> https://tinyurl.com/y7k9fded
>
>
>
> As I said, I will not be available for a while after 16th November (I am
> actually making my first travel on 12th itself. I will be working from
> Ireland from 12-17th). So, if you guys have some time, please post your
> comments (please do not edit it directly as it might be hard to track) in
> the document by *Tuesday/Wednesday*, so that I can work on them before I
> leave on Friday. My plan is to get the review completed and update it to
> OWASP by Friday, if it?s possible.
>
>
>
> We can schedule a call if there are many things to discuss.
>
>
>
> Happy weekend folks J
>
>
>
> ----
>
> Regards,
>
> Manideep K
>
> Security Engineer, Amazon
>
> https://in.linkedin.com/in/manideepk
>
> http://www.manideepk.com/
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Thursday, October 4, 2018 11:59 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim.manico at owasp.org>; Jim Manico <jim at manicode.com>;
> Dave Wichers <dave.wichers at owasp.org>; eric.sheridan at owasp.org;
> owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Thanks for your feedback and your help :)
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Fri, Oct 5, 2018 at 8:45 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> No problem. Yeah, code doesn?t look to me like it?s an full implementation
> but can definitely act as an reference sample. I am going to make the
> distinction clear in the new cheat sheet.
>
>
>
> Thanks for your response J
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Thursday, October 4, 2018 11:34 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim.manico at owasp.org>; Jim Manico <jim at manicode.com>;
> Dave Wichers <dave.wichers at owasp.org>; eric.sheridan at owasp.org;
> owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi, sorry for the delay but i'm busy currently so i have expected to
> answer this we...sorry...
>
>
>
> For your question, the code was just example of implementation of the
> following approach:
>
>    - Verifying same origin with standard headers
>    - CSRF specific defense:
>
>
>    - Double submit cookie (stateless)
>       - Leverage *SameSite* cookie attribute
>
> Feel free to update or replace it during your refactoring...
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Fri, Oct 5, 2018 at 8:30 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Any comments on my questions in trailing e-mail?
>
>
>
> *From:* Konakandla, Manideep
> *Sent:* Tuesday, October 2, 2018 4:37 PM
> *To:* 'Dominique Righetto' <dominique.righetto at owasp.org>; Jim Manico <
> jim.manico at owasp.org>
> *Cc:* Jim Manico <jim at manicode.com>; Dave Wichers <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
> *Subject:* RE:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hey Dominique ? I very quickly reviewed your sample implementation example
> in the cheat sheet (GREAT work!) and have few questions. Is this code
> supposed to be a full pledged PoC or it?s just for a reference example? I
> am asking this because
>
>
>
> 1.       I cannot see a port/host/protocol level validation on referrer
> header as its being done for origin header
>
> 2.       There is no section where the flow will go if origin/referrer
> check succeeds
>
> 3.       Double submit cookie only assumes that the tokens are in headers
> (and hence ajax calls) and not in form tags. (we can try to make it
> explicit here that only ajax calls are being protected in this sample).
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Monday, October 1, 2018 8:25 PM
> *To:* Jim Manico <jim.manico at owasp.org>
> *Cc:* Konakandla, Manideep <mkonakan at amazon.com>; Jim Manico <
> jim at manicode.com>; Dave Wichers <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> For sure, take all the time you need.
>
> Take pleasure on this and thanks again for your help ?
>
>
>
> Le mar. 2 oct. 2018 ? 03:54, Jim Manico <jim.manico at owasp.org> a ?crit :
>
> No rush and no timeline. Let me know when you want our review to start!
>
> Aloha, Jim
>
>
>
> On 10/1/18 2:41 PM, Konakandla, Manideep wrote:
>
> For now, I removed the reference to DWR and also added a generic statement
> about .NET protection till someone knows and updates the in-details of its
> current state.
>
>
>
> I also wanted to let you guys know that I will be off for vacation from 16
> th of October to end of November with very limited access to my work
> resources and quite sure will be tied up with office work for a while after
> I return. So, let?s plan to get the updated document on OWASP page before
> October 16th. I am trying my level best from my side to get it out ASAP to
> you guys for review.
>
>
>
> Are there anything?s that need to be taken care now so that we can save
> some time after I get the document to you people for review?
>
>
>
> *From:* Konakandla, Manideep
> *Sent:* Friday, September 28, 2018 6:35 PM
> *To:* 'Jim Manico' <jim at manicode.com> <jim at manicode.com>
> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>
> <dominique.righetto at owasp.org>; Jim Manico <jim.manico at owasp.org>
> <jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>
> <dave.wichers at owasp.org>; eric.sheridan at owasp.org;
> owasp-cheat-sheets at lists.owasp.org
> *Subject:* RE:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Login CSRF is a way of exploiting CSRF on login forms (details here
> <https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a
> line about it in referrer validation section, it was not explained clearly
> and how it can scale with other techniques such as token based mitigation.
> No worries, I added a section about it!
>
>
>
> Finally, I am done with the document from my side and its sent for
> internal reviews now. It should take 1-2 weeks before it comes to you guys.
> Meanwhile, I still need help on below items from you guys. If no one was
> able to find references for a), we can very well remove it.
>
>
>
> a.     Under double submit cookie section, it is mentioned that DWR uses
> that approach but I could not find that anywhere within DWR documentation
> that it uses double submit cookie. Can someone help me finding reference if
> they know any?
>
> b.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
> in the wiki
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
> Can someone with .NET expertize verify if these are still accurate? Looks
> to me like there are latest resources than the one?s linked in current
> cheatsheet
>
>
>
> Happy weekend folks J
>
>
>
> *From:* Jim Manico <jim at manicode.com>
> *Sent:* Thursday, September 27, 2018 3:02 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Jim Manico <
> jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> ...as for (d) I dont see any problems with passing tokens as headers or
> parameters
>
>
>
> I dont understand (e) can you explain that again?
>
> --
>
> Jim Manico
>
> @Manicode
>
> Secure Coding Education
>
> +1 (808) 652-3805
>
>
> On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> 2 more questions added  (Jim already started helping me on #a)
>
>
>
> a.     I requested for an OWASP account and it?s still in pending. @JIM ?
> Can you please help me in getting my account approved? (registered with
> mani.konakandla at gmail.com)
>
> b.     Under double submit cookie section, it is mentioned that DWR uses
> that approach but I could not find that anywhere within DWR documentation
> that it uses double submit cookie. Can someone help me finding reference if
> they know any?
>
> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
> in the wiki
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
> Can someone with .NET expertize verify if these are still accurate? Looks
> to me like there are latest resources than the one?s linked
>
> d.     At few places within the wiki, I have seen recommending to include
> token in headers for Ajax requests. I also don?t see a problem in passing
> them as parameters as well. Do you guys see any?
>
> e.     I also have not seen at any place within the wiki talking about
> login CSRF issues and how each of the techniques described can be
> prone/immune to it. Is there any reason for it or are we open to include
> that?
>
>
>
> *From:* Konakandla, Manideep
> *Sent:* Wednesday, September 26, 2018 5:27 PM
> *To:* 'Jim Manico' <jim at manicode.com>; 'Dominique Righetto' <
> dominique.righetto at owasp.org>
> *Cc:* 'Jim Manico' <jim.manico at owasp.org>; 'Dave Wichers' <
> dave.wichers at owasp.org>; 'eric.sheridan at owasp.org' <
> eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* RE:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Yeah. My understanding of the breadth of exploitation of XSS in an
> application protected with just origin/referrer and other application
> protected with just token based mitigation earlier was wrong. Dominique
> earlier email thread cleared that to me (breadth of exploitation is same in
> both the cases. i.e., if an XSS vulnerability is found in any individual
> application protected with only one of those techniques, it still can
> exploit all state changing operations on entire application [though the
> complexity of exploitation is easy in origin/referrer check than token
> based mitigation]).
>
>
>
> Anyway, I am all clear and also almost done with re-factoring the
> cheatsheet  [1] J Should be fully completed by Friday unless something
> comes up meanwhile. I will then send it to my colleagues for review and
> then for Legal, PR approvals. Before that, I need help from you guys on
> below items
>
>
>
> a.     I requested for an OWASP account and it?s still in pending. @JIM ?
> Can you please help me in getting my account approved? (registered with
> mani.konakandla at gmail.com)
>
> b.     Under double submit cookie section, it is mentioned that DWR uses
> that approach but I could not find that anywhere within DWR documentation
> that it uses double submit cookie. Can someone help me finding reference if
> they know any?
>
> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
> in the wiki
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
> Can someone with .NET expertize verify if these are still accurate? Looks
> to me like there are latest resources than the one?s linked
>
>
>
> [1] Below are changes done so far
>
> a. Switched primary, secondary defense and our reasoning behind it (added
> lot of reasons on issues with origin/referrer header check and why token
> should be made primary)
>
> b. Added CSRF mitigation myths (CORS, content-type validation etc.)
>
> c. Added a section called ?Not so popular CSRF mitigations? (mentioned
> details about triple submit cookie)
>
> d. Included limitations / issues associated with double submit cookie,
> same site cookie, captcha as a CSRF defense etc.
>
> e. Removed lot of obsolete content and added some new content to some of
> the mitigations
>
> f. Made document look more better by adding RFC?s links wherever possible
> and lot of other minor changes.
>
>
>
> *From:* Jim Manico <jim at manicode.com>
> *Sent:* Wednesday, September 26, 2018 4:19 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>; Dominique Righetto <
> dominique.righetto at owasp.org>
> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
> dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Well tokens can be placed in cookies.
>
> The real answer to avoid CSRF is tokens in JavaScript variable as opposed
> to cookies. They are not automatically sent and indeed make CSRF impossible
> - at the expense of tokens being fully stolen via XSS. Pick your poison!
>
> I recommend a COMBO of these defenses. For web apps, sychronizer token +
> header verification + re-authentication for sensitive features.
>
> For API's double-cookie submit or just use JavaScript variable based
> tokens + header verification for same-site API's + re-authentication for
> sensitive features.
>
> > [1] If there is an XSS vulnerability at a single place on a domain (it
> can add custom header), it can be used to make CSRF *on all other state
> changing operationswithin that domain *done to that AJAX endpoint. Do you
> agree?
>
>
>
> Absolutely!
>
>
>
> On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
>
> Yeah, I understand that any XSS and CSRF game is over but I am stressing
> out on the highlighted part in [1]. I am trying to highlight and get an
> affirmation on why my understanding on token based mitigation is better
> than origin/referrer header check will also apply to ?token based
> mitigation Vs custom header mitigation (if static tokens are used in custom
> headers)?.
>
>
>
> In case of tokens, we have an option to use different tokens on each page
> (taking things like URL, timestamp etc. into consideration) and hence XSS
> vulnerability on one page will only make state changing operations in that
> page vulnerable to CSRF but not state changing operations on other pages
> within that domain (because token value is different) but whereas in
> origin/referrer header check and custom header check, the token value is
> constant and hence XSS vulnerability in one page will also cause state
> changing operations in other pages to be vulnerable to CSRF as well. Off
> course, this can be mitigated in custom header checks by adding tokens to
> custom headers rather than static constant but this cannot be mitigated in
> origin/referrer check because those headers cannot be modified. So, yeah a
> single XSS any CSRF is bypassed but the breadth of the impact is different
> for each of them.
>
>
>
> Regarding code samples ? I currently was able to allocate only some time
> for this task and I don?t think I will be able to do code samples within
> this time frame. I am also leaving for a long vacation starting Oct 12 and
> hence let?s try to get this out first and we can add code samples later on
> considering my work load after I return from vacation.
>
>
>
> [1] If there is an XSS vulnerability at a single place on a domain (it can
> add custom header), it can be used to make CSRF *on all other state
> changing operations* *within that domain *done to that AJAX endpoint. Do
> you agree?
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> <dominique.righetto at owasp.org>
> *Sent:* Thursday, September 20, 2018 8:45 AM
> *To:* Jim Manico <jim at manicode.com> <jim at manicode.com>
> *Cc:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
> Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave Wichers
> <dave.wichers at owasp.org> <dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi,
>
>
>
> Thanks for your contribution.
>
>
>
> I like very much your plan ?
>
>
>
> I ask for some favor in addition :
>
> - can you provide code sample (in one language like java or .net or the
> one you want but it must be easy to read and understand) or libraires along
> your proposal for each section?
>
> - can you use the syntaxhighlight tag for code?
>
>
>
> I'am agree with Jim, XSS  means game over because your browsing context
> can be used as proxy so csrf protection will be defeated because request
> came from the legitimate user.
>
>
>
> Thanks you again for all your help ???
>
>
>
> Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com> a ?crit :
>
> > If there is an XSS vulnerability at a single place on a domain (it can
> add custom header), it can be used to make CSRF on all other state changing
> operations within that domain done to that AJAX endpoint. Do you agree?
>
> Any XSS is game over and all CSRF are useless in the face of XSS. I Agree!
>
> - Jim
>
>
>
> On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
>
> Hey Guys,
>
>
>
> [1] is what I said for origin/referrer header check in this e-mail thread.
> I also believe that this applies for custom headers for AJAX endpoints as
> well. If there is an XSS vulnerability at a single place on a domain (it
> can add custom header), it can be used to make CSRF on all other state
> changing operations within that domain done to that AJAX endpoint. Do you
> agree?
>
>
>
> Here is how I am keeping the new re-factored cheatsheet. Does this look
> good to you guys?
>
>
>
> 1.       Use token based method as primary defense
>
> a.       Can use synchronizer pattern for stateful applications
>
> b.       Can use hah based/ encryption based token pattern for stateless
> applications
>
> 2.       Defense in depth measures along with drawbacks of each one
>
> a.       Origin/referrer header check
>
> b.       Double submit cookie
>
> c.       Samesite cookie
>
> d.       Custom headers (people still need to use tokens for forms etc.
> if they have mix of ajax endpoints and general HTML)
>
> 3.       Strong CSRF defenses but very less usable : captcha etc.
>
> 4.       CSRF Myths / techniques that do not work section
>
>
>
> [1] if we solely rely on origin/referrer header check - an XSS
> vulnerability within a single page on that domain will also give CSRF
> vulnerability to all other state changing operations under that entire
> domain.
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> <dominique.righetto at owasp.org>
> *Sent:* Wednesday, September 12, 2018 1:31 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave
> Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi
>
>
>
> Thanks you very much for the update
>
>
>
> Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep <mkonakan at amazon.com>
> a ?crit :
>
> Just an update: I started working on this along with other sprint tasks of
> mine today. I am hoping to get it completed by end of next week and then
> send it for legal/PR approvals.
>
>
>
> *From:* Jim Manico <jim.manico at owasp.org>
> *Sent:* Thursday, August 23, 2018 6:49 AM
> *To:* Dominique Righetto <dominique.righetto at owasp.org>; Konakandla,
> Manideep <mkonakan at amazon.com>
> *Cc:* Dave Wichers <dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Awesome! Thank you! :)
>
> - Jim
>
>
>
> On 8/23/18 2:41 AM, Dominique Righetto wrote:
>
> You are welcome :)
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Thu, Aug 23, 2018 at 10:33 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Np. I will keep u guys posted. Thanks for the support and have good rest
> of your day!
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Thursday, August 23, 2018 1:29 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
> dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi,
>
>
>
> Sounds goods for me.
>
>
>
> Thanks again for the contribution :)
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Thu, Aug 23, 2018 at 10:03 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Ok, I received necessary approvals for working on this. I am hoping to
> start the work in 2 weeks and then deliver the document to you guys for
> review by end of September/1st week of October (might be 1-2 weeks delay
> if approvals from Legal and other teams get delayed). My plan is to work on
> below things ? Please let me know if I missed anything/you feel something
> else has to be added to this list.
>
>
>
> 1.       Change the order of primary and defense in depth measures
>
> 2.       Include the pitfalls/caveats for each CSRF mitigation technique
> (origin/referrer header, samesite, double submit cookie etc.)
>
> 3.       Re-structure entire page and remove outdated/ non-relevant stuff
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Thursday, August 16, 2018 12:02 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
> dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Ok i perfectly understand.
>
> Thanks for the info.
>
>
>
> Le jeu. 16 ao?t 2018 ? 20:33, Konakandla, Manideep <mkonakan at amazon.com>
> a ?crit :
>
> I had an offline discussion with Jim and informed him that I will have to
> check few details before I give any commitment to update the guidance?s
> here.
>
>
>
> Update: I got approval internally from my team to work on this (fix issues
> and re-structure entire page) but I still need to get approval from Legal
> team to work on this. I will let you guys know when I hear back from them.
> Most likely they will ask me to just get it reviewed with them before
> sending it to you guys for review/get it published on OWASP page.
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Tuesday, August 14, 2018 11:02 PM
> *To:* Jim Manico <jim.manico at owasp.org>
> *Cc:* Konakandla, Manideep <mkonakan at amazon.com>; Dave Wichers
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181006/7acbe5c8/attachment-0001.html>

From p.upadhyay9999 at gmail.com  Sat Oct  6 19:51:00 2018
From: p.upadhyay9999 at gmail.com (Pankaj Upadhyay)
Date: Sat, 6 Oct 2018 15:51:00 -0400
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <6795fa7232dd466e818b7953048e243d@EX13D11UWB004.ant.amazon.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<CANos97dDU1AZh3DV=3oLZefvLp3pW80ib6nDz9Qw6FVj3OPeqg@mail.gmail.com>
	<babd67cd35484563936bd0326fda0518@EX13D11UWB004.ant.amazon.com>
	<CANos97dEyEOiExVrJ1qGr4uDbOMraRtQK9+U61jugoSc7PBPGA@mail.gmail.com>
	<6d53af0e5d9d459aacec5565c49d1f6b@EX13D11UWB004.ant.amazon.com>
	<CANos97cbaHSc9uUyc6G1-SPnM7pyY0AF7D2pmEV30yGmqbS_+A@mail.gmail.com>
	<e05fc4606d4447f994abfeb25130a711@EX13D11UWB004.ant.amazon.com>
	<CANos97em5kiaScJggFf2NetwXF709-TNaxvaCdv+yQ4Wk9iDYA@mail.gmail.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<6795fa7232dd466e818b7953048e243d@EX13D11UWB004.ant.amazon.com>
Message-ID: <CAL=9OGyNxb0eKf4mhS=jJTUfBNfbQvuV=sNVZ5BLNoVzVb6O6A@mail.gmail.com>

Do we know, regarding login CSRF, why validating the custom header as well
as the Origin/Host header is not a sufficient mitigation?

On Fri, Sep 28, 2018 at 9:35 PM Konakandla, Manideep <mkonakan at amazon.com>
wrote:

> Login CSRF is a way of exploiting CSRF on login forms (details here
> <https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a
> line about it in referrer validation section, it was not explained clearly
> and how it can scale with other techniques such as token based mitigation.
> No worries, I added a section about it!
>
>
>
> Finally, I am done with the document from my side and its sent for
> internal reviews now. It should take 1-2 weeks before it comes to you guys.
> Meanwhile, I still need help on below items from you guys. If no one was
> able to find references for a), we can very well remove it.
>
>
>
> a.     Under double submit cookie section, it is mentioned that DWR uses
> that approach but I could not find that anywhere within DWR documentation
> that it uses double submit cookie. Can someone help me finding reference if
> they know any?
>
> b.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
> in the wiki
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
> Can someone with .NET expertize verify if these are still accurate? Looks
> to me like there are latest resources than the one?s linked in current
> cheatsheet
>
>
>
> Happy weekend folks J
>
>
>
> *From:* Jim Manico <jim at manicode.com>
> *Sent:* Thursday, September 27, 2018 3:02 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Jim Manico <
> jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> ...as for (d) I dont see any problems with passing tokens as headers or
> parameters
>
>
>
> I dont understand (e) can you explain that again?
>
> --
>
> Jim Manico
>
> @Manicode
>
> Secure Coding Education
>
> +1 (808) 652-3805
>
>
> On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> 2 more questions added  (Jim already started helping me on #a)
>
>
>
> a.     I requested for an OWASP account and it?s still in pending. @JIM ?
> Can you please help me in getting my account approved? (registered with
> mani.konakandla at gmail.com)
>
> b.     Under double submit cookie section, it is mentioned that DWR uses
> that approach but I could not find that anywhere within DWR documentation
> that it uses double submit cookie. Can someone help me finding reference if
> they know any?
>
> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
> in the wiki
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
> Can someone with .NET expertize verify if these are still accurate? Looks
> to me like there are latest resources than the one?s linked
>
> d.     At few places within the wiki, I have seen recommending to include
> token in headers for Ajax requests. I also don?t see a problem in passing
> them as parameters as well. Do you guys see any?
>
> e.     I also have not seen at any place within the wiki talking about
> login CSRF issues and how each of the techniques described can be
> prone/immune to it. Is there any reason for it or are we open to include
> that?
>
>
>
> *From:* Konakandla, Manideep
> *Sent:* Wednesday, September 26, 2018 5:27 PM
> *To:* 'Jim Manico' <jim at manicode.com>; 'Dominique Righetto' <
> dominique.righetto at owasp.org>
> *Cc:* 'Jim Manico' <jim.manico at owasp.org>; 'Dave Wichers' <
> dave.wichers at owasp.org>; 'eric.sheridan at owasp.org' <
> eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* RE:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Yeah. My understanding of the breadth of exploitation of XSS in an
> application protected with just origin/referrer and other application
> protected with just token based mitigation earlier was wrong. Dominique
> earlier email thread cleared that to me (breadth of exploitation is same in
> both the cases. i.e., if an XSS vulnerability is found in any individual
> application protected with only one of those techniques, it still can
> exploit all state changing operations on entire application [though the
> complexity of exploitation is easy in origin/referrer check than token
> based mitigation]).
>
>
>
> Anyway, I am all clear and also almost done with re-factoring the
> cheatsheet  [1] J Should be fully completed by Friday unless something
> comes up meanwhile. I will then send it to my colleagues for review and
> then for Legal, PR approvals. Before that, I need help from you guys on
> below items
>
>
>
> a.     I requested for an OWASP account and it?s still in pending. @JIM ?
> Can you please help me in getting my account approved? (registered with
> mani.konakandla at gmail.com)
>
> b.     Under double submit cookie section, it is mentioned that DWR uses
> that approach but I could not find that anywhere within DWR documentation
> that it uses double submit cookie. Can someone help me finding reference if
> they know any?
>
> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
> in the wiki
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
> Can someone with .NET expertize verify if these are still accurate? Looks
> to me like there are latest resources than the one?s linked
>
>
>
> [1] Below are changes done so far
>
> a. Switched primary, secondary defense and our reasoning behind it (added
> lot of reasons on issues with origin/referrer header check and why token
> should be made primary)
>
> b. Added CSRF mitigation myths (CORS, content-type validation etc.)
>
> c. Added a section called ?Not so popular CSRF mitigations? (mentioned
> details about triple submit cookie)
>
> d. Included limitations / issues associated with double submit cookie,
> same site cookie, captcha as a CSRF defense etc.
>
> e. Removed lot of obsolete content and added some new content to some of
> the mitigations
>
> f. Made document look more better by adding RFC?s links wherever possible
> and lot of other minor changes.
>
>
>
> *From:* Jim Manico <jim at manicode.com>
> *Sent:* Wednesday, September 26, 2018 4:19 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>; Dominique Righetto <
> dominique.righetto at owasp.org>
> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
> dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Well tokens can be placed in cookies.
>
> The real answer to avoid CSRF is tokens in JavaScript variable as opposed
> to cookies. They are not automatically sent and indeed make CSRF impossible
> - at the expense of tokens being fully stolen via XSS. Pick your poison!
>
> I recommend a COMBO of these defenses. For web apps, sychronizer token +
> header verification + re-authentication for sensitive features.
>
> For API's double-cookie submit or just use JavaScript variable based
> tokens + header verification for same-site API's + re-authentication for
> sensitive features.
>
> > [1] If there is an XSS vulnerability at a single place on a domain (it
> can add custom header), it can be used to make CSRF *on all other state
> changing operationswithin that domain *done to that AJAX endpoint. Do you
> agree?
>
>
>
> Absolutely!
>
>
>
> On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
>
> Yeah, I understand that any XSS and CSRF game is over but I am stressing
> out on the highlighted part in [1]. I am trying to highlight and get an
> affirmation on why my understanding on token based mitigation is better
> than origin/referrer header check will also apply to ?token based
> mitigation Vs custom header mitigation (if static tokens are used in custom
> headers)?.
>
>
>
> In case of tokens, we have an option to use different tokens on each page
> (taking things like URL, timestamp etc. into consideration) and hence XSS
> vulnerability on one page will only make state changing operations in that
> page vulnerable to CSRF but not state changing operations on other pages
> within that domain (because token value is different) but whereas in
> origin/referrer header check and custom header check, the token value is
> constant and hence XSS vulnerability in one page will also cause state
> changing operations in other pages to be vulnerable to CSRF as well. Off
> course, this can be mitigated in custom header checks by adding tokens to
> custom headers rather than static constant but this cannot be mitigated in
> origin/referrer check because those headers cannot be modified. So, yeah a
> single XSS any CSRF is bypassed but the breadth of the impact is different
> for each of them.
>
>
>
> Regarding code samples ? I currently was able to allocate only some time
> for this task and I don?t think I will be able to do code samples within
> this time frame. I am also leaving for a long vacation starting Oct 12 and
> hence let?s try to get this out first and we can add code samples later on
> considering my work load after I return from vacation.
>
>
>
> [1] If there is an XSS vulnerability at a single place on a domain (it can
> add custom header), it can be used to make CSRF *on all other state
> changing operations* *within that domain *done to that AJAX endpoint. Do
> you agree?
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> <dominique.righetto at owasp.org>
> *Sent:* Thursday, September 20, 2018 8:45 AM
> *To:* Jim Manico <jim at manicode.com> <jim at manicode.com>
> *Cc:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
> Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave Wichers
> <dave.wichers at owasp.org> <dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi,
>
>
>
> Thanks for your contribution.
>
>
>
> I like very much your plan ?
>
>
>
> I ask for some favor in addition :
>
> - can you provide code sample (in one language like java or .net or the
> one you want but it must be easy to read and understand) or libraires along
> your proposal for each section?
>
> - can you use the syntaxhighlight tag for code?
>
>
>
> I'am agree with Jim, XSS  means game over because your browsing context
> can be used as proxy so csrf protection will be defeated because request
> came from the legitimate user.
>
>
>
> Thanks you again for all your help ???
>
>
>
> Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com> a ?crit :
>
> > If there is an XSS vulnerability at a single place on a domain (it can
> add custom header), it can be used to make CSRF on all other state changing
> operations within that domain done to that AJAX endpoint. Do you agree?
>
> Any XSS is game over and all CSRF are useless in the face of XSS. I Agree!
>
> - Jim
>
>
>
> On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
>
> Hey Guys,
>
>
>
> [1] is what I said for origin/referrer header check in this e-mail thread.
> I also believe that this applies for custom headers for AJAX endpoints as
> well. If there is an XSS vulnerability at a single place on a domain (it
> can add custom header), it can be used to make CSRF on all other state
> changing operations within that domain done to that AJAX endpoint. Do you
> agree?
>
>
>
> Here is how I am keeping the new re-factored cheatsheet. Does this look
> good to you guys?
>
>
>
> 1.       Use token based method as primary defense
>
> a.       Can use synchronizer pattern for stateful applications
>
> b.       Can use hah based/ encryption based token pattern for stateless
> applications
>
> 2.       Defense in depth measures along with drawbacks of each one
>
> a.       Origin/referrer header check
>
> b.       Double submit cookie
>
> c.       Samesite cookie
>
> d.       Custom headers (people still need to use tokens for forms etc.
> if they have mix of ajax endpoints and general HTML)
>
> 3.       Strong CSRF defenses but very less usable : captcha etc.
>
> 4.       CSRF Myths / techniques that do not work section
>
>
>
> [1] if we solely rely on origin/referrer header check - an XSS
> vulnerability within a single page on that domain will also give CSRF
> vulnerability to all other state changing operations under that entire
> domain.
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> <dominique.righetto at owasp.org>
> *Sent:* Wednesday, September 12, 2018 1:31 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave
> Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi
>
>
>
> Thanks you very much for the update
>
>
>
> Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep <mkonakan at amazon.com>
> a ?crit :
>
> Just an update: I started working on this along with other sprint tasks of
> mine today. I am hoping to get it completed by end of next week and then
> send it for legal/PR approvals.
>
>
>
> *From:* Jim Manico <jim.manico at owasp.org>
> *Sent:* Thursday, August 23, 2018 6:49 AM
> *To:* Dominique Righetto <dominique.righetto at owasp.org>; Konakandla,
> Manideep <mkonakan at amazon.com>
> *Cc:* Dave Wichers <dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Awesome! Thank you! :)
>
> - Jim
>
>
>
> On 8/23/18 2:41 AM, Dominique Righetto wrote:
>
> You are welcome :)
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Thu, Aug 23, 2018 at 10:33 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Np. I will keep u guys posted. Thanks for the support and have good rest
> of your day!
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Thursday, August 23, 2018 1:29 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
> dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi,
>
>
>
> Sounds goods for me.
>
>
>
> Thanks again for the contribution :)
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Thu, Aug 23, 2018 at 10:03 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Ok, I received necessary approvals for working on this. I am hoping to
> start the work in 2 weeks and then deliver the document to you guys for
> review by end of September/1st week of October (might be 1-2 weeks delay
> if approvals from Legal and other teams get delayed). My plan is to work on
> below things ? Please let me know if I missed anything/you feel something
> else has to be added to this list.
>
>
>
> 1.       Change the order of primary and defense in depth measures
>
> 2.       Include the pitfalls/caveats for each CSRF mitigation technique
> (origin/referrer header, samesite, double submit cookie etc.)
>
> 3.       Re-structure entire page and remove outdated/ non-relevant stuff
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Thursday, August 16, 2018 12:02 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
> dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Ok i perfectly understand.
>
> Thanks for the info.
>
>
>
> Le jeu. 16 ao?t 2018 ? 20:33, Konakandla, Manideep <mkonakan at amazon.com>
> a ?crit :
>
> I had an offline discussion with Jim and informed him that I will have to
> check few details before I give any commitment to update the guidance?s
> here.
>
>
>
> Update: I got approval internally from my team to work on this (fix issues
> and re-structure entire page) but I still need to get approval from Legal
> team to work on this. I will let you guys know when I hear back from them.
> Most likely they will ask me to just get it reviewed with them before
> sending it to you guys for review/get it published on OWASP page.
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Tuesday, August 14, 2018 11:02 PM
> *To:* Jim Manico <jim.manico at owasp.org>
> *Cc:* Konakandla, Manideep <mkonakan at amazon.com>; Dave Wichers <
> dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Roadmap has been updated: https://trello.com/b/w020m3jQ/cs-roadmap
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Mon, Aug 13, 2018 at 6:03 AM Dominique Righetto <
> dominique.righetto at owasp.org> wrote:
>
> I have finally achieved to read the thread, very interesting  ?
>
>
>
> I understand the need to simplify the cheat sheet and the solutions
> proposed. It is one of the reason why i have add code sample. So this
> contribution is a very good point.
>
>
>
> Just a little thing about header, take care to ensure that the referrer
> policy of the site is not set to no-referrer otherwise you cannot use
> origin/referrer headers couple to create a protection layer.
>
>
>
> Tanks you for the helps proposal ?
>
>
>
>
>
> Le dim. 12 ao?t 2018 ? 22:21, Jim Manico <jim.manico at owasp.org> a ?crit :
>
> That makes sense. We're not going to get consensus but you demonstrated
> mastery over this material. I am impressed.
>
> Please consider yourself owner of the page and edit as you see fit. I'll
> keep an eye on your edits and make comments as you go.
>
> But please go ahead and charge.
>
> > I also personally don?t recommend double submit cookies for enterprises
> that have lot of subdomains for which they might not be sure if they are
> 100% secure
>
> Makes sense, but what DO you suggest for stateless services and CSRF
> defense?
>
> Aloha, Jim
>
>
>
> On 8/10/18 10:41 AM, Konakandla, Manideep wrote:
>
> Thanks. I also personally don?t recommend double submit cookies for
> enterprises that have lot of subdomains for which they might not be sure if
> they are 100% secure. More details are explained here
> <https://media.blackhat.com/eu-13/briefings/Lundeen/bh-eu-13-deputies-still-confused-lundeen-wp.pdf>
> (section 2.1.1). I think this is something that has to be mentioned in the
> wiki as well.
>
>
>
> Do we have a consensus process before we edit the page? Or current
> discussion is enough?  How do we want to go next? I am not quite sure at
> the moment if I will be able to contribute (I can let you know after
> checking few details).
>
>
>
> *From:* Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>
> *Sent:* Friday, August 10, 2018 1:23 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
> Dominique Righetto <dominique.righetto at owasp.org>
> <dominique.righetto at owasp.org>
> *Cc:* Dave Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> All I'm saying is that it's a good idea to split browser standard based
> CSRF defense and defenses that require tokens.
>
> And you know, I am not at all opposed to making tokens the primary
> defense. I think that's totally fair. In fact for my words its...
>
> 1) Use a token method - either normal syncronizer tokens or
> double-submit-cookies for stateless services. This is the main defense in
> use today.
>
> 2) I also do header defense and think it's secondary. I only use headers
> by themselves for lower risk services and it's normally easy to deploy as
> long as I only need to defense posts. If get and posts transact, this
> becomes tough to deploy.
>
> 3) I always use the samesite cookie for single-domain applications. This
> gets weird in mash-up cases.
>
> So yea, I am totally ok for moving tokens to the primary defense of this
> guide.
>
> - Jim
>
> On 8/10/18 10:16 AM, Konakandla, Manideep wrote:
>
> *This is a false argument. *
>
> >> I am not sure if you got the context there. It was is in response to
> Dominique statement which said that we are delegating part of protection to
> browsers if we solely reply on referrer/origin headers properly and hence
> we need to depend on token as well (for which you +1?ed). I am confused now
> that you are saying it as an browser standard (which means nothing should
> wrong and we don?t need to worry about delegating protection to browser).
> The discussion was also about browsers handling the data. Origin/referrer
> header check is not easy deployment as well (considering proxies,
> individual domains when a company has, around 50+ subdomains etc.). I feel
> token mitigation is more easy using some OWASP libraries that provide
> auto-tokening (this anyway is my personal opinion).
>
> One more thing we need to remember is that, if we solely rely on
> origin/referrer header check - an XSS vulnerability within a single page on
> that domain will also give CSRF vulnerability to all other state changing
> operations under that entire domain. Considering that and also that
> depending on browsers to send origin/referrer header ? I feel token should
> be used as a primary mitigation and origin/referrer header check as
> defense-in-depth. Do we have any similar issues for tokens? If not ? maybe
> we should just do that. Either ways, it?s just my opinion ? if there is no
> consensus for it, we can just stop the debate and let it be the way it is.
> I will be more than happy to always learn if there is something that I am
> missing J
>
> *> **Also, I know that samesite cookie itself is not supported on all
> browsers but I?m more looking towards the text written on the wiki
> (provides some protection against cross-site request forgery attacks), is
> the ?some? here refers to the partial support of the browsers? ? Yes*
>
> It frankly does not provide that impression here. When me/couple of other
> colleagues/friends of mine read it, we were thinking on the angle of issue
> with the technology itself. I will be more than happy to edit it if you
> guys agree or else again ? we can just let the way it is :)
>
>
>
> *From:* Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>
> *Sent:* Friday, August 10, 2018 12:51 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
> Dominique Righetto <dominique.righetto at owasp.org>
> <dominique.righetto at owasp.org>
> *Cc:* Dave Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> > In a sense/In fact, we rely on browsers to protect CSRF tokens as well
> ? so if we do not trust browsers for sending referrer/origin headers
> properly, we shouldn?t be trusting them to secure our tokens
>
> This is a false argument. One of these is fully controlled by the browser
> via browser standards, one of these is controlled by individual programmers.
>
> > Unless there is anything additional that origin/referrer header check
> provides that?s not provided by token based mitigation
>
> What it also provides is VERY easy deployment capabilities like the same
> site token. One of these is based on browser standards and again tokens
>
>
>
> --
>
> Jim Manico
>
> Manicode Security
>
> https://www.manicode.com
>
> _______________________________________________
> OWASP-cheat-sheets mailing list
> OWASP-cheat-sheets at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181006/e59ac743/attachment-0001.html>

From dominique.righetto at owasp.org  Sun Oct  7 06:29:22 2018
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Sun, 7 Oct 2018 08:29:22 +0200
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CAL=9OGyNxb0eKf4mhS=jJTUfBNfbQvuV=sNVZ5BLNoVzVb6O6A@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<CANos97dDU1AZh3DV=3oLZefvLp3pW80ib6nDz9Qw6FVj3OPeqg@mail.gmail.com>
	<babd67cd35484563936bd0326fda0518@EX13D11UWB004.ant.amazon.com>
	<CANos97dEyEOiExVrJ1qGr4uDbOMraRtQK9+U61jugoSc7PBPGA@mail.gmail.com>
	<6d53af0e5d9d459aacec5565c49d1f6b@EX13D11UWB004.ant.amazon.com>
	<CANos97cbaHSc9uUyc6G1-SPnM7pyY0AF7D2pmEV30yGmqbS_+A@mail.gmail.com>
	<e05fc4606d4447f994abfeb25130a711@EX13D11UWB004.ant.amazon.com>
	<CANos97em5kiaScJggFf2NetwXF709-TNaxvaCdv+yQ4Wk9iDYA@mail.gmail.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<6795fa7232dd466e818b7953048e243d@EX13D11UWB004.ant.amazon.com>
	<CAL=9OGyNxb0eKf4mhS=jJTUfBNfbQvuV=sNVZ5BLNoVzVb6O6A@mail.gmail.com>
Message-ID: <CANos97cSYSKc29nA-RCfFf9daVGSqEtEfNTek-mac9px04Oq0A@mail.gmail.com>

Good question, I think it's more a point about to be consistent in terms of
CSRF check across the application. Indeed, if you begin to perform
different kind of CSRF check depending on the feature of the application
(login, business feature, reset password...) it becomes risky and you
significantly increase the chance to include location in which you will
have a CSRF check weakness...
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com
<dominique.righetto at gmail.com>dominique.righetto at owasp.org
<dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Sat, Oct 6, 2018 at 9:51 PM Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
wrote:

> Do we know, regarding login CSRF, why validating the custom header as well
> as the Origin/Host header is not a sufficient mitigation?
>
> On Fri, Sep 28, 2018 at 9:35 PM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
>> Login CSRF is a way of exploiting CSRF on login forms (details here
>> <https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a
>> line about it in referrer validation section, it was not explained clearly
>> and how it can scale with other techniques such as token based mitigation.
>> No worries, I added a section about it!
>>
>>
>>
>> Finally, I am done with the document from my side and its sent for
>> internal reviews now. It should take 1-2 weeks before it comes to you guys.
>> Meanwhile, I still need help on below items from you guys. If no one was
>> able to find references for a), we can very well remove it.
>>
>>
>>
>> a.     Under double submit cookie section, it is mentioned that DWR uses
>> that approach but I could not find that anywhere within DWR documentation
>> that it uses double submit cookie. Can someone help me finding reference if
>> they know any?
>>
>> b.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>> in the wiki
>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>> Can someone with .NET expertize verify if these are still accurate? Looks
>> to me like there are latest resources than the one?s linked in current
>> cheatsheet
>>
>>
>>
>> Happy weekend folks J
>>
>>
>>
>> *From:* Jim Manico <jim at manicode.com>
>> *Sent:* Thursday, September 27, 2018 3:02 AM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Jim Manico <
>> jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>;
>> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
>> *Subject:* Re:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> ...as for (d) I dont see any problems with passing tokens as headers or
>> parameters
>>
>>
>>
>> I dont understand (e) can you explain that again?
>>
>> --
>>
>> Jim Manico
>>
>> @Manicode
>>
>> Secure Coding Education
>>
>> +1 (808) 652-3805
>>
>>
>> On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com>
>> wrote:
>>
>> 2 more questions added  (Jim already started helping me on #a)
>>
>>
>>
>> a.     I requested for an OWASP account and it?s still in pending. @JIM
>> ? Can you please help me in getting my account approved? (registered with
>> mani.konakandla at gmail.com)
>>
>> b.     Under double submit cookie section, it is mentioned that DWR uses
>> that approach but I could not find that anywhere within DWR documentation
>> that it uses double submit cookie. Can someone help me finding reference if
>> they know any?
>>
>> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>> in the wiki
>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>> Can someone with .NET expertize verify if these are still accurate? Looks
>> to me like there are latest resources than the one?s linked
>>
>> d.     At few places within the wiki, I have seen recommending to
>> include token in headers for Ajax requests. I also don?t see a problem in
>> passing them as parameters as well. Do you guys see any?
>>
>> e.     I also have not seen at any place within the wiki talking about
>> login CSRF issues and how each of the techniques described can be
>> prone/immune to it. Is there any reason for it or are we open to include
>> that?
>>
>>
>>
>> *From:* Konakandla, Manideep
>> *Sent:* Wednesday, September 26, 2018 5:27 PM
>> *To:* 'Jim Manico' <jim at manicode.com>; 'Dominique Righetto' <
>> dominique.righetto at owasp.org>
>> *Cc:* 'Jim Manico' <jim.manico at owasp.org>; 'Dave Wichers' <
>> dave.wichers at owasp.org>; 'eric.sheridan at owasp.org' <
>> eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org
>> *Subject:* RE:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Yeah. My understanding of the breadth of exploitation of XSS in an
>> application protected with just origin/referrer and other application
>> protected with just token based mitigation earlier was wrong. Dominique
>> earlier email thread cleared that to me (breadth of exploitation is same in
>> both the cases. i.e., if an XSS vulnerability is found in any individual
>> application protected with only one of those techniques, it still can
>> exploit all state changing operations on entire application [though the
>> complexity of exploitation is easy in origin/referrer check than token
>> based mitigation]).
>>
>>
>>
>> Anyway, I am all clear and also almost done with re-factoring the
>> cheatsheet  [1] J Should be fully completed by Friday unless something
>> comes up meanwhile. I will then send it to my colleagues for review and
>> then for Legal, PR approvals. Before that, I need help from you guys on
>> below items
>>
>>
>>
>> a.     I requested for an OWASP account and it?s still in pending. @JIM
>> ? Can you please help me in getting my account approved? (registered with
>> mani.konakandla at gmail.com)
>>
>> b.     Under double submit cookie section, it is mentioned that DWR uses
>> that approach but I could not find that anywhere within DWR documentation
>> that it uses double submit cookie. Can someone help me finding reference if
>> they know any?
>>
>> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>> in the wiki
>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>> Can someone with .NET expertize verify if these are still accurate? Looks
>> to me like there are latest resources than the one?s linked
>>
>>
>>
>> [1] Below are changes done so far
>>
>> a. Switched primary, secondary defense and our reasoning behind it (added
>> lot of reasons on issues with origin/referrer header check and why token
>> should be made primary)
>>
>> b. Added CSRF mitigation myths (CORS, content-type validation etc.)
>>
>> c. Added a section called ?Not so popular CSRF mitigations? (mentioned
>> details about triple submit cookie)
>>
>> d. Included limitations / issues associated with double submit cookie,
>> same site cookie, captcha as a CSRF defense etc.
>>
>> e. Removed lot of obsolete content and added some new content to some of
>> the mitigations
>>
>> f. Made document look more better by adding RFC?s links wherever possible
>> and lot of other minor changes.
>>
>>
>>
>> *From:* Jim Manico <jim at manicode.com>
>> *Sent:* Wednesday, September 26, 2018 4:19 PM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com>; Dominique Righetto <
>> dominique.righetto at owasp.org>
>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>> *Subject:* Re:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Well tokens can be placed in cookies.
>>
>> The real answer to avoid CSRF is tokens in JavaScript variable as opposed
>> to cookies. They are not automatically sent and indeed make CSRF impossible
>> - at the expense of tokens being fully stolen via XSS. Pick your poison!
>>
>> I recommend a COMBO of these defenses. For web apps, sychronizer token +
>> header verification + re-authentication for sensitive features.
>>
>> For API's double-cookie submit or just use JavaScript variable based
>> tokens + header verification for same-site API's + re-authentication for
>> sensitive features.
>>
>> > [1] If there is an XSS vulnerability at a single place on a domain (it
>> can add custom header), it can be used to make CSRF *on all other state
>> changing operationswithin that domain *done to that AJAX endpoint. Do
>> you agree?
>>
>>
>>
>> Absolutely!
>>
>>
>>
>> On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
>>
>> Yeah, I understand that any XSS and CSRF game is over but I am stressing
>> out on the highlighted part in [1]. I am trying to highlight and get an
>> affirmation on why my understanding on token based mitigation is better
>> than origin/referrer header check will also apply to ?token based
>> mitigation Vs custom header mitigation (if static tokens are used in custom
>> headers)?.
>>
>>
>>
>> In case of tokens, we have an option to use different tokens on each page
>> (taking things like URL, timestamp etc. into consideration) and hence XSS
>> vulnerability on one page will only make state changing operations in that
>> page vulnerable to CSRF but not state changing operations on other pages
>> within that domain (because token value is different) but whereas in
>> origin/referrer header check and custom header check, the token value is
>> constant and hence XSS vulnerability in one page will also cause state
>> changing operations in other pages to be vulnerable to CSRF as well. Off
>> course, this can be mitigated in custom header checks by adding tokens to
>> custom headers rather than static constant but this cannot be mitigated in
>> origin/referrer check because those headers cannot be modified. So, yeah a
>> single XSS any CSRF is bypassed but the breadth of the impact is different
>> for each of them.
>>
>>
>>
>> Regarding code samples ? I currently was able to allocate only some time
>> for this task and I don?t think I will be able to do code samples within
>> this time frame. I am also leaving for a long vacation starting Oct 12 and
>> hence let?s try to get this out first and we can add code samples later on
>> considering my work load after I return from vacation.
>>
>>
>>
>> [1] If there is an XSS vulnerability at a single place on a domain (it
>> can add custom header), it can be used to make CSRF *on all other state
>> changing operations* *within that domain *done to that AJAX endpoint. Do
>> you agree?
>>
>>
>>
>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>> <dominique.righetto at owasp.org>
>> *Sent:* Thursday, September 20, 2018 8:45 AM
>> *To:* Jim Manico <jim at manicode.com> <jim at manicode.com>
>> *Cc:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
>> Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave Wichers
>> <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>> eric.sheridan at owasp.org
>> *Subject:* Re:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Hi,
>>
>>
>>
>> Thanks for your contribution.
>>
>>
>>
>> I like very much your plan ?
>>
>>
>>
>> I ask for some favor in addition :
>>
>> - can you provide code sample (in one language like java or .net or the
>> one you want but it must be easy to read and understand) or libraires along
>> your proposal for each section?
>>
>> - can you use the syntaxhighlight tag for code?
>>
>>
>>
>> I'am agree with Jim, XSS  means game over because your browsing context
>> can be used as proxy so csrf protection will be defeated because request
>> came from the legitimate user.
>>
>>
>>
>> Thanks you again for all your help ???
>>
>>
>>
>> Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com> a ?crit :
>>
>> > If there is an XSS vulnerability at a single place on a domain (it can
>> add custom header), it can be used to make CSRF on all other state changing
>> operations within that domain done to that AJAX endpoint. Do you agree?
>>
>> Any XSS is game over and all CSRF are useless in the face of XSS. I Agree!
>>
>> - Jim
>>
>>
>>
>> On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
>>
>> Hey Guys,
>>
>>
>>
>> [1] is what I said for origin/referrer header check in this e-mail
>> thread. I also believe that this applies for custom headers for AJAX
>> endpoints as well. If there is an XSS vulnerability at a single place on a
>> domain (it can add custom header), it can be used to make CSRF on all other
>> state changing operations within that domain done to that AJAX endpoint. Do
>> you agree?
>>
>>
>>
>> Here is how I am keeping the new re-factored cheatsheet. Does this look
>> good to you guys?
>>
>>
>>
>> 1.       Use token based method as primary defense
>>
>> a.       Can use synchronizer pattern for stateful applications
>>
>> b.       Can use hah based/ encryption based token pattern for stateless
>> applications
>>
>> 2.       Defense in depth measures along with drawbacks of each one
>>
>> a.       Origin/referrer header check
>>
>> b.       Double submit cookie
>>
>> c.       Samesite cookie
>>
>> d.       Custom headers (people still need to use tokens for forms etc.
>> if they have mix of ajax endpoints and general HTML)
>>
>> 3.       Strong CSRF defenses but very less usable : captcha etc.
>>
>> 4.       CSRF Myths / techniques that do not work section
>>
>>
>>
>> [1] if we solely rely on origin/referrer header check - an XSS
>> vulnerability within a single page on that domain will also give CSRF
>> vulnerability to all other state changing operations under that entire
>> domain.
>>
>>
>>
>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>> <dominique.righetto at owasp.org>
>> *Sent:* Wednesday, September 12, 2018 1:31 PM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>
>> *Cc:* Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave
>> Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>> eric.sheridan at owasp.org
>> *Subject:* Re:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Hi
>>
>>
>>
>> Thanks you very much for the update
>>
>>
>>
>> Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep <mkonakan at amazon.com>
>> a ?crit :
>>
>> Just an update: I started working on this along with other sprint tasks
>> of mine today. I am hoping to get it completed by end of next week and then
>> send it for legal/PR approvals.
>>
>>
>>
>> *From:* Jim Manico <jim.manico at owasp.org>
>> *Sent:* Thursday, August 23, 2018 6:49 AM
>> *To:* Dominique Righetto <dominique.righetto at owasp.org>; Konakandla,
>> Manideep <mkonakan at amazon.com>
>> *Cc:* Dave Wichers <dave.wichers at owasp.org>; eric.sheridan at owasp.org
>> *Subject:* Re:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Awesome! Thank you! :)
>>
>> - Jim
>>
>>
>>
>> On 8/23/18 2:41 AM, Dominique Righetto wrote:
>>
>> You are welcome :)
>>
>> --
>> Cordialement, Best regards,
>> Dominique Righetto
>> dominique.righetto at gmail.com
>>
>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>
>> https://righettod.eu
>> GPG: 323D19BA
>>
>>
>>
>>
>>
>> On Thu, Aug 23, 2018 at 10:33 AM Konakandla, Manideep <
>> mkonakan at amazon.com> wrote:
>>
>> Np. I will keep u guys posted. Thanks for the support and have good rest
>> of your day!
>>
>>
>>
>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>> *Sent:* Thursday, August 23, 2018 1:29 AM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>> *Subject:* Re:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Hi,
>>
>>
>>
>> Sounds goods for me.
>>
>>
>>
>> Thanks again for the contribution :)
>>
>> --
>> Cordialement, Best regards,
>> Dominique Righetto
>> dominique.righetto at gmail.com
>>
>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>
>> https://righettod.eu
>> GPG: 323D19BA
>>
>>
>>
>>
>>
>> On Thu, Aug 23, 2018 at 10:03 AM Konakandla, Manideep <
>> mkonakan at amazon.com> wrote:
>>
>> Ok, I received necessary approvals for working on this. I am hoping to
>> start the work in 2 weeks and then deliver the document to you guys for
>> review by end of September/1st week of October (might be 1-2 weeks delay
>> if approvals from Legal and other teams get delayed). My plan is to work on
>> below things ? Please let me know if I missed anything/you feel something
>> else has to be added to this list.
>>
>>
>>
>> 1.       Change the order of primary and defense in depth measures
>>
>> 2.       Include the pitfalls/caveats for each CSRF mitigation technique
>> (origin/referrer header, samesite, double submit cookie etc.)
>>
>> 3.       Re-structure entire page and remove outdated/ non-relevant stuff
>>
>>
>>
>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>> *Sent:* Thursday, August 16, 2018 12:02 PM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>> *Subject:* Re:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Ok i perfectly understand.
>>
>> Thanks for the info.
>>
>>
>>
>> Le jeu. 16 ao?t 2018 ? 20:33, Konakandla, Manideep <mkonakan at amazon.com>
>> a ?crit :
>>
>> I had an offline discussion with Jim and informed him that I will have to
>> check few details before I give any commitment to update the guidance?s
>> here.
>>
>>
>>
>> Update: I got approval internally from my team to work on this (fix
>> issues and re-structure entire page) but I still need to get approval from
>> Legal team to work on this. I will let you guys know when I hear back from
>> them. Most likely they will ask me to just get it reviewed with them before
>> sending it to you guys for review/get it published on OWASP page.
>>
>>
>>
>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>> *Sent:* Tuesday, August 14, 2018 11:02 PM
>> *To:* Jim Manico <jim.manico at owasp.org>
>> *Cc:* Konakandla, Manideep <mkonakan at amazon.com>; Dave Wichers <
>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>> *Subject:* Re:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Roadmap has been updated: https://trello.com/b/w020m3jQ/cs-roadmap
>>
>> --
>> Cordialement, Best regards,
>> Dominique Righetto
>> dominique.righetto at gmail.com
>>
>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>
>> https://righettod.eu
>> GPG: 323D19BA
>>
>>
>>
>>
>>
>> On Mon, Aug 13, 2018 at 6:03 AM Dominique Righetto <
>> dominique.righetto at owasp.org> wrote:
>>
>> I have finally achieved to read the thread, very interesting  ?
>>
>>
>>
>> I understand the need to simplify the cheat sheet and the solutions
>> proposed. It is one of the reason why i have add code sample. So this
>> contribution is a very good point.
>>
>>
>>
>> Just a little thing about header, take care to ensure that the referrer
>> policy of the site is not set to no-referrer otherwise you cannot use
>> origin/referrer headers couple to create a protection layer.
>>
>>
>>
>> Tanks you for the helps proposal ?
>>
>>
>>
>>
>>
>> Le dim. 12 ao?t 2018 ? 22:21, Jim Manico <jim.manico at owasp.org> a ?crit :
>>
>> That makes sense. We're not going to get consensus but you demonstrated
>> mastery over this material. I am impressed.
>>
>> Please consider yourself owner of the page and edit as you see fit. I'll
>> keep an eye on your edits and make comments as you go.
>>
>> But please go ahead and charge.
>>
>> > I also personally don?t recommend double submit cookies for
>> enterprises that have lot of subdomains for which they might not be sure if
>> they are 100% secure
>>
>> Makes sense, but what DO you suggest for stateless services and CSRF
>> defense?
>>
>> Aloha, Jim
>>
>>
>>
>> On 8/10/18 10:41 AM, Konakandla, Manideep wrote:
>>
>> Thanks. I also personally don?t recommend double submit cookies for
>> enterprises that have lot of subdomains for which they might not be sure if
>> they are 100% secure. More details are explained here
>> <https://media.blackhat.com/eu-13/briefings/Lundeen/bh-eu-13-deputies-still-confused-lundeen-wp.pdf>
>> (section 2.1.1). I think this is something that has to be mentioned in the
>> wiki as well.
>>
>>
>>
>> Do we have a consensus process before we edit the page? Or current
>> discussion is enough?  How do we want to go next? I am not quite sure at
>> the moment if I will be able to contribute (I can let you know after
>> checking few details).
>>
>>
>>
>> *From:* Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>
>> *Sent:* Friday, August 10, 2018 1:23 PM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
>> Dominique Righetto <dominique.righetto at owasp.org>
>> <dominique.righetto at owasp.org>
>> *Cc:* Dave Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>> eric.sheridan at owasp.org
>> *Subject:* Re:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> All I'm saying is that it's a good idea to split browser standard based
>> CSRF defense and defenses that require tokens.
>>
>> And you know, I am not at all opposed to making tokens the primary
>> defense. I think that's totally fair. In fact for my words its...
>>
>> 1) Use a token method - either normal syncronizer tokens or
>> double-submit-cookies for stateless services. This is the main defense in
>> use today.
>>
>> 2) I also do header defense and think it's secondary. I only use headers
>> by themselves for lower risk services and it's normally easy to deploy as
>> long as I only need to defense posts. If get and posts transact, this
>> becomes tough to deploy.
>>
>> 3) I always use the samesite cookie for single-domain applications. This
>> gets weird in mash-up cases.
>>
>> So yea, I am totally ok for moving tokens to the primary defense of this
>> guide.
>>
>> - Jim
>>
>> On 8/10/18 10:16 AM, Konakandla, Manideep wrote:
>>
>> *This is a false argument. *
>>
>> >> I am not sure if you got the context there. It was is in response to
>> Dominique statement which said that we are delegating part of protection to
>> browsers if we solely reply on referrer/origin headers properly and hence
>> we need to depend on token as well (for which you +1?ed). I am confused now
>> that you are saying it as an browser standard (which means nothing should
>> wrong and we don?t need to worry about delegating protection to browser).
>> The discussion was also about browsers handling the data. Origin/referrer
>> header check is not easy deployment as well (considering proxies,
>> individual domains when a company has, around 50+ subdomains etc.). I feel
>> token mitigation is more easy using some OWASP libraries that provide
>> auto-tokening (this anyway is my personal opinion).
>>
>> One more thing we need to remember is that, if we solely rely on
>> origin/referrer header check - an XSS vulnerability within a single page on
>> that domain will also give CSRF vulnerability to all other state changing
>> operations under that entire domain. Considering that and also that
>> depending on browsers to send origin/referrer header ? I feel token should
>> be used as a primary mitigation and origin/referrer header check as
>> defense-in-depth. Do we have any similar issues for tokens? If not ? maybe
>> we should just do that. Either ways, it?s just my opinion ? if there is no
>> consensus for it, we can just stop the debate and let it be the way it is.
>> I will be more than happy to always learn if there is something that I am
>> missing J
>>
>> *> **Also, I know that samesite cookie itself is not supported on all
>> browsers but I?m more looking towards the text written on the wiki
>> (provides some protection against cross-site request forgery attacks), is
>> the ?some? here refers to the partial support of the browsers? ? Yes*
>>
>> It frankly does not provide that impression here. When me/couple of other
>> colleagues/friends of mine read it, we were thinking on the angle of issue
>> with the technology itself. I will be more than happy to edit it if you
>> guys agree or else again ? we can just let the way it is :)
>>
>>
>>
>> *From:* Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>
>> *Sent:* Friday, August 10, 2018 12:51 PM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
>> Dominique Righetto <dominique.righetto at owasp.org>
>> <dominique.righetto at owasp.org>
>> *Cc:* Dave Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>> eric.sheridan at owasp.org
>> *Subject:* Re:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> > In a sense/In fact, we rely on browsers to protect CSRF tokens as well
>> ? so if we do not trust browsers for sending referrer/origin headers
>> properly, we shouldn?t be trusting them to secure our tokens
>>
>> This is a false argument. One of these is fully controlled by the browser
>> via browser standards, one of these is controlled by individual programmers.
>>
>> > Unless there is anything additional that origin/referrer header check
>> provides that?s not provided by token based mitigation
>>
>> What it also provides is VERY easy deployment capabilities like the same
>> site token. One of these is based on browser standards and again tokens
>>
>>
>>
>> --
>>
>> Jim Manico
>>
>> Manicode Security
>>
>> https://www.manicode.com
>>
>> _______________________________________________
>> OWASP-cheat-sheets mailing list
>> OWASP-cheat-sheets at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>
> _______________________________________________
> OWASP-cheat-sheets mailing list
> OWASP-cheat-sheets at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181007/36f08080/attachment-0001.html>

From p.upadhyay9999 at gmail.com  Sun Oct  7 16:48:20 2018
From: p.upadhyay9999 at gmail.com (Pankaj Upadhyay)
Date: Sun, 7 Oct 2018 12:48:20 -0400
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CANos97cSYSKc29nA-RCfFf9daVGSqEtEfNTek-mac9px04Oq0A@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<CANos97dDU1AZh3DV=3oLZefvLp3pW80ib6nDz9Qw6FVj3OPeqg@mail.gmail.com>
	<babd67cd35484563936bd0326fda0518@EX13D11UWB004.ant.amazon.com>
	<CANos97dEyEOiExVrJ1qGr4uDbOMraRtQK9+U61jugoSc7PBPGA@mail.gmail.com>
	<6d53af0e5d9d459aacec5565c49d1f6b@EX13D11UWB004.ant.amazon.com>
	<CANos97cbaHSc9uUyc6G1-SPnM7pyY0AF7D2pmEV30yGmqbS_+A@mail.gmail.com>
	<e05fc4606d4447f994abfeb25130a711@EX13D11UWB004.ant.amazon.com>
	<CANos97em5kiaScJggFf2NetwXF709-TNaxvaCdv+yQ4Wk9iDYA@mail.gmail.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<6795fa7232dd466e818b7953048e243d@EX13D11UWB004.ant.amazon.com>
	<CAL=9OGyNxb0eKf4mhS=jJTUfBNfbQvuV=sNVZ5BLNoVzVb6O6A@mail.gmail.com>
	<CANos97cSYSKc29nA-RCfFf9daVGSqEtEfNTek-mac9px04Oq0A@mail.gmail.com>
Message-ID: <CAL=9OGxQQFYeWcXMFTgAx22KSi9x2TGjrStKFGqHA1xk-wOV0Q@mail.gmail.com>

I agree and that's why I would like to propose deprecation of 'custom
header approach' as a CSRF defense.
Presently the mechanism that seems to work across applications is
validating custom header as well as a forbidden header name (that cannot be
set by a software or a program) e.g. Origin. If we want to give it a new
name like 'Double Header Validation' or something else, I'm fine with that
but custom header alone doesn't seem sufficient to mitigate CSRF issue.

There are some other best practices that should also be considered. I think
CORS is now mature enough to have a mention in the CSRF defense Also,
applications utilizing JWT token in the header seem immune to CSRF.

Please let me know what you guys think and if allowed, I can go ahead and
make some of these edits for your perusal.


On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <
dominique.righetto at owasp.org> wrote:

> Good question, I think it's more a point about to be consistent in terms
> of CSRF check across the application. Indeed, if you begin to perform
> different kind of CSRF check depending on the feature of the application
> (login, business feature, reset password...) it becomes risky and you
> significantly increase the chance to include location in which you will
> have a CSRF check weakness...
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
> <dominique.righetto at gmail.com>dominique.righetto at owasp.org
> <dominique.righetto at gmail.com>
> https://righettod.eu
> GPG: 323D19BA
>
>
> On Sat, Oct 6, 2018 at 9:51 PM Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
> wrote:
>
>> Do we know, regarding login CSRF, why validating the custom header as
>> well as the Origin/Host header is not a sufficient mitigation?
>>
>> On Fri, Sep 28, 2018 at 9:35 PM Konakandla, Manideep <mkonakan at amazon.com>
>> wrote:
>>
>>> Login CSRF is a way of exploiting CSRF on login forms (details here
>>> <https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a
>>> line about it in referrer validation section, it was not explained clearly
>>> and how it can scale with other techniques such as token based mitigation.
>>> No worries, I added a section about it!
>>>
>>>
>>>
>>> Finally, I am done with the document from my side and its sent for
>>> internal reviews now. It should take 1-2 weeks before it comes to you guys.
>>> Meanwhile, I still need help on below items from you guys. If no one was
>>> able to find references for a), we can very well remove it.
>>>
>>>
>>>
>>> a.     Under double submit cookie section, it is mentioned that DWR
>>> uses that approach but I could not find that anywhere within DWR
>>> documentation that it uses double submit cookie. Can someone help me
>>> finding reference if they know any?
>>>
>>> b.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>> in the wiki
>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>> to me like there are latest resources than the one?s linked in current
>>> cheatsheet
>>>
>>>
>>>
>>> Happy weekend folks J
>>>
>>>
>>>
>>> *From:* Jim Manico <jim at manicode.com>
>>> *Sent:* Thursday, September 27, 2018 3:02 AM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Jim Manico <
>>> jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>;
>>> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
>>> *Subject:* Re:
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> ...as for (d) I dont see any problems with passing tokens as headers or
>>> parameters
>>>
>>>
>>>
>>> I dont understand (e) can you explain that again?
>>>
>>> --
>>>
>>> Jim Manico
>>>
>>> @Manicode
>>>
>>> Secure Coding Education
>>>
>>> +1 (808) 652-3805
>>>
>>>
>>> On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com>
>>> wrote:
>>>
>>> 2 more questions added  (Jim already started helping me on #a)
>>>
>>>
>>>
>>> a.     I requested for an OWASP account and it?s still in pending. @JIM
>>> ? Can you please help me in getting my account approved? (registered with
>>> mani.konakandla at gmail.com)
>>>
>>> b.     Under double submit cookie section, it is mentioned that DWR
>>> uses that approach but I could not find that anywhere within DWR
>>> documentation that it uses double submit cookie. Can someone help me
>>> finding reference if they know any?
>>>
>>> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>> in the wiki
>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>> to me like there are latest resources than the one?s linked
>>>
>>> d.     At few places within the wiki, I have seen recommending to
>>> include token in headers for Ajax requests. I also don?t see a problem in
>>> passing them as parameters as well. Do you guys see any?
>>>
>>> e.     I also have not seen at any place within the wiki talking about
>>> login CSRF issues and how each of the techniques described can be
>>> prone/immune to it. Is there any reason for it or are we open to include
>>> that?
>>>
>>>
>>>
>>> *From:* Konakandla, Manideep
>>> *Sent:* Wednesday, September 26, 2018 5:27 PM
>>> *To:* 'Jim Manico' <jim at manicode.com>; 'Dominique Righetto' <
>>> dominique.righetto at owasp.org>
>>> *Cc:* 'Jim Manico' <jim.manico at owasp.org>; 'Dave Wichers' <
>>> dave.wichers at owasp.org>; 'eric.sheridan at owasp.org' <
>>> eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org
>>> *Subject:* RE:
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Yeah. My understanding of the breadth of exploitation of XSS in an
>>> application protected with just origin/referrer and other application
>>> protected with just token based mitigation earlier was wrong. Dominique
>>> earlier email thread cleared that to me (breadth of exploitation is same in
>>> both the cases. i.e., if an XSS vulnerability is found in any individual
>>> application protected with only one of those techniques, it still can
>>> exploit all state changing operations on entire application [though the
>>> complexity of exploitation is easy in origin/referrer check than token
>>> based mitigation]).
>>>
>>>
>>>
>>> Anyway, I am all clear and also almost done with re-factoring the
>>> cheatsheet  [1] J Should be fully completed by Friday unless something
>>> comes up meanwhile. I will then send it to my colleagues for review and
>>> then for Legal, PR approvals. Before that, I need help from you guys on
>>> below items
>>>
>>>
>>>
>>> a.     I requested for an OWASP account and it?s still in pending. @JIM
>>> ? Can you please help me in getting my account approved? (registered with
>>> mani.konakandla at gmail.com)
>>>
>>> b.     Under double submit cookie section, it is mentioned that DWR
>>> uses that approach but I could not find that anywhere within DWR
>>> documentation that it uses double submit cookie. Can someone help me
>>> finding reference if they know any?
>>>
>>> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>> in the wiki
>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>> to me like there are latest resources than the one?s linked
>>>
>>>
>>>
>>> [1] Below are changes done so far
>>>
>>> a. Switched primary, secondary defense and our reasoning behind it
>>> (added lot of reasons on issues with origin/referrer header check and why
>>> token should be made primary)
>>>
>>> b. Added CSRF mitigation myths (CORS, content-type validation etc.)
>>>
>>> c. Added a section called ?Not so popular CSRF mitigations? (mentioned
>>> details about triple submit cookie)
>>>
>>> d. Included limitations / issues associated with double submit cookie,
>>> same site cookie, captcha as a CSRF defense etc.
>>>
>>> e. Removed lot of obsolete content and added some new content to some of
>>> the mitigations
>>>
>>> f. Made document look more better by adding RFC?s links wherever
>>> possible and lot of other minor changes.
>>>
>>>
>>>
>>> *From:* Jim Manico <jim at manicode.com>
>>> *Sent:* Wednesday, September 26, 2018 4:19 PM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>; Dominique Righetto <
>>> dominique.righetto at owasp.org>
>>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>>> *Subject:* Re:
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Well tokens can be placed in cookies.
>>>
>>> The real answer to avoid CSRF is tokens in JavaScript variable as
>>> opposed to cookies. They are not automatically sent and indeed make CSRF
>>> impossible - at the expense of tokens being fully stolen via XSS. Pick your
>>> poison!
>>>
>>> I recommend a COMBO of these defenses. For web apps, sychronizer token +
>>> header verification + re-authentication for sensitive features.
>>>
>>> For API's double-cookie submit or just use JavaScript variable based
>>> tokens + header verification for same-site API's + re-authentication for
>>> sensitive features.
>>>
>>> > [1] If there is an XSS vulnerability at a single place on a domain
>>> (it can add custom header), it can be used to make CSRF *on all other
>>> state changing operationswithin that domain *done to that AJAX
>>> endpoint. Do you agree?
>>>
>>>
>>>
>>> Absolutely!
>>>
>>>
>>>
>>> On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
>>>
>>> Yeah, I understand that any XSS and CSRF game is over but I am stressing
>>> out on the highlighted part in [1]. I am trying to highlight and get an
>>> affirmation on why my understanding on token based mitigation is better
>>> than origin/referrer header check will also apply to ?token based
>>> mitigation Vs custom header mitigation (if static tokens are used in custom
>>> headers)?.
>>>
>>>
>>>
>>> In case of tokens, we have an option to use different tokens on each
>>> page (taking things like URL, timestamp etc. into consideration) and hence
>>> XSS vulnerability on one page will only make state changing operations in
>>> that page vulnerable to CSRF but not state changing operations on other
>>> pages within that domain (because token value is different) but whereas in
>>> origin/referrer header check and custom header check, the token value is
>>> constant and hence XSS vulnerability in one page will also cause state
>>> changing operations in other pages to be vulnerable to CSRF as well. Off
>>> course, this can be mitigated in custom header checks by adding tokens to
>>> custom headers rather than static constant but this cannot be mitigated in
>>> origin/referrer check because those headers cannot be modified. So, yeah a
>>> single XSS any CSRF is bypassed but the breadth of the impact is different
>>> for each of them.
>>>
>>>
>>>
>>> Regarding code samples ? I currently was able to allocate only some time
>>> for this task and I don?t think I will be able to do code samples within
>>> this time frame. I am also leaving for a long vacation starting Oct 12 and
>>> hence let?s try to get this out first and we can add code samples later on
>>> considering my work load after I return from vacation.
>>>
>>>
>>>
>>> [1] If there is an XSS vulnerability at a single place on a domain (it
>>> can add custom header), it can be used to make CSRF *on all other state
>>> changing operations* *within that domain *done to that AJAX endpoint.
>>> Do you agree?
>>>
>>>
>>>
>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>> <dominique.righetto at owasp.org>
>>> *Sent:* Thursday, September 20, 2018 8:45 AM
>>> *To:* Jim Manico <jim at manicode.com> <jim at manicode.com>
>>> *Cc:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
>>> Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave Wichers
>>> <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>>> eric.sheridan at owasp.org
>>> *Subject:* Re:
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Hi,
>>>
>>>
>>>
>>> Thanks for your contribution.
>>>
>>>
>>>
>>> I like very much your plan ?
>>>
>>>
>>>
>>> I ask for some favor in addition :
>>>
>>> - can you provide code sample (in one language like java or .net or the
>>> one you want but it must be easy to read and understand) or libraires along
>>> your proposal for each section?
>>>
>>> - can you use the syntaxhighlight tag for code?
>>>
>>>
>>>
>>> I'am agree with Jim, XSS  means game over because your browsing context
>>> can be used as proxy so csrf protection will be defeated because request
>>> came from the legitimate user.
>>>
>>>
>>>
>>> Thanks you again for all your help ???
>>>
>>>
>>>
>>> Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com> a ?crit :
>>>
>>> > If there is an XSS vulnerability at a single place on a domain (it
>>> can add custom header), it can be used to make CSRF on all other state
>>> changing operations within that domain done to that AJAX endpoint. Do you
>>> agree?
>>>
>>> Any XSS is game over and all CSRF are useless in the face of XSS. I
>>> Agree!
>>>
>>> - Jim
>>>
>>>
>>>
>>> On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
>>>
>>> Hey Guys,
>>>
>>>
>>>
>>> [1] is what I said for origin/referrer header check in this e-mail
>>> thread. I also believe that this applies for custom headers for AJAX
>>> endpoints as well. If there is an XSS vulnerability at a single place on a
>>> domain (it can add custom header), it can be used to make CSRF on all other
>>> state changing operations within that domain done to that AJAX endpoint. Do
>>> you agree?
>>>
>>>
>>>
>>> Here is how I am keeping the new re-factored cheatsheet. Does this look
>>> good to you guys?
>>>
>>>
>>>
>>> 1.       Use token based method as primary defense
>>>
>>> a.       Can use synchronizer pattern for stateful applications
>>>
>>> b.       Can use hah based/ encryption based token pattern for
>>> stateless applications
>>>
>>> 2.       Defense in depth measures along with drawbacks of each one
>>>
>>> a.       Origin/referrer header check
>>>
>>> b.       Double submit cookie
>>>
>>> c.       Samesite cookie
>>>
>>> d.       Custom headers (people still need to use tokens for forms etc.
>>> if they have mix of ajax endpoints and general HTML)
>>>
>>> 3.       Strong CSRF defenses but very less usable : captcha etc.
>>>
>>> 4.       CSRF Myths / techniques that do not work section
>>>
>>>
>>>
>>> [1] if we solely rely on origin/referrer header check - an XSS
>>> vulnerability within a single page on that domain will also give CSRF
>>> vulnerability to all other state changing operations under that entire
>>> domain.
>>>
>>>
>>>
>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>> <dominique.righetto at owasp.org>
>>> *Sent:* Wednesday, September 12, 2018 1:31 PM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>
>>> *Cc:* Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave
>>> Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>>> eric.sheridan at owasp.org
>>> *Subject:* Re:
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Hi
>>>
>>>
>>>
>>> Thanks you very much for the update
>>>
>>>
>>>
>>> Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep <mkonakan at amazon.com>
>>> a ?crit :
>>>
>>> Just an update: I started working on this along with other sprint tasks
>>> of mine today. I am hoping to get it completed by end of next week and then
>>> send it for legal/PR approvals.
>>>
>>>
>>>
>>> *From:* Jim Manico <jim.manico at owasp.org>
>>> *Sent:* Thursday, August 23, 2018 6:49 AM
>>> *To:* Dominique Righetto <dominique.righetto at owasp.org>; Konakandla,
>>> Manideep <mkonakan at amazon.com>
>>> *Cc:* Dave Wichers <dave.wichers at owasp.org>; eric.sheridan at owasp.org
>>> *Subject:* Re:
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Awesome! Thank you! :)
>>>
>>> - Jim
>>>
>>>
>>>
>>> On 8/23/18 2:41 AM, Dominique Righetto wrote:
>>>
>>> You are welcome :)
>>>
>>> --
>>> Cordialement, Best regards,
>>> Dominique Righetto
>>> dominique.righetto at gmail.com
>>>
>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>
>>> https://righettod.eu
>>> GPG: 323D19BA
>>>
>>>
>>>
>>>
>>>
>>> On Thu, Aug 23, 2018 at 10:33 AM Konakandla, Manideep <
>>> mkonakan at amazon.com> wrote:
>>>
>>> Np. I will keep u guys posted. Thanks for the support and have good rest
>>> of your day!
>>>
>>>
>>>
>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>> *Sent:* Thursday, August 23, 2018 1:29 AM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>>> *Subject:* Re:
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Hi,
>>>
>>>
>>>
>>> Sounds goods for me.
>>>
>>>
>>>
>>> Thanks again for the contribution :)
>>>
>>> --
>>> Cordialement, Best regards,
>>> Dominique Righetto
>>> dominique.righetto at gmail.com
>>>
>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>
>>> https://righettod.eu
>>> GPG: 323D19BA
>>>
>>>
>>>
>>>
>>>
>>> On Thu, Aug 23, 2018 at 10:03 AM Konakandla, Manideep <
>>> mkonakan at amazon.com> wrote:
>>>
>>> Ok, I received necessary approvals for working on this. I am hoping to
>>> start the work in 2 weeks and then deliver the document to you guys for
>>> review by end of September/1st week of October (might be 1-2 weeks
>>> delay if approvals from Legal and other teams get delayed). My plan is to
>>> work on below things ? Please let me know if I missed anything/you feel
>>> something else has to be added to this list.
>>>
>>>
>>>
>>> 1.       Change the order of primary and defense in depth measures
>>>
>>> 2.       Include the pitfalls/caveats for each CSRF mitigation
>>> technique (origin/referrer header, samesite, double submit cookie etc.)
>>>
>>> 3.       Re-structure entire page and remove outdated/ non-relevant
>>> stuff
>>>
>>>
>>>
>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>> *Sent:* Thursday, August 16, 2018 12:02 PM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>>> *Subject:* Re:
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Ok i perfectly understand.
>>>
>>> Thanks for the info.
>>>
>>>
>>>
>>> Le jeu. 16 ao?t 2018 ? 20:33, Konakandla, Manideep <mkonakan at amazon.com>
>>> a ?crit :
>>>
>>> I had an offline discussion with Jim and informed him that I will have
>>> to check few details before I give any commitment to update the guidance?s
>>> here.
>>>
>>>
>>>
>>> Update: I got approval internally from my team to work on this (fix
>>> issues and re-structure entire page) but I still need to get approval from
>>> Legal team to work on this. I will let you guys know when I hear back from
>>> them. Most likely they will ask me to just get it reviewed with them before
>>> sending it to you guys for review/get it published on OWASP page.
>>>
>>>
>>>
>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>> *Sent:* Tuesday, August 14, 2018 11:02 PM
>>> *To:* Jim Manico <jim.manico at owasp.org>
>>> *Cc:* Konakandla, Manideep <mkonakan at amazon.com>; Dave Wichers <
>>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>>> *Subject:* Re:
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Roadmap has been updated: https://trello.com/b/w020m3jQ/cs-roadmap
>>>
>>> --
>>> Cordialement, Best regards,
>>> Dominique Righetto
>>> dominique.righetto at gmail.com
>>>
>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>
>>> https://righettod.eu
>>> GPG: 323D19BA
>>>
>>>
>>>
>>>
>>>
>>> On Mon, Aug 13, 2018 at 6:03 AM Dominique Righetto <
>>> dominique.righetto at owasp.org> wrote:
>>>
>>> I have finally achieved to read the thread, very interesting  ?
>>>
>>>
>>>
>>> I understand the need to simplify the cheat sheet and the solutions
>>> proposed. It is one of the reason why i have add code sample. So this
>>> contribution is a very good point.
>>>
>>>
>>>
>>> Just a little thing about header, take care to ensure that the referrer
>>> policy of the site is not set to no-referrer otherwise you cannot use
>>> origin/referrer headers couple to create a protection layer.
>>>
>>>
>>>
>>> Tanks you for the helps proposal ?
>>>
>>>
>>>
>>>
>>>
>>> Le dim. 12 ao?t 2018 ? 22:21, Jim Manico <jim.manico at owasp.org> a
>>> ?crit :
>>>
>>> That makes sense. We're not going to get consensus but you demonstrated
>>> mastery over this material. I am impressed.
>>>
>>> Please consider yourself owner of the page and edit as you see fit. I'll
>>> keep an eye on your edits and make comments as you go.
>>>
>>> But please go ahead and charge.
>>>
>>> > I also personally don?t recommend double submit cookies for
>>> enterprises that have lot of subdomains for which they might not be sure if
>>> they are 100% secure
>>>
>>> Makes sense, but what DO you suggest for stateless services and CSRF
>>> defense?
>>>
>>> Aloha, Jim
>>>
>>>
>>>
>>> On 8/10/18 10:41 AM, Konakandla, Manideep wrote:
>>>
>>> Thanks. I also personally don?t recommend double submit cookies for
>>> enterprises that have lot of subdomains for which they might not be sure if
>>> they are 100% secure. More details are explained here
>>> <https://media.blackhat.com/eu-13/briefings/Lundeen/bh-eu-13-deputies-still-confused-lundeen-wp.pdf>
>>> (section 2.1.1). I think this is something that has to be mentioned in the
>>> wiki as well.
>>>
>>>
>>>
>>> Do we have a consensus process before we edit the page? Or current
>>> discussion is enough?  How do we want to go next? I am not quite sure at
>>> the moment if I will be able to contribute (I can let you know after
>>> checking few details).
>>>
>>>
>>>
>>> *From:* Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>
>>> *Sent:* Friday, August 10, 2018 1:23 PM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
>>> Dominique Righetto <dominique.righetto at owasp.org>
>>> <dominique.righetto at owasp.org>
>>> *Cc:* Dave Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>>> eric.sheridan at owasp.org
>>> *Subject:* Re:
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> All I'm saying is that it's a good idea to split browser standard based
>>> CSRF defense and defenses that require tokens.
>>>
>>> And you know, I am not at all opposed to making tokens the primary
>>> defense. I think that's totally fair. In fact for my words its...
>>>
>>> 1) Use a token method - either normal syncronizer tokens or
>>> double-submit-cookies for stateless services. This is the main defense in
>>> use today.
>>>
>>> 2) I also do header defense and think it's secondary. I only use headers
>>> by themselves for lower risk services and it's normally easy to deploy as
>>> long as I only need to defense posts. If get and posts transact, this
>>> becomes tough to deploy.
>>>
>>> 3) I always use the samesite cookie for single-domain applications. This
>>> gets weird in mash-up cases.
>>>
>>> So yea, I am totally ok for moving tokens to the primary defense of this
>>> guide.
>>>
>>> - Jim
>>>
>>> On 8/10/18 10:16 AM, Konakandla, Manideep wrote:
>>>
>>> *This is a false argument. *
>>>
>>> >> I am not sure if you got the context there. It was is in response to
>>> Dominique statement which said that we are delegating part of protection to
>>> browsers if we solely reply on referrer/origin headers properly and hence
>>> we need to depend on token as well (for which you +1?ed). I am confused now
>>> that you are saying it as an browser standard (which means nothing should
>>> wrong and we don?t need to worry about delegating protection to browser).
>>> The discussion was also about browsers handling the data. Origin/referrer
>>> header check is not easy deployment as well (considering proxies,
>>> individual domains when a company has, around 50+ subdomains etc.). I feel
>>> token mitigation is more easy using some OWASP libraries that provide
>>> auto-tokening (this anyway is my personal opinion).
>>>
>>> One more thing we need to remember is that, if we solely rely on
>>> origin/referrer header check - an XSS vulnerability within a single page on
>>> that domain will also give CSRF vulnerability to all other state changing
>>> operations under that entire domain. Considering that and also that
>>> depending on browsers to send origin/referrer header ? I feel token should
>>> be used as a primary mitigation and origin/referrer header check as
>>> defense-in-depth. Do we have any similar issues for tokens? If not ? maybe
>>> we should just do that. Either ways, it?s just my opinion ? if there is no
>>> consensus for it, we can just stop the debate and let it be the way it is.
>>> I will be more than happy to always learn if there is something that I am
>>> missing J
>>>
>>> *> **Also, I know that samesite cookie itself is not supported on all
>>> browsers but I?m more looking towards the text written on the wiki
>>> (provides some protection against cross-site request forgery attacks), is
>>> the ?some? here refers to the partial support of the browsers? ? Yes*
>>>
>>> It frankly does not provide that impression here. When me/couple of
>>> other colleagues/friends of mine read it, we were thinking on the angle of
>>> issue with the technology itself. I will be more than happy to edit it if
>>> you guys agree or else again ? we can just let the way it is :)
>>>
>>>
>>>
>>> *From:* Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>
>>> *Sent:* Friday, August 10, 2018 12:51 PM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
>>> Dominique Righetto <dominique.righetto at owasp.org>
>>> <dominique.righetto at owasp.org>
>>> *Cc:* Dave Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>>> eric.sheridan at owasp.org
>>> *Subject:* Re:
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> > In a sense/In fact, we rely on browsers to protect CSRF tokens as
>>> well ? so if we do not trust browsers for sending referrer/origin headers
>>> properly, we shouldn?t be trusting them to secure our tokens
>>>
>>> This is a false argument. One of these is fully controlled by the
>>> browser via browser standards, one of these is controlled by individual
>>> programmers.
>>>
>>> > Unless there is anything additional that origin/referrer header check
>>> provides that?s not provided by token based mitigation
>>>
>>> What it also provides is VERY easy deployment capabilities like the same
>>> site token. One of these is based on browser standards and again tokens
>>>
>>>
>>>
>>> --
>>>
>>> Jim Manico
>>>
>>> Manicode Security
>>>
>>> https://www.manicode.com
>>>
>>> _______________________________________________
>>> OWASP-cheat-sheets mailing list
>>> OWASP-cheat-sheets at lists.owasp.org
>>> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>>
>> _______________________________________________
>> OWASP-cheat-sheets mailing list
>> OWASP-cheat-sheets at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181007/86b7a72f/attachment-0001.html>

From dominique.righetto at owasp.org  Sun Oct  7 17:29:12 2018
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Sun, 7 Oct 2018 19:29:12 +0200
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CAL=9OGxQQFYeWcXMFTgAx22KSi9x2TGjrStKFGqHA1xk-wOV0Q@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<CANos97dDU1AZh3DV=3oLZefvLp3pW80ib6nDz9Qw6FVj3OPeqg@mail.gmail.com>
	<babd67cd35484563936bd0326fda0518@EX13D11UWB004.ant.amazon.com>
	<CANos97dEyEOiExVrJ1qGr4uDbOMraRtQK9+U61jugoSc7PBPGA@mail.gmail.com>
	<6d53af0e5d9d459aacec5565c49d1f6b@EX13D11UWB004.ant.amazon.com>
	<CANos97cbaHSc9uUyc6G1-SPnM7pyY0AF7D2pmEV30yGmqbS_+A@mail.gmail.com>
	<e05fc4606d4447f994abfeb25130a711@EX13D11UWB004.ant.amazon.com>
	<CANos97em5kiaScJggFf2NetwXF709-TNaxvaCdv+yQ4Wk9iDYA@mail.gmail.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<6795fa7232dd466e818b7953048e243d@EX13D11UWB004.ant.amazon.com>
	<CAL=9OGyNxb0eKf4mhS=jJTUfBNfbQvuV=sNVZ5BLNoVzVb6O6A@mail.gmail.com>
	<CANos97cSYSKc29nA-RCfFf9daVGSqEtEfNTek-mac9px04Oq0A@mail.gmail.com>
	<CAL=9OGxQQFYeWcXMFTgAx22KSi9x2TGjrStKFGqHA1xk-wOV0Q@mail.gmail.com>
Message-ID: <CANos97dPDUv6n4y4Fis1uFBsZ7q-XEM_vzcRE20oghih321buw@mail.gmail.com>

Go ahead and update the wiki page with your work please ?

Le dim. 7 oct. 2018 ? 18:48, Pankaj Upadhyay <p.upadhyay9999 at gmail.com> a
?crit :

> I agree and that's why I would like to propose deprecation of 'custom
> header approach' as a CSRF defense.
> Presently the mechanism that seems to work across applications is
> validating custom header as well as a forbidden header name (that cannot be
> set by a software or a program) e.g. Origin. If we want to give it a new
> name like 'Double Header Validation' or something else, I'm fine with that
> but custom header alone doesn't seem sufficient to mitigate CSRF issue.
>
> There are some other best practices that should also be considered. I
> think CORS is now mature enough to have a mention in the CSRF defense Also,
> applications utilizing JWT token in the header seem immune to CSRF.
>
> Please let me know what you guys think and if allowed, I can go ahead and
> make some of these edits for your perusal.
>
>
> On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <
> dominique.righetto at owasp.org> wrote:
>
>> Good question, I think it's more a point about to be consistent in terms
>> of CSRF check across the application. Indeed, if you begin to perform
>> different kind of CSRF check depending on the feature of the application
>> (login, business feature, reset password...) it becomes risky and you
>> significantly increase the chance to include location in which you will
>> have a CSRF check weakness...
>> --
>> Cordialement, Best regards,
>> Dominique Righetto
>> dominique.righetto at gmail.com
>> <dominique.righetto at gmail.com>dominique.righetto at owasp.org
>> <dominique.righetto at gmail.com>
>> https://righettod.eu
>> GPG: 323D19BA
>>
>>
>> On Sat, Oct 6, 2018 at 9:51 PM Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>> wrote:
>>
>>> Do we know, regarding login CSRF, why validating the custom header as
>>> well as the Origin/Host header is not a sufficient mitigation?
>>>
>>> On Fri, Sep 28, 2018 at 9:35 PM Konakandla, Manideep <
>>> mkonakan at amazon.com> wrote:
>>>
>>>> Login CSRF is a way of exploiting CSRF on login forms (details here
>>>> <https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a
>>>> line about it in referrer validation section, it was not explained clearly
>>>> and how it can scale with other techniques such as token based mitigation.
>>>> No worries, I added a section about it!
>>>>
>>>>
>>>>
>>>> Finally, I am done with the document from my side and its sent for
>>>> internal reviews now. It should take 1-2 weeks before it comes to you guys.
>>>> Meanwhile, I still need help on below items from you guys. If no one was
>>>> able to find references for a), we can very well remove it.
>>>>
>>>>
>>>>
>>>> a.     Under double submit cookie section, it is mentioned that DWR
>>>> uses that approach but I could not find that anywhere within DWR
>>>> documentation that it uses double submit cookie. Can someone help me
>>>> finding reference if they know any?
>>>>
>>>> b.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>>> in the wiki
>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>>> to me like there are latest resources than the one?s linked in current
>>>> cheatsheet
>>>>
>>>>
>>>>
>>>> Happy weekend folks J
>>>>
>>>>
>>>>
>>>> *From:* Jim Manico <jim at manicode.com>
>>>> *Sent:* Thursday, September 27, 2018 3:02 AM
>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Jim Manico <
>>>> jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>;
>>>> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
>>>> *Subject:* Re:
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> ...as for (d) I dont see any problems with passing tokens as headers or
>>>> parameters
>>>>
>>>>
>>>>
>>>> I dont understand (e) can you explain that again?
>>>>
>>>> --
>>>>
>>>> Jim Manico
>>>>
>>>> @Manicode
>>>>
>>>> Secure Coding Education
>>>>
>>>> +1 (808) 652-3805
>>>>
>>>>
>>>> On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com>
>>>> wrote:
>>>>
>>>> 2 more questions added  (Jim already started helping me on #a)
>>>>
>>>>
>>>>
>>>> a.     I requested for an OWASP account and it?s still in pending.
>>>> @JIM ? Can you please help me in getting my account approved? (registered
>>>> with mani.konakandla at gmail.com)
>>>>
>>>> b.     Under double submit cookie section, it is mentioned that DWR
>>>> uses that approach but I could not find that anywhere within DWR
>>>> documentation that it uses double submit cookie. Can someone help me
>>>> finding reference if they know any?
>>>>
>>>> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>>> in the wiki
>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>>> to me like there are latest resources than the one?s linked
>>>>
>>>> d.     At few places within the wiki, I have seen recommending to
>>>> include token in headers for Ajax requests. I also don?t see a problem in
>>>> passing them as parameters as well. Do you guys see any?
>>>>
>>>> e.     I also have not seen at any place within the wiki talking about
>>>> login CSRF issues and how each of the techniques described can be
>>>> prone/immune to it. Is there any reason for it or are we open to include
>>>> that?
>>>>
>>>>
>>>>
>>>> *From:* Konakandla, Manideep
>>>> *Sent:* Wednesday, September 26, 2018 5:27 PM
>>>> *To:* 'Jim Manico' <jim at manicode.com>; 'Dominique Righetto' <
>>>> dominique.righetto at owasp.org>
>>>> *Cc:* 'Jim Manico' <jim.manico at owasp.org>; 'Dave Wichers' <
>>>> dave.wichers at owasp.org>; 'eric.sheridan at owasp.org' <
>>>> eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org
>>>> *Subject:* RE:
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> Yeah. My understanding of the breadth of exploitation of XSS in an
>>>> application protected with just origin/referrer and other application
>>>> protected with just token based mitigation earlier was wrong. Dominique
>>>> earlier email thread cleared that to me (breadth of exploitation is same in
>>>> both the cases. i.e., if an XSS vulnerability is found in any individual
>>>> application protected with only one of those techniques, it still can
>>>> exploit all state changing operations on entire application [though the
>>>> complexity of exploitation is easy in origin/referrer check than token
>>>> based mitigation]).
>>>>
>>>>
>>>>
>>>> Anyway, I am all clear and also almost done with re-factoring the
>>>> cheatsheet  [1] J Should be fully completed by Friday unless something
>>>> comes up meanwhile. I will then send it to my colleagues for review and
>>>> then for Legal, PR approvals. Before that, I need help from you guys on
>>>> below items
>>>>
>>>>
>>>>
>>>> a.     I requested for an OWASP account and it?s still in pending.
>>>> @JIM ? Can you please help me in getting my account approved? (registered
>>>> with mani.konakandla at gmail.com)
>>>>
>>>> b.     Under double submit cookie section, it is mentioned that DWR
>>>> uses that approach but I could not find that anywhere within DWR
>>>> documentation that it uses double submit cookie. Can someone help me
>>>> finding reference if they know any?
>>>>
>>>> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>>> in the wiki
>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>>> to me like there are latest resources than the one?s linked
>>>>
>>>>
>>>>
>>>> [1] Below are changes done so far
>>>>
>>>> a. Switched primary, secondary defense and our reasoning behind it
>>>> (added lot of reasons on issues with origin/referrer header check and why
>>>> token should be made primary)
>>>>
>>>> b. Added CSRF mitigation myths (CORS, content-type validation etc.)
>>>>
>>>> c. Added a section called ?Not so popular CSRF mitigations? (mentioned
>>>> details about triple submit cookie)
>>>>
>>>> d. Included limitations / issues associated with double submit cookie,
>>>> same site cookie, captcha as a CSRF defense etc.
>>>>
>>>> e. Removed lot of obsolete content and added some new content to some
>>>> of the mitigations
>>>>
>>>> f. Made document look more better by adding RFC?s links wherever
>>>> possible and lot of other minor changes.
>>>>
>>>>
>>>>
>>>> *From:* Jim Manico <jim at manicode.com>
>>>> *Sent:* Wednesday, September 26, 2018 4:19 PM
>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>; Dominique Righetto <
>>>> dominique.righetto at owasp.org>
>>>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>>>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>>>> *Subject:* Re:
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> Well tokens can be placed in cookies.
>>>>
>>>> The real answer to avoid CSRF is tokens in JavaScript variable as
>>>> opposed to cookies. They are not automatically sent and indeed make CSRF
>>>> impossible - at the expense of tokens being fully stolen via XSS. Pick your
>>>> poison!
>>>>
>>>> I recommend a COMBO of these defenses. For web apps, sychronizer token
>>>> + header verification + re-authentication for sensitive features.
>>>>
>>>> For API's double-cookie submit or just use JavaScript variable based
>>>> tokens + header verification for same-site API's + re-authentication for
>>>> sensitive features.
>>>>
>>>> > [1] If there is an XSS vulnerability at a single place on a domain
>>>> (it can add custom header), it can be used to make CSRF *on all other
>>>> state changing operationswithin that domain *done to that AJAX
>>>> endpoint. Do you agree?
>>>>
>>>>
>>>>
>>>> Absolutely!
>>>>
>>>>
>>>>
>>>> On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
>>>>
>>>> Yeah, I understand that any XSS and CSRF game is over but I am
>>>> stressing out on the highlighted part in [1]. I am trying to highlight and
>>>> get an affirmation on why my understanding on token based mitigation is
>>>> better than origin/referrer header check will also apply to ?token based
>>>> mitigation Vs custom header mitigation (if static tokens are used in custom
>>>> headers)?.
>>>>
>>>>
>>>>
>>>> In case of tokens, we have an option to use different tokens on each
>>>> page (taking things like URL, timestamp etc. into consideration) and hence
>>>> XSS vulnerability on one page will only make state changing operations in
>>>> that page vulnerable to CSRF but not state changing operations on other
>>>> pages within that domain (because token value is different) but whereas in
>>>> origin/referrer header check and custom header check, the token value is
>>>> constant and hence XSS vulnerability in one page will also cause state
>>>> changing operations in other pages to be vulnerable to CSRF as well. Off
>>>> course, this can be mitigated in custom header checks by adding tokens to
>>>> custom headers rather than static constant but this cannot be mitigated in
>>>> origin/referrer check because those headers cannot be modified. So, yeah a
>>>> single XSS any CSRF is bypassed but the breadth of the impact is different
>>>> for each of them.
>>>>
>>>>
>>>>
>>>> Regarding code samples ? I currently was able to allocate only some
>>>> time for this task and I don?t think I will be able to do code samples
>>>> within this time frame. I am also leaving for a long vacation starting Oct
>>>> 12 and hence let?s try to get this out first and we can add code samples
>>>> later on considering my work load after I return from vacation.
>>>>
>>>>
>>>>
>>>> [1] If there is an XSS vulnerability at a single place on a domain (it
>>>> can add custom header), it can be used to make CSRF *on all other
>>>> state changing operations* *within that domain *done to that AJAX
>>>> endpoint. Do you agree?
>>>>
>>>>
>>>>
>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>> <dominique.righetto at owasp.org>
>>>> *Sent:* Thursday, September 20, 2018 8:45 AM
>>>> *To:* Jim Manico <jim at manicode.com> <jim at manicode.com>
>>>> *Cc:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
>>>> Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave Wichers
>>>> <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>>>> eric.sheridan at owasp.org
>>>> *Subject:* Re:
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> Hi,
>>>>
>>>>
>>>>
>>>> Thanks for your contribution.
>>>>
>>>>
>>>>
>>>> I like very much your plan ?
>>>>
>>>>
>>>>
>>>> I ask for some favor in addition :
>>>>
>>>> - can you provide code sample (in one language like java or .net or the
>>>> one you want but it must be easy to read and understand) or libraires along
>>>> your proposal for each section?
>>>>
>>>> - can you use the syntaxhighlight tag for code?
>>>>
>>>>
>>>>
>>>> I'am agree with Jim, XSS  means game over because your browsing context
>>>> can be used as proxy so csrf protection will be defeated because request
>>>> came from the legitimate user.
>>>>
>>>>
>>>>
>>>> Thanks you again for all your help ???
>>>>
>>>>
>>>>
>>>> Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com> a ?crit :
>>>>
>>>> > If there is an XSS vulnerability at a single place on a domain (it
>>>> can add custom header), it can be used to make CSRF on all other state
>>>> changing operations within that domain done to that AJAX endpoint. Do you
>>>> agree?
>>>>
>>>> Any XSS is game over and all CSRF are useless in the face of XSS. I
>>>> Agree!
>>>>
>>>> - Jim
>>>>
>>>>
>>>>
>>>> On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
>>>>
>>>> Hey Guys,
>>>>
>>>>
>>>>
>>>> [1] is what I said for origin/referrer header check in this e-mail
>>>> thread. I also believe that this applies for custom headers for AJAX
>>>> endpoints as well. If there is an XSS vulnerability at a single place on a
>>>> domain (it can add custom header), it can be used to make CSRF on all other
>>>> state changing operations within that domain done to that AJAX endpoint. Do
>>>> you agree?
>>>>
>>>>
>>>>
>>>> Here is how I am keeping the new re-factored cheatsheet. Does this look
>>>> good to you guys?
>>>>
>>>>
>>>>
>>>> 1.       Use token based method as primary defense
>>>>
>>>> a.       Can use synchronizer pattern for stateful applications
>>>>
>>>> b.       Can use hah based/ encryption based token pattern for
>>>> stateless applications
>>>>
>>>> 2.       Defense in depth measures along with drawbacks of each one
>>>>
>>>> a.       Origin/referrer header check
>>>>
>>>> b.       Double submit cookie
>>>>
>>>> c.       Samesite cookie
>>>>
>>>> d.       Custom headers (people still need to use tokens for forms
>>>> etc. if they have mix of ajax endpoints and general HTML)
>>>>
>>>> 3.       Strong CSRF defenses but very less usable : captcha etc.
>>>>
>>>> 4.       CSRF Myths / techniques that do not work section
>>>>
>>>>
>>>>
>>>> [1] if we solely rely on origin/referrer header check - an XSS
>>>> vulnerability within a single page on that domain will also give CSRF
>>>> vulnerability to all other state changing operations under that entire
>>>> domain.
>>>>
>>>>
>>>>
>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>> <dominique.righetto at owasp.org>
>>>> *Sent:* Wednesday, September 12, 2018 1:31 PM
>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>
>>>> *Cc:* Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave
>>>> Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>>>> eric.sheridan at owasp.org
>>>> *Subject:* Re:
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> Hi
>>>>
>>>>
>>>>
>>>> Thanks you very much for the update
>>>>
>>>>
>>>>
>>>> Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep <
>>>> mkonakan at amazon.com> a ?crit :
>>>>
>>>> Just an update: I started working on this along with other sprint tasks
>>>> of mine today. I am hoping to get it completed by end of next week and then
>>>> send it for legal/PR approvals.
>>>>
>>>>
>>>>
>>>> *From:* Jim Manico <jim.manico at owasp.org>
>>>> *Sent:* Thursday, August 23, 2018 6:49 AM
>>>> *To:* Dominique Righetto <dominique.righetto at owasp.org>; Konakandla,
>>>> Manideep <mkonakan at amazon.com>
>>>> *Cc:* Dave Wichers <dave.wichers at owasp.org>; eric.sheridan at owasp.org
>>>> *Subject:* Re:
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> Awesome! Thank you! :)
>>>>
>>>> - Jim
>>>>
>>>>
>>>>
>>>> On 8/23/18 2:41 AM, Dominique Righetto wrote:
>>>>
>>>> You are welcome :)
>>>>
>>>> --
>>>> Cordialement, Best regards,
>>>> Dominique Righetto
>>>> dominique.righetto at gmail.com
>>>>
>>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>>
>>>> https://righettod.eu
>>>> GPG: 323D19BA
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> On Thu, Aug 23, 2018 at 10:33 AM Konakandla, Manideep <
>>>> mkonakan at amazon.com> wrote:
>>>>
>>>> Np. I will keep u guys posted. Thanks for the support and have good
>>>> rest of your day!
>>>>
>>>>
>>>>
>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>> *Sent:* Thursday, August 23, 2018 1:29 AM
>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>>>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>>>> *Subject:* Re:
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> Hi,
>>>>
>>>>
>>>>
>>>> Sounds goods for me.
>>>>
>>>>
>>>>
>>>> Thanks again for the contribution :)
>>>>
>>>> --
>>>> Cordialement, Best regards,
>>>> Dominique Righetto
>>>> dominique.righetto at gmail.com
>>>>
>>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>>
>>>> https://righettod.eu
>>>> GPG: 323D19BA
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> On Thu, Aug 23, 2018 at 10:03 AM Konakandla, Manideep <
>>>> mkonakan at amazon.com> wrote:
>>>>
>>>> Ok, I received necessary approvals for working on this. I am hoping to
>>>> start the work in 2 weeks and then deliver the document to you guys for
>>>> review by end of September/1st week of October (might be 1-2 weeks
>>>> delay if approvals from Legal and other teams get delayed). My plan is to
>>>> work on below things ? Please let me know if I missed anything/you feel
>>>> something else has to be added to this list.
>>>>
>>>>
>>>>
>>>> 1.       Change the order of primary and defense in depth measures
>>>>
>>>> 2.       Include the pitfalls/caveats for each CSRF mitigation
>>>> technique (origin/referrer header, samesite, double submit cookie etc.)
>>>>
>>>> 3.       Re-structure entire page and remove outdated/ non-relevant
>>>> stuff
>>>>
>>>>
>>>>
>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>> *Sent:* Thursday, August 16, 2018 12:02 PM
>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>>>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>>>> *Subject:* Re:
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> Ok i perfectly understand.
>>>>
>>>> Thanks for the info.
>>>>
>>>>
>>>>
>>>> Le jeu. 16 ao?t 2018 ? 20:33, Konakandla, Manideep <mkonakan at amazon.com>
>>>> a ?crit :
>>>>
>>>> I had an offline discussion with Jim and informed him that I will have
>>>> to check few details before I give any commitment to update the guidance?s
>>>> here.
>>>>
>>>>
>>>>
>>>> Update: I got approval internally from my team to work on this (fix
>>>> issues and re-structure entire page) but I still need to get approval from
>>>> Legal team to work on this. I will let you guys know when I hear back from
>>>> them. Most likely they will ask me to just get it reviewed with them before
>>>> sending it to you guys for review/get it published on OWASP page.
>>>>
>>>>
>>>>
>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>> *Sent:* Tuesday, August 14, 2018 11:02 PM
>>>> *To:* Jim Manico <jim.manico at owasp.org>
>>>> *Cc:* Konakandla, Manideep <mkonakan at amazon.com>; Dave Wichers <
>>>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>>>> *Subject:* Re:
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> Roadmap has been updated: https://trello.com/b/w020m3jQ/cs-roadmap
>>>>
>>>> --
>>>> Cordialement, Best regards,
>>>> Dominique Righetto
>>>> dominique.righetto at gmail.com
>>>>
>>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>>
>>>> https://righettod.eu
>>>> GPG: 323D19BA
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> On Mon, Aug 13, 2018 at 6:03 AM Dominique Righetto <
>>>> dominique.righetto at owasp.org> wrote:
>>>>
>>>> I have finally achieved to read the thread, very interesting  ?
>>>>
>>>>
>>>>
>>>> I understand the need to simplify the cheat sheet and the solutions
>>>> proposed. It is one of the reason why i have add code sample. So this
>>>> contribution is a very good point.
>>>>
>>>>
>>>>
>>>> Just a little thing about header, take care to ensure that the referrer
>>>> policy of the site is not set to no-referrer otherwise you cannot use
>>>> origin/referrer headers couple to create a protection layer.
>>>>
>>>>
>>>>
>>>> Tanks you for the helps proposal ?
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> Le dim. 12 ao?t 2018 ? 22:21, Jim Manico <jim.manico at owasp.org> a
>>>> ?crit :
>>>>
>>>> That makes sense. We're not going to get consensus but you demonstrated
>>>> mastery over this material. I am impressed.
>>>>
>>>> Please consider yourself owner of the page and edit as you see fit.
>>>> I'll keep an eye on your edits and make comments as you go.
>>>>
>>>> But please go ahead and charge.
>>>>
>>>> > I also personally don?t recommend double submit cookies for
>>>> enterprises that have lot of subdomains for which they might not be sure if
>>>> they are 100% secure
>>>>
>>>> Makes sense, but what DO you suggest for stateless services and CSRF
>>>> defense?
>>>>
>>>> Aloha, Jim
>>>>
>>>>
>>>>
>>>> On 8/10/18 10:41 AM, Konakandla, Manideep wrote:
>>>>
>>>> Thanks. I also personally don?t recommend double submit cookies for
>>>> enterprises that have lot of subdomains for which they might not be sure if
>>>> they are 100% secure. More details are explained here
>>>> <https://media.blackhat.com/eu-13/briefings/Lundeen/bh-eu-13-deputies-still-confused-lundeen-wp.pdf>
>>>> (section 2.1.1). I think this is something that has to be mentioned in the
>>>> wiki as well.
>>>>
>>>>
>>>>
>>>> Do we have a consensus process before we edit the page? Or current
>>>> discussion is enough?  How do we want to go next? I am not quite sure at
>>>> the moment if I will be able to contribute (I can let you know after
>>>> checking few details).
>>>>
>>>>
>>>>
>>>> *From:* Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>
>>>> *Sent:* Friday, August 10, 2018 1:23 PM
>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
>>>> Dominique Righetto <dominique.righetto at owasp.org>
>>>> <dominique.righetto at owasp.org>
>>>> *Cc:* Dave Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>>>> eric.sheridan at owasp.org
>>>> *Subject:* Re:
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> All I'm saying is that it's a good idea to split browser standard based
>>>> CSRF defense and defenses that require tokens.
>>>>
>>>> And you know, I am not at all opposed to making tokens the primary
>>>> defense. I think that's totally fair. In fact for my words its...
>>>>
>>>> 1) Use a token method - either normal syncronizer tokens or
>>>> double-submit-cookies for stateless services. This is the main defense in
>>>> use today.
>>>>
>>>> 2) I also do header defense and think it's secondary. I only use
>>>> headers by themselves for lower risk services and it's normally easy to
>>>> deploy as long as I only need to defense posts. If get and posts transact,
>>>> this becomes tough to deploy.
>>>>
>>>> 3) I always use the samesite cookie for single-domain applications.
>>>> This gets weird in mash-up cases.
>>>>
>>>> So yea, I am totally ok for moving tokens to the primary defense of
>>>> this guide.
>>>>
>>>> - Jim
>>>>
>>>> On 8/10/18 10:16 AM, Konakandla, Manideep wrote:
>>>>
>>>> *This is a false argument. *
>>>>
>>>> >> I am not sure if you got the context there. It was is in response to
>>>> Dominique statement which said that we are delegating part of protection to
>>>> browsers if we solely reply on referrer/origin headers properly and hence
>>>> we need to depend on token as well (for which you +1?ed). I am confused now
>>>> that you are saying it as an browser standard (which means nothing should
>>>> wrong and we don?t need to worry about delegating protection to browser).
>>>> The discussion was also about browsers handling the data. Origin/referrer
>>>> header check is not easy deployment as well (considering proxies,
>>>> individual domains when a company has, around 50+ subdomains etc.). I feel
>>>> token mitigation is more easy using some OWASP libraries that provide
>>>> auto-tokening (this anyway is my personal opinion).
>>>>
>>>> One more thing we need to remember is that, if we solely rely on
>>>> origin/referrer header check - an XSS vulnerability within a single page on
>>>> that domain will also give CSRF vulnerability to all other state changing
>>>> operations under that entire domain. Considering that and also that
>>>> depending on browsers to send origin/referrer header ? I feel token should
>>>> be used as a primary mitigation and origin/referrer header check as
>>>> defense-in-depth. Do we have any similar issues for tokens? If not ? maybe
>>>> we should just do that. Either ways, it?s just my opinion ? if there is no
>>>> consensus for it, we can just stop the debate and let it be the way it is.
>>>> I will be more than happy to always learn if there is something that I am
>>>> missing J
>>>>
>>>> *> **Also, I know that samesite cookie itself is not supported on all
>>>> browsers but I?m more looking towards the text written on the wiki
>>>> (provides some protection against cross-site request forgery attacks), is
>>>> the ?some? here refers to the partial support of the browsers? ? Yes*
>>>>
>>>> It frankly does not provide that impression here. When me/couple of
>>>> other colleagues/friends of mine read it, we were thinking on the angle of
>>>> issue with the technology itself. I will be more than happy to edit it if
>>>> you guys agree or else again ? we can just let the way it is :)
>>>>
>>>>
>>>>
>>>> *From:* Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>
>>>> *Sent:* Friday, August 10, 2018 12:51 PM
>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
>>>> Dominique Righetto <dominique.righetto at owasp.org>
>>>> <dominique.righetto at owasp.org>
>>>> *Cc:* Dave Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>>>> eric.sheridan at owasp.org
>>>> *Subject:* Re:
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> > In a sense/In fact, we rely on browsers to protect CSRF tokens as
>>>> well ? so if we do not trust browsers for sending referrer/origin headers
>>>> properly, we shouldn?t be trusting them to secure our tokens
>>>>
>>>> This is a false argument. One of these is fully controlled by the
>>>> browser via browser standards, one of these is controlled by individual
>>>> programmers.
>>>>
>>>> > Unless there is anything additional that origin/referrer header check
>>>> provides that?s not provided by token based mitigation
>>>>
>>>> What it also provides is VERY easy deployment capabilities like the
>>>> same site token. One of these is based on browser standards and again
>>>> tokens
>>>>
>>>>
>>>>
>>>> --
>>>>
>>>> Jim Manico
>>>>
>>>> Manicode Security
>>>>
>>>> https://www.manicode.com
>>>>
>>>> _______________________________________________
>>>> OWASP-cheat-sheets mailing list
>>>> OWASP-cheat-sheets at lists.owasp.org
>>>> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>>>
>>> _______________________________________________
>>> OWASP-cheat-sheets mailing list
>>> OWASP-cheat-sheets at lists.owasp.org
>>> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181007/07c8c24e/attachment-0001.html>

From dominique.righetto at owasp.org  Sun Oct  7 20:12:53 2018
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Sun, 7 Oct 2018 22:12:53 +0200
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CAL=9OGy0jP6OfLNoeTYW9k=2q5H9qdq78PkkNvbs6+zgAbaQ6Q@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<6795fa7232dd466e818b7953048e243d@EX13D11UWB004.ant.amazon.com>
	<CAL=9OGyNxb0eKf4mhS=jJTUfBNfbQvuV=sNVZ5BLNoVzVb6O6A@mail.gmail.com>
	<CANos97cSYSKc29nA-RCfFf9daVGSqEtEfNTek-mac9px04Oq0A@mail.gmail.com>
	<CAL=9OGxQQFYeWcXMFTgAx22KSi9x2TGjrStKFGqHA1xk-wOV0Q@mail.gmail.com>
	<136d2b2c-ef34-6e7f-0870-c4b61cdf4379@manicode.com>
	<CAL=9OGy0jP6OfLNoeTYW9k=2q5H9qdq78PkkNvbs6+zgAbaQ6Q@mail.gmail.com>
Message-ID: <CANos97esCWvdW58rw5ZC+NHpLT1gwUwQWOd=+_BqPr5HPaiU_w@mail.gmail.com>

Sync your update with one from Konakandla Manideep please ?

Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com> a
?crit :

> Aloha Jim!
> With XSS, even CSRF tokens can be stolen :).
> But I'll keep your tip in mind when editing the wiki. I'm planning to do
> that sometime this month.
> Please feel free to review it whenever you guys get a chance.
>
> Best,
> Pankaj
>
>
> On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com> wrote:
>
>> I agree JWT's architectures *where cookies are not involved* are
>> resistant to CSRF but those tokens are at the risk of being stolen over XSS!
>>
>> The Origin header does not go with all requests and FireFox does not
>> fully support it yet. So careful!
>>
>> :)
>>
>> On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
>>
>> I agree and that's why I would like to propose deprecation of 'custom
>> header approach' as a CSRF defense.
>> Presently the mechanism that seems to work across applications is
>> validating custom header as well as a forbidden header name (that cannot be
>> set by a software or a program) e.g. Origin. If we want to give it a new
>> name like 'Double Header Validation' or something else, I'm fine with that
>> but custom header alone doesn't seem sufficient to mitigate CSRF issue.
>>
>> There are some other best practices that should also be considered. I
>> think CORS is now mature enough to have a mention in the CSRF defense Also,
>> applications utilizing JWT token in the header seem immune to CSRF.
>>
>> Please let me know what you guys think and if allowed, I can go ahead and
>> make some of these edits for your perusal.
>>
>>
>> On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <
>> dominique.righetto at owasp.org> wrote:
>>
>>> Good question, I think it's more a point about to be consistent in terms
>>> of CSRF check across the application. Indeed, if you begin to perform
>>> different kind of CSRF check depending on the feature of the application
>>> (login, business feature, reset password...) it becomes risky and you
>>> significantly increase the chance to include location in which you will
>>> have a CSRF check weakness...
>>> --
>>> Cordialement, Best regards,
>>> Dominique Righetto
>>> dominique.righetto at gmail.com
>>> <dominique.righetto at gmail.com>dominique.righetto at owasp.org
>>> <dominique.righetto at gmail.com>
>>> https://righettod.eu
>>> GPG: 323D19BA
>>>
>>>
>>> On Sat, Oct 6, 2018 at 9:51 PM Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>>> wrote:
>>>
>>>> Do we know, regarding login CSRF, why validating the custom header as
>>>> well as the Origin/Host header is not a sufficient mitigation?
>>>>
>>>> On Fri, Sep 28, 2018 at 9:35 PM Konakandla, Manideep <
>>>> mkonakan at amazon.com> wrote:
>>>>
>>>>> Login CSRF is a way of exploiting CSRF on login forms (details here
>>>>> <https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is
>>>>> a line about it in referrer validation section, it was not explained
>>>>> clearly and how it can scale with other techniques such as token based
>>>>> mitigation. No worries, I added a section about it!
>>>>>
>>>>>
>>>>>
>>>>> Finally, I am done with the document from my side and its sent for
>>>>> internal reviews now. It should take 1-2 weeks before it comes to you guys.
>>>>> Meanwhile, I still need help on below items from you guys. If no one was
>>>>> able to find references for a), we can very well remove it.
>>>>>
>>>>>
>>>>>
>>>>> a.     Under double submit cookie section, it is mentioned that DWR
>>>>> uses that approach but I could not find that anywhere within DWR
>>>>> documentation that it uses double submit cookie. Can someone help me
>>>>> finding reference if they know any?
>>>>>
>>>>> b.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>>>> in the wiki
>>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>>>> to me like there are latest resources than the one?s linked in current
>>>>> cheatsheet
>>>>>
>>>>>
>>>>>
>>>>> Happy weekend folks J
>>>>>
>>>>>
>>>>>
>>>>> *From:* Jim Manico <jim at manicode.com>
>>>>> *Sent:* Thursday, September 27, 2018 3:02 AM
>>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>>> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Jim Manico <
>>>>> jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>;
>>>>> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
>>>>> *Subject:* Re:
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> ...as for (d) I dont see any problems with passing tokens as headers
>>>>> or parameters
>>>>>
>>>>>
>>>>>
>>>>> I dont understand (e) can you explain that again?
>>>>>
>>>>> --
>>>>>
>>>>> Jim Manico
>>>>>
>>>>> @Manicode
>>>>>
>>>>> Secure Coding Education
>>>>>
>>>>> +1 (808) 652-3805
>>>>>
>>>>>
>>>>> On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com>
>>>>> wrote:
>>>>>
>>>>> 2 more questions added  (Jim already started helping me on #a)
>>>>>
>>>>>
>>>>>
>>>>> a.     I requested for an OWASP account and it?s still in pending.
>>>>> @JIM ? Can you please help me in getting my account approved? (registered
>>>>> with mani.konakandla at gmail.com)
>>>>>
>>>>> b.     Under double submit cookie section, it is mentioned that DWR
>>>>> uses that approach but I could not find that anywhere within DWR
>>>>> documentation that it uses double submit cookie. Can someone help me
>>>>> finding reference if they know any?
>>>>>
>>>>> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>>>> in the wiki
>>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>>>> to me like there are latest resources than the one?s linked
>>>>>
>>>>> d.     At few places within the wiki, I have seen recommending to
>>>>> include token in headers for Ajax requests. I also don?t see a problem in
>>>>> passing them as parameters as well. Do you guys see any?
>>>>>
>>>>> e.     I also have not seen at any place within the wiki talking
>>>>> about login CSRF issues and how each of the techniques described can be
>>>>> prone/immune to it. Is there any reason for it or are we open to include
>>>>> that?
>>>>>
>>>>>
>>>>>
>>>>> *From:* Konakandla, Manideep
>>>>> *Sent:* Wednesday, September 26, 2018 5:27 PM
>>>>> *To:* 'Jim Manico' <jim at manicode.com>; 'Dominique Righetto' <
>>>>> dominique.righetto at owasp.org>
>>>>> *Cc:* 'Jim Manico' <jim.manico at owasp.org>; 'Dave Wichers' <
>>>>> dave.wichers at owasp.org>; 'eric.sheridan at owasp.org' <
>>>>> eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org
>>>>> *Subject:* RE:
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Yeah. My understanding of the breadth of exploitation of XSS in an
>>>>> application protected with just origin/referrer and other application
>>>>> protected with just token based mitigation earlier was wrong. Dominique
>>>>> earlier email thread cleared that to me (breadth of exploitation is same in
>>>>> both the cases. i.e., if an XSS vulnerability is found in any individual
>>>>> application protected with only one of those techniques, it still can
>>>>> exploit all state changing operations on entire application [though the
>>>>> complexity of exploitation is easy in origin/referrer check than token
>>>>> based mitigation]).
>>>>>
>>>>>
>>>>>
>>>>> Anyway, I am all clear and also almost done with re-factoring the
>>>>> cheatsheet  [1] J Should be fully completed by Friday unless
>>>>> something comes up meanwhile. I will then send it to my colleagues for
>>>>> review and then for Legal, PR approvals. Before that, I need help from you
>>>>> guys on below items
>>>>>
>>>>>
>>>>>
>>>>> a.     I requested for an OWASP account and it?s still in pending.
>>>>> @JIM ? Can you please help me in getting my account approved? (registered
>>>>> with mani.konakandla at gmail.com)
>>>>>
>>>>> b.     Under double submit cookie section, it is mentioned that DWR
>>>>> uses that approach but I could not find that anywhere within DWR
>>>>> documentation that it uses double submit cookie. Can someone help me
>>>>> finding reference if they know any?
>>>>>
>>>>> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>>>> in the wiki
>>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>>>> to me like there are latest resources than the one?s linked
>>>>>
>>>>>
>>>>>
>>>>> [1] Below are changes done so far
>>>>>
>>>>> a. Switched primary, secondary defense and our reasoning behind it
>>>>> (added lot of reasons on issues with origin/referrer header check and why
>>>>> token should be made primary)
>>>>>
>>>>> b. Added CSRF mitigation myths (CORS, content-type validation etc.)
>>>>>
>>>>> c. Added a section called ?Not so popular CSRF mitigations? (mentioned
>>>>> details about triple submit cookie)
>>>>>
>>>>> d. Included limitations / issues associated with double submit cookie,
>>>>> same site cookie, captcha as a CSRF defense etc.
>>>>>
>>>>> e. Removed lot of obsolete content and added some new content to some
>>>>> of the mitigations
>>>>>
>>>>> f. Made document look more better by adding RFC?s links wherever
>>>>> possible and lot of other minor changes.
>>>>>
>>>>>
>>>>>
>>>>> *From:* Jim Manico <jim at manicode.com>
>>>>> *Sent:* Wednesday, September 26, 2018 4:19 PM
>>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>; Dominique Righetto <
>>>>> dominique.righetto at owasp.org>
>>>>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>>>>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>>>>> *Subject:* Re:
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Well tokens can be placed in cookies.
>>>>>
>>>>> The real answer to avoid CSRF is tokens in JavaScript variable as
>>>>> opposed to cookies. They are not automatically sent and indeed make CSRF
>>>>> impossible - at the expense of tokens being fully stolen via XSS. Pick your
>>>>> poison!
>>>>>
>>>>> I recommend a COMBO of these defenses. For web apps, sychronizer token
>>>>> + header verification + re-authentication for sensitive features.
>>>>>
>>>>> For API's double-cookie submit or just use JavaScript variable based
>>>>> tokens + header verification for same-site API's + re-authentication for
>>>>> sensitive features.
>>>>>
>>>>> > [1] If there is an XSS vulnerability at a single place on a domain
>>>>> (it can add custom header), it can be used to make CSRF *on all other
>>>>> state changing operationswithin that domain *done to that AJAX
>>>>> endpoint. Do you agree?
>>>>>
>>>>>
>>>>>
>>>>> Absolutely!
>>>>>
>>>>>
>>>>>
>>>>> On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
>>>>>
>>>>> Yeah, I understand that any XSS and CSRF game is over but I am
>>>>> stressing out on the highlighted part in [1]. I am trying to highlight and
>>>>> get an affirmation on why my understanding on token based mitigation is
>>>>> better than origin/referrer header check will also apply to ?token based
>>>>> mitigation Vs custom header mitigation (if static tokens are used in custom
>>>>> headers)?.
>>>>>
>>>>>
>>>>>
>>>>> In case of tokens, we have an option to use different tokens on each
>>>>> page (taking things like URL, timestamp etc. into consideration) and hence
>>>>> XSS vulnerability on one page will only make state changing operations in
>>>>> that page vulnerable to CSRF but not state changing operations on other
>>>>> pages within that domain (because token value is different) but whereas in
>>>>> origin/referrer header check and custom header check, the token value is
>>>>> constant and hence XSS vulnerability in one page will also cause state
>>>>> changing operations in other pages to be vulnerable to CSRF as well. Off
>>>>> course, this can be mitigated in custom header checks by adding tokens to
>>>>> custom headers rather than static constant but this cannot be mitigated in
>>>>> origin/referrer check because those headers cannot be modified. So, yeah a
>>>>> single XSS any CSRF is bypassed but the breadth of the impact is different
>>>>> for each of them.
>>>>>
>>>>>
>>>>>
>>>>> Regarding code samples ? I currently was able to allocate only some
>>>>> time for this task and I don?t think I will be able to do code samples
>>>>> within this time frame. I am also leaving for a long vacation starting Oct
>>>>> 12 and hence let?s try to get this out first and we can add code samples
>>>>> later on considering my work load after I return from vacation.
>>>>>
>>>>>
>>>>>
>>>>> [1] If there is an XSS vulnerability at a single place on a domain (it
>>>>> can add custom header), it can be used to make CSRF *on all other
>>>>> state changing operations**within that domain *done to that AJAX
>>>>> endpoint. Do you agree?
>>>>>
>>>>>
>>>>>
>>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>>> <dominique.righetto at owasp.org>
>>>>> *Sent:* Thursday, September 20, 2018 8:45 AM
>>>>> *To:* Jim Manico <jim at manicode.com> <jim at manicode.com>
>>>>> *Cc:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
>>>>> Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave
>>>>> Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>>>>> eric.sheridan at owasp.org
>>>>> *Subject:* Re:
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Hi,
>>>>>
>>>>>
>>>>>
>>>>> Thanks for your contribution.
>>>>>
>>>>>
>>>>>
>>>>> I like very much your plan ?
>>>>>
>>>>>
>>>>>
>>>>> I ask for some favor in addition :
>>>>>
>>>>> - can you provide code sample (in one language like java or .net or
>>>>> the one you want but it must be easy to read and understand) or libraires
>>>>> along your proposal for each section?
>>>>>
>>>>> - can you use the syntaxhighlight tag for code?
>>>>>
>>>>>
>>>>>
>>>>> I'am agree with Jim, XSS  means game over because your browsing
>>>>> context can be used as proxy so csrf protection will be defeated because
>>>>> request came from the legitimate user.
>>>>>
>>>>>
>>>>>
>>>>> Thanks you again for all your help ???
>>>>>
>>>>>
>>>>>
>>>>> Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com> a ?crit :
>>>>>
>>>>> > If there is an XSS vulnerability at a single place on a domain (it
>>>>> can add custom header), it can be used to make CSRF on all other state
>>>>> changing operations within that domain done to that AJAX endpoint. Do you
>>>>> agree?
>>>>>
>>>>> Any XSS is game over and all CSRF are useless in the face of XSS. I
>>>>> Agree!
>>>>>
>>>>> - Jim
>>>>>
>>>>>
>>>>>
>>>>> On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
>>>>>
>>>>> Hey Guys,
>>>>>
>>>>>
>>>>>
>>>>> [1] is what I said for origin/referrer header check in this e-mail
>>>>> thread. I also believe that this applies for custom headers for AJAX
>>>>> endpoints as well. If there is an XSS vulnerability at a single place on a
>>>>> domain (it can add custom header), it can be used to make CSRF on all other
>>>>> state changing operations within that domain done to that AJAX endpoint. Do
>>>>> you agree?
>>>>>
>>>>>
>>>>>
>>>>> Here is how I am keeping the new re-factored cheatsheet. Does this
>>>>> look good to you guys?
>>>>>
>>>>>
>>>>>
>>>>> 1.       Use token based method as primary defense
>>>>>
>>>>> a.       Can use synchronizer pattern for stateful applications
>>>>>
>>>>> b.       Can use hah based/ encryption based token pattern for
>>>>> stateless applications
>>>>>
>>>>> 2.       Defense in depth measures along with drawbacks of each one
>>>>>
>>>>> a.       Origin/referrer header check
>>>>>
>>>>> b.       Double submit cookie
>>>>>
>>>>> c.       Samesite cookie
>>>>>
>>>>> d.       Custom headers (people still need to use tokens for forms
>>>>> etc. if they have mix of ajax endpoints and general HTML)
>>>>>
>>>>> 3.       Strong CSRF defenses but very less usable : captcha etc.
>>>>>
>>>>> 4.       CSRF Myths / techniques that do not work section
>>>>>
>>>>>
>>>>>
>>>>> [1] if we solely rely on origin/referrer header check - an XSS
>>>>> vulnerability within a single page on that domain will also give CSRF
>>>>> vulnerability to all other state changing operations under that entire
>>>>> domain.
>>>>>
>>>>>
>>>>>
>>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>>> <dominique.righetto at owasp.org>
>>>>> *Sent:* Wednesday, September 12, 2018 1:31 PM
>>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>
>>>>> *Cc:* Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave
>>>>> Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>>>>> eric.sheridan at owasp.org
>>>>> *Subject:* Re:
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Hi
>>>>>
>>>>>
>>>>>
>>>>> Thanks you very much for the update
>>>>>
>>>>>
>>>>>
>>>>> Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep <
>>>>> mkonakan at amazon.com> a ?crit :
>>>>>
>>>>> Just an update: I started working on this along with other sprint
>>>>> tasks of mine today. I am hoping to get it completed by end of next week
>>>>> and then send it for legal/PR approvals.
>>>>>
>>>>>
>>>>>
>>>>> *From:* Jim Manico <jim.manico at owasp.org>
>>>>> *Sent:* Thursday, August 23, 2018 6:49 AM
>>>>> *To:* Dominique Righetto <dominique.righetto at owasp.org>; Konakandla,
>>>>> Manideep <mkonakan at amazon.com>
>>>>> *Cc:* Dave Wichers <dave.wichers at owasp.org>; eric.sheridan at owasp.org
>>>>> *Subject:* Re:
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Awesome! Thank you! :)
>>>>>
>>>>> - Jim
>>>>>
>>>>>
>>>>>
>>>>> On 8/23/18 2:41 AM, Dominique Righetto wrote:
>>>>>
>>>>> You are welcome :)
>>>>>
>>>>> --
>>>>> Cordialement, Best regards,
>>>>> Dominique Righetto
>>>>> dominique.righetto at gmail.com
>>>>>
>>>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>>>
>>>>> https://righettod.eu
>>>>> GPG: 323D19BA
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Thu, Aug 23, 2018 at 10:33 AM Konakandla, Manideep <
>>>>> mkonakan at amazon.com> wrote:
>>>>>
>>>>> Np. I will keep u guys posted. Thanks for the support and have good
>>>>> rest of your day!
>>>>>
>>>>>
>>>>>
>>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>>> *Sent:* Thursday, August 23, 2018 1:29 AM
>>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>>>>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>>>>> *Subject:* Re:
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Hi,
>>>>>
>>>>>
>>>>>
>>>>> Sounds goods for me.
>>>>>
>>>>>
>>>>>
>>>>> Thanks again for the contribution :)
>>>>>
>>>>> --
>>>>> Cordialement, Best regards,
>>>>> Dominique Righetto
>>>>> dominique.righetto at gmail.com
>>>>>
>>>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>>>
>>>>> https://righettod.eu
>>>>> GPG: 323D19BA
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Thu, Aug 23, 2018 at 10:03 AM Konakandla, Manideep <
>>>>> mkonakan at amazon.com> wrote:
>>>>>
>>>>> Ok, I received necessary approvals for working on this. I am hoping to
>>>>> start the work in 2 weeks and then deliver the document to you guys for
>>>>> review by end of September/1st week of October (might be 1-2 weeks
>>>>> delay if approvals from Legal and other teams get delayed). My plan is to
>>>>> work on below things ? Please let me know if I missed anything/you feel
>>>>> something else has to be added to this list.
>>>>>
>>>>>
>>>>>
>>>>> 1.       Change the order of primary and defense in depth measures
>>>>>
>>>>> 2.       Include the pitfalls/caveats for each CSRF mitigation
>>>>> technique (origin/referrer header, samesite, double submit cookie etc.)
>>>>>
>>>>> 3.       Re-structure entire page and remove outdated/ non-relevant
>>>>> stuff
>>>>>
>>>>>
>>>>>
>>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>>> *Sent:* Thursday, August 16, 2018 12:02 PM
>>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>>>>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>>>>> *Subject:* Re:
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Ok i perfectly understand.
>>>>>
>>>>> Thanks for the info.
>>>>>
>>>>>
>>>>>
>>>>> Le jeu. 16 ao?t 2018 ? 20:33, Konakandla, Manideep <
>>>>> mkonakan at amazon.com> a ?crit :
>>>>>
>>>>> I had an offline discussion with Jim and informed him that I will have
>>>>> to che
>>>>>
>>>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181007/c103d512/attachment-0001.html>

From mkonakan at amazon.com  Mon Oct  8 08:11:27 2018
From: mkonakan at amazon.com (Konakandla, Manideep)
Date: Mon, 8 Oct 2018 08:11:27 +0000
Subject: [OWASP-cheat-sheets]
 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CANos97esCWvdW58rw5ZC+NHpLT1gwUwQWOd=+_BqPr5HPaiU_w@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<6795fa7232dd466e818b7953048e243d@EX13D11UWB004.ant.amazon.com>
	<CAL=9OGyNxb0eKf4mhS=jJTUfBNfbQvuV=sNVZ5BLNoVzVb6O6A@mail.gmail.com>
	<CANos97cSYSKc29nA-RCfFf9daVGSqEtEfNTek-mac9px04Oq0A@mail.gmail.com>
	<CAL=9OGxQQFYeWcXMFTgAx22KSi9x2TGjrStKFGqHA1xk-wOV0Q@mail.gmail.com>
	<136d2b2c-ef34-6e7f-0870-c4b61cdf4379@manicode.com>
	<CAL=9OGy0jP6OfLNoeTYW9k=2q5H9qdq78PkkNvbs6+zgAbaQ6Q@mail.gmail.com>
	<CANos97esCWvdW58rw5ZC+NHpLT1gwUwQWOd=+_BqPr5HPaiU_w@mail.gmail.com>
Message-ID: <46fa44e0bd7941eaa029659ca8f3291f@EX13D11UWB004.ant.amazon.com>

Hey Folks ?

Good conversation :) Can you guys review the new cheat sheet once? I am sure most of the discussion going on here is already answered in the new re-factored cheat sheet I wrote.

@Pankaj ? Go through the respective sections in the new cheat sheet. If they are not clear / you are not convinced, we can discuss more. Below is the summary of my response to your questions (you will find the same gist going through the cheat sheet as well).

Go through [2] to understand more detailed on how flash based bypass on CSRF custom mitigation defense works. You can see there that the origin headers are passed along with the custom headers and hence current wiki asks to do origin and/or referrer header check as defense-in-depth (it would help even if flash sometime in the future repeats same mistake and forwards custom headers without crossdomain.xml checks. Domain requesting the redirected request might be fooled with custom header bypass but not the origin header check). If both these checks are done, it is indeed a good defense but origin header is not always included etc. (just as Jim mentioned and also as new cheatsheet mentions).  I don?t think deprecating custom header check is a good idea. It is indeed a good solution for stateless services though they have to keep issues like I mentioned before in mind. Your statement of custom header itself doesn?t mitigate CSRF relies on the fact that ?Flash being vulnerable to same bug again in future?. We cannot rely on a future statement and deprecate a technique, instead providing defense in depth measure for it and also cautioning users about past issues might be good idea. Users can take their call. Please read custom headers and origin check sections I re-wrote for more in-details. It talks about the issues and people can select if they want to use it or not.

Also, Login CSRF has nothing to do with custom header mitigation. Login forms are usually handled on <form> tags and custom header mitigation is only applicable on ajax calls because you cannot set custom headers on form tags. It can be applicable if you are doing logins on Ajax/XHR requests in which case my above response from custom header mitigation applies. I also proposed few methods for mitigating login CSRF which aligns with our primary defense on the new cheatsheet (tokens). Please review it as well.

Also, CORS has nothing to do with CSRF. I infact added CORS as a technique that should not be used/even thought for CSRF in the new cheatsheet I wrote. Please check that and also read [1]

[1] https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
[2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/

BTW - Here is the link to the new cheat sheet - https://tinyurl.com/y7k9fded

Again,  I you are not convinced ? please let me know specific item and we can happily discuss further ? Alternatively, you can send us your edits here for review and if it looks good for everyone ? you can edit it in the wiki.

From: Dominique Righetto <dominique.righetto at owasp.org>
Sent: Sunday, October 7, 2018 1:13 PM
To: Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
Cc: Jim Manico <jim at manicode.com>; Konakandla, Manideep <mkonakan at amazon.com>; owasp-cheat-sheets at lists.owasp.org
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Sync your update with one from Konakandla Manideep please ?

Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>> a ?crit :
Aloha Jim!
With XSS, even CSRF tokens can be stolen :).
But I'll keep your tip in mind when editing the wiki. I'm planning to do that sometime this month.
Please feel free to review it whenever you guys get a chance.

Best,
Pankaj


On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com<mailto:jim at manicode.com>> wrote:

I agree JWT's architectures where cookies are not involved are resistant to CSRF but those tokens are at the risk of being stolen over XSS!

The Origin header does not go with all requests and FireFox does not fully support it yet. So careful!

:)

On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
I agree and that's why I would like to propose deprecation of 'custom header approach' as a CSRF defense.
Presently the mechanism that seems to work across applications is validating custom header as well as a forbidden header name (that cannot be set by a software or a program) e.g. Origin. If we want to give it a new name like 'Double Header Validation' or something else, I'm fine with that but custom header alone doesn't seem sufficient to mitigate CSRF issue.

There are some other best practices that should also be considered. I think CORS is now mature enough to have a mention in the CSRF defense Also, applications utilizing JWT token in the header seem immune to CSRF.

Please let me know what you guys think and if allowed, I can go ahead and make some of these edits for your perusal.


On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>> wrote:
Good question, I think it's more a point about to be consistent in terms of CSRF check across the application. Indeed, if you begin to perform different kind of CSRF check depending on the feature of the application (login, business feature, reset password...) it becomes risky and you significantly increase the chance to include location in which you will have a CSRF check weakness...
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Sat, Oct 6, 2018 at 9:51 PM Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>> wrote:
Do we know, regarding login CSRF, why validating the custom header as well as the Origin/Host header is not a sufficient mitigation?

On Fri, Sep 28, 2018 at 9:35 PM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Login CSRF is a way of exploiting CSRF on login forms (details here<https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a line about it in referrer validation section, it was not explained clearly and how it can scale with other techniques such as token based mitigation. No worries, I added a section about it!

Finally, I am done with the document from my side and its sent for internal reviews now. It should take 1-2 weeks before it comes to you guys. Meanwhile, I still need help on below items from you guys. If no one was able to find references for a), we can very well remove it.


a.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

b.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked in current cheatsheet

Happy weekend folks ?

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Thursday, September 27, 2018 3:02 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

...as for (d) I dont see any problems with passing tokens as headers or parameters

I dont understand (e) can you explain that again?
--
Jim Manico
@Manicode
Secure Coding Education
+1 (808) 652-3805

On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
2 more questions added  (Jim already started helping me on #a)


a.     I requested for an OWASP account and it?s still in pending. @JIM ? Can you please help me in getting my account approved? (registered with mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>)

b.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

c.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked

d.     At few places within the wiki, I have seen recommending to include token in headers for Ajax requests. I also don?t see a problem in passing them as parameters as well. Do you guys see any?

e.     I also have not seen at any place within the wiki talking about login CSRF issues and how each of the techniques described can be prone/immune to it. Is there any reason for it or are we open to include that?

From: Konakandla, Manideep
Sent: Wednesday, September 26, 2018 5:27 PM
To: 'Jim Manico' <jim at manicode.com<mailto:jim at manicode.com>>; 'Dominique Righetto' <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Cc: 'Jim Manico' <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; 'Dave Wichers' <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; 'eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>' <eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: RE: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Yeah. My understanding of the breadth of exploitation of XSS in an application protected with just origin/referrer and other application protected with just token based mitigation earlier was wrong. Dominique earlier email thread cleared that to me (breadth of exploitation is same in both the cases. i.e., if an XSS vulnerability is found in any individual application protected with only one of those techniques, it still can exploit all state changing operations on entire application [though the complexity of exploitation is easy in origin/referrer check than token based mitigation]).

Anyway, I am all clear and also almost done with re-factoring the cheatsheet  [1] ? Should be fully completed by Friday unless something comes up meanwhile. I will then send it to my colleagues for review and then for Legal, PR approvals. Before that, I need help from you guys on below items


a.     I requested for an OWASP account and it?s still in pending. @JIM ? Can you please help me in getting my account approved? (registered with mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>)

b.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

c.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked

[1] Below are changes done so far
a. Switched primary, secondary defense and our reasoning behind it (added lot of reasons on issues with origin/referrer header check and why token should be made primary)
b. Added CSRF mitigation myths (CORS, content-type validation etc.)
c. Added a section called ?Not so popular CSRF mitigations? (mentioned details about triple submit cookie)
d. Included limitations / issues associated with double submit cookie, same site cookie, captcha as a CSRF defense etc.
e. Removed lot of obsolete content and added some new content to some of the mitigations
f. Made document look more better by adding RFC?s links wherever possible and lot of other minor changes.

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Wednesday, September 26, 2018 4:19 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>


Well tokens can be placed in cookies.

The real answer to avoid CSRF is tokens in JavaScript variable as opposed to cookies. They are not automatically sent and indeed make CSRF impossible - at the expense of tokens being fully stolen via XSS. Pick your poison!

I recommend a COMBO of these defenses. For web apps, sychronizer token + header verification + re-authentication for sensitive features.

For API's double-cookie submit or just use JavaScript variable based tokens + header verification for same-site API's + re-authentication for sensitive features.
> [1] If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operationswithin that domain done to that AJAX endpoint. Do you agree?

Absolutely!

On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
Yeah, I understand that any XSS and CSRF game is over but I am stressing out on the highlighted part in [1]. I am trying to highlight and get an affirmation on why my understanding on token based mitigation is better than origin/referrer header check will also apply to ?token based mitigation Vs custom header mitigation (if static tokens are used in custom headers)?.

In case of tokens, we have an option to use different tokens on each page (taking things like URL, timestamp etc. into consideration) and hence XSS vulnerability on one page will only make state changing operations in that page vulnerable to CSRF but not state changing operations on other pages within that domain (because token value is different) but whereas in origin/referrer header check and custom header check, the token value is constant and hence XSS vulnerability in one page will also cause state changing operations in other pages to be vulnerable to CSRF as well. Off course, this can be mitigated in custom header checks by adding tokens to custom headers rather than static constant but this cannot be mitigated in origin/referrer check because those headers cannot be modified. So, yeah a single XSS any CSRF is bypassed but the breadth of the impact is different for each of them.

Regarding code samples ? I currently was able to allocate only some time for this task and I don?t think I will be able to do code samples within this time frame. I am also leaving for a long vacation starting Oct 12 and hence let?s try to get this out first and we can add code samples later on considering my work load after I return from vacation.

[1] If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operationswithin that domain done to that AJAX endpoint. Do you agree?

From: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Sent: Thursday, September 20, 2018 8:45 AM
To: Jim Manico <jim at manicode.com><mailto:jim at manicode.com>
Cc: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>; Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi,

Thanks for your contribution.

I like very much your plan ?

I ask for some favor in addition :
- can you provide code sample (in one language like java or .net or the one you want but it must be easy to read and understand) or libraires along your proposal for each section?
- can you use the syntaxhighlight tag for code?

I'am agree with Jim, XSS  means game over because your browsing context can be used as proxy so csrf protection will be defeated because request came from the legitimate user.

Thanks you again for all your help ???

Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com<mailto:jim at manicode.com>> a ?crit :

> If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

Any XSS is game over and all CSRF are useless in the face of XSS. I Agree!

- Jim

On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
Hey Guys,

[1] is what I said for origin/referrer header check in this e-mail thread. I also believe that this applies for custom headers for AJAX endpoints as well. If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

Here is how I am keeping the new re-factored cheatsheet. Does this look good to you guys?


1.       Use token based method as primary defense

a.       Can use synchronizer pattern for stateful applications

b.       Can use hah based/ encryption based token pattern for stateless applications

2.       Defense in depth measures along with drawbacks of each one

a.       Origin/referrer header check

b.       Double submit cookie

c.       Samesite cookie

d.       Custom headers (people still need to use tokens for forms etc. if they have mix of ajax endpoints and general HTML)

3.       Strong CSRF defenses but very less usable : captcha etc.

4.       CSRF Myths / techniques that do not work section

[1] if we solely rely on origin/referrer header check - an XSS vulnerability within a single page on that domain will also give CSRF vulnerability to all other state changing operations under that entire domain.

From: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Sent: Wednesday, September 12, 2018 1:31 PM
To: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>
Cc: Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi

Thanks you very much for the update

Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Just an update: I started working on this along with other sprint tasks of mine today. I am hoping to get it completed by end of next week and then send it for legal/PR approvals.

From: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>
Sent: Thursday, August 23, 2018 6:49 AM
To: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>


Awesome! Thank you! :)

- Jim

On 8/23/18 2:41 AM, Dominique Righetto wrote:
You are welcome :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Thu, Aug 23, 2018 at 10:33 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Np. I will keep u guys posted. Thanks for the support and have good rest of your day!

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Thursday, August 23, 2018 1:29 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi,

Sounds goods for me.

Thanks again for the contribution :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Thu, Aug 23, 2018 at 10:03 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Ok, I received necessary approvals for working on this. I am hoping to start the work in 2 weeks and then deliver the document to you guys for review by end of September/1st week of October (might be 1-2 weeks delay if approvals from Legal and other teams get delayed). My plan is to work on below things ? Please let me know if I missed anything/you feel something else has to be added to this list.


1.       Change the order of primary and defense in depth measures

2.       Include the pitfalls/caveats for each CSRF mitigation technique (origin/referrer header, samesite, double submit cookie etc.)

3.       Re-structure entire page and remove outdated/ non-relevant stuff

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Thursday, August 16, 2018 12:02 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Ok i perfectly understand.
Thanks for the info.

Le jeu. 16 ao?t 2018 ? 20:33, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
I had an offline discussion with Jim and informed him that I will have to che
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181008/b9b6b932/attachment-0001.html>

From p.upadhyay9999 at gmail.com  Mon Oct  8 16:01:42 2018
From: p.upadhyay9999 at gmail.com (Pankaj Upadhyay)
Date: Mon, 8 Oct 2018 12:01:42 -0400
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CANos97csCLS8cgWwduXWt520AcT5Z_sfRXbNUc=Yq6+P8Tx1UA@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<6795fa7232dd466e818b7953048e243d@EX13D11UWB004.ant.amazon.com>
	<CAL=9OGyNxb0eKf4mhS=jJTUfBNfbQvuV=sNVZ5BLNoVzVb6O6A@mail.gmail.com>
	<CANos97cSYSKc29nA-RCfFf9daVGSqEtEfNTek-mac9px04Oq0A@mail.gmail.com>
	<CAL=9OGxQQFYeWcXMFTgAx22KSi9x2TGjrStKFGqHA1xk-wOV0Q@mail.gmail.com>
	<136d2b2c-ef34-6e7f-0870-c4b61cdf4379@manicode.com>
	<CAL=9OGy0jP6OfLNoeTYW9k=2q5H9qdq78PkkNvbs6+zgAbaQ6Q@mail.gmail.com>
	<CANos97esCWvdW58rw5ZC+NHpLT1gwUwQWOd=+_BqPr5HPaiU_w@mail.gmail.com>
	<46fa44e0bd7941eaa029659ca8f3291f@EX13D11UWB004.ant.amazon.com>
	<CANos97csCLS8cgWwduXWt520AcT5Z_sfRXbNUc=Yq6+P8Tx1UA@mail.gmail.com>
Message-ID: <CAL=9OGwRy9V7CcaYFUf-W=N++x9jvPh-D7+8f8oqfnoMwU9Kog@mail.gmail.com>

Sure, I will do that. Thanks!

On Mon, Oct 8, 2018, 4:47 AM Dominique Righetto <
dominique.righetto at owasp.org> wrote:

> Hello all,
>
> In order to move forward and deliver something in the project please
> update the wiki with content from the refactoring from Konakandla Manideep.
> If there missing points they will be added in another round it is the role
> of the wiki based usage.
>
> Thanks in advance for your understanding ?
>
> Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com> a
> ?crit :
>
>> Hey Folks J
>>
>>
>>
>> Good conversation :) Can you guys review the new cheat sheet once? I am
>> sure most of the discussion going on here is already answered in the new
>> re-factored cheat sheet I wrote.
>>
>>
>>
>> @Pankaj ? Go through the respective sections in the new cheat sheet. If
>> they are not clear / you are not convinced, we can discuss more. Below is
>> the summary of my response to your questions (you will find the same gist
>> going through the cheat sheet as well).
>>
>>
>>
>> Go through [2] to understand more detailed on how flash based bypass on
>> CSRF custom mitigation defense works. You can see there that the origin
>> headers are passed along with the custom headers and hence current wiki
>> asks to do origin and/or referrer header check as defense-in-depth (it
>> would help even if flash sometime in the future repeats same mistake and
>> forwards custom headers without crossdomain.xml checks. Domain requesting
>> the redirected request might be fooled with custom header bypass but not
>> the origin header check). If both these checks are done, it is indeed a
>> good defense but origin header is not always included etc. (just as Jim
>> mentioned and also as new cheatsheet mentions).  I don?t think deprecating
>> custom header check is a good idea. It is indeed a good solution for
>> stateless services though they have to keep issues like I mentioned before
>> in mind. Your statement of custom header itself doesn?t mitigate CSRF
>> relies on the fact that ?Flash being vulnerable to same bug again in
>> future?. We cannot rely on a future statement and deprecate a technique,
>> instead providing defense in depth measure for it and also cautioning users
>> about past issues might be good idea. Users can take their call. Please
>> read custom headers and origin check sections I re-wrote for more
>> in-details. It talks about the issues and people can select if they want to
>> use it or not.
>>
>>
>>
>> Also, Login CSRF has nothing to do with custom header mitigation. Login
>> forms are usually handled on <form> tags and custom header mitigation is
>> only applicable on ajax calls because you cannot set custom headers on form
>> tags. It can be applicable if you are doing logins on Ajax/XHR requests in
>> which case my above response from custom header mitigation applies. I also
>> proposed few methods for mitigating login CSRF which aligns with our
>> primary defense on the new cheatsheet (tokens). Please review it as well.
>>
>>
>>
>> Also, CORS has nothing to do with CSRF. I infact added CORS as a
>> technique that should not be used/even thought for CSRF in the new
>> cheatsheet I wrote. Please check that and also read [1]
>>
>>
>>
>> [1]
>> https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
>>
>> [2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/
>>
>>
>>
>> BTW - Here is the link to the new cheat sheet -
>> https://tinyurl.com/y7k9fded
>>
>>
>>
>> Again,  I you are not convinced ? please let me know specific item and we
>> can happily discuss further J Alternatively, you can send us your edits
>> here for review and if it looks good for everyone ? you can edit it in the
>> wiki.
>>
>>
>>
>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>> *Sent:* Sunday, October 7, 2018 1:13 PM
>> *To:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>> *Cc:* Jim Manico <jim at manicode.com>; Konakandla, Manideep <
>> mkonakan at amazon.com>; owasp-cheat-sheets at lists.owasp.org
>> *Subject:* Re: [OWASP-cheat-sheets]
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Sync your update with one from Konakandla Manideep please ?
>>
>>
>>
>> Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>> a ?crit :
>>
>> Aloha Jim!
>>
>> With XSS, even CSRF tokens can be stolen :).
>>
>> But I'll keep your tip in mind when editing the wiki. I'm planning to do
>> that sometime this month.
>>
>> Please feel free to review it whenever you guys get a chance.
>>
>>
>>
>> Best,
>>
>> Pankaj
>>
>>
>>
>>
>>
>> On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com> wrote:
>>
>> I agree JWT's architectures *where cookies are not involved* are
>> resistant to CSRF but those tokens are at the risk of being stolen over XSS!
>>
>> The Origin header does not go with all requests and FireFox does not
>> fully support it yet. So careful!
>>
>> :)
>>
>>
>>
>> On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
>>
>> I agree and that's why I would like to propose deprecation of 'custom
>> header approach' as a CSRF defense.
>> Presently the mechanism that seems to work across applications is
>> validating custom header as well as a forbidden header name (that cannot be
>> set by a software or a program) e.g. Origin. If we want to give it a new
>> name like 'Double Header Validation' or something else, I'm fine with that
>> but custom header alone doesn't seem sufficient to mitigate CSRF issue.
>>
>>
>>
>> There are some other best practices that should also be considered. I
>> think CORS is now mature enough to have a mention in the CSRF defense Also,
>> applications utilizing JWT token in the header seem immune to CSRF.
>>
>>
>>
>> Please let me know what you guys think and if allowed, I can go ahead and
>> make some of these edits for your perusal.
>>
>>
>>
>>
>>
>> On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <
>> dominique.righetto at owasp.org> wrote:
>>
>> Good question, I think it's more a point about to be consistent in terms
>> of CSRF check across the application. Indeed, if you begin to perform
>> different kind of CSRF check depending on the feature of the application
>> (login, business feature, reset password...) it becomes risky and you
>> significantly increase the chance to include location in which you will
>> have a CSRF check weakness...
>>
>> --
>> Cordialement, Best regards,
>> Dominique Righetto
>> dominique.righetto at gmail.com
>>
>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>
>> https://righettod.eu
>> GPG: 323D19BA
>>
>>
>>
>>
>>
>> On Sat, Oct 6, 2018 at 9:51 PM Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>> wrote:
>>
>> Do we know, regarding login CSRF, why validating the custom header as
>> well as the Origin/Host header is not a sufficient mitigation?
>>
>>
>>
>> On Fri, Sep 28, 2018 at 9:35 PM Konakandla, Manideep <mkonakan at amazon.com>
>> wrote:
>>
>> Login CSRF is a way of exploiting CSRF on login forms (details here
>> <https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a
>> line about it in referrer validation section, it was not explained clearly
>> and how it can scale with other techniques such as token based mitigation.
>> No worries, I added a section about it!
>>
>>
>>
>> Finally, I am done with the document from my side and its sent for
>> internal reviews now. It should take 1-2 weeks before it comes to you guys.
>> Meanwhile, I still need help on below items from you guys. If no one was
>> able to find references for a), we can very well remove it.
>>
>>
>>
>> a.     Under double submit cookie section, it is mentioned that DWR uses
>> that approach but I could not find that anywhere within DWR documentation
>> that it uses double submit cookie. Can someone help me finding reference if
>> they know any?
>>
>> b.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>> in the wiki
>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>> Can someone with .NET expertize verify if these are still accurate? Looks
>> to me like there are latest resources than the one?s linked in current
>> cheatsheet
>>
>>
>>
>> Happy weekend folks J
>>
>>
>>
>> *From:* Jim Manico <jim at manicode.com>
>> *Sent:* Thursday, September 27, 2018 3:02 AM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Jim Manico <
>> jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>;
>> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
>> *Subject:* Re:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> ...as for (d) I dont see any problems with passing tokens as headers or
>> parameters
>>
>>
>>
>> I dont understand (e) can you explain that again?
>>
>> --
>>
>> Jim Manico
>>
>> @Manicode
>>
>> Secure Coding Education
>>
>> +1 (808) 652-3805
>>
>>
>> On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com>
>> wrote:
>>
>> 2 more questions added  (Jim already started helping me on #a)
>>
>>
>>
>> a.     I requested for an OWASP account and it?s still in pending. @JIM
>> ? Can you please help me in getting my account approved? (registered with
>> mani.konakandla at gmail.com)
>>
>> b.     Under double submit cookie section, it is mentioned that DWR uses
>> that approach but I could not find that anywhere within DWR documentation
>> that it uses double submit cookie. Can someone help me finding reference if
>> they know any?
>>
>> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>> in the wiki
>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>> Can someone with .NET expertize verify if these are still accurate? Looks
>> to me like there are latest resources than the one?s linked
>>
>> d.     At few places within the wiki, I have seen recommending to
>> include token in headers for Ajax requests. I also don?t see a problem in
>> passing them as parameters as well. Do you guys see any?
>>
>> e.     I also have not seen at any place within the wiki talking about
>> login CSRF issues and how each of the techniques described can be
>> prone/immune to it. Is there any reason for it or are we open to include
>> that?
>>
>>
>>
>> *From:* Konakandla, Manideep
>> *Sent:* Wednesday, September 26, 2018 5:27 PM
>> *To:* 'Jim Manico' <jim at manicode.com>; 'Dominique Righetto' <
>> dominique.righetto at owasp.org>
>> *Cc:* 'Jim Manico' <jim.manico at owasp.org>; 'Dave Wichers' <
>> dave.wichers at owasp.org>; 'eric.sheridan at owasp.org' <
>> eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org
>> *Subject:* RE:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Yeah. My understanding of the breadth of exploitation of XSS in an
>> application protected with just origin/referrer and other application
>> protected with just token based mitigation earlier was wrong. Dominique
>> earlier email thread cleared that to me (breadth of exploitation is same in
>> both the cases. i.e., if an XSS vulnerability is found in any individual
>> application protected with only one of those techniques, it still can
>> exploit all state changing operations on entire application [though the
>> complexity of exploitation is easy in origin/referrer check than token
>> based mitigation]).
>>
>>
>>
>> Anyway, I am all clear and also almost done with re-factoring the
>> cheatsheet  [1] J Should be fully completed by Friday unless something
>> comes up meanwhile. I will then send it to my colleagues for review and
>> then for Legal, PR approvals. Before that, I need help from you guys on
>> below items
>>
>>
>>
>> a.     I requested for an OWASP account and it?s still in pending. @JIM
>> ? Can you please help me in getting my account approved? (registered with
>> mani.konakandla at gmail.com)
>>
>> b.     Under double submit cookie section, it is mentioned that DWR uses
>> that approach but I could not find that anywhere within DWR documentation
>> that it uses double submit cookie. Can someone help me finding reference if
>> they know any?
>>
>> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>> in the wiki
>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>> Can someone with .NET expertize verify if these are still accurate? Looks
>> to me like there are latest resources than the one?s linked
>>
>>
>>
>> [1] Below are changes done so far
>>
>> a. Switched primary, secondary defense and our reasoning behind it (added
>> lot of reasons on issues with origin/referrer header check and why token
>> should be made primary)
>>
>> b. Added CSRF mitigation myths (CORS, content-type validation etc.)
>>
>> c. Added a section called ?Not so popular CSRF mitigations? (mentioned
>> details about triple submit cookie)
>>
>> d. Included limitations / issues associated with double submit cookie,
>> same site cookie, captcha as a CSRF defense etc.
>>
>> e. Removed lot of obsolete content and added some new content to some of
>> the mitigations
>>
>> f. Made document look more better by adding RFC?s links wherever possible
>> and lot of other minor changes.
>>
>>
>>
>> *From:* Jim Manico <jim at manicode.com>
>> *Sent:* Wednesday, September 26, 2018 4:19 PM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com>; Dominique Righetto <
>> dominique.righetto at owasp.org>
>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>> *Subject:* Re:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Well tokens can be placed in cookies.
>>
>> The real answer to avoid CSRF is tokens in JavaScript variable as opposed
>> to cookies. They are not automatically sent and indeed make CSRF impossible
>> - at the expense of tokens being fully stolen via XSS. Pick your poison!
>>
>> I recommend a COMBO of these defenses. For web apps, sychronizer token +
>> header verification + re-authentication for sensitive features.
>>
>> For API's double-cookie submit or just use JavaScript variable based
>> tokens + header verification for same-site API's + re-authentication for
>> sensitive features.
>>
>> > [1] If there is an XSS vulnerability at a single place on a domain (it
>> can add custom header), it can be used to make CSRF *on all other state
>> changing operationswithin that domain *done to that AJAX endpoint. Do
>> you agree?
>>
>>
>>
>> Absolutely!
>>
>>
>>
>> On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
>>
>> Yeah, I understand that any XSS and CSRF game is over but I am stressing
>> out on the highlighted part in [1]. I am trying to highlight and get an
>> affirmation on why my understanding on token based mitigation is better
>> than origin/referrer header check will also apply to ?token based
>> mitigation Vs custom header mitigation (if static tokens are used in custom
>> headers)?.
>>
>>
>>
>> In case of tokens, we have an option to use different tokens on each page
>> (taking things like URL, timestamp etc. into consideration) and hence XSS
>> vulnerability on one page will only make state changing operations in that
>> page vulnerable to CSRF but not state changing operations on other pages
>> within that domain (because token value is different) but whereas in
>> origin/referrer header check and custom header check, the token value is
>> constant and hence XSS vulnerability in one page will also cause state
>> changing operations in other pages to be vulnerable to CSRF as well. Off
>> course, this can be mitigated in custom header checks by adding tokens to
>> custom headers rather than static constant but this cannot be mitigated in
>> origin/referrer check because those headers cannot be modified. So, yeah a
>> single XSS any CSRF is bypassed but the breadth of the impact is different
>> for each of them.
>>
>>
>>
>> Regarding code samples ? I currently was able to allocate only some time
>> for this task and I don?t think I will be able to do code samples within
>> this time frame. I am also leaving for a long vacation starting Oct 12 and
>> hence let?s try to get this out first and we can add code samples later on
>> considering my work load after I return from vacation.
>>
>>
>>
>> [1] If there is an XSS vulnerability at a single place on a domain (it
>> can add custom header), it can be used to make CSRF *on all other state
>> changing operationswithin that domain *done to that AJAX endpoint. Do
>> you agree?
>>
>>
>>
>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>> <dominique.righetto at owasp.org>
>> *Sent:* Thursday, September 20, 2018 8:45 AM
>> *To:* Jim Manico <jim at manicode.com> <jim at manicode.com>
>> *Cc:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
>> Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave Wichers
>> <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>> eric.sheridan at owasp.org
>> *Subject:* Re:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Hi,
>>
>>
>>
>> Thanks for your contribution.
>>
>>
>>
>> I like very much your plan ?
>>
>>
>>
>> I ask for some favor in addition :
>>
>> - can you provide code sample (in one language like java or .net or the
>> one you want but it must be easy to read and understand) or libraires along
>> your proposal for each section?
>>
>> - can you use the syntaxhighlight tag for code?
>>
>>
>>
>> I'am agree with Jim, XSS  means game over because your browsing context
>> can be used as proxy so csrf protection will be defeated because request
>> came from the legitimate user.
>>
>>
>>
>> Thanks you again for all your help ???
>>
>>
>>
>> Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com> a ?crit :
>>
>> > If there is an XSS vulnerability at a single place on a domain (it can
>> add custom header), it can be used to make CSRF on all other state changing
>> operations within that domain done to that AJAX endpoint. Do you agree?
>>
>> Any XSS is game over and all CSRF are useless in the face of XSS. I Agree!
>>
>> - Jim
>>
>>
>>
>> On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
>>
>> Hey Guys,
>>
>>
>>
>> [1] is what I said for origin/referrer header check in this e-mail
>> thread. I also believe that this applies for custom headers for AJAX
>> endpoints as well. If there is an XSS vulnerability at a single place on a
>> domain (it can add custom header), it can be used to make CSRF on all other
>> state changing operations within that domain done to that AJAX endpoint. Do
>> you agree?
>>
>>
>>
>> Here is how I am keeping the new re-factored cheatsheet. Does this look
>> good to you guys?
>>
>>
>>
>> 1.       Use token based method as primary defense
>>
>> a.       Can use synchronizer pattern for stateful applications
>>
>> b.       Can use hah based/ encryption based token pattern for stateless
>> applications
>>
>> 2.       Defense in depth measures along with drawbacks of each one
>>
>> a.       Origin/referrer header check
>>
>> b.       Double submit cookie
>>
>> c.       Samesite cookie
>>
>> d.       Custom headers (people still need to use tokens for forms etc.
>> if they have mix of ajax endpoints and general HTML)
>>
>> 3.       Strong CSRF defenses but very less usable : captcha etc.
>>
>> 4.       CSRF Myths / techniques that do not work section
>>
>>
>>
>> [1] if we solely rely on origin/referrer header check - an XSS
>> vulnerability within a single page on that domain will also give CSRF
>> vulnerability to all other state changing operations under that entire
>> domain.
>>
>>
>>
>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>> <dominique.righetto at owasp.org>
>> *Sent:* Wednesday, September 12, 2018 1:31 PM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>
>> *Cc:* Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave
>> Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>> eric.sheridan at owasp.org
>> *Subject:* Re:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Hi
>>
>>
>>
>> Thanks you very much for the update
>>
>>
>>
>> Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep <mkonakan at amazon.com>
>> a ?crit :
>>
>> Just an update: I started working on this along with other sprint tasks
>> of mine today. I am hoping to get it completed by end of next week and then
>> send it for legal/PR approvals.
>>
>>
>>
>> *From:* Jim Manico <jim.manico at owasp.org>
>> *Sent:* Thursday, August 23, 2018 6:49 AM
>> *To:* Dominique Righetto <dominique.righetto at owasp.org>; Konakandla,
>> Manideep <mkonakan at amazon.com>
>> *Cc:* Dave Wichers <dave.wichers at owasp.org>; eric.sheridan at owasp.org
>> *Subject:* Re:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Awesome! Thank you! :)
>>
>> - Jim
>>
>>
>>
>> On 8/23/18 2:41 AM, Dominique Righetto wrote:
>>
>> You are welcome :)
>>
>> --
>> Cordialement, Best regards,
>> Dominique Righetto
>> dominique.righetto at gmail.com
>>
>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>
>> https://righettod.eu
>> GPG: 323D19BA
>>
>>
>>
>>
>>
>> On Thu, Aug 23, 2018 at 10:33 AM Konakandla, Manideep <
>> mkonakan at amazon.com> wrote:
>>
>> Np. I will keep u guys posted. Thanks for the support and have good rest
>> of your day!
>>
>>
>>
>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>> *Sent:* Thursday, August 23, 2018 1:29 AM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>> *Subject:* Re:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Hi,
>>
>>
>>
>> Sounds goods for me.
>>
>>
>>
>> Thanks again for the contribution :)
>>
>> --
>> Cordialement, Best regards,
>> Dominique Righetto
>> dominique.righetto at gmail.com
>>
>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>
>> https://righettod.eu
>> GPG: 323D19BA
>>
>>
>>
>>
>>
>> On Thu, Aug 23, 2018 at 10:03 AM Konakandla, Manideep <
>> mkonakan at amazon.com> wrote:
>>
>> Ok, I received necessary approvals for working on this. I am hoping to
>> start the work in 2 weeks and then deliver the document to you guys for
>> review by end of September/1st week of October (might be 1-2 weeks delay
>> if approvals from Legal and other teams get delayed). My plan is to work on
>> below things ? Please let me know if I missed anything/you feel something
>> else has to be added to this list.
>>
>>
>>
>> 1.       Change the order of primary and defense in depth measures
>>
>> 2.       Include the pitfalls/caveats for each CSRF mitigation technique
>> (origin/referrer header, samesite, double submit cookie etc.)
>>
>> 3.       Re-structure entire page and remove outdated/ non-relevant stuff
>>
>>
>>
>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>> *Sent:* Thursday, August 16, 2018 12:02 PM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>> *Subject:* Re:
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Ok i perfectly understand.
>>
>> Thanks for the info.
>>
>>
>>
>> Le jeu. 16 ao?t 2018 ? 20:33, Konakandla, Manideep <mkonakan at amazon.com>
>> a ?crit :
>>
>> I had an offline discussion with Jim and informed him that I will have to
>> che
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181008/4af4a18c/attachment-0001.html>

From mkonakan at amazon.com  Thu Oct 11 05:18:15 2018
From: mkonakan at amazon.com (Konakandla, Manideep)
Date: Thu, 11 Oct 2018 05:18:15 +0000
Subject: [OWASP-cheat-sheets]
 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CANos97csCLS8cgWwduXWt520AcT5Z_sfRXbNUc=Yq6+P8Tx1UA@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<6795fa7232dd466e818b7953048e243d@EX13D11UWB004.ant.amazon.com>
	<CAL=9OGyNxb0eKf4mhS=jJTUfBNfbQvuV=sNVZ5BLNoVzVb6O6A@mail.gmail.com>
	<CANos97cSYSKc29nA-RCfFf9daVGSqEtEfNTek-mac9px04Oq0A@mail.gmail.com>
	<CAL=9OGxQQFYeWcXMFTgAx22KSi9x2TGjrStKFGqHA1xk-wOV0Q@mail.gmail.com>
	<136d2b2c-ef34-6e7f-0870-c4b61cdf4379@manicode.com>
	<CAL=9OGy0jP6OfLNoeTYW9k=2q5H9qdq78PkkNvbs6+zgAbaQ6Q@mail.gmail.com>
	<CANos97esCWvdW58rw5ZC+NHpLT1gwUwQWOd=+_BqPr5HPaiU_w@mail.gmail.com>
	<46fa44e0bd7941eaa029659ca8f3291f@EX13D11UWB004.ant.amazon.com>
	<CANos97csCLS8cgWwduXWt520AcT5Z_sfRXbNUc=Yq6+P8Tx1UA@mail.gmail.com>
Message-ID: <ea0ad8742d904ea792880b77e6e81678@EX13D11UWB004.ant.amazon.com>

Sorry for late reply. I was on sick leave for last 2 days.

I synced up with Dominique in a different email chain to clarify something in his previous email. He gave me a go ahead to update wiki with new re-factored cheat sheet. I am planning to do it sometime tomorrow. @Jim : Is it with fine with you as well? Please let me know if you have any concerns.

From: Dominique Righetto <dominique.righetto at owasp.org>
Sent: Monday, October 8, 2018 1:47 AM
To: Konakandla, Manideep <mkonakan at amazon.com>
Cc: Pankaj Upadhyay <p.upadhyay9999 at gmail.com>; Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hello all,

In order to move forward and deliver something in the project please update the wiki with content from the refactoring from Konakandla Manideep. If there missing points they will be added in another round it is the role of the wiki based usage.

Thanks in advance for your understanding ?

Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Hey Folks ?

Good conversation :) Can you guys review the new cheat sheet once? I am sure most of the discussion going on here is already answered in the new re-factored cheat sheet I wrote.

@Pankaj ? Go through the respective sections in the new cheat sheet. If they are not clear / you are not convinced, we can discuss more. Below is the summary of my response to your questions (you will find the same gist going through the cheat sheet as well).

Go through [2] to understand more detailed on how flash based bypass on CSRF custom mitigation defense works. You can see there that the origin headers are passed along with the custom headers and hence current wiki asks to do origin and/or referrer header check as defense-in-depth (it would help even if flash sometime in the future repeats same mistake and forwards custom headers without crossdomain.xml checks. Domain requesting the redirected request might be fooled with custom header bypass but not the origin header check). If both these checks are done, it is indeed a good defense but origin header is not always included etc. (just as Jim mentioned and also as new cheatsheet mentions).  I don?t think deprecating custom header check is a good idea. It is indeed a good solution for stateless services though they have to keep issues like I mentioned before in mind. Your statement of custom header itself doesn?t mitigate CSRF relies on the fact that ?Flash being vulnerable to same bug again in future?. We cannot rely on a future statement and deprecate a technique, instead providing defense in depth measure for it and also cautioning users about past issues might be good idea. Users can take their call. Please read custom headers and origin check sections I re-wrote for more in-details. It talks about the issues and people can select if they want to use it or not.

Also, Login CSRF has nothing to do with custom header mitigation. Login forms are usually handled on <form> tags and custom header mitigation is only applicable on ajax calls because you cannot set custom headers on form tags. It can be applicable if you are doing logins on Ajax/XHR requests in which case my above response from custom header mitigation applies. I also proposed few methods for mitigating login CSRF which aligns with our primary defense on the new cheatsheet (tokens). Please review it as well.

Also, CORS has nothing to do with CSRF. I infact added CORS as a technique that should not be used/even thought for CSRF in the new cheatsheet I wrote. Please check that and also read [1]

[1] https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
[2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/

BTW - Here is the link to the new cheat sheet - https://tinyurl.com/y7k9fded

Again,  I you are not convinced ? please let me know specific item and we can happily discuss further ? Alternatively, you can send us your edits here for review and if it looks good for everyone ? you can edit it in the wiki.

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Sunday, October 7, 2018 1:13 PM
To: Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Sync your update with one from Konakandla Manideep please ?

Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>> a ?crit :
Aloha Jim!
With XSS, even CSRF tokens can be stolen :).
But I'll keep your tip in mind when editing the wiki. I'm planning to do that sometime this month.
Please feel free to review it whenever you guys get a chance.

Best,
Pankaj


On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com<mailto:jim at manicode.com>> wrote:

I agree JWT's architectures where cookies are not involved are resistant to CSRF but those tokens are at the risk of being stolen over XSS!

The Origin header does not go with all requests and FireFox does not fully support it yet. So careful!

:)

On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
I agree and that's why I would like to propose deprecation of 'custom header approach' as a CSRF defense.
Presently the mechanism that seems to work across applications is validating custom header as well as a forbidden header name (that cannot be set by a software or a program) e.g. Origin. If we want to give it a new name like 'Double Header Validation' or something else, I'm fine with that but custom header alone doesn't seem sufficient to mitigate CSRF issue.

There are some other best practices that should also be considered. I think CORS is now mature enough to have a mention in the CSRF defense Also, applications utilizing JWT token in the header seem immune to CSRF.

Please let me know what you guys think and if allowed, I can go ahead and make some of these edits for your perusal.


On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>> wrote:
Good question, I think it's more a point about to be consistent in terms of CSRF check across the application. Indeed, if you begin to perform different kind of CSRF check depending on the feature of the application (login, business feature, reset password...) it becomes risky and you significantly increase the chance to include location in which you will have a CSRF check weakness...
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Sat, Oct 6, 2018 at 9:51 PM Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>> wrote:
Do we know, regarding login CSRF, why validating the custom header as well as the Origin/Host header is not a sufficient mitigation?

On Fri, Sep 28, 2018 at 9:35 PM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Login CSRF is a way of exploiting CSRF on login forms (details here<https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a line about it in referrer validation section, it was not explained clearly and how it can scale with other techniques such as token based mitigation. No worries, I added a section about it!

Finally, I am done with the document from my side and its sent for internal reviews now. It should take 1-2 weeks before it comes to you guys. Meanwhile, I still need help on below items from you guys. If no one was able to find references for a), we can very well remove it.


a.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

b.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked in current cheatsheet

Happy weekend folks ?

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Thursday, September 27, 2018 3:02 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

...as for (d) I dont see any problems with passing tokens as headers or parameters

I dont understand (e) can you explain that again?
--
Jim Manico
@Manicode
Secure Coding Education
+1 (808) 652-3805

On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
2 more questions added  (Jim already started helping me on #a)


a.     I requested for an OWASP account and it?s still in pending. @JIM ? Can you please help me in getting my account approved? (registered with mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>)

b.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

c.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked

d.     At few places within the wiki, I have seen recommending to include token in headers for Ajax requests. I also don?t see a problem in passing them as parameters as well. Do you guys see any?

e.     I also have not seen at any place within the wiki talking about login CSRF issues and how each of the techniques described can be prone/immune to it. Is there any reason for it or are we open to include that?

From: Konakandla, Manideep
Sent: Wednesday, September 26, 2018 5:27 PM
To: 'Jim Manico' <jim at manicode.com<mailto:jim at manicode.com>>; 'Dominique Righetto' <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Cc: 'Jim Manico' <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; 'Dave Wichers' <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; 'eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>' <eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: RE: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Yeah. My understanding of the breadth of exploitation of XSS in an application protected with just origin/referrer and other application protected with just token based mitigation earlier was wrong. Dominique earlier email thread cleared that to me (breadth of exploitation is same in both the cases. i.e., if an XSS vulnerability is found in any individual application protected with only one of those techniques, it still can exploit all state changing operations on entire application [though the complexity of exploitation is easy in origin/referrer check than token based mitigation]).

Anyway, I am all clear and also almost done with re-factoring the cheatsheet  [1] ? Should be fully completed by Friday unless something comes up meanwhile. I will then send it to my colleagues for review and then for Legal, PR approvals. Before that, I need help from you guys on below items


a.     I requested for an OWASP account and it?s still in pending. @JIM ? Can you please help me in getting my account approved? (registered with mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>)

b.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

c.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked

[1] Below are changes done so far
a. Switched primary, secondary defense and our reasoning behind it (added lot of reasons on issues with origin/referrer header check and why token should be made primary)
b. Added CSRF mitigation myths (CORS, content-type validation etc.)
c. Added a section called ?Not so popular CSRF mitigations? (mentioned details about triple submit cookie)
d. Included limitations / issues associated with double submit cookie, same site cookie, captcha as a CSRF defense etc.
e. Removed lot of obsolete content and added some new content to some of the mitigations
f. Made document look more better by adding RFC?s links wherever possible and lot of other minor changes.

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Wednesday, September 26, 2018 4:19 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>


Well tokens can be placed in cookies.

The real answer to avoid CSRF is tokens in JavaScript variable as opposed to cookies. They are not automatically sent and indeed make CSRF impossible - at the expense of tokens being fully stolen via XSS. Pick your poison!

I recommend a COMBO of these defenses. For web apps, sychronizer token + header verification + re-authentication for sensitive features.

For API's double-cookie submit or just use JavaScript variable based tokens + header verification for same-site API's + re-authentication for sensitive features.
> [1] If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operationswithin that domain done to that AJAX endpoint. Do you agree?

Absolutely!

On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
Yeah, I understand that any XSS and CSRF game is over but I am stressing out on the highlighted part in [1]. I am trying to highlight and get an affirmation on why my understanding on token based mitigation is better than origin/referrer header check will also apply to ?token based mitigation Vs custom header mitigation (if static tokens are used in custom headers)?.

In case of tokens, we have an option to use different tokens on each page (taking things like URL, timestamp etc. into consideration) and hence XSS vulnerability on one page will only make state changing operations in that page vulnerable to CSRF but not state changing operations on other pages within that domain (because token value is different) but whereas in origin/referrer header check and custom header check, the token value is constant and hence XSS vulnerability in one page will also cause state changing operations in other pages to be vulnerable to CSRF as well. Off course, this can be mitigated in custom header checks by adding tokens to custom headers rather than static constant but this cannot be mitigated in origin/referrer check because those headers cannot be modified. So, yeah a single XSS any CSRF is bypassed but the breadth of the impact is different for each of them.

Regarding code samples ? I currently was able to allocate only some time for this task and I don?t think I will be able to do code samples within this time frame. I am also leaving for a long vacation starting Oct 12 and hence let?s try to get this out first and we can add code samples later on considering my work load after I return from vacation.

[1] If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operationswithin that domain done to that AJAX endpoint. Do you agree?

From: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Sent: Thursday, September 20, 2018 8:45 AM
To: Jim Manico <jim at manicode.com><mailto:jim at manicode.com>
Cc: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>; Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi,

Thanks for your contribution.

I like very much your plan ?

I ask for some favor in addition :
- can you provide code sample (in one language like java or .net or the one you want but it must be easy to read and understand) or libraires along your proposal for each section?
- can you use the syntaxhighlight tag for code?

I'am agree with Jim, XSS  means game over because your browsing context can be used as proxy so csrf protection will be defeated because request came from the legitimate user.

Thanks you again for all your help ???

Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com<mailto:jim at manicode.com>> a ?crit :

> If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

Any XSS is game over and all CSRF are useless in the face of XSS. I Agree!

- Jim

On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
Hey Guys,

[1] is what I said for origin/referrer header check in this e-mail thread. I also believe that this applies for custom headers for AJAX endpoints as well. If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

Here is how I am keeping the new re-factored cheatsheet. Does this look good to you guys?


1.       Use token based method as primary defense

a.       Can use synchronizer pattern for stateful applications

b.       Can use hah based/ encryption based token pattern for stateless applications

2.       Defense in depth measures along with drawbacks of each one

a.       Origin/referrer header check

b.       Double submit cookie

c.       Samesite cookie

d.       Custom headers (people still need to use tokens for forms etc. if they have mix of ajax endpoints and general HTML)

3.       Strong CSRF defenses but very less usable : captcha etc.

4.       CSRF Myths / techniques that do not work section

[1] if we solely rely on origin/referrer header check - an XSS vulnerability within a single page on that domain will also give CSRF vulnerability to all other state changing operations under that entire domain.

From: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Sent: Wednesday, September 12, 2018 1:31 PM
To: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>
Cc: Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi

Thanks you very much for the update

Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Just an update: I started working on this along with other sprint tasks of mine today. I am hoping to get it completed by end of next week and then send it for legal/PR approvals.

From: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>
Sent: Thursday, August 23, 2018 6:49 AM
To: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>


Awesome! Thank you! :)

- Jim

On 8/23/18 2:41 AM, Dominique Righetto wrote:
You are welcome :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Thu, Aug 23, 2018 at 10:33 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Np. I will keep u guys posted. Thanks for the support and have good rest of your day!

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Thursday, August 23, 2018 1:29 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi,

Sounds goods for me.

Thanks again for the contribution :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Thu, Aug 23, 2018 at 10:03 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Ok, I received necessary approvals for working on this. I am hoping to start the work in 2 weeks and then deliver the document to you guys for review by end of September/1st week of October (might be 1-2 weeks delay if approvals from Legal and other teams get delayed). My plan is to work on below things ? Please let me know if I missed anything/you feel something else has to be added to this list.


1.       Change the order of primary and defense in depth measures

2.       Include the pitfalls/caveats for each CSRF mitigation technique (origin/referrer header, samesite, double submit cookie etc.)

3.       Re-structure entire page and remove outdated/ non-relevant stuff

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Thursday, August 16, 2018 12:02 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Ok i perfectly understand.
Thanks for the info.

Le jeu. 16 ao?t 2018 ? 20:33, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
I had an offline discussion with Jim and informed him that I will have to che
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181011/9f458d97/attachment-0001.html>

From mkonakan at amazon.com  Fri Oct 12 01:47:27 2018
From: mkonakan at amazon.com (Konakandla, Manideep)
Date: Fri, 12 Oct 2018 01:47:27 +0000
Subject: [OWASP-cheat-sheets]
 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <70E7657A-CA1F-4BD7-ADF7-07A85CD08E6B@manicode.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<6795fa7232dd466e818b7953048e243d@EX13D11UWB004.ant.amazon.com>
	<CAL=9OGyNxb0eKf4mhS=jJTUfBNfbQvuV=sNVZ5BLNoVzVb6O6A@mail.gmail.com>
	<CANos97cSYSKc29nA-RCfFf9daVGSqEtEfNTek-mac9px04Oq0A@mail.gmail.com>
	<CAL=9OGxQQFYeWcXMFTgAx22KSi9x2TGjrStKFGqHA1xk-wOV0Q@mail.gmail.com>
	<136d2b2c-ef34-6e7f-0870-c4b61cdf4379@manicode.com>
	<CAL=9OGy0jP6OfLNoeTYW9k=2q5H9qdq78PkkNvbs6+zgAbaQ6Q@mail.gmail.com>
	<CANos97esCWvdW58rw5ZC+NHpLT1gwUwQWOd=+_BqPr5HPaiU_w@mail.gmail.com>
	<46fa44e0bd7941eaa029659ca8f3291f@EX13D11UWB004.ant.amazon.com>
	<CANos97csCLS8cgWwduXWt520AcT5Z_sfRXbNUc=Yq6+P8Tx1UA@mail.gmail.com>
	<ea0ad8742d904ea792880b77e6e81678@EX13D11UWB004.ant.amazon.com>
	<70E7657A-CA1F-4BD7-ADF7-07A85CD08E6B@manicode.com>
Message-ID: <37df98b064aa4b39af8d0e585638b3c4@EX13D11UWB004.ant.amazon.com>

Yes, I am feeling way better now. Thank you ?

@ALL: Cheat sheet is updated with all the changes now<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>. Please let me know if you have any issues by end of tomorrow. If there are no issues - I/we can start advertising the refactored cheat sheet in our networks ?

Thanks a ton Dominique and Jim for all your help till date. I really appreciate it!!! I will be actively maintaining this as well from today ?

Regards,
Manideep Konakandla
www.manideepk.com<http://www.manideepk.com>
Security Engineer @ Amazon
mkonakan at amazon.com<mailto:mkonakan at amazon.com>

From: Jim Manico <jim at manicode.com>
Sent: Wednesday, October 10, 2018 10:39 PM
To: Konakandla, Manideep <mkonakan at amazon.com>
Cc: Dominique Righetto <dominique.righetto at owasp.org>; Pankaj Upadhyay <p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Go for it!!! I hope you?re feeling better!
--
Jim Manico
@Manicode


On Oct 10, 2018, at 10:18 PM, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Sorry for late reply. I was on sick leave for last 2 days.

I synced up with Dominique in a different email chain to clarify something in his previous email. He gave me a go ahead to update wiki with new re-factored cheat sheet. I am planning to do it sometime tomorrow. @Jim : Is it with fine with you as well? Please let me know if you have any concerns.

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Monday, October 8, 2018 1:47 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>; Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hello all,

In order to move forward and deliver something in the project please update the wiki with content from the refactoring from Konakandla Manideep. If there missing points they will be added in another round it is the role of the wiki based usage.

Thanks in advance for your understanding ?

Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Hey Folks ?

Good conversation :) Can you guys review the new cheat sheet once? I am sure most of the discussion going on here is already answered in the new re-factored cheat sheet I wrote.

@Pankaj ? Go through the respective sections in the new cheat sheet. If they are not clear / you are not convinced, we can discuss more. Below is the summary of my response to your questions (you will find the same gist going through the cheat sheet as well).

Go through [2] to understand more detailed on how flash based bypass on CSRF custom mitigation defense works. You can see there that the origin headers are passed along with the custom headers and hence current wiki asks to do origin and/or referrer header check as defense-in-depth (it would help even if flash sometime in the future repeats same mistake and forwards custom headers without crossdomain.xml checks. Domain requesting the redirected request might be fooled with custom header bypass but not the origin header check). If both these checks are done, it is indeed a good defense but origin header is not always included etc. (just as Jim mentioned and also as new cheatsheet mentions).  I don?t think deprecating custom header check is a good idea. It is indeed a good solution for stateless services though they have to keep issues like I mentioned before in mind. Your statement of custom header itself doesn?t mitigate CSRF relies on the fact that ?Flash being vulnerable to same bug again in future?. We cannot rely on a future statement and deprecate a technique, instead providing defense in depth measure for it and also cautioning users about past issues might be good idea. Users can take their call. Please read custom headers and origin check sections I re-wrote for more in-details. It talks about the issues and people can select if they want to use it or not.

Also, Login CSRF has nothing to do with custom header mitigation. Login forms are usually handled on <form> tags and custom header mitigation is only applicable on ajax calls because you cannot set custom headers on form tags. It can be applicable if you are doing logins on Ajax/XHR requests in which case my above response from custom header mitigation applies. I also proposed few methods for mitigating login CSRF which aligns with our primary defense on the new cheatsheet (tokens). Please review it as well.

Also, CORS has nothing to do with CSRF. I infact added CORS as a technique that should not be used/even thought for CSRF in the new cheatsheet I wrote. Please check that and also read [1]

[1] https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
[2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/

BTW - Here is the link to the new cheat sheet - https://tinyurl.com/y7k9fded

Again,  I you are not convinced ? please let me know specific item and we can happily discuss further ? Alternatively, you can send us your edits here for review and if it looks good for everyone ? you can edit it in the wiki.

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Sunday, October 7, 2018 1:13 PM
To: Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Sync your update with one from Konakandla Manideep please ?

Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>> a ?crit :
Aloha Jim!
With XSS, even CSRF tokens can be stolen :).
But I'll keep your tip in mind when editing the wiki. I'm planning to do that sometime this month.
Please feel free to review it whenever you guys get a chance.

Best,
Pankaj


On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com<mailto:jim at manicode.com>> wrote:

I agree JWT's architectures where cookies are not involved are resistant to CSRF but those tokens are at the risk of being stolen over XSS!

The Origin header does not go with all requests and FireFox does not fully support it yet. So careful!

:)

On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
I agree and that's why I would like to propose deprecation of 'custom header approach' as a CSRF defense.
Presently the mechanism that seems to work across applications is validating custom header as well as a forbidden header name (that cannot be set by a software or a program) e.g. Origin. If we want to give it a new name like 'Double Header Validation' or something else, I'm fine with that but custom header alone doesn't seem sufficient to mitigate CSRF issue.

There are some other best practices that should also be considered. I think CORS is now mature enough to have a mention in the CSRF defense Also, applications utilizing JWT token in the header seem immune to CSRF.

Please let me know what you guys think and if allowed, I can go ahead and make some of these edits for your perusal.


On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>> wrote:
Good question, I think it's more a point about to be consistent in terms of CSRF check across the application. Indeed, if you begin to perform different kind of CSRF check depending on the feature of the application (login, business feature, reset password...) it becomes risky and you significantly increase the chance to include location in which you will have a CSRF check weakness...
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Sat, Oct 6, 2018 at 9:51 PM Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>> wrote:
Do we know, regarding login CSRF, why validating the custom header as well as the Origin/Host header is not a sufficient mitigation?

On Fri, Sep 28, 2018 at 9:35 PM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Login CSRF is a way of exploiting CSRF on login forms (details here<https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a line about it in referrer validation section, it was not explained clearly and how it can scale with other techniques such as token based mitigation. No worries, I added a section about it!

Finally, I am done with the document from my side and its sent for internal reviews now. It should take 1-2 weeks before it comes to you guys. Meanwhile, I still need help on below items from you guys. If no one was able to find references for a), we can very well remove it.


a.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

b.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked in current cheatsheet

Happy weekend folks ?

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Thursday, September 27, 2018 3:02 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

...as for (d) I dont see any problems with passing tokens as headers or parameters

I dont understand (e) can you explain that again?
--
Jim Manico
@Manicode
Secure Coding Education
+1 (808) 652-3805

On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
2 more questions added  (Jim already started helping me on #a)


a.     I requested for an OWASP account and it?s still in pending. @JIM ? Can you please help me in getting my account approved? (registered with mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>)

b.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

c.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked

d.     At few places within the wiki, I have seen recommending to include token in headers for Ajax requests. I also don?t see a problem in passing them as parameters as well. Do you guys see any?

e.     I also have not seen at any place within the wiki talking about login CSRF issues and how each of the techniques described can be prone/immune to it. Is there any reason for it or are we open to include that?

From: Konakandla, Manideep
Sent: Wednesday, September 26, 2018 5:27 PM
To: 'Jim Manico' <jim at manicode.com<mailto:jim at manicode.com>>; 'Dominique Righetto' <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Cc: 'Jim Manico' <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; 'Dave Wichers' <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; 'eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>' <eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: RE: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Yeah. My understanding of the breadth of exploitation of XSS in an application protected with just origin/referrer and other application protected with just token based mitigation earlier was wrong. Dominique earlier email thread cleared that to me (breadth of exploitation is same in both the cases. i.e., if an XSS vulnerability is found in any individual application protected with only one of those techniques, it still can exploit all state changing operations on entire application [though the complexity of exploitation is easy in origin/referrer check than token based mitigation]).

Anyway, I am all clear and also almost done with re-factoring the cheatsheet  [1] ? Should be fully completed by Friday unless something comes up meanwhile. I will then send it to my colleagues for review and then for Legal, PR approvals. Before that, I need help from you guys on below items


a.     I requested for an OWASP account and it?s still in pending. @JIM ? Can you please help me in getting my account approved? (registered with mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>)

b.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

c.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked

[1] Below are changes done so far
a. Switched primary, secondary defense and our reasoning behind it (added lot of reasons on issues with origin/referrer header check and why token should be made primary)
b. Added CSRF mitigation myths (CORS, content-type validation etc.)
c. Added a section called ?Not so popular CSRF mitigations? (mentioned details about triple submit cookie)
d. Included limitations / issues associated with double submit cookie, same site cookie, captcha as a CSRF defense etc.
e. Removed lot of obsolete content and added some new content to some of the mitigations
f. Made document look more better by adding RFC?s links wherever possible and lot of other minor changes.

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Wednesday, September 26, 2018 4:19 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>


Well tokens can be placed in cookies.

The real answer to avoid CSRF is tokens in JavaScript variable as opposed to cookies. They are not automatically sent and indeed make CSRF impossible - at the expense of tokens being fully stolen via XSS. Pick your poison!

I recommend a COMBO of these defenses. For web apps, sychronizer token + header verification + re-authentication for sensitive features.

For API's double-cookie submit or just use JavaScript variable based tokens + header verification for same-site API's + re-authentication for sensitive features.
> [1] If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operationswithin that domain done to that AJAX endpoint. Do you agree?

Absolutely!

On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
Yeah, I understand that any XSS and CSRF game is over but I am stressing out on the highlighted part in [1]. I am trying to highlight and get an affirmation on why my understanding on token based mitigation is better than origin/referrer header check will also apply to ?token based mitigation Vs custom header mitigation (if static tokens are used in custom headers)?.

In case of tokens, we have an option to use different tokens on each page (taking things like URL, timestamp etc. into consideration) and hence XSS vulnerability on one page will only make state changing operations in that page vulnerable to CSRF but not state changing operations on other pages within that domain (because token value is different) but whereas in origin/referrer header check and custom header check, the token value is constant and hence XSS vulnerability in one page will also cause state changing operations in other pages to be vulnerable to CSRF as well. Off course, this can be mitigated in custom header checks by adding tokens to custom headers rather than static constant but this cannot be mitigated in origin/referrer check because those headers cannot be modified. So, yeah a single XSS any CSRF is bypassed but the breadth of the impact is different for each of them.

Regarding code samples ? I currently was able to allocate only some time for this task and I don?t think I will be able to do code samples within this time frame. I am also leaving for a long vacation starting Oct 12 and hence let?s try to get this out first and we can add code samples later on considering my work load after I return from vacation.

[1] If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operationswithin that domain done to that AJAX endpoint. Do you agree?

From: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Sent: Thursday, September 20, 2018 8:45 AM
To: Jim Manico <jim at manicode.com><mailto:jim at manicode.com>
Cc: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>; Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi,

Thanks for your contribution.

I like very much your plan ?

I ask for some favor in addition :
- can you provide code sample (in one language like java or .net or the one you want but it must be easy to read and understand) or libraires along your proposal for each section?
- can you use the syntaxhighlight tag for code?

I'am agree with Jim, XSS  means game over because your browsing context can be used as proxy so csrf protection will be defeated because request came from the legitimate user.

Thanks you again for all your help ???

Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com<mailto:jim at manicode.com>> a ?crit :

> If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

Any XSS is game over and all CSRF are useless in the face of XSS. I Agree!

- Jim

On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
Hey Guys,

[1] is what I said for origin/referrer header check in this e-mail thread. I also believe that this applies for custom headers for AJAX endpoints as well. If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

Here is how I am keeping the new re-factored cheatsheet. Does this look good to you guys?


1.       Use token based method as primary defense

a.       Can use synchronizer pattern for stateful applications

b.       Can use hah based/ encryption based token pattern for stateless applications

2.       Defense in depth measures along with drawbacks of each one

a.       Origin/referrer header check

b.       Double submit cookie

c.       Samesite cookie

d.       Custom headers (people still need to use tokens for forms etc. if they have mix of ajax endpoints and general HTML)

3.       Strong CSRF defenses but very less usable : captcha etc.

4.       CSRF Myths / techniques that do not work section

[1] if we solely rely on origin/referrer header check - an XSS vulnerability within a single page on that domain will also give CSRF vulnerability to all other state changing operations under that entire domain.

From: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Sent: Wednesday, September 12, 2018 1:31 PM
To: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>
Cc: Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi

Thanks you very much for the update

Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Just an update: I started working on this along with other sprint tasks of mine today. I am hoping to get it completed by end of next week and then send it for legal/PR approvals.

From: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>
Sent: Thursday, August 23, 2018 6:49 AM
To: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>


Awesome! Thank you! :)

- Jim

On 8/23/18 2:41 AM, Dominique Righetto wrote:
You are welcome :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Thu, Aug 23, 2018 at 10:33 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Np. I will keep u guys posted. Thanks for the support and have good rest of your day!

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Thursday, August 23, 2018 1:29 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi,

Sounds goods for me.

Thanks again for the contribution :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Thu, Aug 23, 2018 at 10:03 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Ok, I received necessary approvals for working on this. I am hoping to start the work in 2 weeks and then deliver the document to you guys for review by end of September/1st week of October (might be 1-2 weeks delay if approvals from Legal and other teams get delayed). My plan is to work on below things ? Please let me know if I missed anything/you feel something else has to be added to this list.


1.       Change the order of primary and defense in depth measures

2.       Include the pitfalls/caveats for each CSRF mitigation technique (origin/referrer header, samesite, double submit cookie etc.)

3.       Re-structure entire page and remove outdated/ non-relevant stuff

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Thursday, August 16, 2018 12:02 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Ok i perfectly understand.
Thanks for the info.

Le jeu. 16 ao?t 2018 ? 20:33, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
I had an offline discussion with Jim and informed him that I will have to che
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181012/3641335a/attachment-0001.html>

From dominique.righetto at owasp.org  Wed Oct 31 17:27:01 2018
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Wed, 31 Oct 2018 18:27:01 +0100
Subject: [OWASP-cheat-sheets] Add Log Injection Prevention to:
	Injection_Prevention_Cheat_Sheet_in_Java
In-Reply-To: <CANos97f7N1-q6trQJKaex7O=gZmxSGZimBRZOwOC2D1x_HkOtQ@mail.gmail.com>
References: <CAMVdSy7B8WuevoL15rOC-HiZx=3aNNB9xg4DUr-10k1ezJq66g@mail.gmail.com>
	<CANos97f7N1-q6trQJKaex7O=gZmxSGZimBRZOwOC2D1x_HkOtQ@mail.gmail.com>
Message-ID: <CANos97eStUdobb5VN2iCJWmOBFE5Crbo1hNLEV3XsRLnXXEt-g@mail.gmail.com>

Add to the project's roadmap:

https://trello.com/c/UNLO4Xop/15-update-java-injection-cs-with-logging-topic


--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com
<dominique.righetto at gmail.com>dominique.righetto at owasp.org
<dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Wed, Oct 31, 2018 at 6:17 PM Dominique Righetto <
dominique.righetto at owasp.org> wrote:

> Hello Dave,
>
> I will add it to the project roadmap but i cannot give you an ETA because
> there currently a lot of task pending...
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
> <dominique.righetto at gmail.com>dominique.righetto at owasp.org
> <dominique.righetto at gmail.com>
> https://righettod.eu
> GPG: 323D19BA
>
>
> On Wed, Oct 31, 2018 at 6:01 PM Dave Wichers <dwichers at gmail.com> wrote:
>
>> Hey, I was looking at:
>>
>> https://www.owasp.org/index.php/Injection_Prevention_Cheat_Sheet_in_Java
>>
>> And noticed it does not cover Java log injection. There aren't any good
>> articles on this subject really, but I did find this blog post:
>>
>> https://github.com/javabeanz/owasp-security-logging/wiki/Log-Forging
>>
>> Could you take the time to add a section on Log Injection prevent and
>> reference/include this recommendation, and anything else good you can find
>> for the Java world??
>>
>> Thanks, Dave
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20181031/32b776fe/attachment.html>

