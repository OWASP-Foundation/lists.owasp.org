From yo at johanpeeters.com  Wed May  2 09:42:50 2018
From: yo at johanpeeters.com (Johan Peeters)
Date: Wed, 2 May 2018 11:42:50 +0200
Subject: [OWASP-cheat-sheets] OWASP ReST Security Cheat Sheet
In-Reply-To: <bc9756b6-eb3a-af47-c68f-47f673602727@afip.gob.ar>
References: <20180411201746.2bd7545a@smtps1.afip.gob.ar>
	<c9c28116-fb02-af37-3345-d0eb6e712937@afip.gob.ar>
	<CAGRYwJz8J6i9kaq2_mCJM8mUiax+RRW0tsjtgZ4EqCgCcg+eEw@mail.gmail.com>
	<d8b4de76-6f7a-a033-8fa3-bfdb7d29211c@owasp.org>
	<CAGRYwJwKriEf7nzO++XpgubcKdDciww6R6UeHVPMp8xncDiNeg@mail.gmail.com>
	<CADFnxGeO6SRbR+JrWAe+gYhvqFmJaaw21nBcsSq7X-w4nqXu3g@mail.gmail.com>
	<eae8e4ee-9431-4efc-f7c8-6aa0644495c9@afip.gob.ar>
	<bc9756b6-eb3a-af47-c68f-47f673602727@afip.gob.ar>
Message-ID: <CADFnxGfsKzzTf_sP-qRPDkcw0XzQDFYqraaysGKrTi86Zn=v+g@mail.gmail.com>

As there seems consensus on Jan and Pablo's proposals, I have updated the
cheat sheet accordingly.

thanks for your contribution,

Yo

On 26 April 2018 at 16:41, Pablo Lalloni <plalloni at afip.gob.ar> wrote:

> I'm sorry I forgot to add Jan's proposal of warning in the table:
>
> "Be aware that the response should not reveal internal information that
> helps an attacker, e.g. detailed error messages or stack traces. "
>
> I agree it should be added somewhere. It will help sec teams and dev teams
> to do the right things.
>
> El 26/04/18 a las 11:35, Pablo Lalloni escribi?:
>
> Hello again, it's great to hear from you.
>
> Thanks to all for your atention on this issue!
> Let me update the situation a little: we made half a dozen different
> proposals to the security team for solving the issue, finally they are
> "checking" if they "can" allow responses with non-standard http code 555 to
> pass through unmodified. Which we don't prefer because it's not a standard
> status code and all apps will have to be modified as well as all clients,
> not to mention the possible problems we could find on how all http
> intermediaries will handle that responses.
>
> There's also the requirement of being able to pass some globally unique
> error id in the 5xx response body so clients can show it to the user who
> can then call helpdesk and provide that error id for diagnostics.
>
> A little better option we offered was to ask server apps to add a custom
> header like "X-Error-Identifier: <error-id>" to indicate to downstream http
> intermediaries the error is emitted in a secure & controlled manner so WAF
> can let it pass through unmodified trusting the original server did the
> right thing. If you like this proposal, please consider recomending it on
> the wiki as a reasonable approach.
>
> Anyway, I believe we agree on that 5xx responses should be allowed to pass
> through unmodified for both REST services and for well-behaved ajax-based
> webapps. Maybe this can stated in the wiki so devs can demand security
> teams to have a specific profiles for this cases (for example, in F5 ASM,
> specific templates could be added for this cases instead of using the
> generic webapp template which behaves as described in my first email).
>
> Not including the above matters (still to be resolved), let me propose to
> modify the wiki page, with this changes:
>
> In the section "HTTP Return Code", change the first two paragraphs to:
>
> HTTP defines status code [1]
> <https://en.wikipedia.org/wiki/List_of_HTTP_status_codes>. When designing
> REST API, don't just use 200 for success or 404 for error. Use any
> semantically appropriate status code for the response.
>
> Here is a non-exhaustive selection of security related REST API status
> codes. Use it as a sample of the return codes you can use.
>
> In the same section, add the following rows to the table of recommended
> status codes:
> Status code Message Description
> 500 Internal server error
> An error has ocurred during REST service request processing
> It's used to inform about the problem in the response
> 501 Not implemented
> The REST service does not implement the requested operation yet
> 503
> Service unavailable
> The REST service is temporarily unable to process the request
> It's used to inform the client it should retry at a later time
>
> Please excuse me for this quite long answer.
>
> Thanks for your time.
>
> El 25/04/18 a las 13:02, Johan Peeters escribi?:
>
> I agree with Jan?s proposal.
>
> On Wed, 25 Apr 2018 at 17:56 Erlend Oftedal <erlend.oftedal at owasp.org>
> wrote:
>
>> Looks good, Jan. Would this help you, Pablo?
>>
>>
>> On Wed, 25 Apr 2018 at 17:53, Jan Wolff <jan.wolff at owasp.org> wrote:
>>
>>> Hi Pablo, Hi Erlend, Hi Yo, Hi Rocco,
>>>
>>> I agree with Erlend, and I believe his second approach to strip the body
>>> would be a good compromise for the scenario you described.
>>>
>>> A typical reason for filtering 500 responses in general is information
>>> leakage, e.g. error messages in HTML from the database that ease SQL
>>> injection. But a even a plain 500 status code indicates that some kind of
>>> error condition was triggered on the server side and can be used as an
>>> oracle in some attacks. In my opinion, changing the status code to 200 and
>>> a standard page does not really solve that problem since the error
>>> condition can still be detected by looking for the standard error page and
>>> probably by looking at the request timing.
>>> I believe, omitting the 500 status code in the table in the cheatsheet
>>> was not on purpose. The table was intended to list especially security
>>> related status codes, and it seems we did not discuss the 5xx codes.
>>> In some situations, a 500 code can indicate bugs that should be fixed by
>>> better input validation and a 4xx response. But there are valid reasons for
>>> 500 status codes, essentially the 5xx means: "Your request was ok, but I
>>> can't handle it."
>>>
>>> I propose to add the following line to the table:
>>> "500 | Internal Server Error | An unexpected condition prevented the
>>> server from fulfilling the request. Be aware that the response should not
>>> reveal internal information that helps an attacker, e.g. detailed error
>>> messages or stack traces. "
>>>
>>> What do you think? Does that improve the cheat sheet? Does it reduce the
>>> risk of misinterpreting the table?
>>>
>>> Best
>>>
>>> Jan
>>>
>>>
>>>
>>> Am 25.04.2018 um 15:56 schrieb Erlend Oftedal:
>>>
>>> Hi Pablo,
>>> Sorry for not responding sooner. I think you should raise this in the
>>> OWASP Slack, possibly in the #cheatsheets channel or #appsec channel
>>>
>>> To address your question: The normal approach for a WAF makes sense, as
>>> a lot of applications still issue stack traces etc. in their response.
>>> For a well written REST service this concern is likely not valid. I
>>> currently see three options:
>>> Allow 5xx codes with body
>>> Allow 5xx codes but scrub body
>>> Their current approach.
>>> Would they also appose to the second approach?
>>>
>>> The OWASP wiki is open for everyone to edit, but I understand that it
>>> would look weird if you added this yourself and then went to the security
>>> team to request a change.
>>> If you want, you can suggest a text on email, then I can review it and
>>> add it to the page (as long as I agree with it of course).
>>>
>>> Best regards,
>>> Erlend
>>>
>>>
>>>
>>> On 25 April 2018 at 15:39, Pablo Lalloni <plalloni at afip.gob.ar> wrote:
>>>
>>>> Hello again,
>>>>
>>>> Can you please tell me where would be the right place to have this
>>>> conversation?
>>>>
>>>> Thanks.
>>>>
>>>>
>>>> El 11/04/18 a las 20:17, Pablo Lalloni escribi?:
>>>> > Hola,
>>>> >
>>>> > How are you? I hope you are doing well.
>>>> >
>>>> > My name is Pablo Lalloni and I write from the IT Architecture
>>>> > Department of AFIP (1).
>>>> >
>>>> > I'm not sure if this is the right channel for having this
>>>> conversation.
>>>> > If that's not the case please forgive me and point me to the right
>>>> > place. I'm writing directly to your email addresses just because we've
>>>> > found them on (2).
>>>> >
>>>> > Now to the points:
>>>> >
>>>> > We are currently having a discussion about HTTP response filtering at
>>>> > the WAF layer (traditionally has been in force across all
>>>> organization's
>>>> > web applications) for ReST services and particularly for "modern" web
>>>> > applications which act both as web app and web service.
>>>> >
>>>> > Currently WAF transforms all http responses with status code in the
>>>> 500
>>>> > family, changing the status code to 200 and the content to some
>>>> > opinionated "nothing". Of course the clients break miserably on this
>>>> > unexpected response, so we are asking the security team to allow such
>>>> > http status codes without tampering with the responses (of course
>>>> > service implementations should ensure no sensitive details are exposed
>>>> > in 5xx responses, but clients need to know there was a 500!).
>>>> >
>>>> > At this point they refer us to some OWASP recommendations (about web
>>>> > applications in general) which say that webapps should avoid issuing
>>>> > http 5xx status codes completely. Then we cite "OWASP ReST Security
>>>> > Cheat Sheet" (2) which states that ReST services should use the
>>>> > semantically correct http status code (on which we agree completely),
>>>> > including the 5xx family. Then we found in that document (2) the table
>>>> > of example http status codes to be used fail to list any of the 5xx
>>>> > family, perhaps allowing the reader to interpret that such family
>>>> > should not be used.
>>>> >
>>>> > So our specific questions are:
>>>> >
>>>> > Is OWASP recommending to avoid http 5xx status codes in ReST
>>>> responses?
>>>> > If that's not the case, then could OWASP consider being more explicit
>>>> > about that in (2) by listing as valid response status codes some of
>>>> > the 5xx family?
>>>> >
>>>> > Saludos.
>>>> >
>>>> > Links
>>>> > 1) https://www.afip.gob.ar
>>>> > 2) https://www.owasp.org/index.php/REST_Security_Cheat_Sheet
>>>>
>>>>
>>>
>>> --
> Johan Peeters
> https://www.johanpeeters.com
>
>
>
>


-- 
Johan Peeters
https://www.johanpeeters.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20180502/3251e94c/attachment-0001.html>

