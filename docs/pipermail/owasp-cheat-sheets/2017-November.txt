From yo at johanpeeters.com  Tue Nov 14 09:56:47 2017
From: yo at johanpeeters.com (Johan Peeters)
Date: Tue, 14 Nov 2017 10:56:47 +0100
Subject: [OWASP-cheat-sheets] REST and STS
Message-ID: <CADFnxGeX-rqqgUdQhHwcjwK-r2t-WuZ1Y6kEFG8UmC_8Gkx08A@mail.gmail.com>

No sooner did Jim move the REST cheat sheet from draft to approved
mode than old controversies reared up again. The principal one was
whether we should cover session management, but I won't go into that
in this post.

Here I want to discuss what the deal is with Security Token Services (STS).
Erlend asked me: can't you have a REST service without an STS? Sure,
if no authN/Z is needed, obviously. If the REST API is sensitive,
serves multiple clients and there are several resource servers, on the
other hand, then I would strongly recommend using an STS. This
centralises authentication logic in a dedicated component and avoids
passing credentials around.
If you do not have and do not anticipate having multiple clients or
resource servers, maybe REST APIs are not the right choice - probably
there are simpler designs that serve your purpose.

Yo
-- 
Johan Peeters
https://www.johanpeeters.com

From erlend.oftedal at owasp.org  Tue Nov 14 11:24:20 2017
From: erlend.oftedal at owasp.org (Erlend Oftedal)
Date: Tue, 14 Nov 2017 12:24:20 +0100
Subject: [OWASP-cheat-sheets] REST and STS
In-Reply-To: <CADFnxGeX-rqqgUdQhHwcjwK-r2t-WuZ1Y6kEFG8UmC_8Gkx08A@mail.gmail.com>
References: <CADFnxGeX-rqqgUdQhHwcjwK-r2t-WuZ1Y6kEFG8UmC_8Gkx08A@mail.gmail.com>
Message-ID: <CAGRYwJyNoHSgiaUN7dtYCCrdHTSpzKVuGfNnYEux2fftw35bfg@mail.gmail.com>

Even if you have a single client and a single resource server, you can
still benefit from REST APIs. My example would be building a single page
web app. By using a REST API you can separate frontend from backend
properly and deploy them independently. You can completely rewrite the
frontend with no changes to the backend. But why does that imply the need
for an STS/IdP? Why is sessions a problem here?
Resources can still work as they are supposed to, without depending on
session state. The session is for authentication information only. It
carries authentication information, but that information doesn't affect the
way resources are processed (except for the auth, but that holds for basic
auth, tokens, and all other types of authentication as well).

Is it possible to design an STS/IdP with a REST API?


On 14 November 2017 at 10:56, Johan Peeters <yo at johanpeeters.com> wrote:

> No sooner did Jim move the REST cheat sheet from draft to approved
> mode than old controversies reared up again. The principal one was
> whether we should cover session management, but I won't go into that
> in this post.
>
> Here I want to discuss what the deal is with Security Token Services (STS).
> Erlend asked me: can't you have a REST service without an STS? Sure,
> if no authN/Z is needed, obviously. If the REST API is sensitive,
> serves multiple clients and there are several resource servers, on the
> other hand, then I would strongly recommend using an STS. This
> centralises authentication logic in a dedicated component and avoids
> passing credentials around.
> If you do not have and do not anticipate having multiple clients or
> resource servers, maybe REST APIs are not the right choice - probably
> there are simpler designs that serve your purpose.
>
> Yo
> --
> Johan Peeters
> https://www.johanpeeters.com
> _______________________________________________
> OWASP-cheat-sheets mailing list
> OWASP-cheat-sheets at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171114/ea0f7db3/attachment.html>

From yo at johanpeeters.com  Tue Nov 14 14:40:48 2017
From: yo at johanpeeters.com (Johan Peeters)
Date: Tue, 14 Nov 2017 15:40:48 +0100
Subject: [OWASP-cheat-sheets] REST and STS
In-Reply-To: <CAGRYwJyNoHSgiaUN7dtYCCrdHTSpzKVuGfNnYEux2fftw35bfg@mail.gmail.com>
References: <CADFnxGeX-rqqgUdQhHwcjwK-r2t-WuZ1Y6kEFG8UmC_8Gkx08A@mail.gmail.com>
	<CAGRYwJyNoHSgiaUN7dtYCCrdHTSpzKVuGfNnYEux2fftw35bfg@mail.gmail.com>
Message-ID: <CADFnxGeZt6jGH_S3yFv6McZFfqg8-VvWOteA+Ce69+EbFZXLZQ@mail.gmail.com>

An SPA with REST API back-ends seems to me to be the obvious
architecture for today's web apps. No argument there.
Having made that choice and assuming you need access control in your
REST APIs you could try to let the REST API handle authN. But here are
the problems that you hit upon or, arguably, create:
+ if you have several resource servers, your authN/Z code is
duplicated in all of them
+ users must pass their credentials to the clients, which in turn pass
them to the resource servers. Contrast this with an architecture in
which only a central IdP receives credentials..
+ authN mechanisms are evolving. You want to decouple this from your
resource servers.
+ IdP and STS are part of your TCB, so you want this to be as small as
possible and coded by experts - most shops would do well to use a 3rd
party component.
+ ...
Sessions are always a problem in the sense that they are part of the
attack surface, and rather vulnerable/attractive targets, so you don't
want sessions unless they are absolutely indispensable.

The OAuth authorization servers (IdP/STS) I have worked with so far
have indeed offered a REST API, but only for
+ management APIs
+ the /token endpoint
The /authorize endpoint is invoked with a redirect URI and returns a
web form for the user. In other words, the only OAuth grants that are
completely handled via APIs are Client Credentials and Resource Owner.
Authorization Code and variants only use an API for trading the code
in for a token.
Does that answer your question?

Yo


On 14 November 2017 at 12:24, Erlend Oftedal <erlend.oftedal at owasp.org> wrote:
> Even if you have a single client and a single resource server, you can still
> benefit from REST APIs. My example would be building a single page web app.
> By using a REST API you can separate frontend from backend properly and
> deploy them independently. You can completely rewrite the frontend with no
> changes to the backend. But why does that imply the need for an STS/IdP? Why
> is sessions a problem here?
> Resources can still work as they are supposed to, without depending on
> session state. The session is for authentication information only. It
> carries authentication information, but that information doesn't affect the
> way resources are processed (except for the auth, but that holds for basic
> auth, tokens, and all other types of authentication as well).
>
> Is it possible to design an STS/IdP with a REST API?
>
>
> On 14 November 2017 at 10:56, Johan Peeters <yo at johanpeeters.com> wrote:
>>
>> No sooner did Jim move the REST cheat sheet from draft to approved
>> mode than old controversies reared up again. The principal one was
>> whether we should cover session management, but I won't go into that
>> in this post.
>>
>> Here I want to discuss what the deal is with Security Token Services
>> (STS).
>> Erlend asked me: can't you have a REST service without an STS? Sure,
>> if no authN/Z is needed, obviously. If the REST API is sensitive,
>> serves multiple clients and there are several resource servers, on the
>> other hand, then I would strongly recommend using an STS. This
>> centralises authentication logic in a dedicated component and avoids
>> passing credentials around.
>> If you do not have and do not anticipate having multiple clients or
>> resource servers, maybe REST APIs are not the right choice - probably
>> there are simpler designs that serve your purpose.
>>
>> Yo
>> --
>> Johan Peeters
>> https://www.johanpeeters.com
>> _______________________________________________
>> OWASP-cheat-sheets mailing list
>> OWASP-cheat-sheets at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>
>



-- 
Johan Peeters
https://www.johanpeeters.com

From erlend.oftedal at owasp.org  Tue Nov 14 15:20:53 2017
From: erlend.oftedal at owasp.org (Erlend Oftedal)
Date: Tue, 14 Nov 2017 16:20:53 +0100
Subject: [OWASP-cheat-sheets] REST and STS
In-Reply-To: <CADFnxGeZt6jGH_S3yFv6McZFfqg8-VvWOteA+Ce69+EbFZXLZQ@mail.gmail.com>
References: <CADFnxGeX-rqqgUdQhHwcjwK-r2t-WuZ1Y6kEFG8UmC_8Gkx08A@mail.gmail.com>
	<CAGRYwJyNoHSgiaUN7dtYCCrdHTSpzKVuGfNnYEux2fftw35bfg@mail.gmail.com>
	<CADFnxGeZt6jGH_S3yFv6McZFfqg8-VvWOteA+Ce69+EbFZXLZQ@mail.gmail.com>
Message-ID: <CAGRYwJy1TsymncWaO9we=juhQKC4W7_wb8wR0BbC6+ycqC=0jQ@mail.gmail.com>

If you have multiple resource servers and/or clients I completely agree
that it makes sense to use an STS/IdP, but I don't see how that dictates
what a REST API is.
I still think it's perfectly possible to have a single resource server
which also serves as the authentication service, and call it a REST API.
Because at least to me it's more about the design of the RESTful resources
than how it interacts with authentication.
Also one could also argue that artifact/identifier tokens imply server side
state (tables of valid refresh and access tokens tied to users accounts).
JWTs are a different story as they can be self-contained.
I would also argue that services still need to authz/authn logic. They need
to validate the token, they may need to check claims/roles/scope (allthough
this should probably be handled at the idp), they need to horisontal
authorization checks etc.

I don't see how sessions are more of an attack service than tokens. There
have been a lot of issues with how redirects etc. are handled in OAuth 2
IdPs, tokens can still be stolen etc. The problems don't disappear, they
just change form IMHO.


Erlend









On 14 November 2017 at 15:40, Johan Peeters <yo at johanpeeters.com> wrote:

> An SPA with REST API back-ends seems to me to be the obvious
> architecture for today's web apps. No argument there.
> Having made that choice and assuming you need access control in your
> REST APIs you could try to let the REST API handle authN. But here are
> the problems that you hit upon or, arguably, create:
> + if you have several resource servers, your authN/Z code is
> duplicated in all of them
> + users must pass their credentials to the clients, which in turn pass
> them to the resource servers. Contrast this with an architecture in
> which only a central IdP receives credentials..
> + authN mechanisms are evolving. You want to decouple this from your
> resource servers.
> + IdP and STS are part of your TCB, so you want this to be as small as
> possible and coded by experts - most shops would do well to use a 3rd
> party component.
> + ...
> Sessions are always a problem in the sense that they are part of the
> attack surface, and rather vulnerable/attractive targets, so you don't
> want sessions unless they are absolutely indispensable.
>
> The OAuth authorization servers (IdP/STS) I have worked with so far
> have indeed offered a REST API, but only for
> + management APIs
> + the /token endpoint
> The /authorize endpoint is invoked with a redirect URI and returns a
> web form for the user. In other words, the only OAuth grants that are
> completely handled via APIs are Client Credentials and Resource Owner.
> Authorization Code and variants only use an API for trading the code
> in for a token.
> Does that answer your question?
>
> Yo
>
>
> On 14 November 2017 at 12:24, Erlend Oftedal <erlend.oftedal at owasp.org>
> wrote:
> > Even if you have a single client and a single resource server, you can
> still
> > benefit from REST APIs. My example would be building a single page web
> app.
> > By using a REST API you can separate frontend from backend properly and
> > deploy them independently. You can completely rewrite the frontend with
> no
> > changes to the backend. But why does that imply the need for an STS/IdP?
> Why
> > is sessions a problem here?
> > Resources can still work as they are supposed to, without depending on
> > session state. The session is for authentication information only. It
> > carries authentication information, but that information doesn't affect
> the
> > way resources are processed (except for the auth, but that holds for
> basic
> > auth, tokens, and all other types of authentication as well).
> >
> > Is it possible to design an STS/IdP with a REST API?
> >
> >
> > On 14 November 2017 at 10:56, Johan Peeters <yo at johanpeeters.com> wrote:
> >>
> >> No sooner did Jim move the REST cheat sheet from draft to approved
> >> mode than old controversies reared up again. The principal one was
> >> whether we should cover session management, but I won't go into that
> >> in this post.
> >>
> >> Here I want to discuss what the deal is with Security Token Services
> >> (STS).
> >> Erlend asked me: can't you have a REST service without an STS? Sure,
> >> if no authN/Z is needed, obviously. If the REST API is sensitive,
> >> serves multiple clients and there are several resource servers, on the
> >> other hand, then I would strongly recommend using an STS. This
> >> centralises authentication logic in a dedicated component and avoids
> >> passing credentials around.
> >> If you do not have and do not anticipate having multiple clients or
> >> resource servers, maybe REST APIs are not the right choice - probably
> >> there are simpler designs that serve your purpose.
> >>
> >> Yo
> >> --
> >> Johan Peeters
> >> https://www.johanpeeters.com
> >> _______________________________________________
> >> OWASP-cheat-sheets mailing list
> >> OWASP-cheat-sheets at lists.owasp.org
> >> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
> >
> >
>
>
>
> --
> Johan Peeters
> https://www.johanpeeters.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171114/696634a8/attachment.html>

From yo at johanpeeters.com  Tue Nov 14 16:18:34 2017
From: yo at johanpeeters.com (Johan Peeters)
Date: Tue, 14 Nov 2017 17:18:34 +0100
Subject: [OWASP-cheat-sheets] REST and STS
In-Reply-To: <CAGRYwJy1TsymncWaO9we=juhQKC4W7_wb8wR0BbC6+ycqC=0jQ@mail.gmail.com>
References: <CADFnxGeX-rqqgUdQhHwcjwK-r2t-WuZ1Y6kEFG8UmC_8Gkx08A@mail.gmail.com>
	<CAGRYwJyNoHSgiaUN7dtYCCrdHTSpzKVuGfNnYEux2fftw35bfg@mail.gmail.com>
	<CADFnxGeZt6jGH_S3yFv6McZFfqg8-VvWOteA+Ce69+EbFZXLZQ@mail.gmail.com>
	<CAGRYwJy1TsymncWaO9we=juhQKC4W7_wb8wR0BbC6+ycqC=0jQ@mail.gmail.com>
Message-ID: <CADFnxGfrxK2YPZ9NO7bWrSdfL-93n=faZYkNOcgi6RNxmbFaLw@mail.gmail.com>

I don't think I said that you can't do REST without a separate
STS/IdP, just that it is advisable to have one.
The .NET community seem to be doing a lot of stuff along the lines you
suggest: IdentityServer gets deployed within the same project as the
resources and offers the authorization server endpoints. Note however
that these are distinct from the REST APIs. You first get your token
and then call the API.
Co-locating STS and resource servers does not seem to me to be an
approach that scales well, but hey, not everyone needs to scale.
I have no problem calling JWT validation 'authentication'. We must be
clear, however, that it is not the user that is being authenticated,
nor the client, but the token. Resource servers may need to make an
authorization decision based on the contents of a valid JWT. However,
the more of the authZ we can do in the STS/IdP the better - security
policies are more easily/reliably enforced centrally.

If we have both tokens AND session cookies, we would have a larger
attack surface than if we only have tokens, right?
Of course tokens are not invincible. Of course I agree with you that
they have a pretty bad track record. But surely that's not a reason to
also add session cookies!

On 14 November 2017 at 16:20, Erlend Oftedal <erlend.oftedal at owasp.org> wrote:
> If you have multiple resource servers and/or clients I completely agree that
> it makes sense to use an STS/IdP, but I don't see how that dictates what a
> REST API is.
> I still think it's perfectly possible to have a single resource server which
> also serves as the authentication service, and call it a REST API. Because
> at least to me it's more about the design of the RESTful resources than how
> it interacts with authentication.
> Also one could also argue that artifact/identifier tokens imply server side
> state (tables of valid refresh and access tokens tied to users accounts).
> JWTs are a different story as they can be self-contained.
> I would also argue that services still need to authz/authn logic. They need
> to validate the token, they may need to check claims/roles/scope (allthough
> this should probably be handled at the idp), they need to horisontal
> authorization checks etc.
>
> I don't see how sessions are more of an attack service than tokens. There
> have been a lot of issues with how redirects etc. are handled in OAuth 2
> IdPs, tokens can still be stolen etc. The problems don't disappear, they
> just change form IMHO.
>
>
> Erlend
>
>
>
>
>
>
>
>
>
> On 14 November 2017 at 15:40, Johan Peeters <yo at johanpeeters.com> wrote:
>>
>> An SPA with REST API back-ends seems to me to be the obvious
>> architecture for today's web apps. No argument there.
>> Having made that choice and assuming you need access control in your
>> REST APIs you could try to let the REST API handle authN. But here are
>> the problems that you hit upon or, arguably, create:
>> + if you have several resource servers, your authN/Z code is
>> duplicated in all of them
>> + users must pass their credentials to the clients, which in turn pass
>> them to the resource servers. Contrast this with an architecture in
>> which only a central IdP receives credentials..
>> + authN mechanisms are evolving. You want to decouple this from your
>> resource servers.
>> + IdP and STS are part of your TCB, so you want this to be as small as
>> possible and coded by experts - most shops would do well to use a 3rd
>> party component.
>> + ...
>> Sessions are always a problem in the sense that they are part of the
>> attack surface, and rather vulnerable/attractive targets, so you don't
>> want sessions unless they are absolutely indispensable.
>>
>> The OAuth authorization servers (IdP/STS) I have worked with so far
>> have indeed offered a REST API, but only for
>> + management APIs
>> + the /token endpoint
>> The /authorize endpoint is invoked with a redirect URI and returns a
>> web form for the user. In other words, the only OAuth grants that are
>> completely handled via APIs are Client Credentials and Resource Owner.
>> Authorization Code and variants only use an API for trading the code
>> in for a token.
>> Does that answer your question?
>>
>> Yo
>>
>>
>> On 14 November 2017 at 12:24, Erlend Oftedal <erlend.oftedal at owasp.org>
>> wrote:
>> > Even if you have a single client and a single resource server, you can
>> > still
>> > benefit from REST APIs. My example would be building a single page web
>> > app.
>> > By using a REST API you can separate frontend from backend properly and
>> > deploy them independently. You can completely rewrite the frontend with
>> > no
>> > changes to the backend. But why does that imply the need for an STS/IdP?
>> > Why
>> > is sessions a problem here?
>> > Resources can still work as they are supposed to, without depending on
>> > session state. The session is for authentication information only. It
>> > carries authentication information, but that information doesn't affect
>> > the
>> > way resources are processed (except for the auth, but that holds for
>> > basic
>> > auth, tokens, and all other types of authentication as well).
>> >
>> > Is it possible to design an STS/IdP with a REST API?
>> >
>> >
>> > On 14 November 2017 at 10:56, Johan Peeters <yo at johanpeeters.com> wrote:
>> >>
>> >> No sooner did Jim move the REST cheat sheet from draft to approved
>> >> mode than old controversies reared up again. The principal one was
>> >> whether we should cover session management, but I won't go into that
>> >> in this post.
>> >>
>> >> Here I want to discuss what the deal is with Security Token Services
>> >> (STS).
>> >> Erlend asked me: can't you have a REST service without an STS? Sure,
>> >> if no authN/Z is needed, obviously. If the REST API is sensitive,
>> >> serves multiple clients and there are several resource servers, on the
>> >> other hand, then I would strongly recommend using an STS. This
>> >> centralises authentication logic in a dedicated component and avoids
>> >> passing credentials around.
>> >> If you do not have and do not anticipate having multiple clients or
>> >> resource servers, maybe REST APIs are not the right choice - probably
>> >> there are simpler designs that serve your purpose.
>> >>
>> >> Yo
>> >> --
>> >> Johan Peeters
>> >> https://www.johanpeeters.com
>> >> _______________________________________________
>> >> OWASP-cheat-sheets mailing list
>> >> OWASP-cheat-sheets at lists.owasp.org
>> >> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>> >
>> >
>>
>>
>>
>> --
>> Johan Peeters
>> https://www.johanpeeters.com
>
>



-- 
Johan Peeters
https://www.johanpeeters.com

From jim.manico at owasp.org  Tue Nov 14 20:21:37 2017
From: jim.manico at owasp.org (Jim Manico)
Date: Tue, 14 Nov 2017 13:21:37 -0700
Subject: [OWASP-cheat-sheets] REST CS COMMENTS: HATEOAS
Message-ID: <76cde8a5-221a-dc8a-d1ce-ef3907f1c2bd@owasp.org>

Hey folks,

HATEOAS has several security implications and is core to defining what REST is.

1) The self describing nature makes it easy on the attacker (with no a-priori knowledge) to traverse the depths of your webservice.

2) Access control around what links are displayed is critical. You may need to show different links to different users for the same resource if they have different permissions.

While 2 is ?against REST? it?s a critical factor if you want to support users with different permissions in a REST service.

--
Jim Manico
@Manicode


From jim.manico at owasp.org  Tue Nov 14 20:23:02 2017
From: jim.manico at owasp.org (Jim Manico)
Date: Tue, 14 Nov 2017 13:23:02 -0700
Subject: [OWASP-cheat-sheets] REST Cheatsheet
In-Reply-To: <CAGRYwJyZYr0-W2FGiW2Lko7Ry=i9o1u8H2Y5uzMHiBtz7JOMkg@mail.gmail.com>
References: <de4692bb-ceff-5315-7a86-6ff621abfb95@manicode.com>
	<CADFnxGfZasUMjAqwQH14bonBTcaKF1uBLNEbHaw+R0=0=MLSFQ@mail.gmail.com>
	<643e3ebc-d9d9-ed7b-2722-528036f0a10d@manicode.com>
	<CADFnxGeGmpEL7PYhmPpH4cku08AMxXQHyf9NUsY9KybFqR0Yqw@mail.gmail.com>
	<C1876B40-E33F-4031-800C-2E0DF47C8F95@manicode.com>
	<CAGRYwJzXGmo41W-P4ucDaOv6R1WNL_SM1nE4GMZ6XAzxjsH8bg@mail.gmail.com>
	<0f3a9b60-5010-04a6-d044-3fd352595429@manicode.com>
	<CADFnxGcgrfu0vavB9OiEaT=XeoJfUcKfSx0+XJj7QAUjTgDcVw@mail.gmail.com>
	<1ff608d2-3340-f53e-915f-b06c4a1bfdd6@manicode.com>
	<CADFnxGeCx9Sb+r1n=3+ki-XcqubBSQt_G8fM8OPoMCPXyvAB0g@mail.gmail.com>
	<CAGRYwJyZYr0-W2FGiW2Lko7Ry=i9o1u8H2Y5uzMHiBtz7JOMkg@mail.gmail.com>
Message-ID: <f547d4e2-e43a-bb2b-37ea-73de902f1f13@owasp.org>

> So you can't have a REST service unless you have an IdP/STS? And the
IdP/STS can't be RESTful?

Very good point, Erlend. This does not compute and I'm eager to hear
Yo's response.


On 11/14/17 1:22 AM, Erlend Oftedal wrote:
> So you can't have a REST service unless you have an IdP/STS? And the
> IdP/STS can't be RESTful?
>
>
> On 14 November 2017 at 07:42, Johan Peeters <yo at johanpeeters.com
> <mailto:yo at johanpeeters.com>> wrote:
>
>     > And 3 being so, Fielding was referring to "resource statelessness" not
>     > "authentication statelessness" per Erlend's earlier comments.
>
>     no, the other way round. Check your sources.
>
>     >
>     > What I suggest we focus on in the introduction is (1) resources
>     (2) use of
>     > standard HTTP verbs and error codes and (3) HATEOS
>     >
>
>     That should be HATEOAS. I have left this out so far because I don't
>     see its impact on security.
>
>     > So Yo, I still think the discussion of stateless webservices is
>     super
>     > important. But I would ask that we move it to a new cheatsheet
>     and remove it
>     > from the REST conversation. We can state that "many REST
>     services are
>     > stateless" and point to that cheatsheet.
>
>     Wrong way round as well. Start with a service that is as simple as
>     possible and add layers of complexity if you must. I, for one, do not
>     have any need for sessions between clients and resource servers and
>     have no interest in thinking about their sessions. The client has a
>     session with the IdP/STS, not with the resource server.
>     If session management must be discussed in the REST cheat sheet, I
>     withdraw as author.
>
>     Yo
>
>     p.s. We should be discussing this on the mailing list.
>     --
>     Johan Peeters
>     https://www.johanpeeters.com
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171114/f1eae2f9/attachment.html>

From yo at johanpeeters.com  Tue Nov 14 20:46:50 2017
From: yo at johanpeeters.com (Johan Peeters)
Date: Tue, 14 Nov 2017 21:46:50 +0100
Subject: [OWASP-cheat-sheets] REST Cheatsheet
In-Reply-To: <f547d4e2-e43a-bb2b-37ea-73de902f1f13@owasp.org>
References: <de4692bb-ceff-5315-7a86-6ff621abfb95@manicode.com>
	<CADFnxGfZasUMjAqwQH14bonBTcaKF1uBLNEbHaw+R0=0=MLSFQ@mail.gmail.com>
	<643e3ebc-d9d9-ed7b-2722-528036f0a10d@manicode.com>
	<CADFnxGeGmpEL7PYhmPpH4cku08AMxXQHyf9NUsY9KybFqR0Yqw@mail.gmail.com>
	<C1876B40-E33F-4031-800C-2E0DF47C8F95@manicode.com>
	<CAGRYwJzXGmo41W-P4ucDaOv6R1WNL_SM1nE4GMZ6XAzxjsH8bg@mail.gmail.com>
	<0f3a9b60-5010-04a6-d044-3fd352595429@manicode.com>
	<CADFnxGcgrfu0vavB9OiEaT=XeoJfUcKfSx0+XJj7QAUjTgDcVw@mail.gmail.com>
	<1ff608d2-3340-f53e-915f-b06c4a1bfdd6@manicode.com>
	<CADFnxGeCx9Sb+r1n=3+ki-XcqubBSQt_G8fM8OPoMCPXyvAB0g@mail.gmail.com>
	<CAGRYwJyZYr0-W2FGiW2Lko7Ry=i9o1u8H2Y5uzMHiBtz7JOMkg@mail.gmail.com>
	<f547d4e2-e43a-bb2b-37ea-73de902f1f13@owasp.org>
Message-ID: <CADFnxGcUravjAXst4i_+jsT1Z68j6u+t0ENLZ73tLV+MNeN5eQ@mail.gmail.com>

I answered on the mailing list.

On 14 November 2017 at 21:23, Jim Manico <jim.manico at owasp.org> wrote:
>> So you can't have a REST service unless you have an IdP/STS? And the
>> IdP/STS can't be RESTful?
>
> Very good point, Erlend. This does not compute and I'm eager to hear Yo's
> response.
>
>
> On 11/14/17 1:22 AM, Erlend Oftedal wrote:
>
> So you can't have a REST service unless you have an IdP/STS? And the IdP/STS
> can't be RESTful?
>
>
> On 14 November 2017 at 07:42, Johan Peeters <yo at johanpeeters.com> wrote:
>>
>> > And 3 being so, Fielding was referring to "resource statelessness" not
>> > "authentication statelessness" per Erlend's earlier comments.
>>
>> no, the other way round. Check your sources.
>>
>> >
>> > What I suggest we focus on in the introduction is (1) resources (2) use
>> > of
>> > standard HTTP verbs and error codes and (3) HATEOS
>> >
>>
>> That should be HATEOAS. I have left this out so far because I don't
>> see its impact on security.
>>
>> > So Yo, I still think the discussion of stateless webservices is super
>> > important. But I would ask that we move it to a new cheatsheet and
>> > remove it
>> > from the REST conversation. We can state that "many REST services are
>> > stateless" and point to that cheatsheet.
>>
>> Wrong way round as well. Start with a service that is as simple as
>> possible and add layers of complexity if you must. I, for one, do not
>> have any need for sessions between clients and resource servers and
>> have no interest in thinking about their sessions. The client has a
>> session with the IdP/STS, not with the resource server.
>> If session management must be discussed in the REST cheat sheet, I
>> withdraw as author.
>>
>> Yo
>>
>> p.s. We should be discussing this on the mailing list.
>> --
>> Johan Peeters
>> https://www.johanpeeters.com
>
>



-- 
Johan Peeters
https://www.johanpeeters.com

From yo at johanpeeters.com  Tue Nov 14 21:29:06 2017
From: yo at johanpeeters.com (Johan Peeters)
Date: Tue, 14 Nov 2017 22:29:06 +0100
Subject: [OWASP-cheat-sheets] REST CS COMMENTS: HATEOAS
In-Reply-To: <76cde8a5-221a-dc8a-d1ce-ef3907f1c2bd@owasp.org>
References: <76cde8a5-221a-dc8a-d1ce-ef3907f1c2bd@owasp.org>
Message-ID: <CADFnxGehn=g0ezUELAwr21cwgXO8U61ag-_yuxgeLwXUBquRaA@mail.gmail.com>

I think you are right on HATEOAS.

On 14 November 2017 at 21:21, Jim Manico <jim.manico at owasp.org> wrote:
> Hey folks,
>
> HATEOAS has several security implications and is core to defining what REST is.
>
> 1) The self describing nature makes it easy on the attacker (with no a-priori knowledge) to traverse the depths of your webservice.
>
> 2) Access control around what links are displayed is critical. You may need to show different links to different users for the same resource if they have different permissions.
>
> While 2 is ?against REST? it?s a critical factor if you want to support users with different permissions in a REST service.
>
> --
> Jim Manico
> @Manicode
>
> _______________________________________________
> OWASP-cheat-sheets mailing list
> OWASP-cheat-sheets at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets



-- 
Johan Peeters
https://www.johanpeeters.com

From erlend.oftedal at owasp.org  Tue Nov 14 22:01:49 2017
From: erlend.oftedal at owasp.org (Erlend Oftedal)
Date: Tue, 14 Nov 2017 23:01:49 +0100
Subject: [OWASP-cheat-sheets] REST CS COMMENTS: HATEOAS
In-Reply-To: <CADFnxGehn=g0ezUELAwr21cwgXO8U61ag-_yuxgeLwXUBquRaA@mail.gmail.com>
References: <76cde8a5-221a-dc8a-d1ce-ef3907f1c2bd@owasp.org>
	<CADFnxGehn=g0ezUELAwr21cwgXO8U61ag-_yuxgeLwXUBquRaA@mail.gmail.com>
Message-ID: <CAGRYwJwZNtqHfBGVRUjYKV8hpqjfAFGSOzJBKkshM3_uG1pWaQ@mail.gmail.com>

My ? 0,02

1) This goes both ways I think. Whenever I do a security test on a RESTful
self-describing API, it's much easier to know when I'm done. I can see
every path to a resource. I can test those paths. I can often find example
payloads for the services.  For an old style webapp where there is no API,
it's hard to know if you've found everything. You can browse the site,
spider it etc. but there may be edge cases that are hard to find. A
specific change to a specific entity has a clear path in a REST API, while
in a non-RESTful app multiple endpoints can subtly change the same thing.
It's also easier to apply automated tests to a proper REST API as it's
meant to be machine readable, and we can catch a lot of the bugs there.

2) There is the links, but then there is also whether or not you can
actually invoke those links. So I would say both showing the correct links
and then also blocking access to the absent links.



On 14 November 2017 at 22:29, Johan Peeters <yo at johanpeeters.com> wrote:

> I think you are right on HATEOAS.
>
> On 14 November 2017 at 21:21, Jim Manico <jim.manico at owasp.org> wrote:
> > Hey folks,
> >
> > HATEOAS has several security implications and is core to defining what
> REST is.
> >
> > 1) The self describing nature makes it easy on the attacker (with no
> a-priori knowledge) to traverse the depths of your webservice.
> >
> > 2) Access control around what links are displayed is critical. You may
> need to show different links to different users for the same resource if
> they have different permissions.
> >
> > While 2 is ?against REST? it?s a critical factor if you want to support
> users with different permissions in a REST service.
> >
> > --
> > Jim Manico
> > @Manicode
> >
> > _______________________________________________
> > OWASP-cheat-sheets mailing list
> > OWASP-cheat-sheets at lists.owasp.org
> > https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>
>
>
> --
> Johan Peeters
> https://www.johanpeeters.com
> _______________________________________________
> OWASP-cheat-sheets mailing list
> OWASP-cheat-sheets at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171114/fbc70d73/attachment-0001.html>

From jim.manico at owasp.org  Wed Nov 15 02:17:07 2017
From: jim.manico at owasp.org (Jim Manico)
Date: Tue, 14 Nov 2017 19:17:07 -0700
Subject: [OWASP-cheat-sheets] REST CS COMMENTS: HATEOAS
In-Reply-To: <CADFnxGehn=g0ezUELAwr21cwgXO8U61ag-_yuxgeLwXUBquRaA@mail.gmail.com>
References: <76cde8a5-221a-dc8a-d1ce-ef3907f1c2bd@owasp.org>
	<CADFnxGehn=g0ezUELAwr21cwgXO8U61ag-_yuxgeLwXUBquRaA@mail.gmail.com>
Message-ID: <bc196b21-0016-f541-015d-f2246620d0e8@owasp.org>

The deeper point here is that conforming to Fieldings original REST work
does not always make sense in the modern era.

I also think we can skip the entire session vs stateless debate on the
cheatsheet and focus on areas where we can all agree.

Aloha,

Jim



On 11/14/17 2:29 PM, Johan Peeters wrote:
> I think you are right on HATEOAS.
>
> On 14 November 2017 at 21:21, Jim Manico <jim.manico at owasp.org> wrote:
>> Hey folks,
>>
>> HATEOAS has several security implications and is core to defining what REST is.
>>
>> 1) The self describing nature makes it easy on the attacker (with no a-priori knowledge) to traverse the depths of your webservice.
>>
>> 2) Access control around what links are displayed is critical. You may need to show different links to different users for the same resource if they have different permissions.
>>
>> While 2 is ?against REST? it?s a critical factor if you want to support users with different permissions in a REST service.
>>
>> --
>> Jim Manico
>> @Manicode
>>
>> _______________________________________________
>> OWASP-cheat-sheets mailing list
>> OWASP-cheat-sheets at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>
>


From jim.manico at owasp.org  Wed Nov 15 02:20:01 2017
From: jim.manico at owasp.org (Jim Manico)
Date: Tue, 14 Nov 2017 19:20:01 -0700
Subject: [OWASP-cheat-sheets] REST CS COMMENTS: HATEOAS
In-Reply-To: <CAGRYwJwZNtqHfBGVRUjYKV8hpqjfAFGSOzJBKkshM3_uG1pWaQ@mail.gmail.com>
References: <76cde8a5-221a-dc8a-d1ce-ef3907f1c2bd@owasp.org>
	<CADFnxGehn=g0ezUELAwr21cwgXO8U61ag-_yuxgeLwXUBquRaA@mail.gmail.com>
	<CAGRYwJwZNtqHfBGVRUjYKV8hpqjfAFGSOzJBKkshM3_uG1pWaQ@mail.gmail.com>
Message-ID: <ab0b282a-492c-1e00-0a75-e67730f56ead@owasp.org>

Good, we can definitely add this to a HATEOAS section. This is helpful.
Easy for the attacker, easy on the developer but also easy on those who
are assessing and testing an REST app for security. Fair summary?

I would say that a REST service that displays links that the current
user does not have access to is breaking the rules of access control. We
should never display links that users do not have access to. How is a UI
developer to know that a link provided from HATEOAS results is not to be
rendered in a UI since the current user does not have access?

Aloha, Jim


On 11/14/17 3:01 PM, Erlend Oftedal wrote:
> My ? 0,02
>
> 1) This goes both ways I think. Whenever I do a security test on a
> RESTful self-describing API, it's much easier to know when I'm done. I
> can see every path to a resource. I can test those paths. I can often
> find example payloads for the services.? For an old style webapp where
> there is no API, it's hard to know if you've found everything. You can
> browse the site, spider it etc. but there may be edge cases that are
> hard to find. A specific change to a specific entity has a clear path
> in a REST API, while in a non-RESTful app multiple endpoints can
> subtly change the same thing.
> It's also easier to apply automated tests to a proper REST API as it's
> meant to be machine readable, and we can catch a lot of the bugs there.
>
> 2) There is the links, but then there is also whether or not you can
> actually invoke those links. So I would say both showing the correct
> links and then also blocking access to the absent links.
>
>
>
> On 14 November 2017 at 22:29, Johan Peeters <yo at johanpeeters.com
> <mailto:yo at johanpeeters.com>> wrote:
>
>     I think you are right on HATEOAS.
>
>     On 14 November 2017 at 21:21, Jim Manico <jim.manico at owasp.org
>     <mailto:jim.manico at owasp.org>> wrote:
>     > Hey folks,
>     >
>     > HATEOAS has several security implications and is core to
>     defining what REST is.
>     >
>     > 1) The self describing nature makes it easy on the attacker
>     (with no a-priori knowledge) to traverse the depths of your
>     webservice.
>     >
>     > 2) Access control around what links are displayed is critical.
>     You may need to show different links to different users for the
>     same resource if they have different permissions.
>     >
>     > While 2 is ?against REST? it?s a critical factor if you want to
>     support users with different permissions in a REST service.
>     >
>     > --
>     > Jim Manico
>     > @Manicode
>     >
>     > _______________________________________________
>     > OWASP-cheat-sheets mailing list
>     > OWASP-cheat-sheets at lists.owasp.org
>     <mailto:OWASP-cheat-sheets at lists.owasp.org>
>     > https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>     <https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets>
>
>
>
>     --
>     Johan Peeters
>     https://www.johanpeeters.com
>     _______________________________________________
>     OWASP-cheat-sheets mailing list
>     OWASP-cheat-sheets at lists.owasp.org
>     <mailto:OWASP-cheat-sheets at lists.owasp.org>
>     https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>     <https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets>
>
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171114/912fa8c2/attachment.html>

From jim.manico at owasp.org  Wed Nov 15 02:29:36 2017
From: jim.manico at owasp.org (Jim Manico)
Date: Tue, 14 Nov 2017 19:29:36 -0700
Subject: [OWASP-cheat-sheets] REST and STS
In-Reply-To: <CADFnxGeX-rqqgUdQhHwcjwK-r2t-WuZ1Y6kEFG8UmC_8Gkx08A@mail.gmail.com>
References: <CADFnxGeX-rqqgUdQhHwcjwK-r2t-WuZ1Y6kEFG8UmC_8Gkx08A@mail.gmail.com>
Message-ID: <96c397ca-5125-b102-7d2f-d134448a2d86@owasp.org>

The controversy is helpful. It drives communication and gets folks involved.

However, we're not going to agree here and this argument has rippled
through many aspects of the industry for years.

I suggest we keep this discussion out of the cheatsheet and focus on
areas where we can reach consensus for REST Security.

Aloha, Jim


On 11/14/17 2:56 AM, Johan Peeters wrote:
> No sooner did Jim move the REST cheat sheet from draft to approved
> mode than old controversies reared up again. The principal one was
> whether we should cover session management, but I won't go into that
> in this post.
>
> Here I want to discuss what the deal is with Security Token Services (STS).
> Erlend asked me: can't you have a REST service without an STS? Sure,
> if no authN/Z is needed, obviously. If the REST API is sensitive,
> serves multiple clients and there are several resource servers, on the
> other hand, then I would strongly recommend using an STS. This
> centralises authentication logic in a dedicated component and avoids
> passing credentials around.
> If you do not have and do not anticipate having multiple clients or
> resource servers, maybe REST APIs are not the right choice - probably
> there are simpler designs that serve your purpose.
>
> Yo


From erlend.oftedal at owasp.org  Wed Nov 15 21:13:26 2017
From: erlend.oftedal at owasp.org (Erlend Oftedal)
Date: Wed, 15 Nov 2017 22:13:26 +0100
Subject: [OWASP-cheat-sheets] REST CS COMMENTS: HATEOAS
In-Reply-To: <ab0b282a-492c-1e00-0a75-e67730f56ead@owasp.org>
References: <76cde8a5-221a-dc8a-d1ce-ef3907f1c2bd@owasp.org>
	<CADFnxGehn=g0ezUELAwr21cwgXO8U61ag-_yuxgeLwXUBquRaA@mail.gmail.com>
	<CAGRYwJwZNtqHfBGVRUjYKV8hpqjfAFGSOzJBKkshM3_uG1pWaQ@mail.gmail.com>
	<ab0b282a-492c-1e00-0a75-e67730f56ead@owasp.org>
Message-ID: <CAGRYwJyBUw6p3=OAvsBDy7G2FAEgQ2j7Q14GvhEdwMYyRtUhcw@mail.gmail.com>

We could just lose the entire cheat sheet and publish this:

https://www.youtube.com/watch?v=nSKp2StlS6s&feature=youtu.be


On 15 November 2017 at 03:20, Jim Manico <jim.manico at owasp.org> wrote:

> Good, we can definitely add this to a HATEOAS section. This is helpful.
> Easy for the attacker, easy on the developer but also easy on those who are
> assessing and testing an REST app for security. Fair summary?
>
> I would say that a REST service that displays links that the current user
> does not have access to is breaking the rules of access control. We should
> never display links that users do not have access to. How is a UI developer
> to know that a link provided from HATEOAS results is not to be rendered in
> a UI since the current user does not have access?
>
> Aloha, Jim
>
> On 11/14/17 3:01 PM, Erlend Oftedal wrote:
>
> My ? 0,02
>
> 1) This goes both ways I think. Whenever I do a security test on a RESTful
> self-describing API, it's much easier to know when I'm done. I can see
> every path to a resource. I can test those paths. I can often find example
> payloads for the services.  For an old style webapp where there is no API,
> it's hard to know if you've found everything. You can browse the site,
> spider it etc. but there may be edge cases that are hard to find. A
> specific change to a specific entity has a clear path in a REST API, while
> in a non-RESTful app multiple endpoints can subtly change the same thing.
> It's also easier to apply automated tests to a proper REST API as it's
> meant to be machine readable, and we can catch a lot of the bugs there.
>
> 2) There is the links, but then there is also whether or not you can
> actually invoke those links. So I would say both showing the correct links
> and then also blocking access to the absent links.
>
>
>
> On 14 November 2017 at 22:29, Johan Peeters <yo at johanpeeters.com> wrote:
>
>> I think you are right on HATEOAS.
>>
>> On 14 November 2017 at 21:21, Jim Manico <jim.manico at owasp.org> wrote:
>> > Hey folks,
>> >
>> > HATEOAS has several security implications and is core to defining what
>> REST is.
>> >
>> > 1) The self describing nature makes it easy on the attacker (with no
>> a-priori knowledge) to traverse the depths of your webservice.
>> >
>> > 2) Access control around what links are displayed is critical. You may
>> need to show different links to different users for the same resource if
>> they have different permissions.
>> >
>> > While 2 is ?against REST? it?s a critical factor if you want to support
>> users with different permissions in a REST service.
>> >
>> > --
>> > Jim Manico
>> > @Manicode
>> >
>> > _______________________________________________
>> > OWASP-cheat-sheets mailing list
>> > OWASP-cheat-sheets at lists.owasp.org
>> > https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>
>>
>>
>> --
>> Johan Peeters
>> https://www.johanpeeters.com
>> _______________________________________________
>> OWASP-cheat-sheets mailing list
>> OWASP-cheat-sheets at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171115/2e41b62e/attachment.html>

From jan.wolff at owasp.org  Wed Nov 15 23:58:44 2017
From: jan.wolff at owasp.org (Jan Wolff)
Date: Thu, 16 Nov 2017 00:58:44 +0100
Subject: [OWASP-cheat-sheets] REST and STS
In-Reply-To: <CADFnxGeX-rqqgUdQhHwcjwK-r2t-WuZ1Y6kEFG8UmC_8Gkx08A@mail.gmail.com>
References: <CADFnxGeX-rqqgUdQhHwcjwK-r2t-WuZ1Y6kEFG8UmC_8Gkx08A@mail.gmail.com>
Message-ID: <a279e64e-46de-d166-a2b7-a787ef0632df@owasp.org>

It appears to me that question how access control can be done securely 
for REST Web services depends more on the fashion how those services are 
used than whether they are truly REST-ful. In my opinion, we should not 
assume that our audience shares our understanding of what REST implies. 
Instead, we should point our readers to good advice depending on their 
use of services.

Let us differentiate between architectures that need different handling 
of access control. If you want to edit/fix/propose, the following 
figures can be accessed here:
https://docs.google.com/presentation/d/1snVoMadFdbTiyiRypV8tX29zYrIpPalDfMgljACaPgM/edit?usp=sharing

I mostly observed category 1 or category 2 in the wild. Category 3 seems 
to be an emerging design for better horizontal scaling without shared 
session state. Please correct me or add alternatives if you see it 
differently.




For category 1, secure session management applies as for web 
applications and we should point there.
For category 2, there might be a session based on user authentication 
(passwords or even client-certificates). This could be a service backend 
for an app. Scaling brings the danger of replicated data stores with 
credentials. I would discourage users to scale this above one credential 
database.
Category 3: I am not the expert for this, but I would expect scalability 
to be superior because services are truly independent from each other. 
Tokens must not be used as proof of identity. Tokens might be 
abused/leaked by service 1 and used on service 2.

What do you think, would sketches like that help users of the cheat 
sheet understand which parts are relevant to them?

Jan


Am 14.11.2017 um 10:56 schrieb Johan Peeters:
> No sooner did Jim move the REST cheat sheet from draft to approved
> mode than old controversies reared up again. The principal one was
> whether we should cover session management, but I won't go into that
> in this post.
>
> Here I want to discuss what the deal is with Security Token Services (STS).
> Erlend asked me: can't you have a REST service without an STS? Sure,
> if no authN/Z is needed, obviously. If the REST API is sensitive,
> serves multiple clients and there are several resource servers, on the
> other hand, then I would strongly recommend using an STS. This
> centralises authentication logic in a dedicated component and avoids
> passing credentials around.
> If you do not have and do not anticipate having multiple clients or
> resource servers, maybe REST APIs are not the right choice - probably
> there are simpler designs that serve your purpose.
>
> Yo

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171116/3e81d9eb/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: afiifojlhfcfpana.png
Type: image/png
Size: 42653 bytes
Desc: not available
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171116/3e81d9eb/attachment-0003.png>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: baifpaacipamlkmd.png
Type: image/png
Size: 40056 bytes
Desc: not available
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171116/3e81d9eb/attachment-0004.png>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: dlmdecbbpadekdaa.png
Type: image/png
Size: 51623 bytes
Desc: not available
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171116/3e81d9eb/attachment-0005.png>

From jan.wolff at owasp.org  Thu Nov 16 00:27:24 2017
From: jan.wolff at owasp.org (Jan Wolff)
Date: Thu, 16 Nov 2017 01:27:24 +0100
Subject: [OWASP-cheat-sheets] REST CS COMMENTS: HATEOAS
In-Reply-To: <ab0b282a-492c-1e00-0a75-e67730f56ead@owasp.org>
References: <76cde8a5-221a-dc8a-d1ce-ef3907f1c2bd@owasp.org>
	<CADFnxGehn=g0ezUELAwr21cwgXO8U61ag-_yuxgeLwXUBquRaA@mail.gmail.com>
	<CAGRYwJwZNtqHfBGVRUjYKV8hpqjfAFGSOzJBKkshM3_uG1pWaQ@mail.gmail.com>
	<ab0b282a-492c-1e00-0a75-e67730f56ead@owasp.org>
Message-ID: <5811e7ce-cb92-a761-eb82-a41afdc01e55@owasp.org>

2) might depend on the context. I agree regarding stuff like search 
queries for a web view, where only links should be displayed that can be 
accessed by the user. In my opinion, a representation of the collection 
ressource should not depend on the requestor. Think about a collection 
of all customers a company might have. I would still want to see a 
consistent view of the collection although I can't access the customer 
details itself. Maybe this could be implemented in a REST-compliant way 
by designing URIs in a way that the ressource implies the user specific 
view. The following could only list only the customers of trader1.
|https://api.example.com/users/trader1/customers
|While this would still list all customers, but access would be restricted.
||https://api.example.com/customers
||Does that make sense?

If filtering would be mandatory, that would also create problems for 
distributed applications where the filtering depends on data that is not 
owned by the same service. An example could be an HR applications that 
allows you to only see data of subordinates but the actual data and the 
org-chart are managed by different services on different nodes.

HATEOS might also leak direct references since REST aims at identifying 
ressources. Listing the following two URIs still suggests that there is 
an item4. This kind of information leakage could be prevented by using 
other identifiers but I would not put much emphasis on this. It is 
information leakage after all.
|https://api.example.com/resources/item3|
|https://api.example.com/resources/item5|

Best
Jan


Am 15.11.2017 um 03:20 schrieb Jim Manico:
>
> Good, we can definitely add this to a HATEOAS section. This is 
> helpful. Easy for the attacker, easy on the developer but also easy on 
> those who are assessing and testing an REST app for security. Fair 
> summary?
>
> I would say that a REST service that displays links that the current 
> user does not have access to is breaking the rules of access control. 
> We should never display links that users do not have access to. How is 
> a UI developer to know that a link provided from HATEOAS results is 
> not to be rendered in a UI since the current user does not have access?
>
> Aloha, Jim
>
>
> On 11/14/17 3:01 PM, Erlend Oftedal wrote:
>> My ? 0,02
>>
>> 1) This goes both ways I think. Whenever I do a security test on a 
>> RESTful self-describing API, it's much easier to know when I'm done. 
>> I can see every path to a resource. I can test those paths. I can 
>> often find example payloads for the services.? For an old style 
>> webapp where there is no API, it's hard to know if you've found 
>> everything. You can browse the site, spider it etc. but there may be 
>> edge cases that are hard to find. A specific change to a specific 
>> entity has a clear path in a REST API, while in a non-RESTful app 
>> multiple endpoints can subtly change the same thing.
>> It's also easier to apply automated tests to a proper REST API as 
>> it's meant to be machine readable, and we can catch a lot of the bugs 
>> there.
>>
>> 2) There is the links, but then there is also whether or not you can 
>> actually invoke those links. So I would say both showing the correct 
>> links and then also blocking access to the absent links.
>>
>>
>>
>> On 14 November 2017 at 22:29, Johan Peeters <yo at johanpeeters.com 
>> <mailto:yo at johanpeeters.com>> wrote:
>>
>>     I think you are right on HATEOAS.
>>
>>     On 14 November 2017 at 21:21, Jim Manico <jim.manico at owasp.org
>>     <mailto:jim.manico at owasp.org>> wrote:
>>     > Hey folks,
>>     >
>>     > HATEOAS has several security implications and is core to
>>     defining what REST is.
>>     >
>>     > 1) The self describing nature makes it easy on the attacker
>>     (with no a-priori knowledge) to traverse the depths of your
>>     webservice.
>>     >
>>     > 2) Access control around what links are displayed is critical.
>>     You may need to show different links to different users for the
>>     same resource if they have different permissions.
>>     >
>>     > While 2 is ?against REST? it?s a critical factor if you want to
>>     support users with different permissions in a REST service.
>>     >
>>     > --
>>     > Jim Manico
>>     > @Manicode
>>     >
>>     > _______________________________________________
>>     > OWASP-cheat-sheets mailing list
>>     > OWASP-cheat-sheets at lists.owasp.org
>>     <mailto:OWASP-cheat-sheets at lists.owasp.org>
>>     > https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>     <https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets>
>>
>>
>>
>>     --
>>     Johan Peeters
>>     https://www.johanpeeters.com
>>     _______________________________________________
>>     OWASP-cheat-sheets mailing list
>>     OWASP-cheat-sheets at lists.owasp.org
>>     <mailto:OWASP-cheat-sheets at lists.owasp.org>
>>     https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>     <https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets>
>>
>>
>
>
>
> _______________________________________________
> OWASP-cheat-sheets mailing list
> OWASP-cheat-sheets at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171116/8b50680d/attachment.html>

From yo at johanpeeters.com  Thu Nov 16 07:45:42 2017
From: yo at johanpeeters.com (Johan Peeters)
Date: Thu, 16 Nov 2017 08:45:42 +0100
Subject: [OWASP-cheat-sheets] REST CS COMMENTS: HATEOAS
In-Reply-To: <5811e7ce-cb92-a761-eb82-a41afdc01e55@owasp.org>
References: <76cde8a5-221a-dc8a-d1ce-ef3907f1c2bd@owasp.org>
	<CADFnxGehn=g0ezUELAwr21cwgXO8U61ag-_yuxgeLwXUBquRaA@mail.gmail.com>
	<CAGRYwJwZNtqHfBGVRUjYKV8hpqjfAFGSOzJBKkshM3_uG1pWaQ@mail.gmail.com>
	<ab0b282a-492c-1e00-0a75-e67730f56ead@owasp.org>
	<5811e7ce-cb92-a761-eb82-a41afdc01e55@owasp.org>
Message-ID: <CADFnxGcyWSRqrJGNGU=g+OxYL=xbYNeXE=grbWk5mjs8-cw+QQ@mail.gmail.com>

+1

If you need to filter, your API design is wrong.

On 16 November 2017 at 01:27, Jan Wolff <jan.wolff at owasp.org> wrote:
> 2) might depend on the context. I agree regarding stuff like search queries
> for a web view, where only links should be displayed that can be accessed by
> the user. In my opinion, a representation of the collection ressource should
> not depend on the requestor. Think about a collection of all customers a
> company might have. I would still want to see a consistent view of the
> collection although I can't access the customer details itself. Maybe this
> could be implemented in a REST-compliant way by designing URIs in a way that
> the ressource implies the user specific view. The following could only list
> only the customers of trader1.
> https://api.example.com/users/trader1/customers
> While this would still list all customers, but access would be restricted.
> https://api.example.com/customers
> Does that make sense?
>
> If filtering would be mandatory, that would also create problems for
> distributed applications where the filtering depends on data that is not
> owned by the same service. An example could be an HR applications that
> allows you to only see data of subordinates but the actual data and the
> org-chart are managed by different services on different nodes.
>
> HATEOS might also leak direct references since REST aims at identifying
> ressources. Listing the following two URIs still suggests that there is an
> item4. This kind of information leakage could be prevented by using other
> identifiers but I would not put much emphasis on this. It is information
> leakage after all.
> https://api.example.com/resources/item3
> https://api.example.com/resources/item5
>
> Best
> Jan
>
>
>
> Am 15.11.2017 um 03:20 schrieb Jim Manico:
>
> Good, we can definitely add this to a HATEOAS section. This is helpful. Easy
> for the attacker, easy on the developer but also easy on those who are
> assessing and testing an REST app for security. Fair summary?
>
> I would say that a REST service that displays links that the current user
> does not have access to is breaking the rules of access control. We should
> never display links that users do not have access to. How is a UI developer
> to know that a link provided from HATEOAS results is not to be rendered in a
> UI since the current user does not have access?
>
> Aloha, Jim
>
>
> On 11/14/17 3:01 PM, Erlend Oftedal wrote:
>
> My ? 0,02
>
> 1) This goes both ways I think. Whenever I do a security test on a RESTful
> self-describing API, it's much easier to know when I'm done. I can see every
> path to a resource. I can test those paths. I can often find example
> payloads for the services.  For an old style webapp where there is no API,
> it's hard to know if you've found everything. You can browse the site,
> spider it etc. but there may be edge cases that are hard to find. A specific
> change to a specific entity has a clear path in a REST API, while in a
> non-RESTful app multiple endpoints can subtly change the same thing.
> It's also easier to apply automated tests to a proper REST API as it's meant
> to be machine readable, and we can catch a lot of the bugs there.
>
> 2) There is the links, but then there is also whether or not you can
> actually invoke those links. So I would say both showing the correct links
> and then also blocking access to the absent links.
>
>
>
> On 14 November 2017 at 22:29, Johan Peeters <yo at johanpeeters.com> wrote:
>>
>> I think you are right on HATEOAS.
>>
>> On 14 November 2017 at 21:21, Jim Manico <jim.manico at owasp.org> wrote:
>> > Hey folks,
>> >
>> > HATEOAS has several security implications and is core to defining what
>> > REST is.
>> >
>> > 1) The self describing nature makes it easy on the attacker (with no
>> > a-priori knowledge) to traverse the depths of your webservice.
>> >
>> > 2) Access control around what links are displayed is critical. You may
>> > need to show different links to different users for the same resource if
>> > they have different permissions.
>> >
>> > While 2 is ?against REST? it?s a critical factor if you want to support
>> > users with different permissions in a REST service.
>> >
>> > --
>> > Jim Manico
>> > @Manicode
>> >
>> > _______________________________________________
>> > OWASP-cheat-sheets mailing list
>> > OWASP-cheat-sheets at lists.owasp.org
>> > https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>
>>
>>
>> --
>> Johan Peeters
>> https://www.johanpeeters.com
>> _______________________________________________
>> OWASP-cheat-sheets mailing list
>> OWASP-cheat-sheets at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>
>
>
>
>
> _______________________________________________
> OWASP-cheat-sheets mailing list
> OWASP-cheat-sheets at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>
>
>
> _______________________________________________
> OWASP-cheat-sheets mailing list
> OWASP-cheat-sheets at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>



-- 
Johan Peeters
https://www.johanpeeters.com

From yo at johanpeeters.com  Thu Nov 16 08:00:05 2017
From: yo at johanpeeters.com (Johan Peeters)
Date: Thu, 16 Nov 2017 09:00:05 +0100
Subject: [OWASP-cheat-sheets] REST and STS
In-Reply-To: <a279e64e-46de-d166-a2b7-a787ef0632df@owasp.org>
References: <CADFnxGeX-rqqgUdQhHwcjwK-r2t-WuZ1Y6kEFG8UmC_8Gkx08A@mail.gmail.com>
	<a279e64e-46de-d166-a2b7-a787ef0632df@owasp.org>
Message-ID: <CADFnxGdW-76tEYanDQ8gv2x=czOorraHRhHNWR4-k9m5YFy2hA@mail.gmail.com>

Great diagrams! I think they would clarify, although it would be a break
with tradition - as far as I'm aware, no diagrams have been used in cheat
sheets thus far. Are there any practical constraints adding them to the
cheat sheet?

Category 3 is not only more scaleable in the sense that it allows for
horizontal scaling of resource servers, AKA web services, but also that it
becomes easy to add more, distinct, services.

An access token should identify which resource it is giving access to and
the scope of this access. Whether, and how, an access token can give access
to *several* resources, e.g. in the event of call chaining, is an
interesting debate that I do not expect to be settled any time soon.

On 16 November 2017 at 00:58, Jan Wolff <jan.wolff at owasp.org> wrote:

> It appears to me that question how access control can be done securely for
> REST Web services depends more on the fashion how those services are used
> than whether they are truly REST-ful. In my opinion, we should not assume
> that our audience shares our understanding of what REST implies. Instead,
> we should point our readers to good advice depending on their use of
> services.
>
> Let us differentiate between architectures that need different handling of
> access control. If you want to edit/fix/propose, the following figures can
> be accessed here:
> https://docs.google.com/presentation/d/1snVoMadFdbTiyiRypV8tX29zYrIpP
> alDfMgljACaPgM/edit?usp=sharing
>
> I mostly observed category 1 or category 2 in the wild. Category 3 seems
> to be an emerging design for better horizontal scaling without shared
> session state. Please correct me or add alternatives if you see it
> differently.
>
>
>
>
> For category 1, secure session management applies as for web applications
> and we should point there.
> For category 2, there might be a session based on user authentication
> (passwords or even client-certificates). This could be a service backend
> for an app. Scaling brings the danger of replicated data stores with
> credentials. I would discourage users to scale this above one credential
> database.
> Category 3: I am not the expert for this, but I would expect scalability
> to be superior because services are truly independent from each other.
> Tokens must not be used as proof of identity. Tokens might be abused/leaked
> by service 1 and used on service 2.
>
> What do you think, would sketches like that help users of the cheat sheet
> understand which parts are relevant to them?
>
> Jan
>
>
> Am 14.11.2017 um 10:56 schrieb Johan Peeters:
>
> No sooner did Jim move the REST cheat sheet from draft to approved
> mode than old controversies reared up again. The principal one was
> whether we should cover session management, but I won't go into that
> in this post.
>
> Here I want to discuss what the deal is with Security Token Services (STS).
> Erlend asked me: can't you have a REST service without an STS? Sure,
> if no authN/Z is needed, obviously. If the REST API is sensitive,
> serves multiple clients and there are several resource servers, on the
> other hand, then I would strongly recommend using an STS. This
> centralises authentication logic in a dedicated component and avoids
> passing credentials around.
> If you do not have and do not anticipate having multiple clients or
> resource servers, maybe REST APIs are not the right choice - probably
> there are simpler designs that serve your purpose.
>
> Yo
>
>
>
> _______________________________________________
> OWASP-cheat-sheets mailing list
> OWASP-cheat-sheets at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>
>


-- 
Johan Peeters
https://www.johanpeeters.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171116/46cd1e71/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: dlmdecbbpadekdaa.png
Type: image/png
Size: 51623 bytes
Desc: not available
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171116/46cd1e71/attachment-0003.png>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: afiifojlhfcfpana.png
Type: image/png
Size: 42653 bytes
Desc: not available
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171116/46cd1e71/attachment-0004.png>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: baifpaacipamlkmd.png
Type: image/png
Size: 40056 bytes
Desc: not available
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171116/46cd1e71/attachment-0005.png>

From jim.manico at owasp.org  Fri Nov 17 01:55:36 2017
From: jim.manico at owasp.org (Jim Manico)
Date: Thu, 16 Nov 2017 15:55:36 -1000
Subject: [OWASP-cheat-sheets] REST and STS
In-Reply-To: <CADFnxGdW-76tEYanDQ8gv2x=czOorraHRhHNWR4-k9m5YFy2hA@mail.gmail.com>
References: <CADFnxGeX-rqqgUdQhHwcjwK-r2t-WuZ1Y6kEFG8UmC_8Gkx08A@mail.gmail.com>
	<a279e64e-46de-d166-a2b7-a787ef0632df@owasp.org>
	<CADFnxGdW-76tEYanDQ8gv2x=czOorraHRhHNWR4-k9m5YFy2hA@mail.gmail.com>
Message-ID: <1ca9bdfa-bb58-b3ad-26b9-589ab23971de@owasp.org>

Diagrams are totally possible in the CS. I can help with that! Are the
diagrams below open source?

So Yo and Jan - really fantastic conversations. I appreciate everyone
digging deeply into this. I'm definitely learning from it.

- Jim


On 11/15/17 10:00 PM, Johan Peeters wrote:
> Great diagrams! I think they would clarify, although it would be a
> break with tradition - as far as I'm aware, no diagrams have been used
> in cheat sheets thus far. Are there any practical constraints adding
> them to the cheat sheet?
>
> Category 3 is not only more scaleable in the sense that it allows for
> horizontal scaling of resource servers, AKA web services, but also
> that it becomes easy to add more, distinct, services.
>
> An access token should identify which resource it is giving access to
> and the scope of this access. Whether, and how, an access token can
> give access to *several* resources, e.g. in the event of call
> chaining, is an interesting debate that I do not expect to be settled
> any time soon.
>
> On 16 November 2017 at 00:58, Jan Wolff <jan.wolff at owasp.org
> <mailto:jan.wolff at owasp.org>> wrote:
>
>     It appears to me that question how access control can be done
>     securely for REST Web services depends more on the fashion how
>     those services are used than whether they are truly REST-ful. In
>     my opinion, we should not assume that our audience shares our
>     understanding of what REST implies. Instead, we should point our
>     readers to good advice depending on their use of services.
>
>     Let us differentiate between architectures that need different
>     handling of access control. If you want to edit/fix/propose, the
>     following figures can be accessed here:
>     https://docs.google.com/presentation/d/1snVoMadFdbTiyiRypV8tX29zYrIpPalDfMgljACaPgM/edit?usp=sharing
>     <https://docs.google.com/presentation/d/1snVoMadFdbTiyiRypV8tX29zYrIpPalDfMgljACaPgM/edit?usp=sharing>
>
>     I mostly observed category 1 or category 2 in the wild. Category 3
>     seems to be an emerging design for better horizontal scaling
>     without shared session state. Please correct me or add
>     alternatives if you see it differently.
>
>
>
>
>     For category 1, secure session management applies as for web
>     applications and we should point there.
>     For category 2, there might be a session based on user
>     authentication (passwords or even client-certificates). This could
>     be a service backend for an app. Scaling brings the danger of
>     replicated data stores with credentials. I would discourage users
>     to scale this above one credential database.
>     Category 3: I am not the expert for this, but I would expect
>     scalability to be superior because services are truly independent
>     from each other. Tokens must not be used as proof of identity.
>     Tokens might be abused/leaked by service 1 and used on service 2.
>
>     What do you think, would sketches like that help users of the
>     cheat sheet understand which parts are relevant to them?
>
>     Jan
>
>
>     Am 14.11.2017 um 10:56 schrieb Johan Peeters:
>>     No sooner did Jim move the REST cheat sheet from draft to approved
>>     mode than old controversies reared up again. The principal one was
>>     whether we should cover session management, but I won't go into that
>>     in this post.
>>
>>     Here I want to discuss what the deal is with Security Token Services (STS).
>>     Erlend asked me: can't you have a REST service without an STS? Sure,
>>     if no authN/Z is needed, obviously. If the REST API is sensitive,
>>     serves multiple clients and there are several resource servers, on the
>>     other hand, then I would strongly recommend using an STS. This
>>     centralises authentication logic in a dedicated component and avoids
>>     passing credentials around.
>>     If you do not have and do not anticipate having multiple clients or
>>     resource servers, maybe REST APIs are not the right choice - probably
>>     there are simpler designs that serve your purpose.
>>
>>     Yo
>
>
>     _______________________________________________
>     OWASP-cheat-sheets mailing list
>     OWASP-cheat-sheets at lists.owasp.org
>     <mailto:OWASP-cheat-sheets at lists.owasp.org>
>     https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>     <https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets>
>
>
>
>
> -- 
> Johan Peeters
> https://www.johanpeeters.com
>
>
> _______________________________________________
> OWASP-cheat-sheets mailing list
> OWASP-cheat-sheets at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171116/55847471/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: afiifojlhfcfpana.png
Type: image/png
Size: 42653 bytes
Desc: not available
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171116/55847471/attachment-0003.png>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: baifpaacipamlkmd.png
Type: image/png
Size: 40056 bytes
Desc: not available
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171116/55847471/attachment-0004.png>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: dlmdecbbpadekdaa.png
Type: image/png
Size: 51623 bytes
Desc: not available
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171116/55847471/attachment-0005.png>

From qutorial at gmail.com  Sat Nov 18 11:42:13 2017
From: qutorial at gmail.com (Zaur Molotnikov)
Date: Sat, 18 Nov 2017 12:42:13 +0100
Subject: [OWASP-cheat-sheets] Rails cheat sheets
Message-ID: <C6DC43C4-9A99-4365-A834-F2CB720CAC2A@gmail.com>

Hello all,

I have a couple of suggestions to improve cheat sheets towards supporting rails developers better.

Let me first quickly introduce myself, as I am new to this list. My name is Zaur - ???? - [za-??-r], I work as a 'security guy' in a QA group of genua.de. I have some programming experience with the newest rails platform, and basic understanding of web security. Here is my site: https://molotnikov.de - in case you want to come in touch directly.

Now to the business. There are two things I'd like to propose: improving/extending the rails cheat sheet, and creating a new cheat sheet 'Secure deployment of a Rails app'.

Improving the rails cheat sheet is rather straightforward. Therefore I'd like to *get writing permissions* to the wiki and simply do it. What I will introduce: one example of using devise right, a mention of zxcvbn gem and improving its usability, an example of using cancancan with a couple of notes, some info about omniauth, infos about creating secure api-only apps, devise token auth for this purpose, xsrf protection in api-only apps, some infos on jwt and client-side sessions.

The second endeavor to create a secure deployment cheat sheet is much harder to get right. That is why I'd like to ask you to do a couple of iterations on the new material with me, before we publish. Below is what I'd like to write about. 

There are multiple ways to deploy a rails app. Many of them are error prone. Special techniques and server hardening is required to get it right. In this cheat sheet I'd list concerns arising when deploying to a fresh new server. 

We start with rules to configure os users. Next, we show, how to hide sensitive data from the unauthorized access. Tuning the app towards web security follows. We continue with rights and deployment management. As an example, I'd build from scratch an nginx with passenger and deploy there. Keeping all the system's components updated while keeping the system up and running is also a challenge to security and availability, a few words on it shall be said. Automated deployment techniques, Capistrano, and monitoring the server shall conclude this guide.

To summarize on the action items to support my initiatives:
1) who could grant me the write access to the rails cheat sheet? - I need to request a write access there.
2) what is the right way to start a new cheat sheet? - where could I write the first iteration?


What do you think of my proposals?

Thanks a lot for reading it all.


Best Regards,
Zaur.
-- 
My contacts here:
https://molotnikov.de/contact

Sent from my mobile device. Please excuse my brevity.

From dominique.righetto at gmail.com  Sat Nov 18 13:37:02 2017
From: dominique.righetto at gmail.com (Dominique RIGHETTO)
Date: Sat, 18 Nov 2017 14:37:02 +0100
Subject: [OWASP-cheat-sheets] Rails cheat sheets
In-Reply-To: <C6DC43C4-9A99-4365-A834-F2CB720CAC2A@gmail.com>
References: <C6DC43C4-9A99-4365-A834-F2CB720CAC2A@gmail.com>
Message-ID: <0e195d22-5a97-9270-9366-2ab3f4044878@gmail.com>

Hello Zaur,

Thanks you for your email.

Contributor are welcome.

Please find below the key points that all cheat sheets (called CS) must
provides:

1) Address a single topic (ex: password storage, os command injection,
REST service, csrf, html5 new features security...).

2) Be concise and focused, a cheat sheet must be directly actionable (a
CS is not a guide) and must directly be useful for a developer.

3) Do not re-address topic handled by others cs (in this case target cs
can be enhanced with missing points).

4) When applicable, provide solution proposal implementation through a
full documented POC on a public well know git repository (ex: github is
prefered), the POC can be used as a "playground" for a developer wanting
to play/evaluate your solution proposal.

A CS must have these sections:

1) Introduction:
Describe the topic adressed by the cs and the security issues bring by
the topic.

2) How to address the issues:
Describe how the issues presented in section 1 can be adressed in a
possible technology agnostic approach.

3) Solution proposal implementation:
In this section, using your POC, you describe your solution proposal in
the more teaching possible way.

So, to start:

1) Take a copy of the CS that you want to enhance (mediawiki syntax in
the source tab),

2) Add your enhancement and publish the updated cs on the same github
repo than your POC (it support the mediawiki syntax).

3) Notify us using this mailing list and we will start to review your
contribution.

4) After final validation, we will help you to have right access to the
wiki and update the cs.


Thanks in advance for your understanding.
Regards




On 18/11/2017 12:42, Zaur Molotnikov wrote:
> Hello all,
> 
> I have a couple of suggestions to improve cheat sheets towards supporting rails developers better.
> 
> Let me first quickly introduce myself, as I am new to this list. My name is Zaur - ???? - [za-??-r], I work as a 'security guy' in a QA group of genua.de. I have some programming experience with the newest rails platform, and basic understanding of web security. Here is my site: https://molotnikov.de - in case you want to come in touch directly.
> 
> Now to the business. There are two things I'd like to propose: improving/extending the rails cheat sheet, and creating a new cheat sheet 'Secure deployment of a Rails app'.
> 
> Improving the rails cheat sheet is rather straightforward. Therefore I'd like to *get writing permissions* to the wiki and simply do it. What I will introduce: one example of using devise right, a mention of zxcvbn gem and improving its usability, an example of using cancancan with a couple of notes, some info about omniauth, infos about creating secure api-only apps, devise token auth for this purpose, xsrf protection in api-only apps, some infos on jwt and client-side sessions.
> 
> The second endeavor to create a secure deployment cheat sheet is much harder to get right. That is why I'd like to ask you to do a couple of iterations on the new material with me, before we publish. Below is what I'd like to write about. 
> 
> There are multiple ways to deploy a rails app. Many of them are error prone. Special techniques and server hardening is required to get it right. In this cheat sheet I'd list concerns arising when deploying to a fresh new server. 
> 
> We start with rules to configure os users. Next, we show, how to hide sensitive data from the unauthorized access. Tuning the app towards web security follows. We continue with rights and deployment management. As an example, I'd build from scratch an nginx with passenger and deploy there. Keeping all the system's components updated while keeping the system up and running is also a challenge to security and availability, a few words on it shall be said. Automated deployment techniques, Capistrano, and monitoring the server shall conclude this guide.
> 
> To summarize on the action items to support my initiatives:
> 1) who could grant me the write access to the rails cheat sheet? - I need to request a write access there.
> 2) what is the right way to start a new cheat sheet? - where could I write the first iteration?
> 
> 
> What do you think of my proposals?
> 
> Thanks a lot for reading it all.
> 
> 
> Best Regards,
> Zaur.
> 

From erlend.oftedal at owasp.org  Sun Nov 19 09:30:25 2017
From: erlend.oftedal at owasp.org (Erlend Oftedal)
Date: Sun, 19 Nov 2017 09:30:25 +0000
Subject: [OWASP-cheat-sheets] REST and STS
In-Reply-To: <1ca9bdfa-bb58-b3ad-26b9-589ab23971de@owasp.org>
References: <CADFnxGeX-rqqgUdQhHwcjwK-r2t-WuZ1Y6kEFG8UmC_8Gkx08A@mail.gmail.com>
	<a279e64e-46de-d166-a2b7-a787ef0632df@owasp.org>
	<CADFnxGdW-76tEYanDQ8gv2x=czOorraHRhHNWR4-k9m5YFy2hA@mail.gmail.com>
	<1ca9bdfa-bb58-b3ad-26b9-589ab23971de@owasp.org>
Message-ID: <CAGRYwJxftDj_Z++PWf-xtCFQM9snjaTPGvBS2wrPRhj02frP6Q@mail.gmail.com>

Good diagrams, but I would say there is a version missing, and it?s the one
I commonly see. It?s close to 1, but the front end is static and there is a
session with the REST services only. Yeah sessions, I know. But I wouldnt
put it under 1 because there is no old school ajax page loads and no JSONP.
The services are proper HATEOAS and the sessions is only used for
authentication.
I?m ok with writing this up in the cheat sheet as not optimal from a design
perspective, but  dont want to rule out a design I see a lot of people
using. This is still a pretty common design for Single page web apps, where
you dont have a separate IdpP/STS.

And about JSONP. ?STOP IT? is the best advice.


Best regards
Erlend



On Fri, 17 Nov 2017 at 02:56, Jim Manico <jim.manico at owasp.org> wrote:

> Diagrams are totally possible in the CS. I can help with that! Are the
> diagrams below open source?
>
> So Yo and Jan - really fantastic conversations. I appreciate everyone
> digging deeply into this. I'm definitely learning from it.
>
> - Jim
>
> On 11/15/17 10:00 PM, Johan Peeters wrote:
>
> Great diagrams! I think they would clarify, although it would be a break
> with tradition - as far as I'm aware, no diagrams have been used in cheat
> sheets thus far. Are there any practical constraints adding them to the
> cheat sheet?
>
> Category 3 is not only more scaleable in the sense that it allows for
> horizontal scaling of resource servers, AKA web services, but also that it
> becomes easy to add more, distinct, services.
>
> An access token should identify which resource it is giving access to and
> the scope of this access. Whether, and how, an access token can give access
> to *several* resources, e.g. in the event of call chaining, is an
> interesting debate that I do not expect to be settled any time soon.
>
> On 16 November 2017 at 00:58, Jan Wolff <jan.wolff at owasp.org> wrote:
>
>> It appears to me that question how access control can be done securely
>> for REST Web services depends more on the fashion how those services are
>> used than whether they are truly REST-ful. In my opinion, we should not
>> assume that our audience shares our understanding of what REST implies.
>> Instead, we should point our readers to good advice depending on their use
>> of services.
>>
>> Let us differentiate between architectures that need different handling
>> of access control. If you want to edit/fix/propose, the following figures
>> can be accessed here:
>>
>> https://docs.google.com/presentation/d/1snVoMadFdbTiyiRypV8tX29zYrIpPalDfMgljACaPgM/edit?usp=sharing
>>
>> I mostly observed category 1 or category 2 in the wild. Category 3 seems
>> to be an emerging design for better horizontal scaling without shared
>> session state. Please correct me or add alternatives if you see it
>> differently.
>>
>>
>>
>>
>> For category 1, secure session management applies as for web applications
>> and we should point there.
>> For category 2, there might be a session based on user authentication
>> (passwords or even client-certificates). This could be a service backend
>> for an app. Scaling brings the danger of replicated data stores with
>> credentials. I would discourage users to scale this above one credential
>> database.
>> Category 3: I am not the expert for this, but I would expect scalability
>> to be superior because services are truly independent from each other.
>> Tokens must not be used as proof of identity. Tokens might be abused/leaked
>> by service 1 and used on service 2.
>>
>> What do you think, would sketches like that help users of the cheat sheet
>> understand which parts are relevant to them?
>>
>> Jan
>>
>>
>> Am 14.11.2017 um 10:56 schrieb Johan Peeters:
>>
>> No sooner did Jim move the REST cheat sheet from draft to approved
>> mode than old controversies reared up again. The principal one was
>> whether we should cover session management, but I won't go into that
>> in this post.
>>
>> Here I want to discuss what the deal is with Security Token Services (STS).
>> Erlend asked me: can't you have a REST service without an STS? Sure,
>> if no authN/Z is needed, obviously. If the REST API is sensitive,
>> serves multiple clients and there are several resource servers, on the
>> other hand, then I would strongly recommend using an STS. This
>> centralises authentication logic in a dedicated component and avoids
>> passing credentials around.
>> If you do not have and do not anticipate having multiple clients or
>> resource servers, maybe REST APIs are not the right choice - probably
>> there are simpler designs that serve your purpose.
>>
>> Yo
>>
>>
>>
>> _______________________________________________
>> OWASP-cheat-sheets mailing list
>> OWASP-cheat-sheets at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>
>>
>
>
> --
> Johan Peeters
> https://www.johanpeeters.com
>
>
> _______________________________________________
> OWASP-cheat-sheets mailing listOWASP-cheat-sheets at lists.owasp.orghttps://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>
>
> _______________________________________________
> OWASP-cheat-sheets mailing list
> OWASP-cheat-sheets at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171119/4cc35d4d/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: baifpaacipamlkmd.png
Type: image/png
Size: 40056 bytes
Desc: not available
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171119/4cc35d4d/attachment-0001.png>

From yo at johanpeeters.com  Mon Nov 20 07:17:48 2017
From: yo at johanpeeters.com (Johan Peeters)
Date: Mon, 20 Nov 2017 08:17:48 +0100
Subject: [OWASP-cheat-sheets] REST and STS
In-Reply-To: <CAGRYwJxftDj_Z++PWf-xtCFQM9snjaTPGvBS2wrPRhj02frP6Q@mail.gmail.com>
References: <CADFnxGeX-rqqgUdQhHwcjwK-r2t-WuZ1Y6kEFG8UmC_8Gkx08A@mail.gmail.com>
	<a279e64e-46de-d166-a2b7-a787ef0632df@owasp.org>
	<CADFnxGdW-76tEYanDQ8gv2x=czOorraHRhHNWR4-k9m5YFy2hA@mail.gmail.com>
	<1ca9bdfa-bb58-b3ad-26b9-589ab23971de@owasp.org>
	<CAGRYwJxftDj_Z++PWf-xtCFQM9snjaTPGvBS2wrPRhj02frP6Q@mail.gmail.com>
Message-ID: <CADFnxGf3EbZ8xhrzO-61QZswiXeyDO9GCP-QcNmkaEa=Dysauw@mail.gmail.com>

I do not see the use of an IdP/STS as a necessary condition to qualify as a
REST service. I would argue for a separate IdP/STS since otherwise users
need to entrust their credentials to the clients and all the back-end
services called. Not good from a security perspective.
If the service authenticates the user and then sets a session cookie, that
is not REST. If the cheat sheet suggests otherwise, I want my name off.

On 19 November 2017 at 10:30, Erlend Oftedal <erlend.oftedal at owasp.org>
wrote:

> Good diagrams, but I would say there is a version missing, and it?s the
> one I commonly see. It?s close to 1, but the front end is static and there
> is a session with the REST services only. Yeah sessions, I know. But I
> wouldnt put it under 1 because there is no old school ajax page loads and
> no JSONP. The services are proper HATEOAS and the sessions is only used for
> authentication.
> I?m ok with writing this up in the cheat sheet as not optimal from a
> design perspective, but  dont want to rule out a design I see a lot of
> people using. This is still a pretty common design for Single page web
> apps, where you dont have a separate IdpP/STS.
>
> And about JSONP. ?STOP IT? is the best advice.
>
>
> Best regards
> Erlend
>
>
>
> On Fri, 17 Nov 2017 at 02:56, Jim Manico <jim.manico at owasp.org> wrote:
>
>> Diagrams are totally possible in the CS. I can help with that! Are the
>> diagrams below open source?
>>
>> So Yo and Jan - really fantastic conversations. I appreciate everyone
>> digging deeply into this. I'm definitely learning from it.
>>
>> - Jim
>>
>> On 11/15/17 10:00 PM, Johan Peeters wrote:
>>
>> Great diagrams! I think they would clarify, although it would be a break
>> with tradition - as far as I'm aware, no diagrams have been used in cheat
>> sheets thus far. Are there any practical constraints adding them to the
>> cheat sheet?
>>
>> Category 3 is not only more scaleable in the sense that it allows for
>> horizontal scaling of resource servers, AKA web services, but also that it
>> becomes easy to add more, distinct, services.
>>
>> An access token should identify which resource it is giving access to and
>> the scope of this access. Whether, and how, an access token can give access
>> to *several* resources, e.g. in the event of call chaining, is an
>> interesting debate that I do not expect to be settled any time soon.
>>
>> On 16 November 2017 at 00:58, Jan Wolff <jan.wolff at owasp.org> wrote:
>>
>>> It appears to me that question how access control can be done securely
>>> for REST Web services depends more on the fashion how those services are
>>> used than whether they are truly REST-ful. In my opinion, we should not
>>> assume that our audience shares our understanding of what REST implies.
>>> Instead, we should point our readers to good advice depending on their use
>>> of services.
>>>
>>> Let us differentiate between architectures that need different handling
>>> of access control. If you want to edit/fix/propose, the following figures
>>> can be accessed here:
>>> https://docs.google.com/presentation/d/1snVoMadFdbTiyiRypV8tX29zYrIpP
>>> alDfMgljACaPgM/edit?usp=sharing
>>>
>>> I mostly observed category 1 or category 2 in the wild. Category 3 seems
>>> to be an emerging design for better horizontal scaling without shared
>>> session state. Please correct me or add alternatives if you see it
>>> differently.
>>>
>>>
>>>
>>>
>>> For category 1, secure session management applies as for web
>>> applications and we should point there.
>>> For category 2, there might be a session based on user authentication
>>> (passwords or even client-certificates). This could be a service backend
>>> for an app. Scaling brings the danger of replicated data stores with
>>> credentials. I would discourage users to scale this above one credential
>>> database.
>>> Category 3: I am not the expert for this, but I would expect scalability
>>> to be superior because services are truly independent from each other.
>>> Tokens must not be used as proof of identity. Tokens might be abused/leaked
>>> by service 1 and used on service 2.
>>>
>>> What do you think, would sketches like that help users of the cheat
>>> sheet understand which parts are relevant to them?
>>>
>>> Jan
>>>
>>>
>>> Am 14.11.2017 um 10:56 schrieb Johan Peeters:
>>>
>>> No sooner did Jim move the REST cheat sheet from draft to approved
>>> mode than old controversies reared up again. The principal one was
>>> whether we should cover session management, but I won't go into that
>>> in this post.
>>>
>>> Here I want to discuss what the deal is with Security Token Services (STS).
>>> Erlend asked me: can't you have a REST service without an STS? Sure,
>>> if no authN/Z is needed, obviously. If the REST API is sensitive,
>>> serves multiple clients and there are several resource servers, on the
>>> other hand, then I would strongly recommend using an STS. This
>>> centralises authentication logic in a dedicated component and avoids
>>> passing credentials around.
>>> If you do not have and do not anticipate having multiple clients or
>>> resource servers, maybe REST APIs are not the right choice - probably
>>> there are simpler designs that serve your purpose.
>>>
>>> Yo
>>>
>>>
>>>
>>> _______________________________________________
>>> OWASP-cheat-sheets mailing list
>>> OWASP-cheat-sheets at lists.owasp.org
>>> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>>
>>>
>>
>>
>> --
>> Johan Peeters
>> https://www.johanpeeters.com
>>
>>
>> _______________________________________________
>> OWASP-cheat-sheets mailing listOWASP-cheat-sheets at lists.owasp.orghttps://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>
>>
>> _______________________________________________
>> OWASP-cheat-sheets mailing list
>> OWASP-cheat-sheets at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>
>


-- 
Johan Peeters
https://www.johanpeeters.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171120/a6e4b1bc/attachment.html>

From jim.manico at owasp.org  Mon Nov 20 19:31:36 2017
From: jim.manico at owasp.org (Jim Manico)
Date: Mon, 20 Nov 2017 09:31:36 -1000
Subject: [OWASP-cheat-sheets] REST and STS
In-Reply-To: <CADFnxGf3EbZ8xhrzO-61QZswiXeyDO9GCP-QcNmkaEa=Dysauw@mail.gmail.com>
References: <CADFnxGeX-rqqgUdQhHwcjwK-r2t-WuZ1Y6kEFG8UmC_8Gkx08A@mail.gmail.com>
	<a279e64e-46de-d166-a2b7-a787ef0632df@owasp.org>
	<CADFnxGdW-76tEYanDQ8gv2x=czOorraHRhHNWR4-k9m5YFy2hA@mail.gmail.com>
	<1ca9bdfa-bb58-b3ad-26b9-589ab23971de@owasp.org>
	<CAGRYwJxftDj_Z++PWf-xtCFQM9snjaTPGvBS2wrPRhj02frP6Q@mail.gmail.com>
	<CADFnxGf3EbZ8xhrzO-61QZswiXeyDO9GCP-QcNmkaEa=Dysauw@mail.gmail.com>
Message-ID: <7bef39c4-1c22-1a34-b59e-85b3893ddc9d@owasp.org>

> If the cheat sheet suggests otherwise, I want my name off.

Just for the record, this is how I used to talk to my brother and sister
when I was around 8-12 years old.

- Jim


On 11/19/17 9:17 PM, Johan Peeters wrote:
> I do not see the use of an IdP/STS as a necessary condition to qualify
> as a REST service. I would argue for a separate IdP/STS since
> otherwise users need to entrust their credentials to the clients and
> all the back-end services called. Not good from a security perspective.
> If the service authenticates the user and then sets a session cookie,
> that is not REST. If the cheat sheet suggests otherwise, I want my
> name off.
>
> On 19 November 2017 at 10:30, Erlend Oftedal <erlend.oftedal at owasp.org
> <mailto:erlend.oftedal at owasp.org>> wrote:
>
>     Good diagrams, but I would say there is a version missing, and
>     it?s the one I commonly see. It?s close to 1, but the front end is
>     static and there is a session with the REST services only. Yeah
>     sessions, I know. But I wouldnt put it under 1 because there is no
>     old school ajax page loads and no JSONP. The services are proper
>     HATEOAS and the sessions is only used for authentication.?
>     I?m ok with writing this up in the cheat sheet as not optimal from
>     a design perspective, but ?dont want to rule out a design I see a
>     lot of people using. This is still a pretty common design for
>     Single page web apps, where you dont have a separate IdpP/STS.
>
>     And about JSONP. ?STOP IT? is the best advice.
>
>
>     Best regards
>     Erlend
>
>
>
>     On Fri, 17 Nov 2017 at 02:56, Jim Manico <jim.manico at owasp.org
>     <mailto:jim.manico at owasp.org>> wrote:
>
>         Diagrams are totally possible in the CS. I can help with that!
>         Are the diagrams below open source?
>
>         So Yo and Jan - really fantastic conversations. I appreciate
>         everyone digging deeply into this. I'm definitely learning
>         from it.
>
>         - Jim
>
>
>         On 11/15/17 10:00 PM, Johan Peeters wrote:
>>         Great diagrams! I think they would clarify, although it would
>>         be a break with tradition - as far as I'm aware, no diagrams
>>         have been used in cheat sheets thus far. Are there any
>>         practical constraints adding them to the cheat sheet?
>>
>>         Category 3 is not only more scaleable in the sense that it
>>         allows for horizontal scaling of resource servers, AKA web
>>         services, but also that it becomes easy to add more,
>>         distinct, services.
>>
>>         An access token should identify which resource it is giving
>>         access to and the scope of this access. Whether, and how, an
>>         access token can give access to *several* resources, e.g. in
>>         the event of call chaining, is an interesting debate that I
>>         do not expect to be settled any time soon.
>>
>>         On 16 November 2017 at 00:58, Jan Wolff <jan.wolff at owasp.org
>>         <mailto:jan.wolff at owasp.org>> wrote:
>>
>>             It appears to me that question how access control can be
>>             done securely for REST Web services depends more on the
>>             fashion how those services are used than whether they are
>>             truly REST-ful. In my opinion, we should not assume that
>>             our audience shares our understanding of what REST
>>             implies. Instead, we should point our readers to good
>>             advice depending on their use of services.
>>
>>             Let us differentiate between architectures that need
>>             different handling of access control. If you want to
>>             edit/fix/propose, the following figures can be accessed here:
>>             https://docs.google.com/presentation/d/1snVoMadFdbTiyiRypV8tX29zYrIpPalDfMgljACaPgM/edit?usp=sharing
>>             <https://docs.google.com/presentation/d/1snVoMadFdbTiyiRypV8tX29zYrIpPalDfMgljACaPgM/edit?usp=sharing>
>>
>>             I mostly observed category 1 or category 2 in the wild.
>>             Category 3 seems to be an emerging design for better
>>             horizontal scaling without shared session state. Please
>>             correct me or add alternatives if you see it differently.
>>
>>
>>
>>
>>             For category 1, secure session management applies as for
>>             web applications and we should point there.
>>             For category 2, there might be a session based on user
>>             authentication (passwords or even client-certificates).
>>             This could be a service backend for an app. Scaling
>>             brings the danger of replicated data stores with
>>             credentials. I would discourage users to scale this above
>>             one credential database.
>>             Category 3: I am not the expert for this, but I would
>>             expect scalability to be superior because services are
>>             truly independent from each other. Tokens must not be
>>             used as proof of identity. Tokens might be abused/leaked
>>             by service 1 and used on service 2.
>>
>>             What do you think, would sketches like that help users of
>>             the cheat sheet understand which parts are relevant to them?
>>
>>             Jan
>>
>>
>>             Am 14.11.2017 um 10:56 schrieb Johan Peeters:
>>>             No sooner did Jim move the REST cheat sheet from draft to approved
>>>             mode than old controversies reared up again. The principal one was
>>>             whether we should cover session management, but I won't go into that
>>>             in this post.
>>>
>>>             Here I want to discuss what the deal is with Security Token Services (STS).
>>>             Erlend asked me: can't you have a REST service without an STS? Sure,
>>>             if no authN/Z is needed, obviously. If the REST API is sensitive,
>>>             serves multiple clients and there are several resource servers, on the
>>>             other hand, then I would strongly recommend using an STS. This
>>>             centralises authentication logic in a dedicated component and avoids
>>>             passing credentials around.
>>>             If you do not have and do not anticipate having multiple clients or
>>>             resource servers, maybe REST APIs are not the right choice - probably
>>>             there are simpler designs that serve your purpose.
>>>
>>>             Yo
>>
>>
>>             _______________________________________________
>>             OWASP-cheat-sheets mailing list
>>             OWASP-cheat-sheets at lists.owasp.org
>>             <mailto:OWASP-cheat-sheets at lists.owasp.org>
>>             https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>             <https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets>
>>
>>
>>
>>
>>         -- 
>>         Johan Peeters
>>         https://www.johanpeeters.com
>>
>>
>>         _______________________________________________
>>         OWASP-cheat-sheets mailing list
>>         OWASP-cheat-sheets at lists.owasp.org
>>         <mailto:OWASP-cheat-sheets at lists.owasp.org>
>>         https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>         <https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets>
>
>         _______________________________________________
>         OWASP-cheat-sheets mailing list
>         OWASP-cheat-sheets at lists.owasp.org
>         <mailto:OWASP-cheat-sheets at lists.owasp.org>
>         https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>         <https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets>
>
>
>
>
> -- 
> Johan Peeters
> https://www.johanpeeters.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171120/fd192766/attachment.html>

From yo at johanpeeters.com  Mon Nov 20 19:40:02 2017
From: yo at johanpeeters.com (Johan Peeters)
Date: Mon, 20 Nov 2017 20:40:02 +0100
Subject: [OWASP-cheat-sheets] REST and STS
In-Reply-To: <7bef39c4-1c22-1a34-b59e-85b3893ddc9d@owasp.org>
References: <CADFnxGeX-rqqgUdQhHwcjwK-r2t-WuZ1Y6kEFG8UmC_8Gkx08A@mail.gmail.com>
	<a279e64e-46de-d166-a2b7-a787ef0632df@owasp.org>
	<CADFnxGdW-76tEYanDQ8gv2x=czOorraHRhHNWR4-k9m5YFy2hA@mail.gmail.com>
	<1ca9bdfa-bb58-b3ad-26b9-589ab23971de@owasp.org>
	<CAGRYwJxftDj_Z++PWf-xtCFQM9snjaTPGvBS2wrPRhj02frP6Q@mail.gmail.com>
	<CADFnxGf3EbZ8xhrzO-61QZswiXeyDO9GCP-QcNmkaEa=Dysauw@mail.gmail.com>
	<7bef39c4-1c22-1a34-b59e-85b3893ddc9d@owasp.org>
Message-ID: <CADFnxGfDp7chpHgs7j6uiwrXG4wQrqXsbKTYROMSzimWJ+grag@mail.gmail.com>

I know, Jim, I become a bad-mannered big-mouth when faced with overwhelming
evidence that I am wrong. Next phase is, I just stomp off in a sulk.

On 20 November 2017 at 20:31, Jim Manico <jim.manico at owasp.org> wrote:

> > If the cheat sheet suggests otherwise, I want my name off.
>
> Just for the record, this is how I used to talk to my brother and sister
> when I was around 8-12 years old.
>
> - Jim
>
> On 11/19/17 9:17 PM, Johan Peeters wrote:
>
> I do not see the use of an IdP/STS as a necessary condition to qualify as
> a REST service. I would argue for a separate IdP/STS since otherwise users
> need to entrust their credentials to the clients and all the back-end
> services called. Not good from a security perspective.
> If the service authenticates the user and then sets a session cookie, that
> is not REST. If the cheat sheet suggests otherwise, I want my name off.
>
> On 19 November 2017 at 10:30, Erlend Oftedal <erlend.oftedal at owasp.org>
> wrote:
>
>> Good diagrams, but I would say there is a version missing, and it?s the
>> one I commonly see. It?s close to 1, but the front end is static and there
>> is a session with the REST services only. Yeah sessions, I know. But I
>> wouldnt put it under 1 because there is no old school ajax page loads and
>> no JSONP. The services are proper HATEOAS and the sessions is only used for
>> authentication.
>> I?m ok with writing this up in the cheat sheet as not optimal from a
>> design perspective, but  dont want to rule out a design I see a lot of
>> people using. This is still a pretty common design for Single page web
>> apps, where you dont have a separate IdpP/STS.
>>
>> And about JSONP. ?STOP IT? is the best advice.
>>
>>
>> Best regards
>> Erlend
>>
>>
>>
>> On Fri, 17 Nov 2017 at 02:56, Jim Manico <jim.manico at owasp.org> wrote:
>>
>>> Diagrams are totally possible in the CS. I can help with that! Are the
>>> diagrams below open source?
>>>
>>> So Yo and Jan - really fantastic conversations. I appreciate everyone
>>> digging deeply into this. I'm definitely learning from it.
>>>
>>> - Jim
>>>
>>> On 11/15/17 10:00 PM, Johan Peeters wrote:
>>>
>>> Great diagrams! I think they would clarify, although it would be a break
>>> with tradition - as far as I'm aware, no diagrams have been used in cheat
>>> sheets thus far. Are there any practical constraints adding them to the
>>> cheat sheet?
>>>
>>> Category 3 is not only more scaleable in the sense that it allows for
>>> horizontal scaling of resource servers, AKA web services, but also that it
>>> becomes easy to add more, distinct, services.
>>>
>>> An access token should identify which resource it is giving access to
>>> and the scope of this access. Whether, and how, an access token can give
>>> access to *several* resources, e.g. in the event of call chaining, is an
>>> interesting debate that I do not expect to be settled any time soon.
>>>
>>> On 16 November 2017 at 00:58, Jan Wolff <jan.wolff at owasp.org> wrote:
>>>
>>>> It appears to me that question how access control can be done securely
>>>> for REST Web services depends more on the fashion how those services are
>>>> used than whether they are truly REST-ful. In my opinion, we should not
>>>> assume that our audience shares our understanding of what REST implies.
>>>> Instead, we should point our readers to good advice depending on their use
>>>> of services.
>>>>
>>>> Let us differentiate between architectures that need different handling
>>>> of access control. If you want to edit/fix/propose, the following figures
>>>> can be accessed here:
>>>> https://docs.google.com/presentation/d/1snVoMadFdbTiyiRypV8t
>>>> X29zYrIpPalDfMgljACaPgM/edit?usp=sharing
>>>>
>>>> I mostly observed category 1 or category 2 in the wild. Category 3
>>>> seems to be an emerging design for better horizontal scaling without shared
>>>> session state. Please correct me or add alternatives if you see it
>>>> differently.
>>>>
>>>>
>>>>
>>>>
>>>> For category 1, secure session management applies as for web
>>>> applications and we should point there.
>>>> For category 2, there might be a session based on user authentication
>>>> (passwords or even client-certificates). This could be a service backend
>>>> for an app. Scaling brings the danger of replicated data stores with
>>>> credentials. I would discourage users to scale this above one credential
>>>> database.
>>>> Category 3: I am not the expert for this, but I would expect
>>>> scalability to be superior because services are truly independent from each
>>>> other. Tokens must not be used as proof of identity. Tokens might be
>>>> abused/leaked by service 1 and used on service 2.
>>>>
>>>> What do you think, would sketches like that help users of the cheat
>>>> sheet understand which parts are relevant to them?
>>>>
>>>> Jan
>>>>
>>>>
>>>> Am 14.11.2017 um 10:56 schrieb Johan Peeters:
>>>>
>>>> No sooner did Jim move the REST cheat sheet from draft to approved
>>>> mode than old controversies reared up again. The principal one was
>>>> whether we should cover session management, but I won't go into that
>>>> in this post.
>>>>
>>>> Here I want to discuss what the deal is with Security Token Services (STS).
>>>> Erlend asked me: can't you have a REST service without an STS? Sure,
>>>> if no authN/Z is needed, obviously. If the REST API is sensitive,
>>>> serves multiple clients and there are several resource servers, on the
>>>> other hand, then I would strongly recommend using an STS. This
>>>> centralises authentication logic in a dedicated component and avoids
>>>> passing credentials around.
>>>> If you do not have and do not anticipate having multiple clients or
>>>> resource servers, maybe REST APIs are not the right choice - probably
>>>> there are simpler designs that serve your purpose.
>>>>
>>>> Yo
>>>>
>>>>
>>>>
>>>> _______________________________________________
>>>> OWASP-cheat-sheets mailing list
>>>> OWASP-cheat-sheets at lists.owasp.org
>>>> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>>>
>>>>
>>>
>>>
>>> --
>>> Johan Peeters
>>> https://www.johanpeeters.com
>>>
>>>
>>> _______________________________________________
>>> OWASP-cheat-sheets mailing listOWASP-cheat-sheets at lists.owasp.orghttps://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>>
>>>
>>> _______________________________________________
>>> OWASP-cheat-sheets mailing list
>>> OWASP-cheat-sheets at lists.owasp.org
>>> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>>
>>
>
>
> --
> Johan Peeters
> https://www.johanpeeters.com
>
>
>


-- 
Johan Peeters
https://www.johanpeeters.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171120/7411a1e3/attachment-0001.html>

From jim.manico at owasp.org  Mon Nov 20 20:21:28 2017
From: jim.manico at owasp.org (Jim Manico)
Date: Mon, 20 Nov 2017 10:21:28 -1000
Subject: [OWASP-cheat-sheets] REST and STS
In-Reply-To: <CADFnxGfDp7chpHgs7j6uiwrXG4wQrqXsbKTYROMSzimWJ+grag@mail.gmail.com>
References: <CADFnxGeX-rqqgUdQhHwcjwK-r2t-WuZ1Y6kEFG8UmC_8Gkx08A@mail.gmail.com>
	<a279e64e-46de-d166-a2b7-a787ef0632df@owasp.org>
	<CADFnxGdW-76tEYanDQ8gv2x=czOorraHRhHNWR4-k9m5YFy2hA@mail.gmail.com>
	<1ca9bdfa-bb58-b3ad-26b9-589ab23971de@owasp.org>
	<CAGRYwJxftDj_Z++PWf-xtCFQM9snjaTPGvBS2wrPRhj02frP6Q@mail.gmail.com>
	<CADFnxGf3EbZ8xhrzO-61QZswiXeyDO9GCP-QcNmkaEa=Dysauw@mail.gmail.com>
	<7bef39c4-1c22-1a34-b59e-85b3893ddc9d@owasp.org>
	<CADFnxGfDp7chpHgs7j6uiwrXG4wQrqXsbKTYROMSzimWJ+grag@mail.gmail.com>
Message-ID: <a66023d2-f26b-ac34-5ac1-37912fe252cb@owasp.org>

There are many many ways we can handle disagreements in constructive
ways; please do not worry about a disagreement in the cheatsheet ruining
your reputation so badly that you would need to remove your name! There
is a /plethora/ of alternative ways to communicate these issues. A
plethora I tell you!

Aloha, Jim


On 11/20/17 9:40 AM, Johan Peeters wrote:
> I know, Jim, I become a bad-mannered big-mouth when faced with
> overwhelming evidence that I am wrong. Next phase is, I just stomp off
> in a sulk.?
>
> On 20 November 2017 at 20:31, Jim Manico <jim.manico at owasp.org
> <mailto:jim.manico at owasp.org>> wrote:
>
>     > If the cheat sheet suggests otherwise, I want my name off.
>
>     Just for the record, this is how I used to talk to my brother and
>     sister when I was around 8-12 years old.
>
>     - Jim
>
>
>     On 11/19/17 9:17 PM, Johan Peeters wrote:
>>     I do not see the use of an IdP/STS as a necessary condition to
>>     qualify as a REST service. I would argue for a separate IdP/STS
>>     since otherwise users need to entrust their credentials to the
>>     clients and all the back-end services called. Not good from a
>>     security perspective.
>>     If the service authenticates the user and then sets a session
>>     cookie, that is not REST. If the cheat sheet suggests otherwise,
>>     I want my name off.
>>
>>     On 19 November 2017 at 10:30, Erlend Oftedal
>>     <erlend.oftedal at owasp.org <mailto:erlend.oftedal at owasp.org>> wrote:
>>
>>         Good diagrams, but I would say there is a version missing,
>>         and it?s the one I commonly see. It?s close to 1, but the
>>         front end is static and there is a session with the REST
>>         services only. Yeah sessions, I know. But I wouldnt put it
>>         under 1 because there is no old school ajax page loads and no
>>         JSONP. The services are proper HATEOAS and the sessions is
>>         only used for authentication.?
>>         I?m ok with writing this up in the cheat sheet as not optimal
>>         from a design perspective, but ?dont want to rule out a
>>         design I see a lot of people using. This is still a pretty
>>         common design for Single page web apps, where you dont have a
>>         separate IdpP/STS.
>>
>>         And about JSONP. ?STOP IT? is the best advice.
>>
>>
>>         Best regards
>>         Erlend
>>
>>
>>
>>         On Fri, 17 Nov 2017 at 02:56, Jim Manico
>>         <jim.manico at owasp.org <mailto:jim.manico at owasp.org>> wrote:
>>
>>             Diagrams are totally possible in the CS. I can help with
>>             that! Are the diagrams below open source?
>>
>>             So Yo and Jan - really fantastic conversations. I
>>             appreciate everyone digging deeply into this. I'm
>>             definitely learning from it.
>>
>>             - Jim
>>
>>
>>             On 11/15/17 10:00 PM, Johan Peeters wrote:
>>>             Great diagrams! I think they would clarify, although it
>>>             would be a break with tradition - as far as I'm aware,
>>>             no diagrams have been used in cheat sheets thus far. Are
>>>             there any practical constraints adding them to the cheat
>>>             sheet?
>>>
>>>             Category 3 is not only more scaleable in the sense that
>>>             it allows for horizontal scaling of resource servers,
>>>             AKA web services, but also that it becomes easy to add
>>>             more, distinct, services.
>>>
>>>             An access token should identify which resource it is
>>>             giving access to and the scope of this access. Whether,
>>>             and how, an access token can give access to *several*
>>>             resources, e.g. in the event of call chaining, is an
>>>             interesting debate that I do not expect to be settled
>>>             any time soon.
>>>
>>>             On 16 November 2017 at 00:58, Jan Wolff
>>>             <jan.wolff at owasp.org <mailto:jan.wolff at owasp.org>> wrote:
>>>
>>>                 It appears to me that question how access control
>>>                 can be done securely for REST Web services depends
>>>                 more on the fashion how those services are used than
>>>                 whether they are truly REST-ful. In my opinion, we
>>>                 should not assume that our audience shares our
>>>                 understanding of what REST implies. Instead, we
>>>                 should point our readers to good advice depending on
>>>                 their use of services.
>>>
>>>                 Let us differentiate between architectures that need
>>>                 different handling of access control. If you want to
>>>                 edit/fix/propose, the following figures can be
>>>                 accessed here:
>>>                 https://docs.google.com/presentation/d/1snVoMadFdbTiyiRypV8tX29zYrIpPalDfMgljACaPgM/edit?usp=sharing
>>>                 <https://docs.google.com/presentation/d/1snVoMadFdbTiyiRypV8tX29zYrIpPalDfMgljACaPgM/edit?usp=sharing>
>>>
>>>                 I mostly observed category 1 or category 2 in the
>>>                 wild. Category 3 seems to be an emerging design for
>>>                 better horizontal scaling without shared session
>>>                 state. Please correct me or add alternatives if you
>>>                 see it differently.
>>>
>>>
>>>
>>>
>>>                 For category 1, secure session management applies as
>>>                 for web applications and we should point there.
>>>                 For category 2, there might be a session based on
>>>                 user authentication (passwords or even
>>>                 client-certificates). This could be a service
>>>                 backend for an app. Scaling brings the danger of
>>>                 replicated data stores with credentials. I would
>>>                 discourage users to scale this above one credential
>>>                 database.
>>>                 Category 3: I am not the expert for this, but I
>>>                 would expect scalability to be superior because
>>>                 services are truly independent from each other.
>>>                 Tokens must not be used as proof of identity. Tokens
>>>                 might be abused/leaked by service 1 and used on
>>>                 service 2.
>>>
>>>                 What do you think, would sketches like that help
>>>                 users of the cheat sheet understand which parts are
>>>                 relevant to them?
>>>
>>>                 Jan
>>>
>>>
>>>                 Am 14.11.2017 um 10:56 schrieb Johan Peeters:
>>>>                 No sooner did Jim move the REST cheat sheet from draft to approved
>>>>                 mode than old controversies reared up again. The principal one was
>>>>                 whether we should cover session management, but I won't go into that
>>>>                 in this post.
>>>>
>>>>                 Here I want to discuss what the deal is with Security Token Services (STS).
>>>>                 Erlend asked me: can't you have a REST service without an STS? Sure,
>>>>                 if no authN/Z is needed, obviously. If the REST API is sensitive,
>>>>                 serves multiple clients and there are several resource servers, on the
>>>>                 other hand, then I would strongly recommend using an STS. This
>>>>                 centralises authentication logic in a dedicated component and avoids
>>>>                 passing credentials around.
>>>>                 If you do not have and do not anticipate having multiple clients or
>>>>                 resource servers, maybe REST APIs are not the right choice - probably
>>>>                 there are simpler designs that serve your purpose.
>>>>
>>>>                 Yo
>>>
>>>
>>>                 _______________________________________________
>>>                 OWASP-cheat-sheets mailing list
>>>                 OWASP-cheat-sheets at lists.owasp.org
>>>                 <mailto:OWASP-cheat-sheets at lists.owasp.org>
>>>                 https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>>                 <https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets>
>>>
>>>
>>>
>>>
>>>             -- 
>>>             Johan Peeters
>>>             https://www.johanpeeters.com
>>>
>>>
>>>             _______________________________________________
>>>             OWASP-cheat-sheets mailing list
>>>             OWASP-cheat-sheets at lists.owasp.org
>>>             <mailto:OWASP-cheat-sheets at lists.owasp.org>
>>>             https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>>             <https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets>
>>
>>             _______________________________________________
>>             OWASP-cheat-sheets mailing list
>>             OWASP-cheat-sheets at lists.owasp.org
>>             <mailto:OWASP-cheat-sheets at lists.owasp.org>
>>             https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>>             <https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets>
>>
>>
>>
>>
>>     -- 
>>     Johan Peeters
>>     https://www.johanpeeters.com
>
>
>
>
> -- 
> Johan Peeters
> https://www.johanpeeters.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171120/5c61d4da/attachment-0001.html>

From dominique.righetto at gmail.com  Tue Nov 21 17:00:53 2017
From: dominique.righetto at gmail.com (Dominique Righetto)
Date: Tue, 21 Nov 2017 18:00:53 +0100
Subject: [OWASP-cheat-sheets] owasp cheat sheet
In-Reply-To: <40bec0f5-955b-616c-5e1d-c19f539ae8cf@gmail.com>
References: <40bec0f5-955b-616c-5e1d-c19f539ae8cf@gmail.com>
Message-ID: <CANos97cCq54Eow=RxKE0PpV6q3TnruObYFH5jGjn4HvZrD5B5Q@mail.gmail.com>

Hi Zaur,

Thanks you very much for your response and your work. It's really
appreciated :)

For the mailing list, you can subscribe on the following url in order to
have access:

https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets

I will look at the github link you provided and give you a feedback ASAP
through fb comment...

Best regards



--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com
<dominique.righetto at gmail.com>dominique.righetto at owasp.org
<dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA

On Mon, Nov 20, 2017 at 8:52 PM, Zaur Molotnikov <qutorial at gmail.com> wrote:

> Hello Dominique,
>
> here is Zaur, the guy trying to update the rails cheat sheet at the moment.
>
> Please, don't get me wrong, I am new to the whole story with mail lists.
> I tried replying to you, and do not think it worked to be honest.
>
> If it did, then I just wait for reply. But so far I got an email from
> mailer, and it looks like my email was rejected (see below). Not sure, why.
>
> The results of your email command are provided below. Attached is your
> original message.
>
>
> - Unprocessed:
>     Thank you very much for the detailed response.
>     I have decided to start small and wrote one update for the
>     existing rails cheat sheet. It updates the way devise is used and
>     passwords complexity is enforced.
>     What have I wrote about:
>      - authentication is enforced in one way in one file, it is easy now to
>     audit it
>      - special library is used to enforce password complexity: zxcvbn
>      - omniauth is mentioned
>      - PoC is referenced
>     Here one can see an updated wiki:
>
> https://github.com/qutorial/railscs/blob/master/cheatsheet.mediawiki#
> Authentication
>     Here is one commit which updates the wiki page:
>
> https://github.com/qutorial/railscs/commit/1828bc34de8e9cd76e34d9f673a145
> 917d2da79c
>     Please, let me know, if this way to update the cheat sheet
>     works for you?
>
> - Ignored:
>
>     We could do a couple of updates like this more, I have mentioned
>     a bunch of topics in the last email.
>
>     Thanks a lot,
>     Zaur.
>
>
>
> Kind regards,
> Zaur.
>
> --
>
> Find my PGP key here:
> http://molotnikov.de/zaur/pgp/pgpkey.asc
> http://pgp.mit.edu/pks/lookup?op=get&search=0x5895DF95B549EA42
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171121/94b2aacc/attachment.html>

From yo at johanpeeters.com  Wed Nov 22 07:49:49 2017
From: yo at johanpeeters.com (Johan Peeters)
Date: Wed, 22 Nov 2017 08:49:49 +0100
Subject: [OWASP-cheat-sheets] REST Cheatsheet
In-Reply-To: <CAGRYwJw5=7nnCDQMSyb+UkoUQp2whq698kDsehAsuGmnLjBeNg@mail.gmail.com>
References: <de4692bb-ceff-5315-7a86-6ff621abfb95@manicode.com>
	<CADFnxGfZasUMjAqwQH14bonBTcaKF1uBLNEbHaw+R0=0=MLSFQ@mail.gmail.com>
	<643e3ebc-d9d9-ed7b-2722-528036f0a10d@manicode.com>
	<CADFnxGeGmpEL7PYhmPpH4cku08AMxXQHyf9NUsY9KybFqR0Yqw@mail.gmail.com>
	<C1876B40-E33F-4031-800C-2E0DF47C8F95@manicode.com>
	<CAGRYwJzXGmo41W-P4ucDaOv6R1WNL_SM1nE4GMZ6XAzxjsH8bg@mail.gmail.com>
	<0f3a9b60-5010-04a6-d044-3fd352595429@manicode.com>
	<CADFnxGcgrfu0vavB9OiEaT=XeoJfUcKfSx0+XJj7QAUjTgDcVw@mail.gmail.com>
	<1ff608d2-3340-f53e-915f-b06c4a1bfdd6@manicode.com>
	<a7f9d33d-69a5-af7f-d41d-d29e32c18f23@owasp.org>
	<4C206081-506A-4B7B-BB10-BEBB7A308212@manicode.com>
	<CADFnxGc2bHJuXQF3G+Fi4Yq=jnzvgKZ7dWDBrbOJhh4BJi51tQ@mail.gmail.com>
	<CAGRYwJw5=7nnCDQMSyb+UkoUQp2whq698kDsehAsuGmnLjBeNg@mail.gmail.com>
Message-ID: <CADFnxGcyckSb-bGN_-ih8U7sJ6WzidDLP8xvRiB5LfSyToEA2g@mail.gmail.com>

I am resending since this discussion was blocked by the mailing list.
Jim suggested that this may be because the payload got too long.

On 22 November 2017 at 07:45, Erlend Oftedal <erlend.oftedal at owasp.org> wrote:
> If a REST service is to be truly stateless, it would have selfcontained
> tokens/authentication-bearers. Client side TLS certs counts as stateless.
> Same holds for SAML tokens, JWT tokens and other token types that by
> themselves can be validated. This also includes client side sessions,
> because they are essentially signed blobs and are self-contained (just like
> JWT and SAML).
> Server-side sessions are not stateless. Neither are OAuth2 bearer tokens, or
> SAML aritifact ids. Because they are essentially just IDs of server side
> state. The server that keeps this state may not be the server that serves
> the resources, but as long as I send an auth-identifier to a REST service,
> and that service will then have to look up that ID somewhere else
> (getSession, lookupAccessTokenFromIdp, checkSAMLTokenId etc.), it should not
> count as stateless.

TL;DR I agree that, in a broad sense, there may be a session when a
client invokes an access controlled REST service, but the session is
*not* between the client and REST service.

+ REST services hold state of the resources they represent. In that
sense they are stateful. But they do not establish sessions with their
clients. In that sense they are stateless.
+ In order to control access to its resources, REST services may
require a security token to be sent with each request.
+ The security token may have been issued within the scope of a
session between client and STS.
+ A security token may be self-contained or 'reference'. In the latter
case, the relying party, i.c. the REST service, needs to dereference
the token. I would not recommend this because of the additional
round-trip delay, but this architecture does *not* introduce a session
between client and REST service. The session is between, on the one
hand, the client and, on the other, STS and associated services. You
could indeed see a reference token as an ID of that session.
+ OAuth 2.0 does not standardize tokens. It allows both self-contained
and reference tokens. I often use JWTs as OAuth 2.0 access tokens.

-- 
Johan Peeters
https://www.johanpeeters.com

From dominique.righetto at gmail.com  Fri Nov 24 21:20:56 2017
From: dominique.righetto at gmail.com (Dominique Righetto)
Date: Fri, 24 Nov 2017 22:20:56 +0100
Subject: [OWASP-cheat-sheets] CS Guideline
Message-ID: <CANos97eacaGPDU+neU8unx7R23DUzMkHPW4W++OYv8evTz6H7A@mail.gmail.com>

Hi,

In order to initiate a little bit of standardization of the CS, a light
guideline has been added to the project homepage:

https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series#tab=Cheat_sheet_Guideline

The goal is to keep and still encourage the contribution along keeping the
whole set of CS consistent (it's the case today and I want to keep this).

I have also updated the project roadmap.

Thanks in advance for your understanding...


--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com
<dominique.righetto at gmail.com>dominique.righetto at owasp.org
<dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171124/db29a9a8/attachment.html>

From dominique.righetto at gmail.com  Fri Nov 24 21:44:17 2017
From: dominique.righetto at gmail.com (Dominique Righetto)
Date: Fri, 24 Nov 2017 22:44:17 +0100
Subject: [OWASP-cheat-sheets] owasp cheat sheet
In-Reply-To: <40bec0f5-955b-616c-5e1d-c19f539ae8cf@gmail.com>
References: <40bec0f5-955b-616c-5e1d-c19f539ae8cf@gmail.com>
Message-ID: <CANos97eVhKiEKHfvtnuR0BDrA0P=XRKWTg8_RT7TmkQjBXJEjQ@mail.gmail.com>

Hi Zaur,

You have made a great enhancement that is directly usable by a developer,
thanks you very much for your work :)

I have a minor change request: Can you use the tag syntaxhighlight for the
code snippet (shell and ruby) ?

Tag documentation:
- Doc: https://www.mediawiki.org/wiki/Extension:SyntaxHighlight
- Language supported: http://pygments.org/languages/

To update the article, this is the procedure:

1) Ask for a WIKI account using this form:
https://www.owasp.org/index.php/Special:RequestAccount
2) When you have your account then update the cheat sheet and do not forget
to set a comment to indicate what you have modified in one sentence.

et voil? :)

Do not hesitate to contact the list when you have updated the article.

Thanks in advance


--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com
<dominique.righetto at gmail.com>dominique.righetto at owasp.org
<dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA

On Mon, Nov 20, 2017 at 8:52 PM, Zaur Molotnikov <qutorial at gmail.com> wrote:

> Hello Dominique,
>
> here is Zaur, the guy trying to update the rails cheat sheet at the moment.
>
> Please, don't get me wrong, I am new to the whole story with mail lists.
> I tried replying to you, and do not think it worked to be honest.
>
> If it did, then I just wait for reply. But so far I got an email from
> mailer, and it looks like my email was rejected (see below). Not sure, why.
>
> The results of your email command are provided below. Attached is your
> original message.
>
>
> - Unprocessed:
>     Thank you very much for the detailed response.
>     I have decided to start small and wrote one update for the
>     existing rails cheat sheet. It updates the way devise is used and
>     passwords complexity is enforced.
>     What have I wrote about:
>      - authentication is enforced in one way in one file, it is easy now to
>     audit it
>      - special library is used to enforce password complexity: zxcvbn
>      - omniauth is mentioned
>      - PoC is referenced
>     Here one can see an updated wiki:
>
> https://github.com/qutorial/railscs/blob/master/cheatsheet.mediawiki#
> Authentication
>     Here is one commit which updates the wiki page:
>
> https://github.com/qutorial/railscs/commit/1828bc34de8e9cd76e34d9f673a145
> 917d2da79c
>     Please, let me know, if this way to update the cheat sheet
>     works for you?
>
> - Ignored:
>
>     We could do a couple of updates like this more, I have mentioned
>     a bunch of topics in the last email.
>
>     Thanks a lot,
>     Zaur.
>
>
>
> Kind regards,
> Zaur.
>
> --
>
> Find my PGP key here:
> http://molotnikov.de/zaur/pgp/pgpkey.asc
> http://pgp.mit.edu/pks/lookup?op=get&search=0x5895DF95B549EA42
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171124/d2521dff/attachment.html>

From dominique.righetto at gmail.com  Sat Nov 25 15:11:41 2017
From: dominique.righetto at gmail.com (Dominique RIGHETTO)
Date: Sat, 25 Nov 2017 16:11:41 +0100
Subject: [OWASP-cheat-sheets] CS code snippet syntax coloring
Message-ID: <d0a1e8e6-4c56-3472-20d4-e097db293cf5@gmail.com>

Hi Folks,

I need your help for this little CS evolution.

When you work on a CS (create or update), please can you replace usage
of "pre" tag by the "syntaxhighlight" tag in order to enable syntax
coloring for the code snippet sections of the CS?

https://www.mediawiki.org/wiki/Extension:SyntaxHighlight

http://pygments.org/languages/

The goal is to made CS more easy to read and print :)

Many thanks in advance.

-- 
Cordialement, Best regards,
dominique.righetto at gmail.com
dominique.righetto at owasp.org
GPG: 0x323D19BA



From jim.manico at owasp.org  Sat Nov 25 21:45:21 2017
From: jim.manico at owasp.org (Jim Manico)
Date: Sat, 25 Nov 2017 11:45:21 -1000
Subject: [OWASP-cheat-sheets] CS code snippet syntax coloring
In-Reply-To: <d0a1e8e6-4c56-3472-20d4-e097db293cf5@gmail.com>
References: <d0a1e8e6-4c56-3472-20d4-e097db293cf5@gmail.com>
Message-ID: <0b0e8368-abe1-c33e-ce48-6084eaae2c46@owasp.org>

Dominique,

I modified the entire DOM based XSS cheatsheet to use the proper
syntaxhighlight plugin. It looks dramatically better.

https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet

Please take a look a the source code here to see how it was done and let
me know if you have any suggestions. I used HTML, JSP and JAVASCRIPT
language highlighting based on the example. It's not also simple to tell
which one will look better. Sometimes the HTML language setting is
better than JAVSCRIPT at rendering javascript.

I'll update other cheatsheets with heavy code samples.

Aloha, Jim


On 11/25/17 5:11 AM, Dominique RIGHETTO wrote:
> Hi Folks,
>
> I need your help for this little CS evolution.
>
> When you work on a CS (create or update), please can you replace usage
> of "pre" tag by the "syntaxhighlight" tag in order to enable syntax
> coloring for the code snippet sections of the CS?
>
> https://www.mediawiki.org/wiki/Extension:SyntaxHighlight
>
> http://pygments.org/languages/
>
> The goal is to made CS more easy to read and print :)
>
> Many thanks in advance.
>


From dominique.righetto at gmail.com  Sun Nov 26 08:12:11 2017
From: dominique.righetto at gmail.com (Dominique RIGHETTO)
Date: Sun, 26 Nov 2017 09:12:11 +0100
Subject: [OWASP-cheat-sheets] CS code snippet syntax coloring
In-Reply-To: <0b0e8368-abe1-c33e-ce48-6084eaae2c46@owasp.org>
References: <d0a1e8e6-4c56-3472-20d4-e097db293cf5@gmail.com>
	<0b0e8368-abe1-c33e-ce48-6084eaae2c46@owasp.org>
Message-ID: <5e1d399a-cdc9-9959-27e1-c207d3a956bd@gmail.com>

Hi,

For me it's OK, it highlight the important information in code snippet
of this CS.


On 25/11/2017 22:45, Jim Manico wrote:
> Dominique,
>
> I modified the entire DOM based XSS cheatsheet to use the proper
> syntaxhighlight plugin. It looks dramatically better.
>
> https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet
>
> Please take a look a the source code here to see how it was done and let
> me know if you have any suggestions. I used HTML, JSP and JAVASCRIPT
> language highlighting based on the example. It's not also simple to tell
> which one will look better. Sometimes the HTML language setting is
> better than JAVSCRIPT at rendering javascript.
>
> I'll update other cheatsheets with heavy code samples.
>
> Aloha, Jim
>
>
> On 11/25/17 5:11 AM, Dominique RIGHETTO wrote:
>> Hi Folks,
>>
>> I need your help for this little CS evolution.
>>
>> When you work on a CS (create or update), please can you replace usage
>> of "pre" tag by the "syntaxhighlight" tag in order to enable syntax
>> coloring for the code snippet sections of the CS?
>>
>> https://www.mediawiki.org/wiki/Extension:SyntaxHighlight
>>
>> http://pygments.org/languages/
>>
>> The goal is to made CS more easy to read and print :)
>>
>> Many thanks in advance.
>>


From qutorial at gmail.com  Sun Nov 26 11:34:07 2017
From: qutorial at gmail.com (Zaur Molotnikov)
Date: Sun, 26 Nov 2017 12:34:07 +0100
Subject: [OWASP-cheat-sheets] owasp cheat sheet
In-Reply-To: <CANos97eVhKiEKHfvtnuR0BDrA0P=XRKWTg8_RT7TmkQjBXJEjQ@mail.gmail.com>
References: <40bec0f5-955b-616c-5e1d-c19f539ae8cf@gmail.com>
	<CANos97eVhKiEKHfvtnuR0BDrA0P=XRKWTg8_RT7TmkQjBXJEjQ@mail.gmail.com>
Message-ID: <33FC9B1A-6EB3-4BDA-AC66-3C137B69BEC5@gmail.com>

Hi Dominique and all.

Thanks for the feedback. I will use the tag syntax, no problem. Maybe on the wiki itself already.

I've sent the account request and confirmed my email address. How do I proceed with this, whose action is required now?

(I've heard on owasp German day 2017, that it might take forever this get the account, unless the newbie communicates enough. Who do I ask to give it a go?)

On November 24, 2017 10:44:17 PM GMT+01:00, Dominique Righetto <dominique.righetto at gmail.com> wrote:
>Hi Zaur,
>
>You have made a great enhancement that is directly usable by a
>developer,
>thanks you very much for your work :)
>
>I have a minor change request: Can you use the tag syntaxhighlight for
>the
>code snippet (shell and ruby) ?
>
>Tag documentation:
>- Doc: https://www.mediawiki.org/wiki/Extension:SyntaxHighlight
>- Language supported: http://pygments.org/languages/
>
>To update the article, this is the procedure:
>
>1) Ask for a WIKI account using this form:
>https://www.owasp.org/index.php/Special:RequestAccount
>2) When you have your account then update the cheat sheet and do not
>forget
>to set a comment to indicate what you have modified in one sentence.
>
>et voil? :)
>
>Do not hesitate to contact the list when you have updated the article.
>
>Thanks in advance
>
>
>--
>Cordialement, Best regards,
>Dominique Righetto
>dominique.righetto at gmail.com
><dominique.righetto at gmail.com>dominique.righetto at owasp.org
><dominique.righetto at gmail.com>
>https://righettod.eu
>GPG: 323D19BA
>
>On Mon, Nov 20, 2017 at 8:52 PM, Zaur Molotnikov <qutorial at gmail.com>
>wrote:
>
>> Hello Dominique,
>>
>> here is Zaur, the guy trying to update the rails cheat sheet at the
>moment.
>>
>> Please, don't get me wrong, I am new to the whole story with mail
>lists.
>> I tried replying to you, and do not think it worked to be honest.
>>
>> If it did, then I just wait for reply. But so far I got an email from
>> mailer, and it looks like my email was rejected (see below). Not
>sure, why.
>>
>> The results of your email command are provided below. Attached is
>your
>> original message.
>>
>>
>> - Unprocessed:
>>     Thank you very much for the detailed response.
>>     I have decided to start small and wrote one update for the
>>     existing rails cheat sheet. It updates the way devise is used and
>>     passwords complexity is enforced.
>>     What have I wrote about:
>>      - authentication is enforced in one way in one file, it is easy
>now to
>>     audit it
>>      - special library is used to enforce password complexity: zxcvbn
>>      - omniauth is mentioned
>>      - PoC is referenced
>>     Here one can see an updated wiki:
>>
>> https://github.com/qutorial/railscs/blob/master/cheatsheet.mediawiki#
>> Authentication
>>     Here is one commit which updates the wiki page:
>>
>>
>https://github.com/qutorial/railscs/commit/1828bc34de8e9cd76e34d9f673a145
>> 917d2da79c
>>     Please, let me know, if this way to update the cheat sheet
>>     works for you?
>>
>> - Ignored:
>>
>>     We could do a couple of updates like this more, I have mentioned
>>     a bunch of topics in the last email.
>>
>>     Thanks a lot,
>>     Zaur.
>>
>>
>>
>> Kind regards,
>> Zaur.
>>
>> --
>>
>> Find my PGP key here:
>> http://molotnikov.de/zaur/pgp/pgpkey.asc
>> http://pgp.mit.edu/pks/lookup?op=get&search=0x5895DF95B549EA42
>>


Best Regards,
Zaur.
-- 
My contacts here:
https://molotnikov.de/contact

Sent from my mobile device. Please excuse my brevity.

From dominique.righetto at gmail.com  Mon Nov 27 05:03:00 2017
From: dominique.righetto at gmail.com (Dominique Righetto)
Date: Mon, 27 Nov 2017 06:03:00 +0100
Subject: [OWASP-cheat-sheets] owasp cheat sheet
In-Reply-To: <CANos97dhVw15vvPrwvwC1Z_KQxpmvQGKZDnEYP=99guQOb6SLg@mail.gmail.com>
References: <40bec0f5-955b-616c-5e1d-c19f539ae8cf@gmail.com>
	<CANos97eVhKiEKHfvtnuR0BDrA0P=XRKWTg8_RT7TmkQjBXJEjQ@mail.gmail.com>
	<33FC9B1A-6EB3-4BDA-AC66-3C137B69BEC5@gmail.com>
	<CANos97dhVw15vvPrwvwC1Z_KQxpmvQGKZDnEYP=99guQOb6SLg@mail.gmail.com>
Message-ID: <CANos97eSruAhwT-Fcr+Fxk6SexL8_Bqm0_z95iM+QF59+MGj6w@mail.gmail.com>

Hi Zaur,

Thanks you for the information.

I will look at this point in order to unlock you.

I will keep you informed

Le 26 nov. 2017 12:34 PM, "Zaur Molotnikov" <qutorial at gmail.com> a ?crit :

Hi Dominique and all.

Thanks for the feedback. I will use the tag syntax, no problem. Maybe on
the wiki itself already.

I've sent the account request and confirmed my email address. How do I
proceed with this, whose action is required now?

(I've heard on owasp German day 2017, that it might take forever this get
the account, unless the newbie communicates enough. Who do I ask to give it
a go?)

On November 24, 2017 10:44:17 PM GMT+01:00, Dominique Righetto <
dominique.righetto at gmail.com> wrote:
>Hi Zaur,
>
>You have made a great enhancement that is directly usable by a
>developer,
>thanks you very much for your work :)
>
>I have a minor change request: Can you use the tag syntaxhighlight for
>the
>code snippet (shell and ruby) ?
>
>Tag documentation:
>- Doc: https://www.mediawiki.org/wiki/Extension:SyntaxHighlight
>- Language supported: http://pygments.org/languages/
>
>To update the article, this is the procedure:
>
>1) Ask for a WIKI account using this form:
>https://www.owasp.org/index.php/Special:RequestAccount
>2) When you have your account then update the cheat sheet and do not
>forget
>to set a comment to indicate what you have modified in one sentence.
>
>et voil? :)
>
>Do not hesitate to contact the list when you have updated the article.
>
>Thanks in advance
>
>
>--
>Cordialement, Best regards,
>Dominique Righetto
>dominique.righetto at gmail.com
><dominique.righetto at gmail.com>dominique.righetto at owasp.org
><dominique.righetto at gmail.com>
>https://righettod.eu
>GPG: 323D19BA
>
>On Mon, Nov 20, 2017 at 8:52 PM, Zaur Molotnikov <qutorial at gmail.com>
>wrote:
>
>> Hello Dominique,
>>
>> here is Zaur, the guy trying to update the rails cheat sheet at the
>moment.
>>
>> Please, don't get me wrong, I am new to the whole story with mail
>lists.
>> I tried replying to you, and do not think it worked to be honest.
>>
>> If it did, then I just wait for reply. But so far I got an email from
>> mailer, and it looks like my email was rejected (see below). Not
>sure, why.
>>
>> The results of your email command are provided below. Attached is
>your
>> original message.
>>
>>
>> - Unprocessed:
>>     Thank you very much for the detailed response.
>>     I have decided to start small and wrote one update for the
>>     existing rails cheat sheet. It updates the way devise is used and
>>     passwords complexity is enforced.
>>     What have I wrote about:
>>      - authentication is enforced in one way in one file, it is easy
>now to
>>     audit it
>>      - special library is used to enforce password complexity: zxcvbn
>>      - omniauth is mentioned
>>      - PoC is referenced
>>     Here one can see an updated wiki:
>>
>> https://github.com/qutorial/railscs/blob/master/cheatsheet.mediawiki#
>> Authentication
>>     Here is one commit which updates the wiki page:
>>
>>
>https://github.com/qutorial/railscs/commit/1828bc34de8e9cd76e34d9f673a145
>> 917d2da79c
>>     Please, let me know, if this way to update the cheat sheet
>>     works for you?
>>
>> - Ignored:
>>
>>     We could do a couple of updates like this more, I have mentioned
>>     a bunch of topics in the last email.
>>
>>     Thanks a lot,
>>     Zaur.
>>
>>
>>
>> Kind regards,
>> Zaur.
>>
>> --
>>
>> Find my PGP key here:
>> http://molotnikov.de/zaur/pgp/pgpkey.asc
>> http://pgp.mit.edu/pks/lookup?op=get&search=0x5895DF95B549EA42
>>


Best Regards,
Zaur.
--
My contacts here:
https://molotnikov.de/contact

Sent from my mobile device. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20171127/d3436f72/attachment.html>

