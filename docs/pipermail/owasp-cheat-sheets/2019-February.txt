From mkonakan at amazon.com  Thu Feb  7 23:42:53 2019
From: mkonakan at amazon.com (Konakandla, Manideep)
Date: Thu, 7 Feb 2019 23:42:53 +0000
Subject: [OWASP-cheat-sheets]
 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CANos97dTh0Tia6MftWq-_kWFzejWx7o0Uh=NyC8W_=jVpCUdOQ@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<6795fa7232dd466e818b7953048e243d@EX13D11UWB004.ant.amazon.com>
	<CAL=9OGyNxb0eKf4mhS=jJTUfBNfbQvuV=sNVZ5BLNoVzVb6O6A@mail.gmail.com>
	<CANos97cSYSKc29nA-RCfFf9daVGSqEtEfNTek-mac9px04Oq0A@mail.gmail.com>
	<CAL=9OGxQQFYeWcXMFTgAx22KSi9x2TGjrStKFGqHA1xk-wOV0Q@mail.gmail.com>
	<136d2b2c-ef34-6e7f-0870-c4b61cdf4379@manicode.com>
	<CAL=9OGy0jP6OfLNoeTYW9k=2q5H9qdq78PkkNvbs6+zgAbaQ6Q@mail.gmail.com>
	<CANos97esCWvdW58rw5ZC+NHpLT1gwUwQWOd=+_BqPr5HPaiU_w@mail.gmail.com>
	<46fa44e0bd7941eaa029659ca8f3291f@EX13D11UWB004.ant.amazon.com>
	<CANos97csCLS8cgWwduXWt520AcT5Z_sfRXbNUc=Yq6+P8Tx1UA@mail.gmail.com>
	<ea0ad8742d904ea792880b77e6e81678@EX13D11UWB004.ant.amazon.com>
	<70E7657A-CA1F-4BD7-ADF7-07A85CD08E6B@manicode.com>
	<37df98b064aa4b39af8d0e585638b3c4@EX13D11UWB004.ant.amazon.com>
	<CANos97cXnfb_foCaPaYXQEGRnphTQu8P_KC7pXwkeb7_ak0m-A@mail.gmail.com>
	<2bf303591c134e949d52c3d8d5a155d0@EX13D11UWB004.ant.amazon.com>
	<CANos97c6xDAycEr=YY_LaDWaffohmq17Cy1o9iSDPSYBaUa4_A@mail.gmail.com>
	<92ffc47ab9d14f4f9723d1feca90e1ab@EX13D11UWB004.ant.amazon.com>
	<CANos97dTh0Tia6MftWq-_kWFzejWx7o0Uh=NyC8W_=jVpCUdOQ@mail.gmail.com>
Message-ID: <e832f8afafc945e3b65cd5f17fe15c6b@EX13D11UWB004.ant.amazon.com>

Hi Dave - Let?s continue our discussion here so that we have everything tracked in the cheat sheet email list (copying our 1:1 conversation below).

I really appreciate your support in the changes. I have few comments below


a)       Dominique and Jim decided to move cheat sheets to Github. So, all new changes should be on Github CSRF<https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md> page. I think they are also working on deprecating the old wiki pages on OWASP. I am fine with all your changes (as most of them are cosmetic/grammatical/structural) except [1]. If you don?t mind, can you do these changes on the Github? I am fine with you moving the reference example to a different page as well. I have plans to add some other content (not anytime in next month) during which I will also try to trim the content as much as possible.

b)      ?If a developer forgets to add the token to any state changing operation, they are making the application vulnerable to CSRF." is flat out wrong.  If a dev forgets to add a token, then the server is simply going to reject the request. It's not going to be vulnerable.  If you agree, can you fix this?

>> You are ?assuming? here that the server has a token verification system which is not true by default. By default, all applications are vulnerable to CSRF unless developers add tokens / the system has a token verification system.

c)       I am removing the changes related to [1] for now as they are clearly contradicting what we have in other parts of the cheat sheet. If you disagree, I am open to discussion before we get them back to the cheatsheet again. I might be missing something and I would love to hear your side of the story.

1. Earlier, I rejected both the techniques you mentioned in ?Stateless/Tokenless Defense Techniques? to be in primary because
1.1 X-Requested-With: XMLHttpRequest Header: For the same FLASH related reasons mentioned under this<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Use_of_Custom_Request_Headers> section. On a separate thread, I was working with Riyaz who authored this<https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b> blog and you wouldn?t believe how many old browser versions are still vulnerable to this FLASH based redirect CSRF vulnerability. He also gave link to a HTML wrapper which seems to make this attack work on newer Chrome versions as well. If you are interested, I can provide more details about these. Hence, I don?t want users to be vulnerable by using this as a primary defense.
1.2 Not a Simple HTTP Request Verification: Again, this is a technique that I rejected in the later section<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Content-Type_Header_Validation> of the document along with the reasoning.

I just made some changes, feel free to review.

I also think this comment: "If a developer forgets to add the token to any state changing operation, they are making the application vulnerable to CSRF." is flat out wrong.  If a dev forgets to add a token, then the server is simply going to reject the request. It's not going to be vulnerable.  If you agree, can you fix this?

The article is also REALLY LONG. If you can identify anything to trim out, that would be great. I just trimmed out a few things, but I think we can do a lot more. Cheat sheets are supposed to be SHORT, but I realize many are not.

For example, maybe we can move the reference example to a completely different page? That would shorten this alot.


-Dave


On Wed, Feb 6, 2019 at 5:25 PM manideep konakandla <mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>> wrote:
Yes. All those changes passed through review on email list but yes, please feel free to provide any more comments.

On Wed, Feb 6, 2019, 1:21 PM Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org> wrote:
Are you:  Manideepk<https://www.owasp.org/index.php/User:Manideepk> on the OWASP site?

I have some questions/comments about your changes to the OWASP CSRF Cheat Sheet.

The bulk of those changes are here: https://www.owasp.org/index.php?title=Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet&type=revision&diff=244184&oldid=242455

If this is you, I'll provide more details, but wanted to make sure I'm in touch with the right person first.

-Dave

From: Dominique Righetto <dominique.righetto at owasp.org>
Sent: Sunday, December 23, 2018 4:13 AM
To: Konakandla, Manideep <mkonakan at amazon.com>
Cc: Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Thanksyou very much for your support ???

Le sam. 22 d?c. 2018 ? 22:24, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Let me know once the migration is started. I will do it for the CSRF prevention cheatsheet page ?

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Saturday, December 22, 2018 12:29 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hello Manideep,

Thanks you for the update.

For info we will migrate the entire project content (unless the homepage) to github so it is possible that you need to also made the update on the github repository.

The migration work will start on January, i will take some rest until January, i really need it.

Thanks you very much for your help on this project :)

Happy holidays too

--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Sat, Dec 22, 2018 at 3:40 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Hello all,

I made a change to ?Double Submit Cookie? technique [1]. I added a variant to it which now mitigates well-known security issues with standard ?Double Submit Cookie? technique. So, people can use this technique without any issues. Please let me know if anyone finds any issues within it.

Whenever I get some free time in next 1-2 months, I am planning to include

a)       Details about popular 6-7 web frameworks and the CSRF mitigations implemented by them

b)      Re-organize the page even more better by switching variant of double submit cookie to primary defense (under stateless section) etc.

Happy holidays everyone ?

[1]  https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Double_Submit_Cookie  (read the last para under this mitigation)


From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Saturday, October 13, 2018 12:59 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hi,
CS publishing released and notification sent to the community via Twitter and Slack channel.
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Oct 12, 2018 at 3:47 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Yes, I am feeling way better now. Thank you ?

@ALL: Cheat sheet is updated with all the changes now<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>. Please let me know if you have any issues by end of tomorrow. If there are no issues - I/we can start advertising the refactored cheat sheet in our networks ?

Thanks a ton Dominique and Jim for all your help till date. I really appreciate it!!! I will be actively maintaining this as well from today ?

Regards,
Manideep Konakandla
www.manideepk.com<http://www.manideepk.com>
Security Engineer @ Amazon
mkonakan at amazon.com<mailto:mkonakan at amazon.com>

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Wednesday, October 10, 2018 10:39 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Go for it!!! I hope you?re feeling better!
--
Jim Manico
@Manicode


On Oct 10, 2018, at 10:18 PM, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Sorry for late reply. I was on sick leave for last 2 days.

I synced up with Dominique in a different email chain to clarify something in his previous email. He gave me a go ahead to update wiki with new re-factored cheat sheet. I am planning to do it sometime tomorrow. @Jim : Is it with fine with you as well? Please let me know if you have any concerns.

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Monday, October 8, 2018 1:47 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>; Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hello all,

In order to move forward and deliver something in the project please update the wiki with content from the refactoring from Konakandla Manideep. If there missing points they will be added in another round it is the role of the wiki based usage.

Thanks in advance for your understanding ?

Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Hey Folks ?

Good conversation :) Can you guys review the new cheat sheet once? I am sure most of the discussion going on here is already answered in the new re-factored cheat sheet I wrote.

@Pankaj ? Go through the respective sections in the new cheat sheet. If they are not clear / you are not convinced, we can discuss more. Below is the summary of my response to your questions (you will find the same gist going through the cheat sheet as well).

Go through [2] to understand more detailed on how flash based bypass on CSRF custom mitigation defense works. You can see there that the origin headers are passed along with the custom headers and hence current wiki asks to do origin and/or referrer header check as defense-in-depth (it would help even if flash sometime in the future repeats same mistake and forwards custom headers without crossdomain.xml checks. Domain requesting the redirected request might be fooled with custom header bypass but not the origin header check). If both these checks are done, it is indeed a good defense but origin header is not always included etc. (just as Jim mentioned and also as new cheatsheet mentions).  I don?t think deprecating custom header check is a good idea. It is indeed a good solution for stateless services though they have to keep issues like I mentioned before in mind. Your statement of custom header itself doesn?t mitigate CSRF relies on the fact that ?Flash being vulnerable to same bug again in future?. We cannot rely on a future statement and deprecate a technique, instead providing defense in depth measure for it and also cautioning users about past issues might be good idea. Users can take their call. Please read custom headers and origin check sections I re-wrote for more in-details. It talks about the issues and people can select if they want to use it or not.

Also, Login CSRF has nothing to do with custom header mitigation. Login forms are usually handled on <form> tags and custom header mitigation is only applicable on ajax calls because you cannot set custom headers on form tags. It can be applicable if you are doing logins on Ajax/XHR requests in which case my above response from custom header mitigation applies. I also proposed few methods for mitigating login CSRF which aligns with our primary defense on the new cheatsheet (tokens). Please review it as well.

Also, CORS has nothing to do with CSRF. I infact added CORS as a technique that should not be used/even thought for CSRF in the new cheatsheet I wrote. Please check that and also read [1]

[1] https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
[2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/

BTW - Here is the link to the new cheat sheet - https://tinyurl.com/y7k9fded

Again,  I you are not convinced ? please let me know specific item and we can happily discuss further ? Alternatively, you can send us your edits here for review and if it looks good for everyone ? you can edit it in the wiki.

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Sunday, October 7, 2018 1:13 PM
To: Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Sync your update with one from Konakandla Manideep please ?

Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>> a ?crit :
Aloha Jim!
With XSS, even CSRF tokens can be stolen :).
But I'll keep your tip in mind when editing the wiki. I'm planning to do that sometime this month.
Please feel free to review it whenever you guys get a chance.

Best,
Pankaj


On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com<mailto:jim at manicode.com>> wrote:

I agree JWT's architectures where cookies are not involved are resistant to CSRF but those tokens are at the risk of being stolen over XSS!

The Origin header does not go with all requests and FireFox does not fully support it yet. So careful!

:)

On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
I agree and that's why I would like to propose deprecation of 'custom header approach' as a CSRF defense.
Presently the mechanism that seems to work across applications is validating custom header as well as a forbidden header name (that cannot be set by a software or a program) e.g. Origin. If we want to give it a new name like 'Double Header Validation' or something else, I'm fine with that but custom header alone doesn't seem sufficient to mitigate CSRF issue.

There are some other best practices that should also be considered. I think CORS is now mature enough to have a mention in the CSRF defense Also, applications utilizing JWT token in the header seem immune to CSRF.

Please let me know what you guys think and if allowed, I can go ahead and make some of these edits for your perusal.


On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>> wrote:
Good question, I think it's more a point about to be consistent in terms of CSRF check across the application. Indeed, if you begin to perform different kind of CSRF check depending on the feature of the application (login, business feature, reset password...) it becomes risky and you significantly increase the chance to include location in which you will have a CSRF check weakness...
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Sat, Oct 6, 2018 at 9:51 PM Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>> wrote:
Do we know, regarding login CSRF, why validating the custom header as well as the Origin/Host header is not a sufficient mitigation?

On Fri, Sep 28, 2018 at 9:35 PM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Login CSRF is a way of exploiting CSRF on login forms (details here<https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a line about it in referrer validation section, it was not explained clearly and how it can scale with other techniques such as token based mitigation. No worries, I added a section about it!

Finally, I am done with the document from my side and its sent for internal reviews now. It should take 1-2 weeks before it comes to you guys. Meanwhile, I still need help on below items from you guys. If no one was able to find references for a), we can very well remove it.


a.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

b.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked in current cheatsheet

Happy weekend folks ?

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Thursday, September 27, 2018 3:02 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

...as for (d) I dont see any problems with passing tokens as headers or parameters

I dont understand (e) can you explain that again?
--
Jim Manico
@Manicode
Secure Coding Education
+1 (808) 652-3805

On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
2 more questions added  (Jim already started helping me on #a)


a.     I requested for an OWASP account and it?s still in pending. @JIM ? Can you please help me in getting my account approved? (registered with mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>)

b.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

c.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked

d.     At few places within the wiki, I have seen recommending to include token in headers for Ajax requests. I also don?t see a problem in passing them as parameters as well. Do you guys see any?

e.     I also have not seen at any place within the wiki talking about login CSRF issues and how each of the techniques described can be prone/immune to it. Is there any reason for it or are we open to include that?

From: Konakandla, Manideep
Sent: Wednesday, September 26, 2018 5:27 PM
To: 'Jim Manico' <jim at manicode.com<mailto:jim at manicode.com>>; 'Dominique Righetto' <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Cc: 'Jim Manico' <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; 'Dave Wichers' <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; 'eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>' <eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: RE: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Yeah. My understanding of the breadth of exploitation of XSS in an application protected with just origin/referrer and other application protected with just token based mitigation earlier was wrong. Dominique earlier email thread cleared that to me (breadth of exploitation is same in both the cases. i.e., if an XSS vulnerability is found in any individual application protected with only one of those techniques, it still can exploit all state changing operations on entire application [though the complexity of exploitation is easy in origin/referrer check than token based mitigation]).

Anyway, I am all clear and also almost done with re-factoring the cheatsheet  [1] ? Should be fully completed by Friday unless something comes up meanwhile. I will then send it to my colleagues for review and then for Legal, PR approvals. Before that, I need help from you guys on below items


a.     I requested for an OWASP account and it?s still in pending. @JIM ? Can you please help me in getting my account approved? (registered with mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>)

b.     Under double submit cookie section, it is mentioned that DWR uses that approach but I could not find that anywhere within DWR documentation that it uses double submit cookie. Can someone help me finding reference if they know any?

c.     One thing I wouldn?t be reviewing is the ASP.NET<http://ASP.NET> references mentioned in the wiki<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>. Can someone with .NET expertize verify if these are still accurate? Looks to me like there are latest resources than the one?s linked

[1] Below are changes done so far
a. Switched primary, secondary defense and our reasoning behind it (added lot of reasons on issues with origin/referrer header check and why token should be made primary)
b. Added CSRF mitigation myths (CORS, content-type validation etc.)
c. Added a section called ?Not so popular CSRF mitigations? (mentioned details about triple submit cookie)
d. Included limitations / issues associated with double submit cookie, same site cookie, captcha as a CSRF defense etc.
e. Removed lot of obsolete content and added some new content to some of the mitigations
f. Made document look more better by adding RFC?s links wherever possible and lot of other minor changes.

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Wednesday, September 26, 2018 4:19 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>


Well tokens can be placed in cookies.

The real answer to avoid CSRF is tokens in JavaScript variable as opposed to cookies. They are not automatically sent and indeed make CSRF impossible - at the expense of tokens being fully stolen via XSS. Pick your poison!

I recommend a COMBO of these defenses. For web apps, sychronizer token + header verification + re-authentication for sensitive features.

For API's double-cookie submit or just use JavaScript variable based tokens + header verification for same-site API's + re-authentication for sensitive features.
> [1] If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operationswithin that domain done to that AJAX endpoint. Do you agree?

Absolutely!

On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
Yeah, I understand that any XSS and CSRF game is over but I am stressing out on the highlighted part in [1]. I am trying to highlight and get an affirmation on why my understanding on token based mitigation is better than origin/referrer header check will also apply to ?token based mitigation Vs custom header mitigation (if static tokens are used in custom headers)?.

In case of tokens, we have an option to use different tokens on each page (taking things like URL, timestamp etc. into consideration) and hence XSS vulnerability on one page will only make state changing operations in that page vulnerable to CSRF but not state changing operations on other pages within that domain (because token value is different) but whereas in origin/referrer header check and custom header check, the token value is constant and hence XSS vulnerability in one page will also cause state changing operations in other pages to be vulnerable to CSRF as well. Off course, this can be mitigated in custom header checks by adding tokens to custom headers rather than static constant but this cannot be mitigated in origin/referrer check because those headers cannot be modified. So, yeah a single XSS any CSRF is bypassed but the breadth of the impact is different for each of them.

Regarding code samples ? I currently was able to allocate only some time for this task and I don?t think I will be able to do code samples within this time frame. I am also leaving for a long vacation starting Oct 12 and hence let?s try to get this out first and we can add code samples later on considering my work load after I return from vacation.

[1] If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operationswithin that domain done to that AJAX endpoint. Do you agree?

From: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Sent: Thursday, September 20, 2018 8:45 AM
To: Jim Manico <jim at manicode.com><mailto:jim at manicode.com>
Cc: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>; Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi,

Thanks for your contribution.

I like very much your plan ?

I ask for some favor in addition :
- can you provide code sample (in one language like java or .net or the one you want but it must be easy to read and understand) or libraires along your proposal for each section?
- can you use the syntaxhighlight tag for code?

I'am agree with Jim, XSS  means game over because your browsing context can be used as proxy so csrf protection will be defeated because request came from the legitimate user.

Thanks you again for all your help ???

Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com<mailto:jim at manicode.com>> a ?crit :

> If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

Any XSS is game over and all CSRF are useless in the face of XSS. I Agree!

- Jim

On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
Hey Guys,

[1] is what I said for origin/referrer header check in this e-mail thread. I also believe that this applies for custom headers for AJAX endpoints as well. If there is an XSS vulnerability at a single place on a domain (it can add custom header), it can be used to make CSRF on all other state changing operations within that domain done to that AJAX endpoint. Do you agree?

Here is how I am keeping the new re-factored cheatsheet. Does this look good to you guys?


1.       Use token based method as primary defense

a.       Can use synchronizer pattern for stateful applications

b.       Can use hah based/ encryption based token pattern for stateless applications

2.       Defense in depth measures along with drawbacks of each one

a.       Origin/referrer header check

b.       Double submit cookie

c.       Samesite cookie

d.       Custom headers (people still need to use tokens for forms etc. if they have mix of ajax endpoints and general HTML)

3.       Strong CSRF defenses but very less usable : captcha etc.

4.       CSRF Myths / techniques that do not work section

[1] if we solely rely on origin/referrer header check - an XSS vulnerability within a single page on that domain will also give CSRF vulnerability to all other state changing operations under that entire domain.

From: Dominique Righetto <dominique.righetto at owasp.org><mailto:dominique.righetto at owasp.org>
Sent: Wednesday, September 12, 2018 1:31 PM
To: Konakandla, Manideep <mkonakan at amazon.com><mailto:mkonakan at amazon.com>
Cc: Jim Manico <jim.manico at owasp.org><mailto:jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org><mailto:dave.wichers at owasp.org>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi

Thanks you very much for the update

Le mer. 12 sept. 2018 ? 21:33, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Just an update: I started working on this along with other sprint tasks of mine today. I am hoping to get it completed by end of next week and then send it for legal/PR approvals.

From: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>
Sent: Thursday, August 23, 2018 6:49 AM
To: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>


Awesome! Thank you! :)

- Jim

On 8/23/18 2:41 AM, Dominique Righetto wrote:
You are welcome :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Thu, Aug 23, 2018 at 10:33 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Np. I will keep u guys posted. Thanks for the support and have good rest of your day!

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Thursday, August 23, 2018 1:29 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Hi,

Sounds goods for me.

Thanks again for the contribution :)
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Thu, Aug 23, 2018 at 10:03 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Ok, I received necessary approvals for working on this. I am hoping to start the work in 2 weeks and then deliver the document to you guys for review by end of September/1st week of October (might be 1-2 weeks delay if approvals from Legal and other teams get delayed). My plan is to work on below things ? Please let me know if I missed anything/you feel something else has to be added to this list.


1.       Change the order of primary and defense in depth measures

2.       Include the pitfalls/caveats for each CSRF mitigation technique (origin/referrer header, samesite, double submit cookie etc.)

3.       Re-structure entire page and remove outdated/ non-relevant stuff

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Thursday, August 16, 2018 12:02 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>; eric.sheridan at owasp.org<mailto:eric.sheridan at owasp.org>
Subject: Re: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>

Ok i perfectly understand.
Thanks for the info.

Le jeu. 16 ao?t 2018 ? 20:33, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
<blockquote style="border:none;border-left:solid windowtext 1.0pt;padding:0in 0in 0in 6.0pt;margin-left:4.8pt;margin-top:5.0pt;margin-right:0in;margin-bottom:5.0pt;bo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190207/ca9748f0/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.gif
Type: image/gif
Size: 43 bytes
Desc: image001.gif
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190207/ca9748f0/attachment-0001.gif>

From dominique.righetto at owasp.org  Fri Feb  8 04:53:57 2019
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Fri, 8 Feb 2019 05:53:57 +0100
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <e832f8afafc945e3b65cd5f17fe15c6b@EX13D11UWB004.ant.amazon.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<6795fa7232dd466e818b7953048e243d@EX13D11UWB004.ant.amazon.com>
	<CAL=9OGyNxb0eKf4mhS=jJTUfBNfbQvuV=sNVZ5BLNoVzVb6O6A@mail.gmail.com>
	<CANos97cSYSKc29nA-RCfFf9daVGSqEtEfNTek-mac9px04Oq0A@mail.gmail.com>
	<CAL=9OGxQQFYeWcXMFTgAx22KSi9x2TGjrStKFGqHA1xk-wOV0Q@mail.gmail.com>
	<136d2b2c-ef34-6e7f-0870-c4b61cdf4379@manicode.com>
	<CAL=9OGy0jP6OfLNoeTYW9k=2q5H9qdq78PkkNvbs6+zgAbaQ6Q@mail.gmail.com>
	<CANos97esCWvdW58rw5ZC+NHpLT1gwUwQWOd=+_BqPr5HPaiU_w@mail.gmail.com>
	<46fa44e0bd7941eaa029659ca8f3291f@EX13D11UWB004.ant.amazon.com>
	<CANos97csCLS8cgWwduXWt520AcT5Z_sfRXbNUc=Yq6+P8Tx1UA@mail.gmail.com>
	<ea0ad8742d904ea792880b77e6e81678@EX13D11UWB004.ant.amazon.com>
	<70E7657A-CA1F-4BD7-ADF7-07A85CD08E6B@manicode.com>
	<37df98b064aa4b39af8d0e585638b3c4@EX13D11UWB004.ant.amazon.com>
	<CANos97cXnfb_foCaPaYXQEGRnphTQu8P_KC7pXwkeb7_ak0m-A@mail.gmail.com>
	<2bf303591c134e949d52c3d8d5a155d0@EX13D11UWB004.ant.amazon.com>
	<CANos97c6xDAycEr=YY_LaDWaffohmq17Cy1o9iSDPSYBaUa4_A@mail.gmail.com>
	<92ffc47ab9d14f4f9723d1feca90e1ab@EX13D11UWB004.ant.amazon.com>
	<CANos97dTh0Tia6MftWq-_kWFzejWx7o0Uh=NyC8W_=jVpCUdOQ@mail.gmail.com>
	<e832f8afafc945e3b65cd5f17fe15c6b@EX13D11UWB004.ant.amazon.com>
Message-ID: <CANos97ew=HjNnO+TSgUL55x8WPyzpuKhjERwmvHqEyx5XYMvTg@mail.gmail.com>

Hello all

Since december wiki update of cs are deprecated. It is clearly indicated on
the homepage and slack and Twitter and GitHub since 3 month.

If you modify the wiki your update will simply be ignored and lost.

Please follow the process.

All modification and creation of cs is now controlled by Jim and me as PL
along Continuous Integration process.

Le ven. 8 f?vr. 2019 ? 00:43, Konakandla, Manideep <mkonakan at amazon.com> a
?crit :

> Hi Dave - Let?s continue our discussion here so that we have everything
> tracked in the cheat sheet email list (copying our 1:1 conversation below).
>
>
>
> I really appreciate your support in the changes. I have few comments below
>
>
>
> a)       Dominique and Jim decided to move cheat sheets to Github. So,
> all new changes should be on Github CSRF
> <https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md>
> page. I think they are also working on deprecating the old wiki pages on
> OWASP. I am fine with all your changes (as most of them are
> cosmetic/grammatical/structural) except [1]. If you don?t mind, can you do
> these changes on the Github? I am fine with you moving the reference
> example to a different page as well. I have plans to add some other content
> (not anytime in next month) during which I will also try to trim the
> content as much as possible.
>
> b)      ?If a developer forgets to add the token to any state changing
> operation, they are making the application vulnerable to CSRF." is flat out
> wrong.  If a dev forgets to add a token, then the server is simply going to
> reject the request. It's not going to be vulnerable.  If you agree, can you
> fix this?
>
> >> You are ?assuming? here that the server has a token verification system
> which is not true by default. By default, all applications are vulnerable
> to CSRF unless developers add tokens / the system has a token verification
> system.
>
> c)       I am removing the changes related to [1] for now as they are
> clearly contradicting what we have in other parts of the cheat sheet. If
> you disagree, I am open to discussion before we get them back to the
> cheatsheet again. I might be missing something and I would love to hear
> your side of the story.
>
>
>
> *1.* Earlier, I rejected both the techniques you mentioned in
> ?Stateless/Tokenless Defense Techniques? to be in primary because
>
> *1.1* X-Requested-With: XMLHttpRequest Header: For the same FLASH related
> reasons mentioned under this
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Use_of_Custom_Request_Headers>
> section. On a separate thread, I was working with Riyaz who authored this
> <https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b>
> blog and you wouldn?t believe how many old browser versions are still
> vulnerable to this FLASH based redirect CSRF vulnerability. He also gave
> link to a HTML wrapper which seems to make this attack work on newer Chrome
> versions as well. If you are interested, I can provide more details about
> these. Hence, I don?t want users to be vulnerable by using this as a
> primary defense.
>
> *1.2 *Not a Simple HTTP Request Verification: Again, this is a technique
> that I rejected in the later section
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Content-Type_Header_Validation>
> of the document along with the reasoning.
>
>
>
> I just made some changes, feel free to review.
>
>
>
> I also think this comment: "If a developer forgets to add the token to
> any state changing operation, they are making the application vulnerable to
> CSRF." is flat out wrong.  If a dev forgets to add a token, then the
> server is simply going to reject the request. It's not going to be
> vulnerable.  If you agree, can you fix this?
>
>
>
> The article is also REALLY LONG. If you can identify anything to trim out,
> that would be great. I just trimmed out a few things, but I think we can do
> a lot more. Cheat sheets are supposed to be SHORT, but I realize many are
> not.
>
>
>
> For example, maybe we can move the reference example to a completely
> different page? That would shorten this alot.
>
> [image: https://ssl.gstatic.com/ui/v1/icons/mail/images/cleardot.gif]
>
>
>
> -Dave
>
>
>
>
>
> On Wed, Feb 6, 2019 at 5:25 PM manideep konakandla <
> mani.konakandla at gmail.com> wrote:
>
> Yes. All those changes passed through review on email list but yes, please
> feel free to provide any more comments.
>
>
>
> On Wed, Feb 6, 2019, 1:21 PM Dave Wichers <dave.wichers at owasp.org wrote:
>
> Are you:  Manideepk <https://www.owasp.org/index.php/User:Manideepk> on
> the OWASP site?
>
>
>
> I have some questions/comments about your changes to the OWASP CSRF Cheat
> Sheet.
>
>
>
> The bulk of those changes are here:
> https://www.owasp.org/index.php?title=Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet&type=revision&diff=244184&oldid=242455
>
>
>
> If this is you, I'll provide more details, but wanted to make sure I'm in
> touch with the right person first.
>
>
>
> -Dave
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Sunday, December 23, 2018 4:13 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Thanksyou very much for your support ???
>
>
>
> Le sam. 22 d?c. 2018 ? 22:24, Konakandla, Manideep <mkonakan at amazon.com>
> a ?crit :
>
> Let me know once the migration is started. I will do it for the CSRF
> prevention cheatsheet page J
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Saturday, December 22, 2018 12:29 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hello Manideep,
>
>
>
> Thanks you for the update.
>
>
>
> For info we will migrate the entire project content (unless the homepage)
> to github so it is possible that you need to also made the update on the
> github repository.
>
>
>
> The migration work will start on January, i will take some rest until
> January, i really need it.
>
>
>
> Thanks you very much for your help on this project :)
>
>
>
> Happy holidays too
>
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Sat, Dec 22, 2018 at 3:40 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Hello all,
>
>
>
> I made a change to ?Double Submit Cookie? technique [1]. I added a variant
> to it which now mitigates well-known security issues with standard ?Double
> Submit Cookie? technique. So, people can use this technique without any
> issues. Please let me know if anyone finds any issues within it.
>
>
>
> Whenever I get some free time in next 1-2 months, I am planning to include
>
> a)       Details about popular 6-7 web frameworks and the CSRF
> mitigations implemented by them
>
> b)      Re-organize the page even more better by switching variant of
> double submit cookie to primary defense (under stateless section) etc.
>
>
>
> Happy holidays everyone J
>
>
>
> [1]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Double_Submit_Cookie
> (read the last para under this mitigation)
>
>
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Saturday, October 13, 2018 12:59 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim at manicode.com>; Pankaj Upadhyay <
> p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi,
>
> CS publishing released and notification sent to the community via Twitter
> and Slack channel.
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Fri, Oct 12, 2018 at 3:47 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Yes, I am feeling way better now. Thank you J
>
>
>
> *@ALL: *Cheat sheet is updated with all the changes now
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>.
> Please let me know if you have any issues by end of tomorrow. If there are
> no issues - I/we can start advertising the refactored cheat sheet in our
> networks J
>
>
>
> Thanks a ton *Dominique* and *Jim* for all your help till date. I really
> appreciate it!!! I will be actively maintaining this as well from today J
>
>
>
> Regards,
>
> Manideep Konakandla
>
> www.manideepk.com
>
> Security Engineer @ Amazon
>
> mkonakan at amazon.com
>
>
>
> *From:* Jim Manico <jim at manicode.com>
> *Sent:* Wednesday, October 10, 2018 10:39 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Pankaj Upadhyay <
> p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Go for it!!! I hope you?re feeling better!
>
> --
>
> Jim Manico
>
> @Manicode
>
>
>
>
> On Oct 10, 2018, at 10:18 PM, Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Sorry for late reply. I was on sick leave for last 2 days.
>
>
>
> I synced up with Dominique in a different email chain to clarify something
> in his previous email. He gave me a go ahead to update wiki with new
> re-factored cheat sheet. I am planning to do it sometime tomorrow. *@Jim*
> : Is it with fine with you as well? Please let me know if you have any
> concerns.
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Monday, October 8, 2018 1:47 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>; Jim Manico <
> jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hello all,
>
>
>
> In order to move forward and deliver something in the project please
> update the wiki with content from the refactoring from Konakandla Manideep.
> If there missing points they will be added in another round it is the role
> of the wiki based usage.
>
>
>
> Thanks in advance for your understanding ?
>
>
>
> Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com> a
> ?crit :
>
> Hey Folks J
>
>
>
> Good conversation :) Can you guys review the new cheat sheet once? I am
> sure most of the discussion going on here is already answered in the new
> re-factored cheat sheet I wrote.
>
>
>
> @Pankaj ? Go through the respective sections in the new cheat sheet. If
> they are not clear / you are not convinced, we can discuss more. Below is
> the summary of my response to your questions (you will find the same gist
> going through the cheat sheet as well).
>
>
>
> Go through [2] to understand more detailed on how flash based bypass on
> CSRF custom mitigation defense works. You can see there that the origin
> headers are passed along with the custom headers and hence current wiki
> asks to do origin and/or referrer header check as defense-in-depth (it
> would help even if flash sometime in the future repeats same mistake and
> forwards custom headers without crossdomain.xml checks. Domain requesting
> the redirected request might be fooled with custom header bypass but not
> the origin header check). If both these checks are done, it is indeed a
> good defense but origin header is not always included etc. (just as Jim
> mentioned and also as new cheatsheet mentions).  I don?t think deprecating
> custom header check is a good idea. It is indeed a good solution for
> stateless services though they have to keep issues like I mentioned before
> in mind. Your statement of custom header itself doesn?t mitigate CSRF
> relies on the fact that ?Flash being vulnerable to same bug again in
> future?. We cannot rely on a future statement and deprecate a technique,
> instead providing defense in depth measure for it and also cautioning users
> about past issues might be good idea. Users can take their call. Please
> read custom headers and origin check sections I re-wrote for more
> in-details. It talks about the issues and people can select if they want to
> use it or not.
>
>
>
> Also, Login CSRF has nothing to do with custom header mitigation. Login
> forms are usually handled on <form> tags and custom header mitigation is
> only applicable on ajax calls because you cannot set custom headers on form
> tags. It can be applicable if you are doing logins on Ajax/XHR requests in
> which case my above response from custom header mitigation applies. I also
> proposed few methods for mitigating login CSRF which aligns with our
> primary defense on the new cheatsheet (tokens). Please review it as well.
>
>
>
> Also, CORS has nothing to do with CSRF. I infact added CORS as a technique
> that should not be used/even thought for CSRF in the new cheatsheet I
> wrote. Please check that and also read [1]
>
>
>
> [1]
> https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
>
> [2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/
>
>
>
> BTW - Here is the link to the new cheat sheet -
> https://tinyurl.com/y7k9fded
>
>
>
> Again,  I you are not convinced ? please let me know specific item and we
> can happily discuss further J Alternatively, you can send us your edits
> here for review and if it looks good for everyone ? you can edit it in the
> wiki.
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Sunday, October 7, 2018 1:13 PM
> *To:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
> *Cc:* Jim Manico <jim at manicode.com>; Konakandla, Manideep <
> mkonakan at amazon.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Sync your update with one from Konakandla Manideep please ?
>
>
>
> Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com> a
> ?crit :
>
> Aloha Jim!
>
> With XSS, even CSRF tokens can be stolen :).
>
> But I'll keep your tip in mind when editing the wiki. I'm planning to do
> that sometime this month.
>
> Please feel free to review it whenever you guys get a chance.
>
>
>
> Best,
>
> Pankaj
>
>
>
>
>
> On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com> wrote:
>
> I agree JWT's architectures *where cookies are not involved* are
> resistant to CSRF but those tokens are at the risk of being stolen over XSS!
>
> The Origin header does not go with all requests and FireFox does not fully
> support it yet. So careful!
>
> :)
>
>
>
> On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
>
> I agree and that's why I would like to propose deprecation of 'custom
> header approach' as a CSRF defense.
> Presently the mechanism that seems to work across applications is
> validating custom header as well as a forbidden header name (that cannot be
> set by a software or a program) e.g. Origin. If we want to give it a new
> name like 'Double Header Validation' or something else, I'm fine with that
> but custom header alone doesn't seem sufficient to mitigate CSRF issue.
>
>
>
> There are some other best practices that should also be considered. I
> think CORS is now mature enough to have a mention in the CSRF defense Also,
> applications utilizing JWT token in the header seem immune to CSRF.
>
>
>
> Please let me know what you guys think and if allowed, I can go ahead and
> make some of these edits for your perusal.
>
>
>
>
>
> On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <
> dominique.righetto at owasp.org> wrote:
>
> Good question, I think it's more a point about to be consistent in terms
> of CSRF check across the application. Indeed, if you begin to perform
> different kind of CSRF check depending on the feature of the application
> (login, business feature, reset password...) it becomes risky and you
> significantly increase the chance to include location in which you will
> have a CSRF check weakness...
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Sat, Oct 6, 2018 at 9:51 PM Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
> wrote:
>
> Do we know, regarding login CSRF, why validating the custom header as well
> as the Origin/Host header is not a sufficient mitigation?
>
>
>
> On Fri, Sep 28, 2018 at 9:35 PM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Login CSRF is a way of exploiting CSRF on login forms (details here
> <https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a
> line about it in referrer validation section, it was not explained clearly
> and how it can scale with other techniques such as token based mitigation.
> No worries, I added a section about it!
>
>
>
> Finally, I am done with the document from my side and its sent for
> internal reviews now. It should take 1-2 weeks before it comes to you guys.
> Meanwhile, I still need help on below items from you guys. If no one was
> able to find references for a), we can very well remove it.
>
>
>
> a.     Under double submit cookie section, it is mentioned that DWR uses
> that approach but I could not find that anywhere within DWR documentation
> that it uses double submit cookie. Can someone help me finding reference if
> they know any?
>
> b.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
> in the wiki
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
> Can someone with .NET expertize verify if these are still accurate? Looks
> to me like there are latest resources than the one?s linked in current
> cheatsheet
>
>
>
> Happy weekend folks J
>
>
>
> *From:* Jim Manico <jim at manicode.com>
> *Sent:* Thursday, September 27, 2018 3:02 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Jim Manico <
> jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>;
> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> ...as for (d) I dont see any problems with passing tokens as headers or
> parameters
>
>
>
> I dont understand (e) can you explain that again?
>
> --
>
> Jim Manico
>
> @Manicode
>
> Secure Coding Education
>
> +1 (808) 652-3805
>
>
> On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> 2 more questions added  (Jim already started helping me on #a)
>
>
>
> a.     I requested for an OWASP account and it?s still in pending. @JIM ?
> Can you please help me in getting my account approved? (registered with
> mani.konakandla at gmail.com)
>
> b.     Under double submit cookie section, it is mentioned that DWR uses
> that approach but I could not find that anywhere within DWR documentation
> that it uses double submit cookie. Can someone help me finding reference if
> they know any?
>
> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
> in the wiki
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
> Can someone with .NET expertize verify if these are still accurate? Looks
> to me like there are latest resources than the one?s linked
>
> d.     At few places within the wiki, I have seen recommending to include
> token in headers for Ajax requests. I also don?t see a problem in passing
> them as parameters as well. Do you guys see any?
>
> e.     I also have not seen at any place within the wiki talking about
> login CSRF issues and how each of the techniques described can be
> prone/immune to it. Is there any reason for it or are we open to include
> that?
>
>
>
> *From:* Konakandla, Manideep
> *Sent:* Wednesday, September 26, 2018 5:27 PM
> *To:* 'Jim Manico' <jim at manicode.com>; 'Dominique Righetto' <
> dominique.righetto at owasp.org>
> *Cc:* 'Jim Manico' <jim.manico at owasp.org>; 'Dave Wichers' <
> dave.wichers at owasp.org>; 'eric.sheridan at owasp.org' <
> eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* RE:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Yeah. My understanding of the breadth of exploitation of XSS in an
> application protected with just origin/referrer and other application
> protected with just token based mitigation earlier was wrong. Dominique
> earlier email thread cleared that to me (breadth of exploitation is same in
> both the cases. i.e., if an XSS vulnerability is found in any individual
> application protected with only one of those techniques, it still can
> exploit all state changing operations on entire application [though the
> complexity of exploitation is easy in origin/referrer check than token
> based mitigation]).
>
>
>
> Anyway, I am all clear and also almost done with re-factoring the
> cheatsheet  [1] J Should be fully completed by Friday unless something
> comes up meanwhile. I will then send it to my colleagues for review and
> then for Legal, PR approvals. Before that, I need help from you guys on
> below items
>
>
>
> a.     I requested for an OWASP account and it?s still in pending. @JIM ?
> Can you please help me in getting my account approved? (registered with
> mani.konakandla at gmail.com)
>
> b.     Under double submit cookie section, it is mentioned that DWR uses
> that approach but I could not find that anywhere within DWR documentation
> that it uses double submit cookie. Can someone help me finding reference if
> they know any?
>
> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
> in the wiki
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
> Can someone with .NET expertize verify if these are still accurate? Looks
> to me like there are latest resources than the one?s linked
>
>
>
> [1] Below are changes done so far
>
> a. Switched primary, secondary defense and our reasoning behind it (added
> lot of reasons on issues with origin/referrer header check and why token
> should be made primary)
>
> b. Added CSRF mitigation myths (CORS, content-type validation etc.)
>
> c. Added a section called ?Not so popular CSRF mitigations? (mentioned
> details about triple submit cookie)
>
> d. Included limitations / issues associated with double submit cookie,
> same site cookie, captcha as a CSRF defense etc.
>
> e. Removed lot of obsolete content and added some new content to some of
> the mitigations
>
> f. Made document look more better by adding RFC?s links wherever possible
> and lot of other minor changes.
>
>
>
> *From:* Jim Manico <jim at manicode.com>
> *Sent:* Wednesday, September 26, 2018 4:19 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>; Dominique Righetto <
> dominique.righetto at owasp.org>
> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
> dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Well tokens can be placed in cookies.
>
> The real answer to avoid CSRF is tokens in JavaScript variable as opposed
> to cookies. They are not automatically sent and indeed make CSRF impossible
> - at the expense of tokens being fully stolen via XSS. Pick your poison!
>
> I recommend a COMBO of these defenses. For web apps, sychronizer token +
> header verification + re-authentication for sensitive features.
>
> For API's double-cookie submit or just use JavaScript variable based
> tokens + header verification for same-site API's + re-authentication for
> sensitive features.
>
> > [1] If there is an XSS vulnerability at a single place on a domain (it
> can add custom header), it can be used to make CSRF *on all other state
> changing operationswithin that domain *done to that AJAX endpoint. Do you
> agree?
>
>
>
> Absolutely!
>
>
>
> On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
>
> Yeah, I understand that any XSS and CSRF game is over but I am stressing
> out on the highlighted part in [1]. I am trying to highlight and get an
> affirmation on why my understanding on token based mitigation is better
> than origin/referrer header check will also apply to ?token based
> mitigation Vs custom header mitigation (if static tokens are used in custom
> headers)?.
>
>
>
> In case of tokens, we have an option to use different tokens on each page
> (taking things like URL, timestamp etc. into consideration) and hence XSS
> vulnerability on one page will only make state changing operations in that
> page vulnerable to CSRF but not state changing operations on other pages
> within that domain (because token value is different) but whereas in
> origin/referrer header check and custom header check, the token value is
> constant and hence XSS vulnerability in one page will also cause state
> changing operations in other pages to be vulnerable to CSRF as well. Off
> course, this can be mitigated in custom header checks by adding tokens to
> custom headers rather than static constant but this cannot be mitigated in
> origin/referrer check because those headers cannot be modified. So, yeah a
> single XSS any CSRF is bypassed but the breadth of the impact is different
> for each of them.
>
>
>
> Regarding code samples ? I currently was able to allocate only some time
> for this task and I don?t think I will be able to do code samples within
> this time frame. I am also leaving for a long vacation starting Oct 12 and
> hence let?s try to get this out first and we can add code samples later on
> considering my work load after I return from vacation.
>
>
>
> [1] If there is an XSS vulnerability at a single place on a domain (it can
> add custom header), it can be used to make CSRF *on all other state
> changing operationswithin that domain *done to that AJAX endpoint. Do you
> agree?
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> <dominique.righetto at owasp.org>
> *Sent:* Thursday, September 20, 2018 8:45 AM
> *To:* Jim Manico <jim at manicode.com> <jim at manicode.com>
> *Cc:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
> Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave Wichers
> <dave.wichers at owasp.org> <dave.wichers at owasp.org>; eric.sheridan at owasp.org
> *Subject:* Re:
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi,
>
>
>
> Thanks for your contribution.
>
>
>
> I like very much your plan ?
>
>
>
> I ask for some favor in addition :
>
> - can you provide code sample (in one language like java or .net or the
> one you want but it must be easy to read and understand) or libraires along
> your proposal for each section?
>
> - can you use the syntaxhighlight tag for code?
>
>
>
> I'am agree with Jim, XSS  means game over because your browsing context
> can be used as proxy so csrf protection will be defeated because request
> came from the legitimate user.
>
>
>
> Thanks you again for all your help ???
>
>
>
> Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com> a ?crit :
>
> > If there is an XSS vulnerability at a single place on a domain (it can
> add custom header), it can be used to make CSRF on all other state changing
> operations within that domain done to that AJAX endpoint. Do you agree?
>
> Any XSS is game over and all CSRF are useless in the face of XSS. I Agree!
>
> - Jim
>
>
>
> On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
>
> Hey Guys,
>
>
>
> [1] is what I said for origin/referrer header check in this e-mail thread.
> I also believe that this applies for custom headers for AJAX endpoints as
> well. If there is an XSS vulnerability at a single place on a domain (it
> can add custom header), it can be used to make CSRF on all other state
> changing operations within that domain done to that AJAX endpoint. Do you
> agree?
>
>
>
> Here is how I am keeping the new re-factored cheatsheet. Does this look
> good to you guys?
>
>
>
> 1.       Use token based method as primary defense
>
> a.       Can use synchronizer pattern for stateful applications
>
> b.       Can use hah based/ encryption based token pattern for stateless
> applications
>
> 2.       Defense in depth measures along with drawbacks of each one
>
> a.       Origin/referrer header check
>
> b.       Double submit cookie
>
> c.       Samesite cookie
>
> d.       Custom headers (people still need to use tokens for forms etc.
> if they have mix of ajax endpoints and general HTML)
>
> 3.       Strong CSRF defenses but very less usable : captcha etc.
>
> 4.       CSRF Myths / techniques that do not work section
>
>
>
> [1] if we solely rely on origin/referrer header check - an XSS
> vulnerability within a single page on that domain will also give CSRF
> vulnerability to all other state changing operations under that entire
> domain.
>
>
>
> *From:* Dominique Righetto <span st <dominique.righetto at owasp.org>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190208/864b72ab/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.gif
Type: image/gif
Size: 43 bytes
Desc: not available
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190208/864b72ab/attachment-0001.gif>

From dominique.righetto at owasp.org  Fri Feb  8 16:40:03 2019
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Fri, 8 Feb 2019 17:40:03 +0100
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CAMjpMgcykhmtoA32F+BDZ=8nRkT8z-oM_HX=6Z2kdmKdHvAjUQ@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<6795fa7232dd466e818b7953048e243d@EX13D11UWB004.ant.amazon.com>
	<CAL=9OGyNxb0eKf4mhS=jJTUfBNfbQvuV=sNVZ5BLNoVzVb6O6A@mail.gmail.com>
	<CANos97cSYSKc29nA-RCfFf9daVGSqEtEfNTek-mac9px04Oq0A@mail.gmail.com>
	<CAL=9OGxQQFYeWcXMFTgAx22KSi9x2TGjrStKFGqHA1xk-wOV0Q@mail.gmail.com>
	<136d2b2c-ef34-6e7f-0870-c4b61cdf4379@manicode.com>
	<CAL=9OGy0jP6OfLNoeTYW9k=2q5H9qdq78PkkNvbs6+zgAbaQ6Q@mail.gmail.com>
	<CANos97esCWvdW58rw5ZC+NHpLT1gwUwQWOd=+_BqPr5HPaiU_w@mail.gmail.com>
	<46fa44e0bd7941eaa029659ca8f3291f@EX13D11UWB004.ant.amazon.com>
	<CANos97csCLS8cgWwduXWt520AcT5Z_sfRXbNUc=Yq6+P8Tx1UA@mail.gmail.com>
	<ea0ad8742d904ea792880b77e6e81678@EX13D11UWB004.ant.amazon.com>
	<70E7657A-CA1F-4BD7-ADF7-07A85CD08E6B@manicode.com>
	<37df98b064aa4b39af8d0e585638b3c4@EX13D11UWB004.ant.amazon.com>
	<CANos97cXnfb_foCaPaYXQEGRnphTQu8P_KC7pXwkeb7_ak0m-A@mail.gmail.com>
	<2bf303591c134e949d52c3d8d5a155d0@EX13D11UWB004.ant.amazon.com>
	<CANos97c6xDAycEr=YY_LaDWaffohmq17Cy1o9iSDPSYBaUa4_A@mail.gmail.com>
	<92ffc47ab9d14f4f9723d1feca90e1ab@EX13D11UWB004.ant.amazon.com>
	<CANos97dTh0Tia6MftWq-_kWFzejWx7o0Uh=NyC8W_=jVpCUdOQ@mail.gmail.com>
	<e832f8afafc945e3b65cd5f17fe15c6b@EX13D11UWB004.ant.amazon.com>
	<CANos97ew=HjNnO+TSgUL55x8WPyzpuKhjERwmvHqEyx5XYMvTg@mail.gmail.com>
	<CAMjpMgcykhmtoA32F+BDZ=8nRkT8z-oM_HX=6Z2kdmKdHvAjUQ@mail.gmail.com>
Message-ID: <CANos97dHxj6B0H+br7-NKxJkAhZT-Bm525i0DqHwoeAR=Hjnkg@mail.gmail.com>

Section "Migration Pending" from
https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series

I understand that you don't follow our communication channel but we use it
to communicate and it's the communication process choosen by the project
and we have many good feedback about it. Slack members of the CS channel
increase at a high speed.

I respect your point of view but, as PL, the wiki mode allow uncontrolled
process of edition/creation and Jim/Me are responsible/accountable for the
quality/integrity of the CS/projects. Moreover the wiki do not allow
integration into CI for create others format or automate control. GH allow
also a fully open discution about any operation on CS.

I respect also the fact that you do not like the gihub way but it's the new
way followed by new owasp projects (masvs, mstg, asvs, proactive control
and the top 10) and it faciliate the contribution even if you dont like it.
It's more easy to create a GH account than an OWASP one.

If you dont like this way at the point that it block your to contribute
then i understand and respect your position but as PL Jim/Me has decided
this way so we will continue the road wihtout you even if we thanks you
very very much for your contribution.

--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com
<dominique.righetto at gmail.com>dominique.righetto at owasp.org
<dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Feb 8, 2019 at 5:27 PM Dave Wichers <dave.wichers at owasp.org> wrote:

> Clearly indicated on the home page where?  And I don't follow OWASP on
> Slack or Twitter so I was completely unaware of this.  You say follow 'the
> process' but I can't find it anywhere.
>
> If you really don't want the cheat sheets to be edited, lock them, and put
> notes ON the cheat sheets themselves about what the process is/where to
> find them.
>
> I'm also concerned that this process will make it MUCH harder to
> contribute, reducing people's willingness to do so (like me).
>
> -Dave
>
>
> On Thu, Feb 7, 2019 at 11:54 PM Dominique Righetto <
> dominique.righetto at owasp.org> wrote:
>
>> Hello all
>>
>> Since december wiki update of cs are deprecated. It is clearly indicated
>> on the homepage and slack and Twitter and GitHub since 3 month.
>>
>> If you modify the wiki your update will simply be ignored and lost.
>>
>> Please follow the process.
>>
>> All modification and creation of cs is now controlled by Jim and me as PL
>> along Continuous Integration process.
>>
>> Le ven. 8 f?vr. 2019 ? 00:43, Konakandla, Manideep <mkonakan at amazon.com>
>> a ?crit :
>>
>>> Hi Dave - Let?s continue our discussion here so that we have everything
>>> tracked in the cheat sheet email list (copying our 1:1 conversation below).
>>>
>>>
>>>
>>> I really appreciate your support in the changes. I have few comments
>>> below
>>>
>>>
>>>
>>> a)       Dominique and Jim decided to move cheat sheets to Github. So,
>>> all new changes should be on Github CSRF
>>> <https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md>
>>> page. I think they are also working on deprecating the old wiki pages on
>>> OWASP. I am fine with all your changes (as most of them are
>>> cosmetic/grammatical/structural) except [1]. If you don?t mind, can you do
>>> these changes on the Github? I am fine with you moving the reference
>>> example to a different page as well. I have plans to add some other content
>>> (not anytime in next month) during which I will also try to trim the
>>> content as much as possible.
>>>
>>> b)      ?If a developer forgets to add the token to any state changing
>>> operation, they are making the application vulnerable to CSRF." is flat out
>>> wrong.  If a dev forgets to add a token, then the server is simply going to
>>> reject the request. It's not going to be vulnerable.  If you agree, can you
>>> fix this?
>>>
>>> >> You are ?assuming? here that the server has a token verification
>>> system which is not true by default. By default, all applications are
>>> vulnerable to CSRF unless developers add tokens / the system has a token
>>> verification system.
>>>
>>> c)       I am removing the changes related to [1] for now as they are
>>> clearly contradicting what we have in other parts of the cheat sheet. If
>>> you disagree, I am open to discussion before we get them back to the
>>> cheatsheet again. I might be missing something and I would love to hear
>>> your side of the story.
>>>
>>>
>>>
>>> *1.* Earlier, I rejected both the techniques you mentioned in
>>> ?Stateless/Tokenless Defense Techniques? to be in primary because
>>>
>>> *1.1* X-Requested-With: XMLHttpRequest Header: For the same FLASH
>>> related reasons mentioned under this
>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Use_of_Custom_Request_Headers>
>>> section. On a separate thread, I was working with Riyaz who authored
>>> this
>>> <https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b>
>>> blog and you wouldn?t believe how many old browser versions are still
>>> vulnerable to this FLASH based redirect CSRF vulnerability. He also gave
>>> link to a HTML wrapper which seems to make this attack work on newer Chrome
>>> versions as well. If you are interested, I can provide more details about
>>> these. Hence, I don?t want users to be vulnerable by using this as a
>>> primary defense.
>>>
>>> *1.2 *Not a Simple HTTP Request Verification: Again, this is a
>>> technique that I rejected in the later section
>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Content-Type_Header_Validation>
>>> of the document along with the reasoning.
>>>
>>>
>>>
>>> I just made some changes, feel free to review.
>>>
>>>
>>>
>>> I also think this comment: "If a developer forgets to add the token to
>>> any state changing operation, they are making the application vulnerable to
>>> CSRF." is flat out wrong.  If a dev forgets to add a token, then the
>>> server is simply going to reject the request. It's not going to be
>>> vulnerable.  If you agree, can you fix this?
>>>
>>>
>>>
>>> The article is also REALLY LONG. If you can identify anything to trim
>>> out, that would be great. I just trimmed out a few things, but I think we
>>> can do a lot more. Cheat sheets are supposed to be SHORT, but I realize
>>> many are not.
>>>
>>>
>>>
>>> For example, maybe we can move the reference example to a completely
>>> different page? That would shorten this alot.
>>>
>>> [image: https://ssl.gstatic.com/ui/v1/icons/mail/images/cleardot.gif]
>>>
>>>
>>>
>>> -Dave
>>>
>>>
>>>
>>>
>>>
>>> On Wed, Feb 6, 2019 at 5:25 PM manideep konakandla <
>>> mani.konakandla at gmail.com> wrote:
>>>
>>> Yes. All those changes passed through review on email list but yes,
>>> please feel free to provide any more comments.
>>>
>>>
>>>
>>> On Wed, Feb 6, 2019, 1:21 PM Dave Wichers <dave.wichers at owasp.org wrote:
>>>
>>> Are you:  Manideepk <https://www.owasp.org/index.php/User:Manideepk> on
>>> the OWASP site?
>>>
>>>
>>>
>>> I have some questions/comments about your changes to the OWASP CSRF
>>> Cheat Sheet.
>>>
>>>
>>>
>>> The bulk of those changes are here:
>>> https://www.owasp.org/index.php?title=Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet&type=revision&diff=244184&oldid=242455
>>>
>>>
>>>
>>> If this is you, I'll provide more details, but wanted to make sure I'm
>>> in touch with the right person first.
>>>
>>>
>>>
>>> -Dave
>>>
>>>
>>>
>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>> *Sent:* Sunday, December 23, 2018 4:13 AM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>> *Cc:* Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
>>> *Subject:* Re: [OWASP-cheat-sheets]
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Thanksyou very much for your support ???
>>>
>>>
>>>
>>> Le sam. 22 d?c. 2018 ? 22:24, Konakandla, Manideep <mkonakan at amazon.com>
>>> a ?crit :
>>>
>>> Let me know once the migration is started. I will do it for the CSRF
>>> prevention cheatsheet page J
>>>
>>>
>>>
>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>> *Sent:* Saturday, December 22, 2018 12:29 AM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>> *Cc:* Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
>>> *Subject:* Re: [OWASP-cheat-sheets]
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Hello Manideep,
>>>
>>>
>>>
>>> Thanks you for the update.
>>>
>>>
>>>
>>> For info we will migrate the entire project content (unless the
>>> homepage) to github so it is possible that you need to also made the update
>>> on the github repository.
>>>
>>>
>>>
>>> The migration work will start on January, i will take some rest until
>>> January, i really need it.
>>>
>>>
>>>
>>> Thanks you very much for your help on this project :)
>>>
>>>
>>>
>>> Happy holidays too
>>>
>>>
>>> --
>>> Cordialement, Best regards,
>>> Dominique Righetto
>>> dominique.righetto at gmail.com
>>>
>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>
>>> https://righettod.eu
>>> GPG: 323D19BA
>>>
>>>
>>>
>>>
>>>
>>> On Sat, Dec 22, 2018 at 3:40 AM Konakandla, Manideep <
>>> mkonakan at amazon.com> wrote:
>>>
>>> Hello all,
>>>
>>>
>>>
>>> I made a change to ?Double Submit Cookie? technique [1]. I added a
>>> variant to it which now mitigates well-known security issues with standard
>>> ?Double Submit Cookie? technique. So, people can use this technique without
>>> any issues. Please let me know if anyone finds any issues within it.
>>>
>>>
>>>
>>> Whenever I get some free time in next 1-2 months, I am planning to
>>> include
>>>
>>> a)       Details about popular 6-7 web frameworks and the CSRF
>>> mitigations implemented by them
>>>
>>> b)      Re-organize the page even more better by switching variant of
>>> double submit cookie to primary defense (under stateless section) etc.
>>>
>>>
>>>
>>> Happy holidays everyone J
>>>
>>>
>>>
>>> [1]
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Double_Submit_Cookie
>>> (read the last para under this mitigation)
>>>
>>>
>>>
>>>
>>>
>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>> *Sent:* Saturday, October 13, 2018 12:59 AM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>> *Cc:* Jim Manico <jim at manicode.com>; Pankaj Upadhyay <
>>> p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
>>> *Subject:* Re: [OWASP-cheat-sheets]
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Hi,
>>>
>>> CS publishing released and notification sent to the community via
>>> Twitter and Slack channel.
>>>
>>> --
>>> Cordialement, Best regards,
>>> Dominique Righetto
>>> dominique.righetto at gmail.com
>>>
>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>
>>> https://righettod.eu
>>> GPG: 323D19BA
>>>
>>>
>>>
>>>
>>>
>>> On Fri, Oct 12, 2018 at 3:47 AM Konakandla, Manideep <
>>> mkonakan at amazon.com> wrote:
>>>
>>> Yes, I am feeling way better now. Thank you J
>>>
>>>
>>>
>>> *@ALL: *Cheat sheet is updated with all the changes now
>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>.
>>> Please let me know if you have any issues by end of tomorrow. If there are
>>> no issues - I/we can start advertising the refactored cheat sheet in our
>>> networks J
>>>
>>>
>>>
>>> Thanks a ton *Dominique* and *Jim* for all your help till date. I
>>> really appreciate it!!! I will be actively maintaining this as well from
>>> today J
>>>
>>>
>>>
>>> Regards,
>>>
>>> Manideep Konakandla
>>>
>>> www.manideepk.com
>>>
>>> Security Engineer @ Amazon
>>>
>>> mkonakan at amazon.com
>>>
>>>
>>>
>>> *From:* Jim Manico <jim at manicode.com>
>>> *Sent:* Wednesday, October 10, 2018 10:39 PM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Pankaj
>>> Upadhyay <p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
>>> *Subject:* Re: [OWASP-cheat-sheets]
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Go for it!!! I hope you?re feeling better!
>>>
>>> --
>>>
>>> Jim Manico
>>>
>>> @Manicode
>>>
>>>
>>>
>>>
>>> On Oct 10, 2018, at 10:18 PM, Konakandla, Manideep <mkonakan at amazon.com>
>>> wrote:
>>>
>>> Sorry for late reply. I was on sick leave for last 2 days.
>>>
>>>
>>>
>>> I synced up with Dominique in a different email chain to clarify
>>> something in his previous email. He gave me a go ahead to update wiki with
>>> new re-factored cheat sheet. I am planning to do it sometime tomorrow.
>>> *@Jim* : Is it with fine with you as well? Please let me know if you
>>> have any concerns.
>>>
>>>
>>>
>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>> *Sent:* Monday, October 8, 2018 1:47 AM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>> *Cc:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>; Jim Manico <
>>> jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
>>> *Subject:* Re: [OWASP-cheat-sheets]
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Hello all,
>>>
>>>
>>>
>>> In order to move forward and deliver something in the project please
>>> update the wiki with content from the refactoring from Konakandla Manideep.
>>> If there missing points they will be added in another round it is the role
>>> of the wiki based usage.
>>>
>>>
>>>
>>> Thanks in advance for your understanding ?
>>>
>>>
>>>
>>> Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com>
>>> a ?crit :
>>>
>>> Hey Folks J
>>>
>>>
>>>
>>> Good conversation :) Can you guys review the new cheat sheet once? I am
>>> sure most of the discussion going on here is already answered in the new
>>> re-factored cheat sheet I wrote.
>>>
>>>
>>>
>>> @Pankaj ? Go through the respective sections in the new cheat sheet. If
>>> they are not clear / you are not convinced, we can discuss more. Below is
>>> the summary of my response to your questions (you will find the same gist
>>> going through the cheat sheet as well).
>>>
>>>
>>>
>>> Go through [2] to understand more detailed on how flash based bypass on
>>> CSRF custom mitigation defense works. You can see there that the origin
>>> headers are passed along with the custom headers and hence current wiki
>>> asks to do origin and/or referrer header check as defense-in-depth (it
>>> would help even if flash sometime in the future repeats same mistake and
>>> forwards custom headers without crossdomain.xml checks. Domain requesting
>>> the redirected request might be fooled with custom header bypass but not
>>> the origin header check). If both these checks are done, it is indeed a
>>> good defense but origin header is not always included etc. (just as Jim
>>> mentioned and also as new cheatsheet mentions).  I don?t think deprecating
>>> custom header check is a good idea. It is indeed a good solution for
>>> stateless services though they have to keep issues like I mentioned before
>>> in mind. Your statement of custom header itself doesn?t mitigate CSRF
>>> relies on the fact that ?Flash being vulnerable to same bug again in
>>> future?. We cannot rely on a future statement and deprecate a technique,
>>> instead providing defense in depth measure for it and also cautioning users
>>> about past issues might be good idea. Users can take their call. Please
>>> read custom headers and origin check sections I re-wrote for more
>>> in-details. It talks about the issues and people can select if they want to
>>> use it or not.
>>>
>>>
>>>
>>> Also, Login CSRF has nothing to do with custom header mitigation. Login
>>> forms are usually handled on <form> tags and custom header mitigation is
>>> only applicable on ajax calls because you cannot set custom headers on form
>>> tags. It can be applicable if you are doing logins on Ajax/XHR requests in
>>> which case my above response from custom header mitigation applies. I also
>>> proposed few methods for mitigating login CSRF which aligns with our
>>> primary defense on the new cheatsheet (tokens). Please review it as well.
>>>
>>>
>>>
>>> Also, CORS has nothing to do with CSRF. I infact added CORS as a
>>> technique that should not be used/even thought for CSRF in the new
>>> cheatsheet I wrote. Please check that and also read [1]
>>>
>>>
>>>
>>> [1]
>>> https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
>>>
>>> [2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/
>>>
>>>
>>>
>>> BTW - Here is the link to the new cheat sheet -
>>> https://tinyurl.com/y7k9fded
>>>
>>>
>>>
>>> Again,  I you are not convinced ? please let me know specific item and
>>> we can happily discuss further J Alternatively, you can send us your
>>> edits here for review and if it looks good for everyone ? you can edit it
>>> in the wiki.
>>>
>>>
>>>
>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>> *Sent:* Sunday, October 7, 2018 1:13 PM
>>> *To:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>>> *Cc:* Jim Manico <jim at manicode.com>; Konakandla, Manideep <
>>> mkonakan at amazon.com>; owasp-cheat-sheets at lists.owasp.org
>>> *Subject:* Re: [OWASP-cheat-sheets]
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Sync your update with one from Konakandla Manideep please ?
>>>
>>>
>>>
>>> Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>>> a ?crit :
>>>
>>> Aloha Jim!
>>>
>>> With XSS, even CSRF tokens can be stolen :).
>>>
>>> But I'll keep your tip in mind when editing the wiki. I'm planning to do
>>> that sometime this month.
>>>
>>> Please feel free to review it whenever you guys get a chance.
>>>
>>>
>>>
>>> Best,
>>>
>>> Pankaj
>>>
>>>
>>>
>>>
>>>
>>> On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com> wrote:
>>>
>>> I agree JWT's architectures *where cookies are not involved* are
>>> resistant to CSRF but those tokens are at the risk of being stolen over XSS!
>>>
>>> The Origin header does not go with all requests and FireFox does not
>>> fully support it yet. So careful!
>>>
>>> :)
>>>
>>>
>>>
>>> On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
>>>
>>> I agree and that's why I would like to propose deprecation of 'custom
>>> header approach' as a CSRF defense.
>>> Presently the mechanism that seems to work across applications is
>>> validating custom header as well as a forbidden header name (that cannot be
>>> set by a software or a program) e.g. Origin. If we want to give it a new
>>> name like 'Double Header Validation' or something else, I'm fine with that
>>> but custom header alone doesn't seem sufficient to mitigate CSRF issue.
>>>
>>>
>>>
>>> There are some other best practices that should also be considered. I
>>> think CORS is now mature enough to have a mention in the CSRF defense Also,
>>> applications utilizing JWT token in the header seem immune to CSRF.
>>>
>>>
>>>
>>> Please let me know what you guys think and if allowed, I can go ahead
>>> and make some of these edits for your perusal.
>>>
>>>
>>>
>>>
>>>
>>> On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <
>>> dominique.righetto at owasp.org> wrote:
>>>
>>> Good question, I think it's more a point about to be consistent in terms
>>> of CSRF check across the application. Indeed, if you begin to perform
>>> different kind of CSRF check depending on the feature of the application
>>> (login, business feature, reset password...) it becomes risky and you
>>> significantly increase the chance to include location in which you will
>>> have a CSRF check weakness...
>>>
>>> --
>>> Cordialement, Best regards,
>>> Dominique Righetto
>>> dominique.righetto at gmail.com
>>>
>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>
>>> https://righettod.eu
>>> GPG: 323D19BA
>>>
>>>
>>>
>>>
>>>
>>> On Sat, Oct 6, 2018 at 9:51 PM Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>>> wrote:
>>>
>>> Do we know, regarding login CSRF, why validating the custom header as
>>> well as the Origin/Host header is not a sufficient mitigation?
>>>
>>>
>>>
>>> On Fri, Sep 28, 2018 at 9:35 PM Konakandla, Manideep <
>>> mkonakan at amazon.com> wrote:
>>>
>>> Login CSRF is a way of exploiting CSRF on login forms (details here
>>> <https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a
>>> line about it in referrer validation section, it was not explained clearly
>>> and how it can scale with other techniques such as token based mitigation.
>>> No worries, I added a section about it!
>>>
>>>
>>>
>>> Finally, I am done with the document from my side and its sent for
>>> internal reviews now. It should take 1-2 weeks before it comes to you guys.
>>> Meanwhile, I still need help on below items from you guys. If no one was
>>> able to find references for a), we can very well remove it.
>>>
>>>
>>>
>>> a.     Under double submit cookie section, it is mentioned that DWR
>>> uses that approach but I could not find that anywhere within DWR
>>> documentation that it uses double submit cookie. Can someone help me
>>> finding reference if they know any?
>>>
>>> b.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>> in the wiki
>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>> to me like there are latest resources than the one?s linked in current
>>> cheatsheet
>>>
>>>
>>>
>>> Happy weekend folks J
>>>
>>>
>>>
>>> *From:* Jim Manico <jim at manicode.com>
>>> *Sent:* Thursday, September 27, 2018 3:02 AM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Jim Manico <
>>> jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>;
>>> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
>>> *Subject:* Re:
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> ...as for (d) I dont see any problems with passing tokens as headers or
>>> parameters
>>>
>>>
>>>
>>> I dont understand (e) can you explain that again?
>>>
>>> --
>>>
>>> Jim Manico
>>>
>>> @Manicode
>>>
>>> Secure Coding Education
>>>
>>> +1 (808) 652-3805
>>>
>>>
>>> On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com>
>>> wrote:
>>>
>>> 2 more questions added  (Jim already started helping me on #a)
>>>
>>>
>>>
>>> a.     I requested for an OWASP account and it?s still in pending. @JIM
>>> ? Can you please help me in getting my account approved? (registered with
>>> mani.konakandla at gmail.com)
>>>
>>> b.     Under double submit cookie section, it is mentioned that DWR
>>> uses that approach but I could not find that anywhere within DWR
>>> documentation that it uses double submit cookie. Can someone help me
>>> finding reference if they know any?
>>>
>>> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>> in the wiki
>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>> to me like there are latest resources than the one?s linked
>>>
>>> d.     At few places within the wiki, I have seen recommending to
>>> include token in headers for Ajax requests. I also don?t see a problem in
>>> passing them as parameters as well. Do you guys see any?
>>>
>>> e.     I also have not seen at any place within the wiki talking about
>>> login CSRF issues and how each of the techniques described can be
>>> prone/immune to it. Is there any reason for it or are we open to include
>>> that?
>>>
>>>
>>>
>>> *From:* Konakandla, Manideep
>>> *Sent:* Wednesday, September 26, 2018 5:27 PM
>>> *To:* 'Jim Manico' <jim at manicode.com>; 'Dominique Righetto' <
>>> dominique.righetto at owasp.org>
>>> *Cc:* 'Jim Manico' <jim.manico at owasp.org>; 'Dave Wichers' <
>>> dave.wichers at owasp.org>; 'eric.sheridan at owasp.org' <
>>> eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org
>>> *Subject:* RE:
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Yeah. My understanding of the breadth of exploitation of XSS in an
>>> application protected with just origin/referrer and other application
>>> protected with just token based mitigation earlier was wrong. Dominique
>>> earlier email thread cleared that to me (breadth of exploitation is same in
>>> both the cases. i.e., if an XSS vulnerability is found in any individual
>>> application protected with only one of those techniques, it still can
>>> exploit all state changing operations on entire application [though the
>>> complexity of exploitation is easy in origin/referrer check than token
>>> based mitigation]).
>>>
>>>
>>>
>>> Anyway, I am all clear and also almost done with re-factoring the
>>> cheatsheet  [1] J Should be fully completed by Friday unless something
>>> comes up meanwhile. I will then send it to my colleagues for review and
>>> then for Legal, PR approvals. Before that, I need help from you guys on
>>> below items
>>>
>>>
>>>
>>> a.     I requested for an OWASP account and it?s still in pending. @JIM
>>> ? Can you please help me in getting my account approved? (registered with
>>> mani.konakandla at gmail.com)
>>>
>>> b.     Under double submit cookie section, it is mentioned that DWR
>>> uses that approach but I could not find that anywhere within DWR
>>> documentation that it uses double submit cookie. Can someone help me
>>> finding reference if they know any?
>>>
>>> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>> in the wiki
>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>> to me like there are latest resources than the one?s linked
>>>
>>>
>>>
>>> [1] Below are changes done so far
>>>
>>> a. Switched primary, secondary defense and our reasoning behind it
>>> (added lot of reasons on issues with origin/referrer header check and why
>>> token should be made primary)
>>>
>>> b. Added CSRF mitigation myths (CORS, content-type validation etc.)
>>>
>>> c. Added a section called ?Not so popular CSRF mitigations? (mentioned
>>> details about triple submit cookie)
>>>
>>> d. Included limitations / issues associated with double submit cookie,
>>> same site cookie, captcha as a CSRF defense etc.
>>>
>>> e. Removed lot of obsolete content and added some new content to some of
>>> the mitigations
>>>
>>> f. Made document look more better by adding RFC?s links wherever
>>> possible and lot of other minor changes.
>>>
>>>
>>>
>>> *From:* Jim Manico <jim at manicode.com>
>>> *Sent:* Wednesday, September 26, 2018 4:19 PM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>; Dominique Righetto <
>>> dominique.righetto at owasp.org>
>>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>>> *Subject:* Re:
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Well tokens can be placed in cookies.
>>>
>>> The real answer to avoid CSRF is tokens in JavaScript variable as
>>> opposed to cookies. They are not automatically sent and indeed make CSRF
>>> impossible - at the expense of tokens being fully stolen via XSS. Pick your
>>> poison!
>>>
>>> I recommend a COMBO of these defenses. For web apps, sychronizer token +
>>> header verification + re-authentication for sensitive features.
>>>
>>> For API's double-cookie submit or just use JavaScript variable based
>>> tokens + header verification for same-site API's + re-authentication for
>>> sensitive features.
>>>
>>> > [1] If there is an XSS vulnerability at a single place on a domain
>>> (it can add custom header), it can be used to make CSRF *on all other
>>> state changing operationswithin that domain *done to that AJAX
>>> endpoint. Do you agree?
>>>
>>>
>>>
>>> Absolutely!
>>>
>>>
>>>
>>> On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
>>>
>>> Yeah, I understand that any XSS and CSRF game is over but I am stressing
>>> out on the highlighted part in [1]. I am trying to highlight and get an
>>> affirmation on why my understanding on token based mitigation is better
>>> than origin/referrer header check will also apply to ?token based
>>> mitigation Vs custom header mitigation (if static tokens are used in custom
>>> headers)?.
>>>
>>>
>>>
>>> In case of tokens, we have an option to use different tokens on each
>>> page (taking things like URL, timestamp etc. into consideration) and hence
>>> XSS vulnerability on one page will only make state changing operations in
>>> that page vulnerable to CSRF but not state changing operations on other
>>> pages within that domain (because token value is different) but whereas in
>>> origin/referrer header check and custom header check, the token value is
>>> constant and hence XSS vulnerability in one page will also cause state
>>> changing operations in other pages to be vulnerable to CSRF as well. Off
>>> course, this can be mitigated in custom header checks by adding tokens to
>>> custom headers rather than static constant but this cannot be mitigated in
>>> origin/referrer check because those headers cannot be modified. So, yeah a
>>> single XSS any CSRF is bypassed but the breadth of the impact is different
>>> for each of them.
>>>
>>>
>>>
>>> Regarding code samples ? I currently was able to allocate only some time
>>> for this task and I don?t think I will be able to do code samples within
>>> this time frame. I am also leaving for a long vacation starting Oct 12 and
>>> hence let?s try to get this out first and we can add code samples later on
>>> considering my work load after I return from vacation.
>>>
>>>
>>>
>>> [1] If there is an XSS vulnerability at a single place on a domain (it
>>> can add custom header), it can be used to make CSRF *on all other state
>>> changing operationswithin that domain *done to that AJAX endpoint. Do
>>> you agree?
>>>
>>>
>>>
>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>> <dominique.righetto at owasp.org>
>>> *Sent:* Thursday, September 20, 2018 8:45 AM
>>> *To:* Jim Manico <jim at manicode.com> <jim at manicode.com>
>>> *Cc:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
>>> Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave Wichers
>>> <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>>> eric.sheridan at owasp.org
>>> *Subject:* Re:
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Hi,
>>>
>>>
>>>
>>> Thanks for your contribution.
>>>
>>>
>>>
>>> I like very much your plan ?
>>>
>>>
>>>
>>> I ask for some favor in addition :
>>>
>>> - can you provide code sample (in one language like java or .net or the
>>> one you want but it must be easy to read and understand) or libraires along
>>> your proposal for each section?
>>>
>>> - can you use the syntaxhighlight tag for code?
>>>
>>>
>>>
>>> I'am agree with Jim, XSS  means game over because your browsing context
>>> can be used as proxy so csrf protection will be defeated because request
>>> came from the legitimate user.
>>>
>>>
>>>
>>> Thanks you again for all your help ???
>>>
>>>
>>>
>>> Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com> a ?crit :
>>>
>>> > If there is an XSS vulnerability at a single place on a domain (it
>>> can add custom header), it can be used to make CSRF on all other state
>>> changing operations within that domain done to that AJAX endpoint. Do you
>>> agree?
>>>
>>> Any XSS is game over and all CSRF are useless in the face of XSS. I
>>> Agree!
>>>
>>> - Jim
>>>
>>>
>>>
>>> On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
>>>
>>> Hey Guys,
>>>
>>>
>>>
>>> [1] is what I said for origin/referrer header check in this e-mail
>>> thread. I also believe that this applies for custom headers for AJAX
>>> endpoints as well. If there is an XSS vulnerability at a single place on a
>>> domain (it can add custom header), it can be used to make CSRF on all other
>>> state changing operations within that domain done to that AJAX endpoint. Do
>>> you agree?
>>>
>>>
>>>
>>> Here is how I am keeping the new re-factored cheatsheet. Does this look
>>> good to you guys?
>>>
>>>
>>>
>>> 1.       Use token based method as primary defense
>>>
>>> a.       Can use synchronizer pattern for stateful applications
>>>
>>> b.       Can use hah based/ encryption based token pattern for
>>> stateless applications
>>>
>>> 2.       Defense in depth measures along with drawbacks of each one
>>>
>>> a.       Origin/referrer header check
>>>
>>> b.       Double submit cookie
>>>
>>> c.       Samesite cookie
>>>
>>> d.       Custom headers (people still need to use tokens for forms etc.
>>> if they have mix of ajax endpoints and general HTML)
>>>
>>> 3.       Strong CSRF defenses but very less usable : captcha etc.
>>>
>>> 4.       CSRF Myths / techniques that do not work section
>>>
>>>
>>>
>>> [1] if we solely rely on origin/referrer header check - an XSS
>>> vulnerability within a single page on that domain will also give CSRF
>>> vulnerability to all other state changing operations under that entire
>>> domain.
>>>
>>>
>>>
>>> *From:* Dominique Righetto <span st <dominique.righetto at owasp.org>
>>>
>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190208/80d58947/attachment-0001.html>

From dominique.righetto at owasp.org  Fri Feb  8 16:53:20 2019
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Fri, 8 Feb 2019 17:53:20 +0100
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CAMjpMgcYAamNWf9Up_a9unXiZ0B88unCEbDo=RiOo6GK0k1f1A@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<d0f35aa9-0b9d-1c52-d4bb-35ca904f59a9@owasp.org>
	<6d226d32897548babcd5b081ab1a0cc6@EX13D11UWB004.ant.amazon.com>
	<CANos97dug4cw8M26614xQdkeAs4z8GwEqbVH2opeSJ1cku906Q@mail.gmail.com>
	<72cba04b8a4344d99487d66624fafb49@EX13D11UWB004.ant.amazon.com>
	<b2922160-3f1d-01db-5240-3542b005a6ed@manicode.com>
	<CANos97cF6-sixjb3O_QpoksKFgcBPcYp8dnANGg5Zg_D6pZ6CQ@mail.gmail.com>
	<284088931beb426ea15b0815292a33a6@EX13D11UWB004.ant.amazon.com>
	<511338d8-eab8-a6c3-4cae-2badcae4f07a@manicode.com>
	<8bac44ab83dd441a91695f96c775a911@EX13D11UWB004.ant.amazon.com>
	<A7E3A0CF-EE01-4963-9F34-AF8825C89EE0@manicode.com>
	<6795fa7232dd466e818b7953048e243d@EX13D11UWB004.ant.amazon.com>
	<CAL=9OGyNxb0eKf4mhS=jJTUfBNfbQvuV=sNVZ5BLNoVzVb6O6A@mail.gmail.com>
	<CANos97cSYSKc29nA-RCfFf9daVGSqEtEfNTek-mac9px04Oq0A@mail.gmail.com>
	<CAL=9OGxQQFYeWcXMFTgAx22KSi9x2TGjrStKFGqHA1xk-wOV0Q@mail.gmail.com>
	<136d2b2c-ef34-6e7f-0870-c4b61cdf4379@manicode.com>
	<CAL=9OGy0jP6OfLNoeTYW9k=2q5H9qdq78PkkNvbs6+zgAbaQ6Q@mail.gmail.com>
	<CANos97esCWvdW58rw5ZC+NHpLT1gwUwQWOd=+_BqPr5HPaiU_w@mail.gmail.com>
	<46fa44e0bd7941eaa029659ca8f3291f@EX13D11UWB004.ant.amazon.com>
	<CANos97csCLS8cgWwduXWt520AcT5Z_sfRXbNUc=Yq6+P8Tx1UA@mail.gmail.com>
	<ea0ad8742d904ea792880b77e6e81678@EX13D11UWB004.ant.amazon.com>
	<70E7657A-CA1F-4BD7-ADF7-07A85CD08E6B@manicode.com>
	<37df98b064aa4b39af8d0e585638b3c4@EX13D11UWB004.ant.amazon.com>
	<CANos97cXnfb_foCaPaYXQEGRnphTQu8P_KC7pXwkeb7_ak0m-A@mail.gmail.com>
	<2bf303591c134e949d52c3d8d5a155d0@EX13D11UWB004.ant.amazon.com>
	<CANos97c6xDAycEr=YY_LaDWaffohmq17Cy1o9iSDPSYBaUa4_A@mail.gmail.com>
	<92ffc47ab9d14f4f9723d1feca90e1ab@EX13D11UWB004.ant.amazon.com>
	<CANos97dTh0Tia6MftWq-_kWFzejWx7o0Uh=NyC8W_=jVpCUdOQ@mail.gmail.com>
	<e832f8afafc945e3b65cd5f17fe15c6b@EX13D11UWB004.ant.amazon.com>
	<CANos97ew=HjNnO+TSgUL55x8WPyzpuKhjERwmvHqEyx5XYMvTg@mail.gmail.com>
	<CAMjpMgcykhmtoA32F+BDZ=8nRkT8z-oM_HX=6Z2kdmKdHvAjUQ@mail.gmail.com>
	<CANos97dHxj6B0H+br7-NKxJkAhZT-Bm525i0DqHwoeAR=Hjnkg@mail.gmail.com>
	<CAMjpMgcYAamNWf9Up_a9unXiZ0B88unCEbDo=RiOo6GK0k1f1A@mail.gmail.com>
Message-ID: <CANos97d5TKeFpXSGZ3Er4nhmbnYuy3Mw81V2-U_3e+Rv6tSS8g@mail.gmail.com>

Uppercase usage is not mandatory, they are not impact on the message.
Process is documented on the homepage of the project, personaly when i
contribute to a project i start by visiting the homepage to take news from
the project about any contribution change or update. It's like a Git Pull
before to work on a team project...If people do not take time to do this
little step it's not my fault, i communicate enought about any change on
the project.
My time is focus on the migration, i have not the time to lock every page,
very soon these page will be updated to point to the assocated CS on GitHub.
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com
<dominique.righetto at gmail.com>dominique.righetto at owasp.org
<dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Feb 8, 2019 at 5:45 PM Dave Wichers <dave.wichers at owasp.org> wrote:

> OK.   PLEASE lock the cheat sheet wiki pages themselves then to prevent
> others from contributing and then having their time wasted by having it
> thrown away.  And then maybe create a standard footer for ALL Cheat Sheets,
> that describes how to contribute to them.
>
> I know you CAN lock them because the OWASP Top 10 wiki pages were locked
> so only a few people, like me, could edit them.
>
> -Dave
>
>
> On Fri, Feb 8, 2019 at 11:40 AM Dominique Righetto <
> dominique.righetto at owasp.org> wrote:
>
>> Section "Migration Pending" from
>> https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series
>>
>> I understand that you don't follow our communication channel but we use
>> it to communicate and it's the communication process choosen by the project
>> and we have many good feedback about it. Slack members of the CS channel
>> increase at a high speed.
>>
>> I respect your point of view but, as PL, the wiki mode allow uncontrolled
>> process of edition/creation and Jim/Me are responsible/accountable for the
>> quality/integrity of the CS/projects. Moreover the wiki do not allow
>> integration into CI for create others format or automate control. GH allow
>> also a fully open discution about any operation on CS.
>>
>> I respect also the fact that you do not like the gihub way but it's the
>> new way followed by new owasp projects (masvs, mstg, asvs, proactive
>> control and the top 10) and it faciliate the contribution even if you dont
>> like it. It's more easy to create a GH account than an OWASP one.
>>
>> If you dont like this way at the point that it block your to contribute
>> then i understand and respect your position but as PL Jim/Me has decided
>> this way so we will continue the road wihtout you even if we thanks you
>> very very much for your contribution.
>>
>> --
>> Cordialement, Best regards,
>> Dominique Righetto
>> dominique.righetto at gmail.com
>> <dominique.righetto at gmail.com>dominique.righetto at owasp.org
>> <dominique.righetto at gmail.com>
>> https://righettod.eu
>> GPG: 323D19BA
>>
>>
>> On Fri, Feb 8, 2019 at 5:27 PM Dave Wichers <dave.wichers at owasp.org>
>> wrote:
>>
>>> Clearly indicated on the home page where?  And I don't follow OWASP on
>>> Slack or Twitter so I was completely unaware of this.  You say follow 'the
>>> process' but I can't find it anywhere.
>>>
>>> If you really don't want the cheat sheets to be edited, lock them, and
>>> put notes ON the cheat sheets themselves about what the process is/where to
>>> find them.
>>>
>>> I'm also concerned that this process will make it MUCH harder to
>>> contribute, reducing people's willingness to do so (like me).
>>>
>>> -Dave
>>>
>>>
>>> On Thu, Feb 7, 2019 at 11:54 PM Dominique Righetto <
>>> dominique.righetto at owasp.org> wrote:
>>>
>>>> Hello all
>>>>
>>>> Since december wiki update of cs are deprecated. It is clearly
>>>> indicated on the homepage and slack and Twitter and GitHub since 3 month.
>>>>
>>>> If you modify the wiki your update will simply be ignored and lost.
>>>>
>>>> Please follow the process.
>>>>
>>>> All modification and creation of cs is now controlled by Jim and me as
>>>> PL along Continuous Integration process.
>>>>
>>>> Le ven. 8 f?vr. 2019 ? 00:43, Konakandla, Manideep <mkonakan at amazon.com>
>>>> a ?crit :
>>>>
>>>>> Hi Dave - Let?s continue our discussion here so that we have
>>>>> everything tracked in the cheat sheet email list (copying our 1:1
>>>>> conversation below).
>>>>>
>>>>>
>>>>>
>>>>> I really appreciate your support in the changes. I have few comments
>>>>> below
>>>>>
>>>>>
>>>>>
>>>>> a)       Dominique and Jim decided to move cheat sheets to Github.
>>>>> So, all new changes should be on Github CSRF
>>>>> <https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md>
>>>>> page. I think they are also working on deprecating the old wiki pages on
>>>>> OWASP. I am fine with all your changes (as most of them are
>>>>> cosmetic/grammatical/structural) except [1]. If you don?t mind, can you do
>>>>> these changes on the Github? I am fine with you moving the reference
>>>>> example to a different page as well. I have plans to add some other content
>>>>> (not anytime in next month) during which I will also try to trim the
>>>>> content as much as possible.
>>>>>
>>>>> b)      ?If a developer forgets to add the token to any state
>>>>> changing operation, they are making the application vulnerable to CSRF." is
>>>>> flat out wrong.  If a dev forgets to add a token, then the server is simply
>>>>> going to reject the request. It's not going to be vulnerable.  If you
>>>>> agree, can you fix this?
>>>>>
>>>>> >> You are ?assuming? here that the server has a token verification
>>>>> system which is not true by default. By default, all applications are
>>>>> vulnerable to CSRF unless developers add tokens / the system has a token
>>>>> verification system.
>>>>>
>>>>> c)       I am removing the changes related to [1] for now as they are
>>>>> clearly contradicting what we have in other parts of the cheat sheet. If
>>>>> you disagree, I am open to discussion before we get them back to the
>>>>> cheatsheet again. I might be missing something and I would love to hear
>>>>> your side of the story.
>>>>>
>>>>>
>>>>>
>>>>> *1.* Earlier, I rejected both the techniques you mentioned in
>>>>> ?Stateless/Tokenless Defense Techniques? to be in primary because
>>>>>
>>>>> *1.1* X-Requested-With: XMLHttpRequest Header: For the same FLASH
>>>>> related reasons mentioned under this
>>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Use_of_Custom_Request_Headers>
>>>>> section. On a separate thread, I was working with Riyaz who authored
>>>>> this
>>>>> <https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b>
>>>>> blog and you wouldn?t believe how many old browser versions are still
>>>>> vulnerable to this FLASH based redirect CSRF vulnerability. He also gave
>>>>> link to a HTML wrapper which seems to make this attack work on newer Chrome
>>>>> versions as well. If you are interested, I can provide more details about
>>>>> these. Hence, I don?t want users to be vulnerable by using this as a
>>>>> primary defense.
>>>>>
>>>>> *1.2 *Not a Simple HTTP Request Verification: Again, this is a
>>>>> technique that I rejected in the later section
>>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Content-Type_Header_Validation>
>>>>> of the document along with the reasoning.
>>>>>
>>>>>
>>>>>
>>>>> I just made some changes, feel free to review.
>>>>>
>>>>>
>>>>>
>>>>> I also think this comment: "If a developer forgets to add the token
>>>>> to any state changing operation, they are making the application vulnerable
>>>>> to CSRF." is flat out wrong.  If a dev forgets to add a token, then
>>>>> the server is simply going to reject the request. It's not going to be
>>>>> vulnerable.  If you agree, can you fix this?
>>>>>
>>>>>
>>>>>
>>>>> The article is also REALLY LONG. If you can identify anything to trim
>>>>> out, that would be great. I just trimmed out a few things, but I think we
>>>>> can do a lot more. Cheat sheets are supposed to be SHORT, but I realize
>>>>> many are not.
>>>>>
>>>>>
>>>>>
>>>>> For example, maybe we can move the reference example to a completely
>>>>> different page? That would shorten this alot.
>>>>>
>>>>> [image: https://ssl.gstatic.com/ui/v1/icons/mail/images/cleardot.gif]
>>>>>
>>>>>
>>>>>
>>>>> -Dave
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Wed, Feb 6, 2019 at 5:25 PM manideep konakandla <
>>>>> mani.konakandla at gmail.com> wrote:
>>>>>
>>>>> Yes. All those changes passed through review on email list but yes,
>>>>> please feel free to provide any more comments.
>>>>>
>>>>>
>>>>>
>>>>> On Wed, Feb 6, 2019, 1:21 PM Dave Wichers <dave.wichers at owasp.org
>>>>>  wrote:
>>>>>
>>>>> Are you:  Manideepk <https://www.owasp.org/index.php/User:Manideepk> on
>>>>> the OWASP site?
>>>>>
>>>>>
>>>>>
>>>>> I have some questions/comments about your changes to the OWASP CSRF
>>>>> Cheat Sheet.
>>>>>
>>>>>
>>>>>
>>>>> The bulk of those changes are here:
>>>>> https://www.owasp.org/index.php?title=Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet&type=revision&diff=244184&oldid=242455
>>>>>
>>>>>
>>>>>
>>>>> If this is you, I'll provide more details, but wanted to make sure I'm
>>>>> in touch with the right person first.
>>>>>
>>>>>
>>>>>
>>>>> -Dave
>>>>>
>>>>>
>>>>>
>>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>>> *Sent:* Sunday, December 23, 2018 4:13 AM
>>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>>> *Cc:* Jim Manico <jim at manicode.com>;
>>>>> owasp-cheat-sheets at lists.owasp.org
>>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Thanksyou very much for your support ???
>>>>>
>>>>>
>>>>>
>>>>> Le sam. 22 d?c. 2018 ? 22:24, Konakandla, Manideep <
>>>>> mkonakan at amazon.com> a ?crit :
>>>>>
>>>>> Let me know once the migration is started. I will do it for the CSRF
>>>>> prevention cheatsheet page J
>>>>>
>>>>>
>>>>>
>>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>>> *Sent:* Saturday, December 22, 2018 12:29 AM
>>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>>> *Cc:* Jim Manico <jim at manicode.com>;
>>>>> owasp-cheat-sheets at lists.owasp.org
>>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Hello Manideep,
>>>>>
>>>>>
>>>>>
>>>>> Thanks you for the update.
>>>>>
>>>>>
>>>>>
>>>>> For info we will migrate the entire project content (unless the
>>>>> homepage) to github so it is possible that you need to also made the update
>>>>> on the github repository.
>>>>>
>>>>>
>>>>>
>>>>> The migration work will start on January, i will take some rest until
>>>>> January, i really need it.
>>>>>
>>>>>
>>>>>
>>>>> Thanks you very much for your help on this project :)
>>>>>
>>>>>
>>>>>
>>>>> Happy holidays too
>>>>>
>>>>>
>>>>> --
>>>>> Cordialement, Best regards,
>>>>> Dominique Righetto
>>>>> dominique.righetto at gmail.com
>>>>>
>>>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>>>
>>>>> https://righettod.eu
>>>>> GPG: 323D19BA
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Sat, Dec 22, 2018 at 3:40 AM Konakandla, Manideep <
>>>>> mkonakan at amazon.com> wrote:
>>>>>
>>>>> Hello all,
>>>>>
>>>>>
>>>>>
>>>>> I made a change to ?Double Submit Cookie? technique [1]. I added a
>>>>> variant to it which now mitigates well-known security issues with standard
>>>>> ?Double Submit Cookie? technique. So, people can use this technique without
>>>>> any issues. Please let me know if anyone finds any issues within it.
>>>>>
>>>>>
>>>>>
>>>>> Whenever I get some free time in next 1-2 months, I am planning to
>>>>> include
>>>>>
>>>>> a)       Details about popular 6-7 web frameworks and the CSRF
>>>>> mitigations implemented by them
>>>>>
>>>>> b)      Re-organize the page even more better by switching variant of
>>>>> double submit cookie to primary defense (under stateless section) etc.
>>>>>
>>>>>
>>>>>
>>>>> Happy holidays everyone J
>>>>>
>>>>>
>>>>>
>>>>> [1]
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Double_Submit_Cookie
>>>>> (read the last para under this mitigation)
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>>> *Sent:* Saturday, October 13, 2018 12:59 AM
>>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>>> *Cc:* Jim Manico <jim at manicode.com>; Pankaj Upadhyay <
>>>>> p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
>>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Hi,
>>>>>
>>>>> CS publishing released and notification sent to the community via
>>>>> Twitter and Slack channel.
>>>>>
>>>>> --
>>>>> Cordialement, Best regards,
>>>>> Dominique Righetto
>>>>> dominique.righetto at gmail.com
>>>>>
>>>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>>>
>>>>> https://righettod.eu
>>>>> GPG: 323D19BA
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Fri, Oct 12, 2018 at 3:47 AM Konakandla, Manideep <
>>>>> mkonakan at amazon.com> wrote:
>>>>>
>>>>> Yes, I am feeling way better now. Thank you J
>>>>>
>>>>>
>>>>>
>>>>> *@ALL: *Cheat sheet is updated with all the changes now
>>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>.
>>>>> Please let me know if you have any issues by end of tomorrow. If there are
>>>>> no issues - I/we can start advertising the refactored cheat sheet in our
>>>>> networks J
>>>>>
>>>>>
>>>>>
>>>>> Thanks a ton *Dominique* and *Jim* for all your help till date. I
>>>>> really appreciate it!!! I will be actively maintaining this as well from
>>>>> today J
>>>>>
>>>>>
>>>>>
>>>>> Regards,
>>>>>
>>>>> Manideep Konakandla
>>>>>
>>>>> www.manideepk.com
>>>>>
>>>>> Security Engineer @ Amazon
>>>>>
>>>>> mkonakan at amazon.com
>>>>>
>>>>>
>>>>>
>>>>> *From:* Jim Manico <jim at manicode.com>
>>>>> *Sent:* Wednesday, October 10, 2018 10:39 PM
>>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>>> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Pankaj
>>>>> Upadhyay <p.upadhyay9999 at gmail.com>;
>>>>> owasp-cheat-sheets at lists.owasp.org
>>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Go for it!!! I hope you?re feeling better!
>>>>>
>>>>> --
>>>>>
>>>>> Jim Manico
>>>>>
>>>>> @Manicode
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Oct 10, 2018, at 10:18 PM, Konakandla, Manideep <
>>>>> mkonakan at amazon.com> wrote:
>>>>>
>>>>> Sorry for late reply. I was on sick leave for last 2 days.
>>>>>
>>>>>
>>>>>
>>>>> I synced up with Dominique in a different email chain to clarify
>>>>> something in his previous email. He gave me a go ahead to update wiki with
>>>>> new re-factored cheat sheet. I am planning to do it sometime tomorrow.
>>>>> *@Jim* : Is it with fine with you as well? Please let me know if you
>>>>> have any concerns.
>>>>>
>>>>>
>>>>>
>>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>>> *Sent:* Monday, October 8, 2018 1:47 AM
>>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>>> *Cc:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>; Jim Manico <
>>>>> jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
>>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Hello all,
>>>>>
>>>>>
>>>>>
>>>>> In order to move forward and deliver something in the project please
>>>>> update the wiki with content from the refactoring from Konakandla Manideep.
>>>>> If there missing points they will be added in another round it is the role
>>>>> of the wiki based usage.
>>>>>
>>>>>
>>>>>
>>>>> Thanks in advance for your understanding ?
>>>>>
>>>>>
>>>>>
>>>>> Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com>
>>>>> a ?crit :
>>>>>
>>>>> Hey Folks J
>>>>>
>>>>>
>>>>>
>>>>> Good conversation :) Can you guys review the new cheat sheet once? I
>>>>> am sure most of the discussion going on here is already answered in the new
>>>>> re-factored cheat sheet I wrote.
>>>>>
>>>>>
>>>>>
>>>>> @Pankaj ? Go through the respective sections in the new cheat sheet.
>>>>> If they are not clear / you are not convinced, we can discuss more. Below
>>>>> is the summary of my response to your questions (you will find the same
>>>>> gist going through the cheat sheet as well).
>>>>>
>>>>>
>>>>>
>>>>> Go through [2] to understand more detailed on how flash based bypass
>>>>> on CSRF custom mitigation defense works. You can see there that the origin
>>>>> headers are passed along with the custom headers and hence current wiki
>>>>> asks to do origin and/or referrer header check as defense-in-depth (it
>>>>> would help even if flash sometime in the future repeats same mistake and
>>>>> forwards custom headers without crossdomain.xml checks. Domain requesting
>>>>> the redirected request might be fooled with custom header bypass but not
>>>>> the origin header check). If both these checks are done, it is indeed a
>>>>> good defense but origin header is not always included etc. (just as Jim
>>>>> mentioned and also as new cheatsheet mentions).  I don?t think deprecating
>>>>> custom header check is a good idea. It is indeed a good solution for
>>>>> stateless services though they have to keep issues like I mentioned before
>>>>> in mind. Your statement of custom header itself doesn?t mitigate CSRF
>>>>> relies on the fact that ?Flash being vulnerable to same bug again in
>>>>> future?. We cannot rely on a future statement and deprecate a technique,
>>>>> instead providing defense in depth measure for it and also cautioning users
>>>>> about past issues might be good idea. Users can take their call. Please
>>>>> read custom headers and origin check sections I re-wrote for more
>>>>> in-details. It talks about the issues and people can select if they want to
>>>>> use it or not.
>>>>>
>>>>>
>>>>>
>>>>> Also, Login CSRF has nothing to do with custom header mitigation.
>>>>> Login forms are usually handled on <form> tags and custom header mitigation
>>>>> is only applicable on ajax calls because you cannot set custom headers on
>>>>> form tags. It can be applicable if you are doing logins on Ajax/XHR
>>>>> requests in which case my above response from custom header mitigation
>>>>> applies. I also proposed few methods for mitigating login CSRF which aligns
>>>>> with our primary defense on the new cheatsheet (tokens). Please review it
>>>>> as well.
>>>>>
>>>>>
>>>>>
>>>>> Also, CORS has nothing to do with CSRF. I infact added CORS as a
>>>>> technique that should not be used/even thought for CSRF in the new
>>>>> cheatsheet I wrote. Please check that and also read [1]
>>>>>
>>>>>
>>>>>
>>>>> [1]
>>>>> https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
>>>>>
>>>>> [2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/
>>>>>
>>>>>
>>>>>
>>>>> BTW - Here is the link to the new cheat sheet -
>>>>> https://tinyurl.com/y7k9fded
>>>>>
>>>>>
>>>>>
>>>>> Again,  I you are not convinced ? please let me know specific item and
>>>>> we can happily discuss further J Alternatively, you can send us your
>>>>> edits here for review and if it looks good for everyone ? you can edit it
>>>>> in the wiki.
>>>>>
>>>>>
>>>>>
>>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>>> *Sent:* Sunday, October 7, 2018 1:13 PM
>>>>> *To:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>>>>> *Cc:* Jim Manico <jim at manicode.com>; Konakandla, Manideep <
>>>>> mkonakan at amazon.com>; owasp-cheat-sheets at lists.owasp.org
>>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Sync your update with one from Konakandla Manideep please ?
>>>>>
>>>>>
>>>>>
>>>>> Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>>>>> a ?crit :
>>>>>
>>>>> Aloha Jim!
>>>>>
>>>>> With XSS, even CSRF tokens can be stolen :).
>>>>>
>>>>> But I'll keep your tip in mind when editing the wiki. I'm planning to
>>>>> do that sometime this month.
>>>>>
>>>>> Please feel free to review it whenever you guys get a chance.
>>>>>
>>>>>
>>>>>
>>>>> Best,
>>>>>
>>>>> Pankaj
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com> wrote:
>>>>>
>>>>> I agree JWT's architectures *where cookies are not involved* are
>>>>> resistant to CSRF but those tokens are at the risk of being stolen over XSS!
>>>>>
>>>>> The Origin header does not go with all requests and FireFox does not
>>>>> fully support it yet. So careful!
>>>>>
>>>>> :)
>>>>>
>>>>>
>>>>>
>>>>> On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
>>>>>
>>>>> I agree and that's why I would like to propose deprecation of 'custom
>>>>> header approach' as a CSRF defense.
>>>>> Presently the mechanism that seems to work across applications is
>>>>> validating custom header as well as a forbidden header name (that cannot be
>>>>> set by a software or a program) e.g. Origin. If we want to give it a new
>>>>> name like 'Double Header Validation' or something else, I'm fine with that
>>>>> but custom header alone doesn't seem sufficient to mitigate CSRF issue.
>>>>>
>>>>>
>>>>>
>>>>> There are some other best practices that should also be considered. I
>>>>> think CORS is now mature enough to have a mention in the CSRF defense Also,
>>>>> applications utilizing JWT token in the header seem immune to CSRF.
>>>>>
>>>>>
>>>>>
>>>>> Please let me know what you guys think and if allowed, I can go ahead
>>>>> and make some of these edits for your perusal.
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <
>>>>> dominique.righetto at owasp.org> wrote:
>>>>>
>>>>> Good question, I think it's more a point about to be consistent in
>>>>> terms of CSRF check across the application. Indeed, if you begin to perform
>>>>> different kind of CSRF check depending on the feature of the application
>>>>> (login, business feature, reset password...) it becomes risky and you
>>>>> significantly increase the chance to include location in which you will
>>>>> have a CSRF check weakness...
>>>>>
>>>>> --
>>>>> Cordialement, Best regards,
>>>>> Dominique Righetto
>>>>> dominique.righetto at gmail.com
>>>>>
>>>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>>>
>>>>> https://righettod.eu
>>>>> GPG: 323D19BA
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Sat, Oct 6, 2018 at 9:51 PM Pankaj Upadhyay <
>>>>> p.upadhyay9999 at gmail.com> wrote:
>>>>>
>>>>> Do we know, regarding login CSRF, why validating the custom header as
>>>>> well as the Origin/Host header is not a sufficient mitigation?
>>>>>
>>>>>
>>>>>
>>>>> On Fri, Sep 28, 2018 at 9:35 PM Konakandla, Manideep <
>>>>> mkonakan at amazon.com> wrote:
>>>>>
>>>>> Login CSRF is a way of exploiting CSRF on login forms (details here
>>>>> <https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is
>>>>> a line about it in referrer validation section, it was not explained
>>>>> clearly and how it can scale with other techniques such as token based
>>>>> mitigation. No worries, I added a section about it!
>>>>>
>>>>>
>>>>>
>>>>> Finally, I am done with the document from my side and its sent for
>>>>> internal reviews now. It should take 1-2 weeks before it comes to you guys.
>>>>> Meanwhile, I still need help on below items from you guys. If no one was
>>>>> able to find references for a), we can very well remove it.
>>>>>
>>>>>
>>>>>
>>>>> a.     Under double submit cookie section, it is mentioned that DWR
>>>>> uses that approach but I could not find that anywhere within DWR
>>>>> documentation that it uses double submit cookie. Can someone help me
>>>>> finding reference if they know any?
>>>>>
>>>>> b.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>>>> in the wiki
>>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>>>> to me like there are latest resources than the one?s linked in current
>>>>> cheatsheet
>>>>>
>>>>>
>>>>>
>>>>> Happy weekend folks J
>>>>>
>>>>>
>>>>>
>>>>> *From:* Jim Manico <jim at manicode.com>
>>>>> *Sent:* Thursday, September 27, 2018 3:02 AM
>>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>>> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Jim Manico <
>>>>> jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>;
>>>>> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
>>>>> *Subject:* Re:
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> ...as for (d) I dont see any problems with passing tokens as headers
>>>>> or parameters
>>>>>
>>>>>
>>>>>
>>>>> I dont understand (e) can you explain that again?
>>>>>
>>>>> --
>>>>>
>>>>> Jim Manico
>>>>>
>>>>> @Manicode
>>>>>
>>>>> Secure Coding Education
>>>>>
>>>>> +1 (808) 652-3805
>>>>>
>>>>>
>>>>> On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com>
>>>>> wrote:
>>>>>
>>>>> 2 more questions added  (Jim already started helping me on #a)
>>>>>
>>>>>
>>>>>
>>>>> a.     I requested for an OWASP account and it?s still in pending.
>>>>> @JIM ? Can you please help me in getting my account approved? (registered
>>>>> with mani.konakandla at gmail.com)
>>>>>
>>>>> b.     Under double submit cookie section, it is mentioned that DWR
>>>>> uses that approach but I could not find that anywhere within DWR
>>>>> documentation that it uses double submit cookie. Can someone help me
>>>>> finding reference if they know any?
>>>>>
>>>>> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>>>> in the wiki
>>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>>>> to me like there are latest resources than the one?s linked
>>>>>
>>>>> d.     At few places within the wiki, I have seen recommending to
>>>>> include token in headers for Ajax requests. I also don?t see a problem in
>>>>> passing them as parameters as well. Do you guys see any?
>>>>>
>>>>> e.     I also have not seen at any place within the wiki talking
>>>>> about login CSRF issues and how each of the techniques described can be
>>>>> prone/immune to it. Is there any reason for it or are we open to include
>>>>> that?
>>>>>
>>>>>
>>>>>
>>>>> *From:* Konakandla, Manideep
>>>>> *Sent:* Wednesday, September 26, 2018 5:27 PM
>>>>> *To:* 'Jim Manico' <jim at manicode.com>; 'Dominique Righetto' <
>>>>> dominique.righetto at owasp.org>
>>>>> *Cc:* 'Jim Manico' <jim.manico at owasp.org>; 'Dave Wichers' <
>>>>> dave.wichers at owasp.org>; 'eric.sheridan at owasp.org' <
>>>>> eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org
>>>>> *Subject:* RE:
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Yeah. My understanding of the breadth of exploitation of XSS in an
>>>>> application protected with just origin/referrer and other application
>>>>> protected with just token based mitigation earlier was wrong. Dominique
>>>>> earlier email thread cleared that to me (breadth of exploitation is same in
>>>>> both the cases. i.e., if an XSS vulnerability is found in any individual
>>>>> application protected with only one of those techniques, it still can
>>>>> exploit all state changing operations on entire application [though the
>>>>> complexity of exploitation is easy in origin/referrer check than token
>>>>> based mitigation]).
>>>>>
>>>>>
>>>>>
>>>>> Anyway, I am all clear and also almost done with re-factoring the
>>>>> cheatsheet  [1] J Should be fully completed by Friday unless
>>>>> something comes up meanwhile. I will then send it to my colleagues for
>>>>> review and then for Legal, PR approvals. Before that, I need help from you
>>>>> guys on below items
>>>>>
>>>>>
>>>>>
>>>>> a.     I requested for an OWASP account and it?s still in pending.
>>>>> @JIM ? Can you please help me in getting my account approved? (registered
>>>>> with mani.konakandla at gmail.com)
>>>>>
>>>>> b.     Under double submit cookie section, it is mentioned that DWR
>>>>> uses that approach but I could not find that anywhere within DWR
>>>>> documentation that it uses double submit cookie. Can someone help me
>>>>> finding reference if they know any?
>>>>>
>>>>> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>>>> in the wiki
>>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>>>> to me like there are latest resources than the one?s linked
>>>>>
>>>>>
>>>>>
>>>>> [1] Below are changes done so far
>>>>>
>>>>> a. Switched primary, secondary defense and our reasoning behind it
>>>>> (added lot of reasons on issues with origin/referrer header check and why
>>>>> token should be made primary)
>>>>>
>>>>> b. Added CSRF mitigation myths (CORS, content-type validation etc.)
>>>>>
>>>>> c. Added a section called ?Not so popular CSRF mitigations? (mentioned
>>>>> details about triple submit cookie)
>>>>>
>>>>> d. Included limitations / issues associated with double submit cookie,
>>>>> same site cookie, captcha as a CSRF defense etc.
>>>>>
>>>>> e. Removed lot of obsolete content and added some new content to some
>>>>> of the mitigations
>>>>>
>>>>> f. Made document look more better by adding RFC?s links wherever
>>>>> possible and lot of other minor changes.
>>>>>
>>>>>
>>>>>
>>>>> *From:* Jim Manico <jim at manicode.com>
>>>>> *Sent:* Wednesday, September 26, 2018 4:19 PM
>>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>; Dominique Righetto <
>>>>> dominique.righetto at owasp.org>
>>>>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>>>>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>>>>> *Subject:* Re:
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Well tokens can be placed in cookies.
>>>>>
>>>>> The real answer to avoid CSRF is tokens in JavaScript variable as
>>>>> opposed to cookies. They are not automatically sent and indeed make CSRF
>>>>> impossible - at the expense of tokens being fully stolen via XSS. Pick your
>>>>> poison!
>>>>>
>>>>> I recommend a COMBO of these defenses. For web apps, sychronizer token
>>>>> + header verification + re-authentication for sensitive features.
>>>>>
>>>>> For API's double-cookie submit or just use JavaScript variable based
>>>>> tokens + header verification for same-site API's + re-authentication for
>>>>> sensitive features.
>>>>>
>>>>> > [1] If there is an XSS vulnerability at a single place on a domain
>>>>> (it can add custom header), it can be used to make CSRF *on all other
>>>>> state changing operationswithin that domain *done to that AJAX
>>>>> endpoint. Do you agree?
>>>>>
>>>>>
>>>>>
>>>>> Absolutely!
>>>>>
>>>>>
>>>>>
>>>>> On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
>>>>>
>>>>> Yeah, I understand that any XSS and CSRF game is over but I am
>>>>> stressing out on the highlighted part in [1]. I am trying to highlight and
>>>>> get an affirmation on why my understanding on token based mitigation is
>>>>> better than origin/referrer header check will also apply to ?token based
>>>>> mitigation Vs custom header mitigation (if static tokens are used in custom
>>>>> headers)?.
>>>>>
>>>>>
>>>>>
>>>>> In case of tokens, we have an option to use different tokens on each
>>>>> page (taking things like URL, timestamp etc. into consideration) and hence
>>>>> XSS vulnerability on one page will only make state changing operations in
>>>>> that page vulnerable to CSRF but not state changing operations on other
>>>>> pages within that domain (because token value is different) but whereas in
>>>>> origin/referrer header check and custom header check, the token value is
>>>>> constant and hence XSS vulnerability in one page will also cause state
>>>>> changing operations in other pages to be vulnerable to CSRF as well. Off
>>>>> course, this can be mitigated in custom header checks by adding tokens to
>>>>> custom headers rather than static constant but this cannot be mitigated in
>>>>> origin/referrer check because those headers cannot be modified. So, yeah a
>>>>> single XSS any CSRF is bypassed but the breadth of the impact is different
>>>>> for each of them.
>>>>>
>>>>>
>>>>>
>>>>> Regarding code samples ? I currently was able to allocate only some
>>>>> time for this task and I don?t think I will be able to do code samples
>>>>> within this time frame. I am also leaving for a long vacation starting Oct
>>>>> 12 and hence let?s try to get this out first and we can add code samples
>>>>> later on considering my work load after I return from vacation.
>>>>>
>>>>>
>>>>>
>>>>> [1] If there is an XSS vulnerability at a single place on a domain (it
>>>>> can add custom header), it can be used to make CSRF *on all other
>>>>> state changing operationswithin that domain *done to that AJAX
>>>>> endpoint. Do you agree?
>>>>>
>>>>>
>>>>>
>>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>>> <dominique.righetto at owasp.org>
>>>>> *Sent:* Thursday, September 20, 2018 8:45 AM
>>>>> *To:* Jim Manico <jim at manicode.com> <jim at manicode.com>
>>>>> *Cc:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
>>>>> Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave
>>>>> Wichers <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>>>>> eric.sheridan at owasp.org
>>>>> *Subject:* Re:
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Hi,
>>>>>
>>>>>
>>>>>
>>>>> Thanks for your contribution.
>>>>>
>>>>>
>>>>>
>>>>> I like very much your plan ?
>>>>>
>>>>>
>>>>>
>>>>> I ask for some favor in addition :
>>>>>
>>>>> - can you provide code sample (in one language like java or .net or
>>>>> the one you want but it must be easy to read and understand) or libraires
>>>>> along your proposal for each section?
>>>>>
>>>>> - can you use the syntaxhighlight tag for code?
>>>>>
>>>>>
>>>>>
>>>>> I'am agree with Jim, XSS  means game over because your browsing
>>>>> context can be used as proxy so csrf protection will be defeated because
>>>>> request came from the legitimate user.
>>>>>
>>>>>
>>>>>
>>>>> Thanks you again for all your help ???
>>>>>
>>>>>
>>>>>
>>>>> Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com> a ?crit :
>>>>>
>>>>> > If there is an XSS vulnerability at a single place on a domain (it
>>>>> can add custom header), it can be used to make CSRF on all other state
>>>>> changing operations within that domain done to that AJAX endpoint. Do you
>>>>> agree?
>>>>>
>>>>> Any XSS is game over and all CSRF are useless in the face of XSS. I
>>>>> Agree!
>>>>>
>>>>> - Jim
>>>>>
>>>>>
>>>>>
>>>>> On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
>>>>>
>>>>> Hey Guys,
>>>>>
>>>>>
>>>>>
>>>>> [1] is what I said for origin/referrer header check in this e-mail
>>>>> thread. I also believe that this applies for custom headers for AJAX
>>>>> endpoints as well. If there is an XSS vulnerability at a single place on a
>>>>> domain (it can add custom header), it can be used to make CSRF on all other
>>>>> state changing operations within that domain done to that AJAX endpoint. Do
>>>>> you agree?
>>>>>
>>>>>
>>>>>
>>>>> Here is how I am keeping the new re-factored cheatsheet. Does this
>>>>> look good to you guys?
>>>>>
>>>>>
>>>>>
>>>>> 1.       Use token based method as primary defense
>>>>>
>>>>> a.       Can use synchronizer pattern for stateful applications
>>>>>
>>>>> b.       Can use hah based/ encryption based token pattern for
>>>>> stateless applications
>>>>>
>>>>> 2.       Defense in depth measures along with drawbacks of each one
>>>>>
>>>>> a.       Origin/referrer header check
>>>>>
>>>>> b.       Double submit cookie
>>>>>
>>>>> c.       Samesite cookie
>>>>>
>>>>> d.       Custom headers (people still need to use tokens for forms
>>>>> etc. if they have mix of ajax endpoints and general HTML)
>>>>>
>>>>> 3.       Strong CSRF defenses but very less usable : captcha etc.
>>>>>
>>>>> 4.       CSRF Myths / techniques that do not work section
>>>>>
>>>>>
>>>>>
>>>>> [1] if we solely rely on origin/referrer header check - an XSS
>>>>> vulnerability within a single page on that domain will also give CSRF
>>>>> vulnerability to all other state changing operations under that entire
>>>>> domain.
>>>>>
>>>>>
>>>>>
>>>>> *From:* Dominique Righetto <span st <dominique.righetto at owasp.org>
>>>>>
>>>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190208/5ac3d5f0/attachment-0001.html>

From jim.manico at owasp.org  Fri Feb  8 17:47:31 2019
From: jim.manico at owasp.org (Jim Manico)
Date: Fri, 8 Feb 2019 07:47:31 -1000
Subject: [OWASP-cheat-sheets]
 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CANos97dHxj6B0H+br7-NKxJkAhZT-Bm525i0DqHwoeAR=Hjnkg@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<46fa44e0bd7941eaa029659ca8f3291f@EX13D11UWB004.ant.amazon.com>
	<CANos97csCLS8cgWwduXWt520AcT5Z_sfRXbNUc=Yq6+P8Tx1UA@mail.gmail.com>
	<ea0ad8742d904ea792880b77e6e81678@EX13D11UWB004.ant.amazon.com>
	<70E7657A-CA1F-4BD7-ADF7-07A85CD08E6B@manicode.com>
	<37df98b064aa4b39af8d0e585638b3c4@EX13D11UWB004.ant.amazon.com>
	<CANos97cXnfb_foCaPaYXQEGRnphTQu8P_KC7pXwkeb7_ak0m-A@mail.gmail.com>
	<2bf303591c134e949d52c3d8d5a155d0@EX13D11UWB004.ant.amazon.com>
	<CANos97c6xDAycEr=YY_LaDWaffohmq17Cy1o9iSDPSYBaUa4_A@mail.gmail.com>
	<92ffc47ab9d14f4f9723d1feca90e1ab@EX13D11UWB004.ant.amazon.com>
	<CANos97dTh0Tia6MftWq-_kWFzejWx7o0Uh=NyC8W_=jVpCUdOQ@mail.gmail.com>
	<e832f8afafc945e3b65cd5f17fe15c6b@EX13D11UWB004.ant.amazon.com>
	<CANos97ew=HjNnO+TSgUL55x8WPyzpuKhjERwmvHqEyx5XYMvTg@mail.gmail.com>
	<CAMjpMgcykhmtoA32F+BDZ=8nRkT8z-oM_HX=6Z2kdmKdHvAjUQ@mail.gmail.com>
	<CANos97dHxj6B0H+br7-NKxJkAhZT-Bm525i0DqHwoeAR=Hjnkg@mail.gmail.com>
Message-ID: <6714ef10-aee3-6720-023d-a4dbc9399b3c@owasp.org>

We already as leaders made the call to move to the official OWASP
GitHub. The Wiki is highly limited. We're close to deleting those pages
and just reference Github. That way we have a comment system and a
mature process for tracking requests.

It's already a done deal at this point, I'm sorry Dave.

Aloha, Jim

On 2/8/19 6:40 AM, Dominique Righetto wrote:
> Section "Migration Pending" from
> https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series
>
> I understand that you don't follow our communication channel but we
> use it to communicate and it's the communication process choosen by
> the project and we have many good feedback about it. Slack members of
> the CS channel increase at a high speed.
>
> I respect your point of view but, as PL, the wiki mode allow
> uncontrolled process of edition/creation and Jim/Me are
> responsible/accountable for the quality/integrity of the CS/projects.
> Moreover the wiki do not allow integration into CI for create others
> format or automate control. GH allow also a fully open discution about
> any operation on CS.
>
> I respect also the fact that you do not like the gihub way but it's
> the new way followed by new owasp projects (masvs, mstg, asvs,
> proactive control and the top 10) and it faciliate the contribution
> even if you dont like it. It's more easy to create a GH account than
> an OWASP one.
>
> If you dont like this way at the point that it block your to
> contribute then i understand and respect your position but as PL
> Jim/Me has decided this way so we will continue the road wihtout you
> even if we thanks you very very much for your contribution.
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com <mailto:dominique.righetto at gmail.com>
> <mailto:dominique.righetto at gmail.com>dominique.righetto at owasp.org
> <mailto:dominique.righetto at gmail.com>
> https://righettod.eu
> GPG: 323D19BA
>
>
> On Fri, Feb 8, 2019 at 5:27 PM Dave Wichers <dave.wichers at owasp.org
> <mailto:dave.wichers at owasp.org>> wrote:
>
>     Clearly indicated on the home page where?? And I don't follow
>     OWASP on Slack or Twitter so I was completely unaware of this.?
>     You say follow 'the process' but I can't find it anywhere.
>
>     If you really don't want the cheat sheets to be edited, lock them,
>     and put notes ON the cheat sheets themselves about what the
>     process is/where to find them.
>
>     I'm also concerned that this process will make it MUCH harder to
>     contribute, reducing people's willingness to do so (like me).
>
>     -Dave
>
>
>     On Thu, Feb 7, 2019 at 11:54 PM Dominique Righetto
>     <dominique.righetto at owasp.org
>     <mailto:dominique.righetto at owasp.org>> wrote:
>
>         Hello all
>
>         Since december wiki update of cs are deprecated. It is clearly
>         indicated on the homepage and slack and Twitter and GitHub
>         since 3 month.
>
>         If you modify the wiki your update will simply be ignored and
>         lost.
>
>         Please follow the process.
>
>         All modification and creation of cs is now controlled by Jim
>         and me as PL along Continuous Integration process.
>
>         Le ven. 8 f?vr. 2019 ? 00:43, Konakandla, Manideep
>         <mkonakan at amazon.com <mailto:mkonakan at amazon.com>> a ?crit?:
>
>             Hi Dave - Let?s continue our discussion here so that we
>             have everything tracked in the cheat sheet email list
>             (copying our 1:1 conversation below).
>
>             ?
>
>             I really appreciate your support in the changes. I have
>             few comments below
>
>             ?
>
>             a)?????? Dominique and Jim decided to move cheat sheets to
>             Github. So, all new changes should be on Github CSRF
>             <https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md>
>             page. I think they are also working on deprecating the old
>             wiki pages on OWASP. I am fine with all your changes (as
>             most of them are cosmetic/grammatical/structural) except
>             [1]. If you don?t mind, can you do these changes on the
>             Github? I am fine with you moving the reference example to
>             a different page as well. I have plans to add some other
>             content (not anytime in next month) during which I will
>             also try to trim the content as much as possible.
>
>             b)????? ?If a developer forgets to add the token to any
>             state changing operation, they are making the application
>             vulnerable to CSRF." is flat out wrong.? If a dev forgets
>             to add a token, then the server is simply going to reject
>             the request. It's not going to be vulnerable.? If you
>             agree, can you fix this?
>
>             >> You are ?assuming? here that the server has a token
>             verification system which is not true by default. By
>             default, all applications are vulnerable to CSRF unless
>             developers add tokens / the system has a token
>             verification system.
>
>             c)?????? I am removing the changes related to [1] for now
>             as they are clearly contradicting what we have in other
>             parts of the cheat sheet. If you disagree, I am open to
>             discussion before we get them back to the cheatsheet
>             again. I might be missing something and I would love to
>             hear your side of the story.
>
>             ?
>
>             *1.*Earlier, I rejected both the techniques you mentioned
>             in ?Stateless/Tokenless Defense Techniques? to be in
>             primary because
>
>             *1.1*X-Requested-With: XMLHttpRequest Header: For the same
>             FLASH related reasons mentioned under this
>             <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Use_of_Custom_Request_Headers>
>             section. On a separate thread, I was working with Riyaz
>             who authored this
>             <https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b>
>             blog and you wouldn?t believe how many old browser
>             versions are still vulnerable to this FLASH based redirect
>             CSRF vulnerability. He also gave link to a HTML wrapper
>             which seems to make this attack work on newer Chrome
>             versions as well. If you are interested, I can provide
>             more details about these. Hence, I don?t want users to be
>             vulnerable by using this as a primary defense.
>
>             *1.2 *Not a Simple HTTP Request Verification: Again, this
>             is a technique that I rejected in the later section
>             <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Content-Type_Header_Validation>
>             of the document along with the reasoning.
>
>             ?
>
>             I just made some changes, feel free to review.
>
>             ?
>
>             I also think this comment: "If a developer forgets to add
>             the token to any state changing operation, they are making
>             the application vulnerable to CSRF." is flat out wrong.?
>             If a dev forgets to add a token, then the server is simply
>             going to reject the request. It's not going to be
>             vulnerable.? If you agree, can you fix this?
>
>             ?
>
>             The article is also REALLY LONG. If you can identify
>             anything to trim out, that would be great. I just trimmed
>             out a few things, but I think we can do a lot more. Cheat
>             sheets are supposed to be SHORT, but I realize many are not.
>
>             ?
>
>             For example, maybe we can move the reference example to a
>             completely different page? That would shorten this alot.
>
>             https://ssl.gstatic.com/ui/v1/icons/mail/images/cleardot.gif
>
>             ?
>
>             -Dave
>
>             ?
>
>             ?
>
>             On Wed, Feb 6, 2019 at 5:25 PM manideep konakandla
>             <mani.konakandla at gmail.com
>             <mailto:mani.konakandla at gmail.com>> wrote:
>
>             Yes. All those changes passed through review on email list
>             but yes, please feel free to provide any more comments.?
>
>             ?
>
>             On Wed, Feb 6, 2019, 1:21 PM Dave Wichers
>             <dave.wichers at owasp.org <mailto:dave.wichers at owasp.org>?wrote:
>
>             Are you:??Manideepk
>             <https://www.owasp.org/index.php/User:Manideepk>?on the
>             OWASP site?
>
>             ?
>
>             I have some questions/comments about your changes to the
>             OWASP CSRF Cheat Sheet.
>
>             ?
>
>             The bulk of those changes are
>             here:?https://www.owasp.org/index.php?title=Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet&type=revision&diff=244184&oldid=242455
>
>             ?
>
>             If this is you, I'll provide more details, but wanted to
>             make sure I'm in touch with the right person first.
>
>             ?
>
>             -Dave
>
>             ?
>
>             *From:*Dominique Righetto <dominique.righetto at owasp.org
>             <mailto:dominique.righetto at owasp.org>>
>             *Sent:* Sunday, December 23, 2018 4:13 AM
>             *To:* Konakandla, Manideep <mkonakan at amazon.com
>             <mailto:mkonakan at amazon.com>>
>             *Cc:* Jim Manico <jim at manicode.com
>             <mailto:jim at manicode.com>>;
>             owasp-cheat-sheets at lists.owasp.org
>             <mailto:owasp-cheat-sheets at lists.owasp.org>
>             *Subject:* Re: [OWASP-cheat-sheets]
>             https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>             ?
>
>             Thanksyou very much for your support ???
>
>             ?
>
>             Le sam. 22 d?c. 2018 ? 22:24, Konakandla, Manideep
>             <mkonakan at amazon.com <mailto:mkonakan at amazon.com>> a ?crit?:
>
>                 Let me know once the migration is started. I will do
>                 it for the CSRF prevention cheatsheet page J
>
>                 ?
>
>                 *From:*Dominique Righetto
>                 <dominique.righetto at owasp.org
>                 <mailto:dominique.righetto at owasp.org>>
>                 *Sent:* Saturday, December 22, 2018 12:29 AM
>                 *To:* Konakandla, Manideep <mkonakan at amazon.com
>                 <mailto:mkonakan at amazon.com>>
>                 *Cc:* Jim Manico <jim at manicode.com
>                 <mailto:jim at manicode.com>>;
>                 owasp-cheat-sheets at lists.owasp.org
>                 <mailto:owasp-cheat-sheets at lists.owasp.org>
>                 *Subject:* Re: [OWASP-cheat-sheets]
>                 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>                 ?
>
>                 Hello Manideep,
>
>                 ?
>
>                 Thanks you for the update.
>
>                 ?
>
>                 For info we will migrate the entire project content
>                 (unless the homepage) to github so it is possible that
>                 you need to also made the update on the github repository.
>
>                 ?
>
>                 The migration work will start on January, i will take
>                 some rest until January, i really need it.
>
>                 ?
>
>                 Thanks you very much for your help on this project :)
>
>                 ?
>
>                 Happy holidays too
>
>
>                 --
>                 Cordialement, Best regards,
>                 Dominique Righetto
>                 dominique.righetto at gmail.com
>                 <mailto:dominique.righetto at gmail.com>
>
>                 dominique.righetto at owasp.org
>                 <mailto:dominique.righetto at gmail.com>
>
>                 https://righettod.eu
>                 GPG: 323D19BA
>
>                 ?
>
>                 ?
>
>                 On Sat, Dec 22, 2018 at 3:40 AM Konakandla, Manideep
>                 <mkonakan at amazon.com <mailto:mkonakan at amazon.com>> wrote:
>
>                     Hello all,
>
>                     ?
>
>                     I made a change to ?Double Submit Cookie?
>                     technique [1]. I added a variant to it which now
>                     mitigates well-known security issues with standard
>                     ?Double Submit Cookie? technique. So, people can
>                     use this technique without any issues. Please let
>                     me know if anyone finds any issues within it.
>
>                     ?
>
>                     Whenever I get some free time in next 1-2 months,
>                     I am planning to include
>
>                     a)?????? Details about popular 6-7 web frameworks
>                     and the CSRF mitigations implemented by them
>
>                     b)????? Re-organize the page even more better by
>                     switching variant of double submit cookie to
>                     primary defense (under stateless section) etc.
>
>                     ?
>
>                     Happy holidays everyone J
>
>                     ?
>
>                     [1]
>                     ?https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Double_Submit_Cookie?
>                     (read the last para under this mitigation)
>
>                     ?
>
>                     ?
>
>                     *From:*Dominique Righetto
>                     <dominique.righetto at owasp.org
>                     <mailto:dominique.righetto at owasp.org>>
>                     *Sent:* Saturday, October 13, 2018 12:59 AM
>                     *To:* Konakandla, Manideep <mkonakan at amazon.com
>                     <mailto:mkonakan at amazon.com>>
>                     *Cc:* Jim Manico <jim at manicode.com
>                     <mailto:jim at manicode.com>>; Pankaj Upadhyay
>                     <p.upadhyay9999 at gmail.com
>                     <mailto:p.upadhyay9999 at gmail.com>>;
>                     owasp-cheat-sheets at lists.owasp.org
>                     <mailto:owasp-cheat-sheets at lists.owasp.org>
>                     *Subject:* Re: [OWASP-cheat-sheets]
>                     https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>                     ?
>
>                     Hi,
>
>                     CS publishing released and notification sent to
>                     the community via Twitter and Slack channel.
>
>                     --
>                     Cordialement, Best regards,
>                     Dominique Righetto
>                     dominique.righetto at gmail.com
>                     <mailto:dominique.righetto at gmail.com>
>
>                     dominique.righetto at owasp.org
>                     <mailto:dominique.righetto at gmail.com>
>
>                     https://righettod.eu
>                     GPG: 323D19BA
>
>                     ?
>
>                     ?
>
>                     On Fri, Oct 12, 2018 at 3:47 AM Konakandla,
>                     Manideep <mkonakan at amazon.com
>                     <mailto:mkonakan at amazon.com>> wrote:
>
>                         Yes, I am feeling way better now. Thank you J
>
>                         ?
>
>                         *@ALL: *Cheat sheet is updated with all the
>                         changes now
>                         <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>.
>                         Please let me know if you have any issues by
>                         end of tomorrow. If there are no issues - I/we
>                         can start advertising the refactored cheat
>                         sheet in our networks J
>
>                         ?
>
>                         Thanks a ton *Dominique* and *Jim* for all
>                         your help till date. I really appreciate it!!!
>                         I will be actively maintaining this as well
>                         from today J
>
>                         ?
>
>                         Regards,
>
>                         Manideep Konakandla
>
>                         www.manideepk.com <http://www.manideepk.com>
>
>                         Security Engineer @ Amazon
>
>                         mkonakan at amazon.com <mailto:mkonakan at amazon.com>
>
>                         ?
>
>                         *From:*Jim Manico <jim at manicode.com
>                         <mailto:jim at manicode.com>>
>                         *Sent:* Wednesday, October 10, 2018 10:39 PM
>                         *To:* Konakandla, Manideep
>                         <mkonakan at amazon.com <mailto:mkonakan at amazon.com>>
>                         *Cc:* Dominique Righetto
>                         <dominique.righetto at owasp.org
>                         <mailto:dominique.righetto at owasp.org>>; Pankaj
>                         Upadhyay <p.upadhyay9999 at gmail.com
>                         <mailto:p.upadhyay9999 at gmail.com>>;
>                         owasp-cheat-sheets at lists.owasp.org
>                         <mailto:owasp-cheat-sheets at lists.owasp.org>
>                         *Subject:* Re: [OWASP-cheat-sheets]
>                         https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>                         ?
>
>                         Go for it!!! I hope you?re feeling better!
>
>                         --
>
>                         Jim Manico
>
>                         @Manicode
>
>                         ?
>
>
>                         On Oct 10, 2018, at 10:18 PM, Konakandla,
>                         Manideep <mkonakan at amazon.com
>                         <mailto:mkonakan at amazon.com>> wrote:
>
>                             Sorry for late reply. I was on sick leave
>                             for last 2 days.
>
>                             ?
>
>                             I synced up with Dominique in a different
>                             email chain to clarify something in his
>                             previous email. He gave me a go ahead to
>                             update wiki with new re-factored cheat
>                             sheet. I am planning to do it sometime
>                             tomorrow. *@Jim*: Is it with fine with you
>                             as well? Please let me know if you have
>                             any concerns.
>
>                             ?
>
>                             *From:*Dominique Righetto
>                             <dominique.righetto at owasp.org
>                             <mailto:dominique.righetto at owasp.org>>
>                             *Sent:* Monday, October 8, 2018 1:47 AM
>                             *To:* Konakandla, Manideep
>                             <mkonakan at amazon.com
>                             <mailto:mkonakan at amazon.com>>
>                             *Cc:* Pankaj Upadhyay
>                             <p.upadhyay9999 at gmail.com
>                             <mailto:p.upadhyay9999 at gmail.com>>; Jim
>                             Manico <jim at manicode.com
>                             <mailto:jim at manicode.com>>;
>                             owasp-cheat-sheets at lists.owasp.org
>                             <mailto:owasp-cheat-sheets at lists.owasp.org>
>                             *Subject:* Re: [OWASP-cheat-sheets]
>                             https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>                             ?
>
>                             Hello all,
>
>                             ?
>
>                             In order to move forward and deliver
>                             something in the project please update the
>                             wiki with content from the refactoring
>                             from Konakandla Manideep. If there missing
>                             points they will be added in another round
>                             it is the role of the wiki based usage.
>
>                             ?
>
>                             Thanks in advance for your understanding ?
>
>                             ?
>
>                             Le lun. 8 oct. 2018 ? 10:11, Konakandla,
>                             Manideep <mkonakan at amazon.com
>                             <mailto:mkonakan at amazon.com>> a ?crit?:
>
>                                 Hey Folks J
>
>                                 ?
>
>                                 Good conversation :) Can you guys
>                                 review the new cheat sheet once? I am
>                                 sure most of the discussion going on
>                                 here is already answered in the new
>                                 re-factored cheat sheet I wrote.
>
>                                 ?
>
>                                 @Pankaj ? Go through the respective
>                                 sections in the new cheat sheet. If
>                                 they are not clear / you are not
>                                 convinced, we can discuss more. Below
>                                 is the summary of my response to your
>                                 questions (you will find the same gist
>                                 going through the cheat sheet as well).
>
>                                 ?
>
>                                 Go through [2] to understand more
>                                 detailed on how flash based bypass on
>                                 CSRF custom mitigation defense works.
>                                 You can see there that the origin
>                                 headers are passed along with the
>                                 custom headers and hence current wiki
>                                 asks to do origin and/or referrer
>                                 header check as defense-in-depth (it
>                                 would help even if flash sometime in
>                                 the future repeats same mistake and
>                                 forwards custom headers without
>                                 crossdomain.xml checks. Domain
>                                 requesting the redirected request
>                                 might be fooled with custom header
>                                 bypass but not the origin header
>                                 check). If both these checks are done,
>                                 it is indeed a good defense but origin
>                                 header is not always included etc.
>                                 (just as Jim mentioned and also as new
>                                 cheatsheet mentions).? I don?t think
>                                 deprecating custom header check is a
>                                 good idea. It is indeed a good
>                                 solution for stateless services though
>                                 they have to keep issues like I
>                                 mentioned before in mind. Your
>                                 statement of custom header itself
>                                 doesn?t mitigate CSRF relies on the
>                                 fact that ?Flash being vulnerable to
>                                 same bug again in future?. We cannot
>                                 rely on a future statement and
>                                 deprecate a technique, instead
>                                 providing defense in depth measure for
>                                 it and also cautioning users about
>                                 past issues might be good idea. Users
>                                 can take their call. Please read
>                                 custom headers and origin check
>                                 sections I re-wrote for more
>                                 in-details. It talks about the issues
>                                 and people can select if they want to
>                                 use it or not.
>
>                                 ?
>
>                                 Also, Login CSRF has nothing to do
>                                 with custom header mitigation. Login
>                                 forms are usually handled on <form>
>                                 tags and custom header mitigation is
>                                 only applicable on ajax calls because
>                                 you cannot set custom headers on form
>                                 tags. It can be applicable if you are
>                                 doing logins on Ajax/XHR requests in
>                                 which case my above response from
>                                 custom header mitigation applies. I
>                                 also proposed few methods for
>                                 mitigating login CSRF which aligns
>                                 with our primary defense on the new
>                                 cheatsheet (tokens). Please review it
>                                 as well.
>
>                                 ?
>
>                                 Also, CORS has nothing to do with
>                                 CSRF. I infact added CORS as a
>                                 technique that should not be used/even
>                                 thought for CSRF in the new cheatsheet
>                                 I wrote. Please check that and also
>                                 read [1]
>
>                                 ?
>
>                                 [1]
>                                 https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
>
>                                 [2]
>                                 https://www.whitehatsec.com/blog/flash-307-redirect-game-over/
>
>                                 ?
>
>                                 BTW - Here is the link to the new
>                                 cheat sheet -
>                                 https://tinyurl.com/y7k9fded
>
>                                 ?
>
>                                 Again, ?I you are not convinced ?
>                                 please let me know specific item and
>                                 we can happily discuss further
>                                 JAlternatively, you can send us your
>                                 edits here for review and if it looks
>                                 good for everyone ? you can edit it in
>                                 the wiki.
>
>                                 ?
>
>                                 *From:*Dominique Righetto
>                                 <dominique.righetto at owasp.org
>                                 <mailto:dominique.righetto at owasp.org>>
>                                 *Sent:* Sunday, October 7, 2018 1:13 PM
>                                 *To:* Pankaj Upadhyay
>                                 <p.upadhyay9999 at gmail.com
>                                 <mailto:p.upadhyay9999 at gmail.com>>
>                                 *Cc:* Jim Manico <jim at manicode.com
>                                 <mailto:jim at manicode.com>>;
>                                 Konakandla, Manideep
>                                 <mkonakan at amazon.com
>                                 <mailto:mkonakan at amazon.com>>;
>                                 owasp-cheat-sheets at lists.owasp.org
>                                 <mailto:owasp-cheat-sheets at lists.owasp.org>
>                                 *Subject:* Re: [OWASP-cheat-sheets]
>                                 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>                                 ?
>
>                                 Sync your update with one from
>                                 Konakandla Manideep please ?
>
>                                 ?
>
>                                 Le dim. 7 oct. 2018 ? 21:54, Pankaj
>                                 Upadhyay <p.upadhyay9999 at gmail.com
>                                 <mailto:p.upadhyay9999 at gmail.com>> a
>                                 ?crit?:
>
>                                     Aloha Jim!
>
>                                     With XSS, even CSRF tokens can be
>                                     stolen :).?
>
>                                     But I'll keep your tip in mind
>                                     when editing the wiki. I'm
>                                     planning to do that sometime this
>                                     month.
>
>                                     Please feel free to review it
>                                     whenever you guys get a chance.
>
>                                     ?
>
>                                     Best,
>
>                                     Pankaj
>
>                                     ?
>
>                                     ?
>
>                                     On Sun, Oct 7, 2018 at 2:59 PM Jim
>                                     Manico <jim at manicode.com
>                                     <mailto:jim at manicode.com>> wrote:
>
>                                         I agree JWT's architectures
>                                         /where cookies are not
>                                         involved/ are resistant to
>                                         CSRF but those tokens are at
>                                         the risk of being stolen over XSS!
>
>                                         The Origin header does not go
>                                         with all requests and FireFox
>                                         does not fully support it yet.
>                                         So careful!
>
>                                         :)
>
>                                         ?
>
>                                         On 10/7/18 9:48 AM, Pankaj
>                                         Upadhyay wrote:
>
>                                             I agree and that's why I
>                                             would like to propose
>                                             deprecation of 'custom
>                                             header approach' as a CSRF
>                                             defense.
>                                             Presently the mechanism
>                                             that seems to work across
>                                             applications is validating
>                                             custom header as well as a
>                                             forbidden header name
>                                             (that cannot be set by a
>                                             software or a program)
>                                             e.g. Origin. If we want to
>                                             give it a new name like
>                                             'Double Header Validation'
>                                             or something else, I'm
>                                             fine with that but custom
>                                             header alone doesn't seem
>                                             sufficient to mitigate
>                                             CSRF issue.
>
>                                             ?
>
>                                             There are some other best
>                                             practices that should also
>                                             be considered. I think
>                                             CORS is now mature enough
>                                             to have a mention in the
>                                             CSRF defense Also,
>                                             applications utilizing JWT
>                                             token in the header seem
>                                             immune to CSRF.
>
>                                             ?
>
>                                             Please let me know what
>                                             you guys think and if
>                                             allowed, I can go ahead
>                                             and make some of these
>                                             edits for your perusal.
>
>                                             ?
>
>                                             ?
>
>                                             On Sun, Oct 7, 2018 at
>                                             2:29 AM Dominique Righetto
>                                             <dominique.righetto at owasp.org
>                                             <mailto:dominique.righetto at owasp.org>>
>                                             wrote:
>
>                                                 Good question, I think
>                                                 it's more a point
>                                                 about to be consistent
>                                                 in terms of CSRF check
>                                                 across the
>                                                 application. Indeed,
>                                                 if you begin to
>                                                 perform different kind
>                                                 of CSRF check
>                                                 depending on the
>                                                 feature of the
>                                                 application (login,
>                                                 business feature,
>                                                 reset password...) it
>                                                 becomes risky and you
>                                                 significantly increase
>                                                 the chance to include
>                                                 location in which you
>                                                 will have a CSRF check
>                                                 weakness...
>
>                                                 --
>                                                 Cordialement, Best
>                                                 regards,
>                                                 Dominique Righetto
>                                                 dominique.righetto at gmail.com
>                                                 <mailto:dominique.righetto at gmail.com>
>
>                                                 dominique.righetto at owasp.org
>                                                 <mailto:dominique.righetto at gmail.com>
>
>                                                 https://righettod.eu
>                                                 GPG: 323D19BA
>
>                                                 ?
>
>                                                 ?
>
>                                                 On Sat, Oct 6, 2018 at
>                                                 9:51 PM Pankaj
>                                                 Upadhyay
>                                                 <p.upadhyay9999 at gmail.com
>                                                 <mailto:p.upadhyay9999 at gmail.com>>
>                                                 wrote:
>
>                                                     Do we know,
>                                                     regarding login
>                                                     CSRF, why
>                                                     validating the
>                                                     custom header as
>                                                     well as the
>                                                     Origin/Host header
>                                                     is not a
>                                                     sufficient mitigation?
>
>                                                     ?
>
>                                                     On Fri, Sep 28,
>                                                     2018 at 9:35 PM
>                                                     Konakandla,
>                                                     Manideep
>                                                     <mkonakan at amazon.com
>                                                     <mailto:mkonakan at amazon.com>>
>                                                     wrote:
>
>                                                         Login CSRF is
>                                                         a way of
>                                                         exploiting
>                                                         CSRF on login
>                                                         forms (details
>                                                         here
>                                                         <https://seclab.stanford.edu/websec/csrf/csrf.pdf>).
>                                                         Though there
>                                                         is a line
>                                                         about it in
>                                                         referrer
>                                                         validation
>                                                         section, it
>                                                         was not
>                                                         explained
>                                                         clearly and
>                                                         how it can
>                                                         scale with
>                                                         other
>                                                         techniques
>                                                         such as token
>                                                         based
>                                                         mitigation. No
>                                                         worries, I
>                                                         added a
>                                                         section about it!
>
>                                                         ?
>
>                                                         Finally, I am
>                                                         done with the
>                                                         document from
>                                                         my side and
>                                                         its sent for
>                                                         internal
>                                                         reviews now.
>                                                         It should take
>                                                         1-2 weeks
>                                                         before it
>                                                         comes to you
>                                                         guys.
>                                                         Meanwhile, I
>                                                         still need
>                                                         help on below
>                                                         items from you
>                                                         guys. If no
>                                                         one was able
>                                                         to find
>                                                         references for
>                                                         a), we can
>                                                         very well
>                                                         remove it.
>
>                                                         ?
>
>                                                         a.???? Under
>                                                         double submit
>                                                         cookie
>                                                         section, it is
>                                                         mentioned that
>                                                         DWR uses that
>                                                         approach but I
>                                                         could not find
>                                                         that anywhere
>                                                         within DWR
>                                                         documentation
>                                                         that it uses
>                                                         double submit
>                                                         cookie. Can
>                                                         someone help
>                                                         me finding
>                                                         reference if
>                                                         they know any?
>
>                                                         b.???? One
>                                                         thing I
>                                                         wouldn?t be
>                                                         reviewing is
>                                                         the ASP.NET
>                                                         <http://ASP.NET>
>                                                         references
>                                                         mentioned in
>                                                         the wiki
>                                                         <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>                                                         Can someone
>                                                         with .NET
>                                                         expertize
>                                                         verify if
>                                                         these are
>                                                         still
>                                                         accurate?
>                                                         Looks to me
>                                                         like there are
>                                                         latest
>                                                         resources than
>                                                         the one?s
>                                                         linked in
>                                                         current cheatsheet
>
>                                                         ?
>
>                                                         Happy weekend
>                                                         folks J
>
>                                                         ?
>
>                                                         *From:*Jim
>                                                         Manico
>                                                         <jim at manicode.com
>                                                         <mailto:jim at manicode.com>>
>
>                                                         *Sent:*
>                                                         Thursday,
>                                                         September 27,
>                                                         2018 3:02 AM
>                                                         *To:*
>                                                         Konakandla,
>                                                         Manideep
>                                                         <mkonakan at amazon.com
>                                                         <mailto:mkonakan at amazon.com>>
>                                                         *Cc:*
>                                                         Dominique
>                                                         Righetto
>                                                         <dominique.righetto at owasp.org
>                                                         <mailto:dominique.righetto at owasp.org>>;
>                                                         Jim Manico
>                                                         <jim.manico at owasp.org
>                                                         <mailto:jim.manico at owasp.org>>;
>                                                         Dave Wichers
>                                                         <dave.wichers at owasp.org
>                                                         <mailto:dave.wichers at owasp.org>>;
>                                                         eric.sheridan at owasp.org
>                                                         <mailto:eric.sheridan at owasp.org>;
>                                                         owasp-cheat-sheets at lists.owasp.org
>                                                         <mailto:owasp-cheat-sheets at lists.owasp.org>
>                                                         *Subject:* Re:
>                                                         https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>                                                         <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>                                                         ?
>
>                                                         ...as for (d)
>                                                         I dont see any
>                                                         problems with
>                                                         passing tokens
>                                                         as headers or
>                                                         parameters
>
>                                                         ?
>
>                                                         I dont
>                                                         understand (e)
>                                                         can you
>                                                         explain that
>                                                         again?
>
>                                                         --
>
>                                                         Jim Manico
>
>                                                         @Manicode
>
>                                                         Secure Coding
>                                                         Education
>
>                                                         +1 (808) 652-3805
>
>
>                                                         On Sep 26,
>                                                         2018, at 4:46
>                                                         PM,
>                                                         Konakandla,
>                                                         Manideep
>                                                         <mkonakan at amazon.com
>                                                         <mailto:mkonakan at amazon.com>>
>                                                         wrote:
>
>                                                             2 more
>                                                             questions
>                                                             added
>                                                             ?(Jim
>                                                             already
>                                                             started
>                                                             helping me
>                                                             on #a)
>
>                                                             ?
>
>                                                             a.???? I
>                                                             requested
>                                                             for an
>                                                             OWASP
>                                                             account
>                                                             and it?s
>                                                             still in
>                                                             pending.
>                                                             @JIM ? Can
>                                                             you please
>                                                             help me in
>                                                             getting my
>                                                             account
>                                                             approved?
>                                                             (registered
>                                                             with
>                                                             mani.konakandla at gmail.com
>                                                             <mailto:mani.konakandla at gmail.com>)
>
>
>                                                             b.????
>                                                             Under
>                                                             double
>                                                             submit
>                                                             cookie
>                                                             section,
>                                                             it is
>                                                             mentioned
>                                                             that DWR
>                                                             uses that
>                                                             approach
>                                                             but I
>                                                             could not
>                                                             find that
>                                                             anywhere
>                                                             within DWR
>                                                             documentation
>                                                             that it
>                                                             uses
>                                                             double
>                                                             submit
>                                                             cookie.
>                                                             Can
>                                                             someone
>                                                             help me
>                                                             finding
>                                                             reference
>                                                             if they
>                                                             know any?
>
>                                                             c.???? One
>                                                             thing I
>                                                             wouldn?t
>                                                             be
>                                                             reviewing
>                                                             is the
>                                                             ASP.NET
>                                                             <http://ASP.NET>
>                                                             references
>                                                             mentioned
>                                                             in the
>                                                             wiki
>                                                             <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>                                                             Can
>                                                             someone
>                                                             with .NET
>                                                             expertize
>                                                             verify if
>                                                             these are
>                                                             still
>                                                             accurate?
>                                                             Looks to
>                                                             me like
>                                                             there are
>                                                             latest
>                                                             resources
>                                                             than the
>                                                             one?s linked
>
>                                                             d.???? At
>                                                             few places
>                                                             within the
>                                                             wiki, I
>                                                             have seen
>                                                             recommending
>                                                             to include
>                                                             token in
>                                                             headers
>                                                             for Ajax
>                                                             requests.
>                                                             I also
>                                                             don?t see
>                                                             a problem
>                                                             in passing
>                                                             them as
>                                                             parameters
>                                                             as well.
>                                                             Do you
>                                                             guys see any?
>
>                                                             e.???? I
>                                                             also have
>                                                             not seen
>                                                             at any
>                                                             place
>                                                             within the
>                                                             wiki
>                                                             talking
>                                                             about
>                                                             login CSRF
>                                                             issues and
>                                                             how each
>                                                             of the
>                                                             techniques
>                                                             described
>                                                             can be
>                                                             prone/immune
>                                                             to it. Is
>                                                             there any
>                                                             reason for
>                                                             it or are
>                                                             we open to
>                                                             include that?
>
>                                                             ?
>
>                                                             *From:*Konakandla,
>                                                             Manideep
>                                                             *Sent:*
>                                                             Wednesday,
>                                                             September
>                                                             26, 2018
>                                                             5:27 PM
>                                                             *To:* 'Jim
>                                                             Manico'
>                                                             <jim at manicode.com
>                                                             <mailto:jim at manicode.com>>;
>                                                             'Dominique
>                                                             Righetto'
>                                                             <dominique.righetto at owasp.org
>                                                             <mailto:dominique.righetto at owasp.org>>
>                                                             *Cc:* 'Jim
>                                                             Manico'
>                                                             <jim.manico at owasp.org
>                                                             <mailto:jim.manico at owasp.org>>;
>                                                             'Dave
>                                                             Wichers'
>                                                             <dave.wichers at owasp.org
>                                                             <mailto:dave.wichers at owasp.org>>;
>                                                             'eric.sheridan at owasp.org
>                                                             <mailto:eric.sheridan at owasp.org>'
>                                                             <eric.sheridan at owasp.org
>                                                             <mailto:eric.sheridan at owasp.org>>;
>                                                             owasp-cheat-sheets at lists.owasp.org
>                                                             <mailto:owasp-cheat-sheets at lists.owasp.org>
>                                                             *Subject:*
>                                                             RE:
>                                                             https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>                                                             <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>                                                             ?
>
>                                                             Yeah. My
>                                                             understanding
>                                                             of the
>                                                             breadth of
>                                                             exploitation
>                                                             of XSS in
>                                                             an
>                                                             application
>                                                             protected
>                                                             with just
>                                                             origin/referrer
>                                                             and other
>                                                             application
>                                                             protected
>                                                             with just
>                                                             token
>                                                             based
>                                                             mitigation
>                                                             earlier
>                                                             was wrong.
>                                                             Dominique
>                                                             earlier
>                                                             email
>                                                             thread
>                                                             cleared
>                                                             that to me
>                                                             (breadth
>                                                             of
>                                                             exploitation
>                                                             is same in
>                                                             both the
>                                                             cases.
>                                                             i.e., if
>                                                             an XSS
>                                                             vulnerability
>                                                             is found
>                                                             in any
>                                                             individual
>                                                             application
>                                                             protected
>                                                             with only
>                                                             one of
>                                                             those
>                                                             techniques,
>                                                             it still
>                                                             can
>                                                             exploit
>                                                             all state
>                                                             changing
>                                                             operations
>                                                             on entire
>                                                             application
>                                                             [though
>                                                             the
>                                                             complexity
>                                                             of
>                                                             exploitation
>                                                             is easy in
>                                                             origin/referrer
>                                                             check than
>                                                             token
>                                                             based
>                                                             mitigation]).
>
>                                                             ?
>
>                                                             Anyway, I
>                                                             am all
>                                                             clear and
>                                                             also
>                                                             almost
>                                                             done with
>                                                             re-factoring
>                                                             the
>                                                             cheatsheet
>                                                             ?[1]
>                                                             JShould be
>                                                             fully
>                                                             completed
>                                                             by Friday
>                                                             unless
>                                                             something
>                                                             comes up
>                                                             meanwhile.
>                                                             I will
>                                                             then send
>                                                             it to my
>                                                             colleagues
>                                                             for review
>                                                             and then
>                                                             for Legal,
>                                                             PR
>                                                             approvals.
>                                                             Before
>                                                             that, I
>                                                             need help
>                                                             from you
>                                                             guys on
>                                                             below items
>
>                                                             ?
>
>                                                             a.???? I
>                                                             requested
>                                                             for an
>                                                             OWASP
>                                                             account
>                                                             and it?s
>                                                             still in
>                                                             pending.
>                                                             @JIM ? Can
>                                                             you please
>                                                             help me in
>                                                             getting my
>                                                             account
>                                                             approved?
>                                                             (registered
>                                                             with
>                                                             mani.konakandla at gmail.com
>                                                             <mailto:mani.konakandla at gmail.com>)
>
>
>                                                             b.????
>                                                             Under
>                                                             double
>                                                             submit
>                                                             cookie
>                                                             section,
>                                                             it is
>                                                             mentioned
>                                                             that DWR
>                                                             uses that
>                                                             approach
>                                                             but I
>                                                             could not
>                                                             find that
>                                                             anywhere
>                                                             within DWR
>                                                             documentation
>                                                             that it
>                                                             uses
>                                                             double
>                                                             submit
>                                                             cookie.
>                                                             Can
>                                                             someone
>                                                             help me
>                                                             finding
>                                                             reference
>                                                             if they
>                                                             know any?
>
>                                                             c.???? One
>                                                             thing I
>                                                             wouldn?t
>                                                             be
>                                                             reviewing
>                                                             is the
>                                                             ASP.NET
>                                                             <http://ASP.NET>
>                                                             references
>                                                             mentioned
>                                                             in the
>                                                             wiki
>                                                             <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>                                                             Can
>                                                             someone
>                                                             with .NET
>                                                             expertize
>                                                             verify if
>                                                             these are
>                                                             still
>                                                             accurate?
>                                                             Looks to
>                                                             me like
>                                                             there are
>                                                             latest
>                                                             resources
>                                                             than the
>                                                             one?s linked
>
>                                                             ?
>
>                                                             [1] Below
>                                                             are
>                                                             changes
>                                                             done so far
>
>                                                             a.
>                                                             Switched
>                                                             primary,
>                                                             secondary
>                                                             defense
>                                                             and our
>                                                             reasoning
>                                                             behind it
>                                                             (added lot
>                                                             of reasons
>                                                             on issues
>                                                             with
>                                                             origin/referrer
>                                                             header
>                                                             check and
>                                                             why token
>                                                             should be
>                                                             made primary)
>
>                                                             b. Added
>                                                             CSRF
>                                                             mitigation
>                                                             myths
>                                                             (CORS,
>                                                             content-type
>                                                             validation
>                                                             etc.)
>
>                                                             c. Added a
>                                                             section
>                                                             called
>                                                             ?Not so
>                                                             popular
>                                                             CSRF
>                                                             mitigations?
>                                                             (mentioned
>                                                             details
>                                                             about
>                                                             triple
>                                                             submit cookie)
>
>                                                             d.
>                                                             Included
>                                                             limitations
>                                                             / issues
>                                                             associated
>                                                             with
>                                                             double
>                                                             submit
>                                                             cookie,
>                                                             same site
>                                                             cookie,
>                                                             captcha as
>                                                             a CSRF
>                                                             defense etc.
>
>                                                             e. Removed
>                                                             lot of
>                                                             obsolete
>                                                             content
>                                                             and added
>                                                             some new
>                                                             content to
>                                                             some of
>                                                             the
>                                                             mitigations
>
>                                                             f. Made
>                                                             document
>                                                             look more
>                                                             better by
>                                                             adding
>                                                             RFC?s
>                                                             links
>                                                             wherever
>                                                             possible
>                                                             and lot of
>                                                             other
>                                                             minor changes.
>
>                                                             ?
>
>                                                             *From:*Jim
>                                                             Manico
>                                                             <jim at manicode.com
>                                                             <mailto:jim at manicode.com>>
>
>                                                             *Sent:*
>                                                             Wednesday,
>                                                             September
>                                                             26, 2018
>                                                             4:19 PM
>                                                             *To:*
>                                                             Konakandla,
>                                                             Manideep
>                                                             <mkonakan at amazon.com
>                                                             <mailto:mkonakan at amazon.com>>;
>                                                             Dominique
>                                                             Righetto
>                                                             <dominique.righetto at owasp.org
>                                                             <mailto:dominique.righetto at owasp.org>>
>                                                             *Cc:* Jim
>                                                             Manico
>                                                             <jim.manico at owasp.org
>                                                             <mailto:jim.manico at owasp.org>>;
>                                                             Dave
>                                                             Wichers
>                                                             <dave.wichers at owasp.org
>                                                             <mailto:dave.wichers at owasp.org>>;
>                                                             eric.sheridan at owasp.org
>                                                             <mailto:eric.sheridan at owasp.org>
>                                                             *Subject:*
>                                                             Re:
>                                                             https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>                                                             <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>                                                             ?
>
>                                                             Well
>                                                             tokens can
>                                                             be placed
>                                                             in cookies.
>
>                                                             The real
>                                                             answer to
>                                                             avoid CSRF
>                                                             is tokens
>                                                             in
>                                                             JavaScript
>                                                             variable
>                                                             as opposed
>                                                             to
>                                                             cookies.
>                                                             They are
>                                                             not
>                                                             automatically
>                                                             sent and
>                                                             indeed
>                                                             make CSRF
>                                                             impossible
>                                                             - at the
>                                                             expense of
>                                                             tokens
>                                                             being
>                                                             fully
>                                                             stolen via
>                                                             XSS. Pick
>                                                             your poison!
>
>                                                             I
>                                                             recommend
>                                                             a COMBO of
>                                                             these
>                                                             defenses.
>                                                             For web
>                                                             apps,
>                                                             sychronizer
>                                                             token +
>                                                             header
>                                                             verification
>                                                             +
>                                                             re-authentication
>                                                             for
>                                                             sensitive
>                                                             features.
>
>                                                             For API's
>                                                             double-cookie
>                                                             submit or
>                                                             just use
>                                                             JavaScript
>                                                             variable
>                                                             based
>                                                             tokens +
>                                                             header
>                                                             verification
>                                                             for
>                                                             same-site
>                                                             API's +
>                                                             re-authentication
>                                                             for
>                                                             sensitive
>                                                             features.
>
>                                                             > [1] If
>                                                             there is
>                                                             an XSS
>                                                             vulnerability
>                                                             at a
>                                                             single
>                                                             place on a
>                                                             domain (it
>                                                             can add
>                                                             custom
>                                                             header),
>                                                             it can be
>                                                             used to
>                                                             make CSRF
>                                                             */on all
>                                                             other
>                                                             state
>                                                             changing
>                                                             operationswithin
>                                                             that
>                                                             domain
>                                                             /*done to
>                                                             that AJAX
>                                                             endpoint.
>                                                             Do you agree?
>
>                                                             ?
>
>                                                             Absolutely!
>
>                                                             ?
>
>                                                             On 9/20/18
>                                                             11:12 AM,
>                                                             Konakandla,
>                                                             Manideep
>                                                             wrote:
>
>                                                                 Yeah,
>                                                                 I
>                                                                 understand
>                                                                 that
>                                                                 any
>                                                                 XSS
>                                                                 and
>                                                                 CSRF
>                                                                 game
>                                                                 is
>                                                                 over
>                                                                 but I
>                                                                 am
>                                                                 stressing
>                                                                 out on
>                                                                 the
>                                                                 highlighted
>                                                                 part
>                                                                 in
>                                                                 [1]. I
>                                                                 am
>                                                                 trying
>                                                                 to
>                                                                 highlight
>                                                                 and
>                                                                 get an
>                                                                 affirmation
>                                                                 on why
>                                                                 my
>                                                                 understanding
>                                                                 on
>                                                                 token
>                                                                 based
>                                                                 mitigation
>                                                                 is
>                                                                 better
>                                                                 than
>                                                                 origin/referrer
>                                                                 header
>                                                                 check
>                                                                 will
>                                                                 also
>                                                                 apply
>                                                                 to
>                                                                 ?token
>                                                                 based
>                                                                 mitigation
>                                                                 Vs
>                                                                 custom
>                                                                 header
>                                                                 mitigation
>                                                                 (if
>                                                                 static
>                                                                 tokens
>                                                                 are
>                                                                 used
>                                                                 in
>                                                                 custom
>                                                                 headers)?.
>
>
>                                                                 ?
>
>                                                                 In
>                                                                 case
>                                                                 of
>                                                                 tokens,
>                                                                 we
>                                                                 have
>                                                                 an
>                                                                 option
>                                                                 to use
>                                                                 different
>                                                                 tokens
>                                                                 on
>                                                                 each
>                                                                 page
>                                                                 (taking
>                                                                 things
>                                                                 like
>                                                                 URL,
>                                                                 timestamp
>                                                                 etc.
>                                                                 into
>                                                                 consideration)
>                                                                 and
>                                                                 hence
>                                                                 XSS
>                                                                 vulnerability
>                                                                 on one
>                                                                 page
>                                                                 will
>                                                                 only
>                                                                 make
>                                                                 state
>                                                                 changing
>                                                                 operations
>                                                                 in
>                                                                 that
>                                                                 page
>                                                                 vulnerable
>                                                                 to
>                                                                 CSRF
>                                                                 but
>                                                                 not
>                                                                 state
>                                                                 changing
>                                                                 operations
>                                                                 on
>                                                                 other
>                                                                 pages
>                                                                 within
>                                                                 that
>                                                                 domain
>                                                                 (because
>                                                                 token
>                                                                 value
>                                                                 is
>                                                                 different)
>                                                                 but
>                                                                 whereas
>                                                                 in
>                                                                 origin/referrer
>                                                                 header
>                                                                 check
>                                                                 and
>                                                                 custom
>                                                                 header
>                                                                 check,
>                                                                 the
>                                                                 token
>                                                                 value
>                                                                 is
>                                                                 constant
>                                                                 and
>                                                                 hence
>                                                                 XSS
>                                                                 vulnerability
>                                                                 in one
>                                                                 page
>                                                                 will
>                                                                 also
>                                                                 cause
>                                                                 state
>                                                                 changing
>                                                                 operations
>                                                                 in
>                                                                 other
>                                                                 pages
>                                                                 to be
>                                                                 vulnerable
>                                                                 to
>                                                                 CSRF
>                                                                 as
>                                                                 well.
>                                                                 Off
>                                                                 course,
>                                                                 this
>                                                                 can be
>                                                                 mitigated
>                                                                 in
>                                                                 custom
>                                                                 header
>                                                                 checks
>                                                                 by
>                                                                 adding
>                                                                 tokens
>                                                                 to
>                                                                 custom
>                                                                 headers
>                                                                 rather
>                                                                 than
>                                                                 static
>                                                                 constant
>                                                                 but
>                                                                 this
>                                                                 cannot
>                                                                 be
>                                                                 mitigated
>                                                                 in
>                                                                 origin/referrer
>                                                                 check
>                                                                 because
>                                                                 those
>                                                                 headers
>                                                                 cannot
>                                                                 be
>                                                                 modified.
>                                                                 So,
>                                                                 yeah a
>                                                                 single
>                                                                 XSS
>                                                                 any
>                                                                 CSRF
>                                                                 is
>                                                                 bypassed
>                                                                 but
>                                                                 the
>                                                                 breadth
>                                                                 of the
>                                                                 impact
>                                                                 is
>                                                                 different
>                                                                 for
>                                                                 each
>                                                                 of them.
>
>                                                                 ?
>
>                                                                 Regarding
>                                                                 code
>                                                                 samples
>                                                                 ? I
>                                                                 currently
>                                                                 was
>                                                                 able
>                                                                 to
>                                                                 allocate
>                                                                 only
>                                                                 some
>                                                                 time
>                                                                 for
>                                                                 this
>                                                                 task
>                                                                 and I
>                                                                 don?t
>                                                                 think
>                                                                 I will
>                                                                 be
>                                                                 able
>                                                                 to do
>                                                                 code
>                                                                 samples
>                                                                 within
>                                                                 this
>                                                                 time
>                                                                 frame.
>                                                                 I am
>                                                                 also
>                                                                 leaving
>                                                                 for a
>                                                                 long
>                                                                 vacation
>                                                                 starting
>                                                                 Oct 12
>                                                                 and
>                                                                 hence
>                                                                 let?s
>                                                                 try to
>                                                                 get
>                                                                 this
>                                                                 out
>                                                                 first
>                                                                 and we
>                                                                 can
>                                                                 add
>                                                                 code
>                                                                 samples
>                                                                 later
>                                                                 on
>                                                                 considering
>                                                                 my
>                                                                 work
>                                                                 load
>                                                                 after
>                                                                 I
>                                                                 return
>                                                                 from
>                                                                 vacation.
>
>                                                                 ?
>
>                                                                 [1] If
>                                                                 there
>                                                                 is an
>                                                                 XSS
>                                                                 vulnerability
>                                                                 at a
>                                                                 single
>                                                                 place
>                                                                 on a
>                                                                 domain
>                                                                 (it
>                                                                 can
>                                                                 add
>                                                                 custom
>                                                                 header),
>                                                                 it can
>                                                                 be
>                                                                 used
>                                                                 to
>                                                                 make
>                                                                 CSRF
>                                                                 */on
>                                                                 all
>                                                                 other
>                                                                 state
>                                                                 changing
>                                                                 operationswithin
>                                                                 that
>                                                                 domain
>                                                                 /*done
>                                                                 to
>                                                                 that
>                                                                 AJAX
>                                                                 endpoint.
>                                                                 Do you
>                                                                 agree?
>
>                                                                 ?
>
>                                                                 *From:*Dominique
>                                                                 Righetto
>                                                                 <dominique.righetto at owasp.org>
>                                                                 <mailto:dominique.righetto at owasp.org>
>                                                                 *Sent:*
>                                                                 Thursday,
>                                                                 September
>                                                                 20,
>                                                                 2018
>                                                                 8:45 AM
>                                                                 *To:*
>                                                                 Jim
>                                                                 Manico
>                                                                 <jim at manicode.com>
>                                                                 <mailto:jim at manicode.com>
>                                                                 *Cc:*
>                                                                 Konakandla,
>                                                                 Manideep
>                                                                 <mkonakan at amazon.com>
>                                                                 <mailto:mkonakan at amazon.com>;
>                                                                 Jim
>                                                                 Manico
>                                                                 <jim.manico at owasp.org>
>                                                                 <mailto:jim.manico at owasp.org>;
>                                                                 Dave
>                                                                 Wichers
>                                                                 <dave.wichers at owasp.org>
>                                                                 <mailto:dave.wichers at owasp.org>;
>                                                                 eric.sheridan at owasp.org
>                                                                 <mailto:eric.sheridan at owasp.org>
>                                                                 *Subject:*
>                                                                 Re:
>                                                                 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>                                                                 <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet>
>
>                                                                 ?
>
>                                                                 Hi,
>
>                                                                 ?
>
>                                                                 Thanks
>                                                                 for
>                                                                 your
>                                                                 contribution.
>
>                                                                 ?
>
>                                                                 I like
>                                                                 very
>                                                                 much
>                                                                 your
>                                                                 plan ?
>
>                                                                 ?
>
>                                                                 I ask
>                                                                 for
>                                                                 some
>                                                                 favor
>                                                                 in
>                                                                 addition :
>
>                                                                 - can
>                                                                 you
>                                                                 provide
>                                                                 code
>                                                                 sample
>                                                                 (in
>                                                                 one
>                                                                 language
>                                                                 like
>                                                                 java
>                                                                 or
>                                                                 .net
>                                                                 or the
>                                                                 one
>                                                                 you
>                                                                 want
>                                                                 but it
>                                                                 must
>                                                                 be
>                                                                 easy
>                                                                 to
>                                                                 read
>                                                                 and
>                                                                 understand)
>                                                                 or
>                                                                 libraires
>                                                                 along
>                                                                 your
>                                                                 proposal
>                                                                 for
>                                                                 each
>                                                                 section?
>
>                                                                 - can
>                                                                 you
>                                                                 use
>                                                                 the
>                                                                 syntaxhighlight
>                                                                 tag
>                                                                 for code?
>
>                                                                 ?
>
>                                                                 I'am
>                                                                 agree
>                                                                 with
>                                                                 Jim,
>                                                                 XSS?
>                                                                 means
>                                                                 game
>                                                                 over
>                                                                 because
>                                                                 your
>                                                                 browsing
>                                                                 context
>                                                                 can be
>                                                                 used
>                                                                 as
>                                                                 proxy
>                                                                 so
>                                                                 csrf
>                                                                 protection
>                                                                 will
>                                                                 be
>                                                                 defeated
>                                                                 because
>                                                                 request
>                                                                 came
>                                                                 from
>                                                                 the
>                                                                 legitimate
>                                                                 user.
>
>                                                                 ?
>
>                                                                 Thanks
>                                                                 you
>                                                                 again
>                                                                 for
>                                                                 all
>                                                                 your
>                                                                 help
>                                                                 ???
>
>                                                                 ?
>
>                                                                 Le
>                                                                 jeu.
>                                                                 20
>                                                                 sept.
>                                                                 2018 ?
>                                                                 18:31,
>                                                                 Jim
>                                                                 Manico
>                                                                 <jim at manicode.com
>                                                                 <mailto:jim at manicode.com>>
>                                                                 a ?crit?:
>
>                                                                     >
>                                                                     If
>                                                                     there
>                                                                     is
>                                                                     an
>                                                                     XSS
>                                                                     vulnerability
>                                                                     at
>                                                                     a
>                                                                     single
>                                                                     place
>                                                                     on
>                                                                     a
>                                                                     domain
>                                                                     (it
>                                                                     can
>                                                                     add
>                                                                     custom
>                                                                     header),
>                                                                     it
>                                                                     can
>                                                                     be
>                                                                     used
>                                                                     to
>                                                                     make
>                                                                     CSRF
>                                                                     on
>                                                                     all
>                                                                     other
>                                                                     state
>                                                                     changing
>                                                                     operations
>                                                                     within
>                                                                     that
>                                                                     domain
>                                                                     done
>                                                                     to
>                                                                     that
>                                                                     AJAX
>                                                                     endpoint.
>                                                                     Do
>                                                                     you
>                                                                     agree?
>
>                                                                     Any
>                                                                     XSS
>                                                                     is
>                                                                     game
>                                                                     over
>                                                                     and
>                                                                     all
>                                                                     CSRF
>                                                                     are
>                                                                     useless
>                                                                     in
>                                                                     the
>                                                                     face
>                                                                     of
>                                                                     XSS.
>                                                                     I
>                                                                     Agree!
>
>                                                                     - Jim
>
>                                                                     ?
>
>                                                                     On
>                                                                     9/19/18
>                                                                     10:52
>                                                                     PM,
>                                                                     Konakandla,
>                                                                     Manideep
>                                                                     wrote:
>
>                                                                         Hey
>                                                                         Guys,
>
>                                                                         ?
>
>                                                                         [1]
>                                                                         is
>                                                                         what
>                                                                         I
>                                                                         said
>                                                                         for
>                                                                         origin/referrer
>                                                                         header
>                                                                         check
>                                                                         in
>                                                                         this
>                                                                         e-mail
>                                                                         thread.
>                                                                         I
>                                                                         also
>                                                                         believe
>                                                                         that
>                                                                         this
>                                                                         applies
>                                                                         for
>                                                                         custom
>                                                                         headers
>                                                                         for
>                                                                         AJAX
>                                                                         endpoints
>                                                                         as
>                                                                         well.
>                                                                         If
>                                                                         there
>                                                                         is
>                                                                         an
>                                                                         XSS
>                                                                         vulnerability
>                                                                         at
>                                                                         a
>                                                                         single
>                                                                         place
>                                                                         on
>                                                                         a
>                                                                         domain
>                                                                         (it
>                                                                         can
>                                                                         add
>                                                                         custom
>                                                                         header),
>                                                                         it
>                                                                         can
>                                                                         be
>                                                                         used
>                                                                         to
>                                                                         make
>                                                                         CSRF
>                                                                         on
>                                                                         all
>                                                                         other
>                                                                         state
>                                                                         changing
>                                                                         operations
>                                                                         within
>                                                                         that
>                                                                         domain
>                                                                         done
>                                                                         to
>                                                                         that
>                                                                         AJAX
>                                                                         endpoint.
>                                                                         Do
>                                                                         you
>                                                                         agree?
>
>                                                                         ?
>
>                                                                         Here
>                                                                         is
>                                                                         how
>                                                                         I
>                                                                         am
>                                                                         keeping
>                                                                         the
>                                                                         new
>                                                                         re-factored
>                                                                         cheatsheet.
>                                                                         Does
>                                                                         this
>                                                                         look
>                                                                         good
>                                                                         to
>                                                                         you
>                                                                         guys?
>
>
>                                                                         ?
>
>                                                                         1.??????
>                                                                         Use
>                                                                         token
>                                                                         based
>                                                                         method
>                                                                         as
>                                                                         primary
>                                                                         defense
>
>                                                                         a.??????
>                                                                         Can
>                                                                         use
>                                                                         synchronizer
>                                                                         pattern
>                                                                         for
>                                                                         stateful
>                                                                         applications
>
>                                                                         b.??????
>                                                                         Can
>                                                                         use
>                                                                         hah
>                                                                         based/
>                                                                         encryption
>                                                                         based
>                                                                         token
>                                                                         pattern
>                                                                         for
>                                                                         stateless
>                                                                         applications
>
>                                                                         2.??????
>                                                                         Defense
>                                                                         in
>                                                                         depth
>                                                                         measures
>                                                                         along
>                                                                         with
>                                                                         drawbacks
>                                                                         of
>                                                                         each
>                                                                         one
>
>                                                                         a.??????
>                                                                         Origin/referrer
>                                                                         header
>                                                                         check
>
>                                                                         b.??????
>                                                                         Double
>                                                                         submit
>                                                                         cookie
>
>                                                                         c.??????
>                                                                         Samesite
>                                                                         cookie
>
>                                                                         d.??????
>                                                                         Custom
>                                                                         headers
>                                                                         (people
>                                                                         still
>                                                                         need
>                                                                         to
>                                                                         use
>                                                                         tokens
>                                                                         for
>                                                                         forms
>                                                                         etc.
>                                                                         if
>                                                                         they
>                                                                         have
>                                                                         mix
>                                                                         of
>                                                                         ajax
>                                                                         endpoints
>                                                                         and
>                                                                         general
>                                                                         HTML)
>
>                                                                         3.??????
>                                                                         Strong
>                                                                         CSRF
>                                                                         defenses
>                                                                         but
>                                                                         very
>                                                                         less
>                                                                         usable
>                                                                         :
>                                                                         captcha
>                                                                         etc.
>
>                                                                         4.??????
>                                                                         CSRF
>                                                                         Myths
>                                                                         /
>                                                                         techniques
>                                                                         that
>                                                                         do
>                                                                         not
>                                                                         work
>                                                                         section
>
>                                                                         ?
>
>                                                                         [1]
>                                                                         if
>                                                                         we
>                                                                         solely
>                                                                         rely
>                                                                         on
>                                                                         origin/referrer
>                                                                         header
>                                                                         check
>                                                                         -
>                                                                         an
>                                                                         XSS
>                                                                         vulnerability
>                                                                         within
>                                                                         a
>                                                                         single
>                                                                         page
>                                                                         on
>                                                                         that
>                                                                         domain
>                                                                         will
>                                                                         also
>                                                                         give
>                                                                         CSRF
>                                                                         vulnerability
>                                                                         to
>                                                                         all
>                                                                         other
>                                                                         state
>                                                                         changing
>                                                                         operations
>                                                                         under
>                                                                         that
>                                                                         entire
>                                                                         domain.
>
>                                                                         ?
>
>                                                                         *From:*Dominique
>                                                                         Righetto
>                                                                         <span
>                                                                         st
>                                                                         <mailto:dominique.righetto at owasp.org>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190208/ffc10189/attachment-0001.html>

From dominique.righetto at owasp.org  Fri Feb  8 18:10:24 2019
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Fri, 8 Feb 2019 19:10:24 +0100
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <406a6463-f591-ea30-3f0c-32835046c302@owasp.org>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<CANos97esCWvdW58rw5ZC+NHpLT1gwUwQWOd=+_BqPr5HPaiU_w@mail.gmail.com>
	<46fa44e0bd7941eaa029659ca8f3291f@EX13D11UWB004.ant.amazon.com>
	<CANos97csCLS8cgWwduXWt520AcT5Z_sfRXbNUc=Yq6+P8Tx1UA@mail.gmail.com>
	<ea0ad8742d904ea792880b77e6e81678@EX13D11UWB004.ant.amazon.com>
	<70E7657A-CA1F-4BD7-ADF7-07A85CD08E6B@manicode.com>
	<37df98b064aa4b39af8d0e585638b3c4@EX13D11UWB004.ant.amazon.com>
	<CANos97cXnfb_foCaPaYXQEGRnphTQu8P_KC7pXwkeb7_ak0m-A@mail.gmail.com>
	<2bf303591c134e949d52c3d8d5a155d0@EX13D11UWB004.ant.amazon.com>
	<CANos97c6xDAycEr=YY_LaDWaffohmq17Cy1o9iSDPSYBaUa4_A@mail.gmail.com>
	<92ffc47ab9d14f4f9723d1feca90e1ab@EX13D11UWB004.ant.amazon.com>
	<CANos97dTh0Tia6MftWq-_kWFzejWx7o0Uh=NyC8W_=jVpCUdOQ@mail.gmail.com>
	<e832f8afafc945e3b65cd5f17fe15c6b@EX13D11UWB004.ant.amazon.com>
	<CANos97ew=HjNnO+TSgUL55x8WPyzpuKhjERwmvHqEyx5XYMvTg@mail.gmail.com>
	<CAMjpMgcykhmtoA32F+BDZ=8nRkT8z-oM_HX=6Z2kdmKdHvAjUQ@mail.gmail.com>
	<406a6463-f591-ea30-3f0c-32835046c302@owasp.org>
Message-ID: <CANos97dAGS_b1H28Ja7NJ-1RQ4ea76pctBZHaqv7c9_D4fFFww@mail.gmail.com>

As discussed, Jim will initiate the backlink To GitHub

Le ven. 8 f?vr. 2019 ? 18:48, Jim Manico <jim.manico at owasp.org> a ?crit :

> Dominique - as you migrate to GitHub as SOON as you publish a wiki on
> GitHub wipe the content from the wiki and forward to GitHub so there are
> not two copies, get it?
>
> Aloha, Jim
> On 2/8/19 6:27 AM, Dave Wichers wrote:
>
> Clearly indicated on the home page where?  And I don't follow OWASP on
> Slack or Twitter so I was completely unaware of this.  You say follow 'the
> process' but I can't find it anywhere.
>
> If you really don't want the cheat sheets to be edited, lock them, and put
> notes ON the cheat sheets themselves about what the process is/where to
> find them.
>
> I'm also concerned that this process will make it MUCH harder to
> contribute, reducing people's willingness to do so (like me).
>
> -Dave
>
>
> On Thu, Feb 7, 2019 at 11:54 PM Dominique Righetto <
> dominique.righetto at owasp.org> wrote:
>
>> Hello all
>>
>> Since december wiki update of cs are deprecated. It is clearly indicated
>> on the homepage and slack and Twitter and GitHub since 3 month.
>>
>> If you modify the wiki your update will simply be ignored and lost.
>>
>> Please follow the process.
>>
>> All modification and creation of cs is now controlled by Jim and me as PL
>> along Continuous Integration process.
>>
>> Le ven. 8 f?vr. 2019 ? 00:43, Konakandla, Manideep <mkonakan at amazon.com>
>> a ?crit :
>>
>>> Hi Dave - Let?s continue our discussion here so that we have everything
>>> tracked in the cheat sheet email list (copying our 1:1 conversation below).
>>>
>>>
>>>
>>> I really appreciate your support in the changes. I have few comments
>>> below
>>>
>>>
>>>
>>> a)       Dominique and Jim decided to move cheat sheets to Github. So,
>>> all new changes should be on Github CSRF
>>> <https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md>
>>> page. I think they are also working on deprecating the old wiki pages on
>>> OWASP. I am fine with all your changes (as most of them are
>>> cosmetic/grammatical/structural) except [1]. If you don?t mind, can you do
>>> these changes on the Github? I am fine with you moving the reference
>>> example to a different page as well. I have plans to add some other content
>>> (not anytime in next month) during which I will also try to trim the
>>> content as much as possible.
>>>
>>> b)      ?If a developer forgets to add the token to any state changing
>>> operation, they are making the application vulnerable to CSRF." is flat out
>>> wrong.  If a dev forgets to add a token, then the server is simply going to
>>> reject the request. It's not going to be vulnerable.  If you agree, can you
>>> fix this?
>>>
>>> >> You are ?assuming? here that the server has a token verification
>>> system which is not true by default. By default, all applications are
>>> vulnerable to CSRF unless developers add tokens / the system has a token
>>> verification system.
>>>
>>> c)       I am removing the changes related to [1] for now as they are
>>> clearly contradicting what we have in other parts of the cheat sheet. If
>>> you disagree, I am open to discussion before we get them back to the
>>> cheatsheet again. I might be missing something and I would love to hear
>>> your side of the story.
>>>
>>>
>>>
>>> *1.* Earlier, I rejected both the techniques you mentioned in
>>> ?Stateless/Tokenless Defense Techniques? to be in primary because
>>>
>>> *1.1* X-Requested-With: XMLHttpRequest Header: For the same FLASH
>>> related reasons mentioned under this
>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Use_of_Custom_Request_Headers>
>>> section. On a separate thread, I was working with Riyaz who authored
>>> this
>>> <https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b>
>>> blog and you wouldn?t believe how many old browser versions are still
>>> vulnerable to this FLASH based redirect CSRF vulnerability. He also gave
>>> link to a HTML wrapper which seems to make this attack work on newer Chrome
>>> versions as well. If you are interested, I can provide more details about
>>> these. Hence, I don?t want users to be vulnerable by using this as a
>>> primary defense.
>>>
>>> *1.2 *Not a Simple HTTP Request Verification: Again, this is a
>>> technique that I rejected in the later section
>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Content-Type_Header_Validation>
>>> of the document along with the reasoning.
>>>
>>>
>>>
>>> I just made some changes, feel free to review.
>>>
>>>
>>>
>>> I also think this comment: "If a developer forgets to add the token to
>>> any state changing operation, they are making the application vulnerable to
>>> CSRF." is flat out wrong.  If a dev forgets to add a token, then the
>>> server is simply going to reject the request. It's not going to be
>>> vulnerable.  If you agree, can you fix this?
>>>
>>>
>>>
>>> The article is also REALLY LONG. If you can identify anything to trim
>>> out, that would be great. I just trimmed out a few things, but I think we
>>> can do a lot more. Cheat sheets are supposed to be SHORT, but I realize
>>> many are not.
>>>
>>>
>>>
>>> For example, maybe we can move the reference example to a completely
>>> different page? That would shorten this alot.
>>>
>>> [image: https://ssl.gstatic.com/ui/v1/icons/mail/images/cleardot.gif]
>>>
>>>
>>>
>>> -Dave
>>>
>>>
>>>
>>>
>>>
>>> On Wed, Feb 6, 2019 at 5:25 PM manideep konakandla <
>>> mani.konakandla at gmail.com> wrote:
>>>
>>> Yes. All those changes passed through review on email list but yes,
>>> please feel free to provide any more comments.
>>>
>>>
>>>
>>> On Wed, Feb 6, 2019, 1:21 PM Dave Wichers <dave.wichers at owasp.org wrote:
>>>
>>> Are you:  Manideepk <https://www.owasp.org/index.php/User:Manideepk> on
>>> the OWASP site?
>>>
>>>
>>>
>>> I have some questions/comments about your changes to the OWASP CSRF
>>> Cheat Sheet.
>>>
>>>
>>>
>>> The bulk of those changes are here:
>>> https://www.owasp.org/index.php?title=Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet&type=revision&diff=244184&oldid=242455
>>>
>>>
>>>
>>> If this is you, I'll provide more details, but wanted to make sure I'm
>>> in touch with the right person first.
>>>
>>>
>>>
>>> -Dave
>>>
>>>
>>>
>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>> *Sent:* Sunday, December 23, 2018 4:13 AM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>> *Cc:* Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
>>> *Subject:* Re: [OWASP-cheat-sheets]
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Thanksyou very much for your support ???
>>>
>>>
>>>
>>> Le sam. 22 d?c. 2018 ? 22:24, Konakandla, Manideep <mkonakan at amazon.com>
>>> a ?crit :
>>>
>>> Let me know once the migration is started. I will do it for the CSRF
>>> prevention cheatsheet page J
>>>
>>>
>>>
>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>> *Sent:* Saturday, December 22, 2018 12:29 AM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>> *Cc:* Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
>>> *Subject:* Re: [OWASP-cheat-sheets]
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Hello Manideep,
>>>
>>>
>>>
>>> Thanks you for the update.
>>>
>>>
>>>
>>> For info we will migrate the entire project content (unless the
>>> homepage) to github so it is possible that you need to also made the update
>>> on the github repository.
>>>
>>>
>>>
>>> The migration work will start on January, i will take some rest until
>>> January, i really need it.
>>>
>>>
>>>
>>> Thanks you very much for your help on this project :)
>>>
>>>
>>>
>>> Happy holidays too
>>>
>>>
>>> --
>>> Cordialement, Best regards,
>>> Dominique Righetto
>>> dominique.righetto at gmail.com
>>>
>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>
>>> https://righettod.eu
>>> GPG: 323D19BA
>>>
>>>
>>>
>>>
>>>
>>> On Sat, Dec 22, 2018 at 3:40 AM Konakandla, Manideep <
>>> mkonakan at amazon.com> wrote:
>>>
>>> Hello all,
>>>
>>>
>>>
>>> I made a change to ?Double Submit Cookie? technique [1]. I added a
>>> variant to it which now mitigates well-known security issues with standard
>>> ?Double Submit Cookie? technique. So, people can use this technique without
>>> any issues. Please let me know if anyone finds any issues within it.
>>>
>>>
>>>
>>> Whenever I get some free time in next 1-2 months, I am planning to
>>> include
>>>
>>> a)       Details about popular 6-7 web frameworks and the CSRF
>>> mitigations implemented by them
>>>
>>> b)      Re-organize the page even more better by switching variant of
>>> double submit cookie to primary defense (under stateless section) etc.
>>>
>>>
>>>
>>> Happy holidays everyone J
>>>
>>>
>>>
>>> [1]
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Double_Submit_Cookie
>>> (read the last para under this mitigation)
>>>
>>>
>>>
>>>
>>>
>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>> *Sent:* Saturday, October 13, 2018 12:59 AM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>> *Cc:* Jim Manico <jim at manicode.com>; Pankaj Upadhyay <
>>> p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
>>> *Subject:* Re: [OWASP-cheat-sheets]
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Hi,
>>>
>>> CS publishing released and notification sent to the community via
>>> Twitter and Slack channel.
>>>
>>> --
>>> Cordialement, Best regards,
>>> Dominique Righetto
>>> dominique.righetto at gmail.com
>>>
>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>
>>> https://righettod.eu
>>> GPG: 323D19BA
>>>
>>>
>>>
>>>
>>>
>>> On Fri, Oct 12, 2018 at 3:47 AM Konakandla, Manideep <
>>> mkonakan at amazon.com> wrote:
>>>
>>> Yes, I am feeling way better now. Thank you J
>>>
>>>
>>>
>>> *@ALL: *Cheat sheet is updated with all the changes now
>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>.
>>> Please let me know if you have any issues by end of tomorrow. If there are
>>> no issues - I/we can start advertising the refactored cheat sheet in our
>>> networks J
>>>
>>>
>>>
>>> Thanks a ton *Dominique* and *Jim* for all your help till date. I
>>> really appreciate it!!! I will be actively maintaining this as well from
>>> today J
>>>
>>>
>>>
>>> Regards,
>>>
>>> Manideep Konakandla
>>>
>>> www.manideepk.com
>>>
>>> Security Engineer @ Amazon
>>>
>>> mkonakan at amazon.com
>>>
>>>
>>>
>>> *From:* Jim Manico <jim at manicode.com>
>>> *Sent:* Wednesday, October 10, 2018 10:39 PM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Pankaj
>>> Upadhyay <p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
>>> *Subject:* Re: [OWASP-cheat-sheets]
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Go for it!!! I hope you?re feeling better!
>>>
>>> --
>>>
>>> Jim Manico
>>>
>>> @Manicode
>>>
>>>
>>>
>>>
>>> On Oct 10, 2018, at 10:18 PM, Konakandla, Manideep <mkonakan at amazon.com>
>>> wrote:
>>>
>>> Sorry for late reply. I was on sick leave for last 2 days.
>>>
>>>
>>>
>>> I synced up with Dominique in a different email chain to clarify
>>> something in his previous email. He gave me a go ahead to update wiki with
>>> new re-factored cheat sheet. I am planning to do it sometime tomorrow.
>>> *@Jim* : Is it with fine with you as well? Please let me know if you
>>> have any concerns.
>>>
>>>
>>>
>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>> *Sent:* Monday, October 8, 2018 1:47 AM
>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>> *Cc:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>; Jim Manico <
>>> jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
>>> *Subject:* Re: [OWASP-cheat-sheets]
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Hello all,
>>>
>>>
>>>
>>> In order to move forward and deliver something in the project please
>>> update the wiki with content from the refactoring from Konakandla Manideep.
>>> If there missing points they will be added in another round it is the role
>>> of the wiki based usage.
>>>
>>>
>>>
>>> Thanks in advance for your understanding ?
>>>
>>>
>>>
>>> Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com>
>>> a ?crit :
>>>
>>> Hey Folks J
>>>
>>>
>>>
>>> Good conversation :) Can you guys review the new cheat sheet once? I am
>>> sure most of the discussion going on here is already answered in the new
>>> re-factored cheat sheet I wrote.
>>>
>>>
>>>
>>> @Pankaj ? Go through the respective sections in the new cheat sheet. If
>>> they are not clear / you are not convinced, we can discuss more. Below is
>>> the summary of my response to your questions (you will find the same gist
>>> going through the cheat sheet as well).
>>>
>>>
>>>
>>> Go through [2] to understand more detailed on how flash based bypass on
>>> CSRF custom mitigation defense works. You can see there that the origin
>>> headers are passed along with the custom headers and hence current wiki
>>> asks to do origin and/or referrer header check as defense-in-depth (it
>>> would help even if flash sometime in the future repeats same mistake and
>>> forwards custom headers without crossdomain.xml checks. Domain requesting
>>> the redirected request might be fooled with custom header bypass but not
>>> the origin header check). If both these checks are done, it is indeed a
>>> good defense but origin header is not always included etc. (just as Jim
>>> mentioned and also as new cheatsheet mentions).  I don?t think deprecating
>>> custom header check is a good idea. It is indeed a good solution for
>>> stateless services though they have to keep issues like I mentioned before
>>> in mind. Your statement of custom header itself doesn?t mitigate CSRF
>>> relies on the fact that ?Flash being vulnerable to same bug again in
>>> future?. We cannot rely on a future statement and deprecate a technique,
>>> instead providing defense in depth measure for it and also cautioning users
>>> about past issues might be good idea. Users can take their call. Please
>>> read custom headers and origin check sections I re-wrote for more
>>> in-details. It talks about the issues and people can select if they want to
>>> use it or not.
>>>
>>>
>>>
>>> Also, Login CSRF has nothing to do with custom header mitigation. Login
>>> forms are usually handled on <form> tags and custom header mitigation is
>>> only applicable on ajax calls because you cannot set custom headers on form
>>> tags. It can be applicable if you are doing logins on Ajax/XHR requests in
>>> which case my above response from custom header mitigation applies. I also
>>> proposed few methods for mitigating login CSRF which aligns with our
>>> primary defense on the new cheatsheet (tokens). Please review it as well.
>>>
>>>
>>>
>>> Also, CORS has nothing to do with CSRF. I infact added CORS as a
>>> technique that should not be used/even thought for CSRF in the new
>>> cheatsheet I wrote. Please check that and also read [1]
>>>
>>>
>>>
>>> [1]
>>> https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
>>>
>>> [2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/
>>>
>>>
>>>
>>> BTW - Here is the link to the new cheat sheet -
>>> https://tinyurl.com/y7k9fded
>>>
>>>
>>>
>>> Again,  I you are not convinced ? please let me know specific item and
>>> we can happily discuss further J Alternatively, you can send us your
>>> edits here for review and if it looks good for everyone ? you can edit it
>>> in the wiki.
>>>
>>>
>>>
>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>> *Sent:* Sunday, October 7, 2018 1:13 PM
>>> *To:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>>> *Cc:* Jim Manico <jim at manicode.com>; Konakandla, Manideep <
>>> mkonakan at amazon.com>; owasp-cheat-sheets at lists.owasp.org
>>> *Subject:* Re: [OWASP-cheat-sheets]
>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>
>>>
>>>
>>> Sync your update with one from Konakandla Manideep please ?
>>>
>>>
>>>
>>> Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>>> a ?crit :
>>>
>>> Aloha Jim!
>>>
>>> With XSS, even CSRF tokens can be stolen :).
>>>
>>> But I'll keep your tip in mind when editing the wiki. I'm planning to do
>>> that sometime this month.
>>>
>>> Please feel free to review it whenever you guys get a chance.
>>>
>>>
>>>
>>> Best,
>>>
>>> Pankaj
>>>
>>>
>>>
>>>
>>>
>>> On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com> wrote:
>>>
>>> I agree JWT's architectures *where cookies are not involved* are
>>> resistant to CSRF but those tokens are at the risk of being stolen over XSS!
>>>
>>> The Origin header does not go with all requests and FireFox does not
>>> fully support it yet. So careful!
>>>
>>> :)
>>>
>>>
>>>
>>> On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
>>>
>>> I agree and that's why I would like to propose deprecation of 'custom
>>> header approach' as a CSRF defense.
>>> Presently the mechanism that seems to work across applications is
>>> validating custom header as well as a forbidden header name (that cannot be
>>> set by a software or a program) e.g. Origin. If we want to give it a new
>>> name like 'Double Header Validation' or something else, I'm fine with that
>>> but custom header alone doesn't seem sufficient to mitigate CSRF issue.
>>>
>>>
>>>
>>> There are some other best practices that should also be considered. I
>>> think CORS is now mature enough to have a mention in the CSRF defense Also,
>>> applications utilizing JWT token in the header seem immune to CSRF.
>>>
>>>
>>>
>>> Please let me know what you guys think and if allowed, I can go ahead
>>> and make some of these edits for your perusal.
>>>
>>>
>>> <p
>>>
>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190208/b6d959a9/attachment-0001.html>

From matt.tesauro at owasp.org  Fri Feb  8 18:18:21 2019
From: matt.tesauro at owasp.org (Matt Tesauro)
Date: Fri, 8 Feb 2019 12:18:21 -0600
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <6714ef10-aee3-6720-023d-a4dbc9399b3c@owasp.org>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<46fa44e0bd7941eaa029659ca8f3291f@EX13D11UWB004.ant.amazon.com>
	<CANos97csCLS8cgWwduXWt520AcT5Z_sfRXbNUc=Yq6+P8Tx1UA@mail.gmail.com>
	<ea0ad8742d904ea792880b77e6e81678@EX13D11UWB004.ant.amazon.com>
	<70E7657A-CA1F-4BD7-ADF7-07A85CD08E6B@manicode.com>
	<37df98b064aa4b39af8d0e585638b3c4@EX13D11UWB004.ant.amazon.com>
	<CANos97cXnfb_foCaPaYXQEGRnphTQu8P_KC7pXwkeb7_ak0m-A@mail.gmail.com>
	<2bf303591c134e949d52c3d8d5a155d0@EX13D11UWB004.ant.amazon.com>
	<CANos97c6xDAycEr=YY_LaDWaffohmq17Cy1o9iSDPSYBaUa4_A@mail.gmail.com>
	<92ffc47ab9d14f4f9723d1feca90e1ab@EX13D11UWB004.ant.amazon.com>
	<CANos97dTh0Tia6MftWq-_kWFzejWx7o0Uh=NyC8W_=jVpCUdOQ@mail.gmail.com>
	<e832f8afafc945e3b65cd5f17fe15c6b@EX13D11UWB004.ant.amazon.com>
	<CANos97ew=HjNnO+TSgUL55x8WPyzpuKhjERwmvHqEyx5XYMvTg@mail.gmail.com>
	<CAMjpMgcykhmtoA32F+BDZ=8nRkT8z-oM_HX=6Z2kdmKdHvAjUQ@mail.gmail.com>
	<CANos97dHxj6B0H+br7-NKxJkAhZT-Bm525i0DqHwoeAR=Hjnkg@mail.gmail.com>
	<6714ef10-aee3-6720-023d-a4dbc9399b3c@owasp.org>
Message-ID: <CAJq9yoRQ0G8x_AmdPVq_AWJvVJG+VdFDY2BnAja2YCD=yxHEyw@mail.gmail.com>

For what it's worth, I'd strongly support this move.  Putting the cheat
sheets in Github in something like Markdown makes great sense both in terms
of ease to transform that content to other formats with something like
pandoc or Jekyll plus the ability to use Git, GH issues, PRs,  GH projects
("kanban-like board) to discuss and track changes to that content.
Additionally, you could use GH Pages to provide nicely rendered version of
the cheat sheets as well.

I believe it would help increase contribution to this great project.

Cheers!

--
-- Matt Tesauro
*OWASP Foundation*
Director of Community and Operations
matt.tesauro at owasp.org

Consider giving back, and supporting the open source community by becoming
a member <https://www.owasp.org/index.php/Membership> or making a donation
<https://www.owasp.org/index.php/Donate> today!


On Fri, Feb 8, 2019 at 11:48 AM Jim Manico <jim.manico at owasp.org> wrote:

> We already as leaders made the call to move to the official OWASP GitHub.
> The Wiki is highly limited. We're close to deleting those pages and just
> reference Github. That way we have a comment system and a mature process
> for tracking requests.
>
> It's already a done deal at this point, I'm sorry Dave.
>
> Aloha, Jim
> On 2/8/19 6:40 AM, Dominique Righetto wrote:
>
> Section "Migration Pending" from
> https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series
>
> I understand that you don't follow our communication channel but we use it
> to communicate and it's the communication process choosen by the project
> and we have many good feedback about it. Slack members of the CS channel
> increase at a high speed.
>
> I respect your point of view but, as PL, the wiki mode allow uncontrolled
> process of edition/creation and Jim/Me are responsible/accountable for the
> quality/integrity of the CS/projects. Moreover the wiki do not allow
> integration into CI for create others format or automate control. GH allow
> also a fully open discution about any operation on CS.
>
> I respect also the fact that you do not like the gihub way but it's the
> new way followed by new owasp projects (masvs, mstg, asvs, proactive
> control and the top 10) and it faciliate the contribution even if you dont
> like it. It's more easy to create a GH account than an OWASP one.
>
> If you dont like this way at the point that it block your to contribute
> then i understand and respect your position but as PL Jim/Me has decided
> this way so we will continue the road wihtout you even if we thanks you
> very very much for your contribution.
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
> <dominique.righetto at gmail.com>dominique.righetto at owasp.org
> <dominique.righetto at gmail.com>
> https://righettod.eu
> GPG: 323D19BA
>
>
> On Fri, Feb 8, 2019 at 5:27 PM Dave Wichers <dave.wichers at owasp.org>
> wrote:
>
>> Clearly indicated on the home page where?  And I don't follow OWASP on
>> Slack or Twitter so I was completely unaware of this.  You say follow 'the
>> process' but I can't find it anywhere.
>>
>> If you really don't want the cheat sheets to be edited, lock them, and
>> put notes ON the cheat sheets themselves about what the process is/where to
>> find them.
>>
>> I'm also concerned that this process will make it MUCH harder to
>> contribute, reducing people's willingness to do so (like me).
>>
>> -Dave
>>
>>
>> On Thu, Feb 7, 2019 at 11:54 PM Dominique Righetto <
>> dominique.righetto at owasp.org> wrote:
>>
>>> Hello all
>>>
>>> Since december wiki update of cs are deprecated. It is clearly indicated
>>> on the homepage and slack and Twitter and GitHub since 3 month.
>>>
>>> If you modify the wiki your update will simply be ignored and lost.
>>>
>>> Please follow the process.
>>>
>>> All modification and creation of cs is now controlled by Jim and me as
>>> PL along Continuous Integration process.
>>>
>>> Le ven. 8 f?vr. 2019 ? 00:43, Konakandla, Manideep <mkonakan at amazon.com>
>>> a ?crit :
>>>
>>>> Hi Dave - Let?s continue our discussion here so that we have everything
>>>> tracked in the cheat sheet email list (copying our 1:1 conversation below).
>>>>
>>>>
>>>>
>>>> I really appreciate your support in the changes. I have few comments
>>>> below
>>>>
>>>>
>>>>
>>>> a)       Dominique and Jim decided to move cheat sheets to Github. So,
>>>> all new changes should be on Github CSRF
>>>> <https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md>
>>>> page. I think they are also working on deprecating the old wiki pages on
>>>> OWASP. I am fine with all your changes (as most of them are
>>>> cosmetic/grammatical/structural) except [1]. If you don?t mind, can you do
>>>> these changes on the Github? I am fine with you moving the reference
>>>> example to a different page as well. I have plans to add some other content
>>>> (not anytime in next month) during which I will also try to trim the
>>>> content as much as possible.
>>>>
>>>> b)      ?If a developer forgets to add the token to any state changing
>>>> operation, they are making the application vulnerable to CSRF." is flat out
>>>> wrong.  If a dev forgets to add a token, then the server is simply going to
>>>> reject the request. It's not going to be vulnerable.  If you agree, can you
>>>> fix this?
>>>>
>>>> >> You are ?assuming? here that the server has a token verification
>>>> system which is not true by default. By default, all applications are
>>>> vulnerable to CSRF unless developers add tokens / the system has a token
>>>> verification system.
>>>>
>>>> c)       I am removing the changes related to [1] for now as they are
>>>> clearly contradicting what we have in other parts of the cheat sheet. If
>>>> you disagree, I am open to discussion before we get them back to the
>>>> cheatsheet again. I might be missing something and I would love to hear
>>>> your side of the story.
>>>>
>>>>
>>>>
>>>> *1.* Earlier, I rejected both the techniques you mentioned in
>>>> ?Stateless/Tokenless Defense Techniques? to be in primary because
>>>>
>>>> *1.1* X-Requested-With: XMLHttpRequest Header: For the same FLASH
>>>> related reasons mentioned under this
>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Use_of_Custom_Request_Headers>
>>>> section. On a separate thread, I was working with Riyaz who authored
>>>> this
>>>> <https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b>
>>>> blog and you wouldn?t believe how many old browser versions are still
>>>> vulnerable to this FLASH based redirect CSRF vulnerability. He also gave
>>>> link to a HTML wrapper which seems to make this attack work on newer Chrome
>>>> versions as well. If you are interested, I can provide more details about
>>>> these. Hence, I don?t want users to be vulnerable by using this as a
>>>> primary defense.
>>>>
>>>> *1.2 *Not a Simple HTTP Request Verification: Again, this is a
>>>> technique that I rejected in the later section
>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Content-Type_Header_Validation>
>>>> of the document along with the reasoning.
>>>>
>>>>
>>>>
>>>> I just made some changes, feel free to review.
>>>>
>>>>
>>>>
>>>> I also think this comment: "If a developer forgets to add the token to
>>>> any state changing operation, they are making the application vulnerable to
>>>> CSRF." is flat out wrong.  If a dev forgets to add a token, then the
>>>> server is simply going to reject the request. It's not going to be
>>>> vulnerable.  If you agree, can you fix this?
>>>>
>>>>
>>>>
>>>> The article is also REALLY LONG. If you can identify anything to trim
>>>> out, that would be great. I just trimmed out a few things, but I think we
>>>> can do a lot more. Cheat sheets are supposed to be SHORT, but I realize
>>>> many are not.
>>>>
>>>>
>>>>
>>>> For example, maybe we can move the reference example to a completely
>>>> different page? That would shorten this alot.
>>>>
>>>> [image: https://ssl.gstatic.com/ui/v1/icons/mail/images/cleardot.gif]
>>>>
>>>>
>>>>
>>>> -Dave
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> On Wed, Feb 6, 2019 at 5:25 PM manideep konakandla <
>>>> mani.konakandla at gmail.com> wrote:
>>>>
>>>> Yes. All those changes passed through review on email list but yes,
>>>> please feel free to provide any more comments.
>>>>
>>>>
>>>>
>>>> On Wed, Feb 6, 2019, 1:21 PM Dave Wichers <dave.wichers at owasp.org
>>>>  wrote:
>>>>
>>>> Are you:  Manideepk <https://www.owasp.org/index.php/User:Manideepk> on
>>>> the OWASP site?
>>>>
>>>>
>>>>
>>>> I have some questions/comments about your changes to the OWASP CSRF
>>>> Cheat Sheet.
>>>>
>>>>
>>>>
>>>> The bulk of those changes are here:
>>>> https://www.owasp.org/index.php?title=Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet&type=revision&diff=244184&oldid=242455
>>>>
>>>>
>>>>
>>>> If this is you, I'll provide more details, but wanted to make sure I'm
>>>> in touch with the right person first.
>>>>
>>>>
>>>>
>>>> -Dave
>>>>
>>>>
>>>>
>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>> *Sent:* Sunday, December 23, 2018 4:13 AM
>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>> *Cc:* Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> Thanksyou very much for your support ???
>>>>
>>>>
>>>>
>>>> Le sam. 22 d?c. 2018 ? 22:24, Konakandla, Manideep <mkonakan at amazon.com>
>>>> a ?crit :
>>>>
>>>> Let me know once the migration is started. I will do it for the CSRF
>>>> prevention cheatsheet page J
>>>>
>>>>
>>>>
>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>> *Sent:* Saturday, December 22, 2018 12:29 AM
>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>> *Cc:* Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> Hello Manideep,
>>>>
>>>>
>>>>
>>>> Thanks you for the update.
>>>>
>>>>
>>>>
>>>> For info we will migrate the entire project content (unless the
>>>> homepage) to github so it is possible that you need to also made the update
>>>> on the github repository.
>>>>
>>>>
>>>>
>>>> The migration work will start on January, i will take some rest until
>>>> January, i really need it.
>>>>
>>>>
>>>>
>>>> Thanks you very much for your help on this project :)
>>>>
>>>>
>>>>
>>>> Happy holidays too
>>>>
>>>>
>>>> --
>>>> Cordialement, Best regards,
>>>> Dominique Righetto
>>>> dominique.righetto at gmail.com
>>>>
>>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>>
>>>> https://righettod.eu
>>>> GPG: 323D19BA
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> On Sat, Dec 22, 2018 at 3:40 AM Konakandla, Manideep <
>>>> mkonakan at amazon.com> wrote:
>>>>
>>>> Hello all,
>>>>
>>>>
>>>>
>>>> I made a change to ?Double Submit Cookie? technique [1]. I added a
>>>> variant to it which now mitigates well-known security issues with standard
>>>> ?Double Submit Cookie? technique. So, people can use this technique without
>>>> any issues. Please let me know if anyone finds any issues within it.
>>>>
>>>>
>>>>
>>>> Whenever I get some free time in next 1-2 months, I am planning to
>>>> include
>>>>
>>>> a)       Details about popular 6-7 web frameworks and the CSRF
>>>> mitigations implemented by them
>>>>
>>>> b)      Re-organize the page even more better by switching variant of
>>>> double submit cookie to primary defense (under stateless section) etc.
>>>>
>>>>
>>>>
>>>> Happy holidays everyone J
>>>>
>>>>
>>>>
>>>> [1]
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Double_Submit_Cookie
>>>> (read the last para under this mitigation)
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>> *Sent:* Saturday, October 13, 2018 12:59 AM
>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>> *Cc:* Jim Manico <jim at manicode.com>; Pankaj Upadhyay <
>>>> p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> Hi,
>>>>
>>>> CS publishing released and notification sent to the community via
>>>> Twitter and Slack channel.
>>>>
>>>> --
>>>> Cordialement, Best regards,
>>>> Dominique Righetto
>>>> dominique.righetto at gmail.com
>>>>
>>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>>
>>>> https://righettod.eu
>>>> GPG: 323D19BA
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> On Fri, Oct 12, 2018 at 3:47 AM Konakandla, Manideep <
>>>> mkonakan at amazon.com> wrote:
>>>>
>>>> Yes, I am feeling way better now. Thank you J
>>>>
>>>>
>>>>
>>>> *@ALL: *Cheat sheet is updated with all the changes now
>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>.
>>>> Please let me know if you have any issues by end of tomorrow. If there are
>>>> no issues - I/we can start advertising the refactored cheat sheet in our
>>>> networks J
>>>>
>>>>
>>>>
>>>> Thanks a ton *Dominique* and *Jim* for all your help till date. I
>>>> really appreciate it!!! I will be actively maintaining this as well from
>>>> today J
>>>>
>>>>
>>>>
>>>> Regards,
>>>>
>>>> Manideep Konakandla
>>>>
>>>> www.manideepk.com
>>>>
>>>> Security Engineer @ Amazon
>>>>
>>>> mkonakan at amazon.com
>>>>
>>>>
>>>>
>>>> *From:* Jim Manico <jim at manicode.com>
>>>> *Sent:* Wednesday, October 10, 2018 10:39 PM
>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Pankaj
>>>> Upadhyay <p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> Go for it!!! I hope you?re feeling better!
>>>>
>>>> --
>>>>
>>>> Jim Manico
>>>>
>>>> @Manicode
>>>>
>>>>
>>>>
>>>>
>>>> On Oct 10, 2018, at 10:18 PM, Konakandla, Manideep <mkonakan at amazon.com>
>>>> wrote:
>>>>
>>>> Sorry for late reply. I was on sick leave for last 2 days.
>>>>
>>>>
>>>>
>>>> I synced up with Dominique in a different email chain to clarify
>>>> something in his previous email. He gave me a go ahead to update wiki with
>>>> new re-factored cheat sheet. I am planning to do it sometime tomorrow.
>>>> *@Jim* : Is it with fine with you as well? Please let me know if you
>>>> have any concerns.
>>>>
>>>>
>>>>
>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>> *Sent:* Monday, October 8, 2018 1:47 AM
>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>> *Cc:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>; Jim Manico <
>>>> jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> Hello all,
>>>>
>>>>
>>>>
>>>> In order to move forward and deliver something in the project please
>>>> update the wiki with content from the refactoring from Konakandla Manideep.
>>>> If there missing points they will be added in another round it is the role
>>>> of the wiki based usage.
>>>>
>>>>
>>>>
>>>> Thanks in advance for your understanding ?
>>>>
>>>>
>>>>
>>>> Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com>
>>>> a ?crit :
>>>>
>>>> Hey Folks J
>>>>
>>>>
>>>>
>>>> Good conversation :) Can you guys review the new cheat sheet once? I am
>>>> sure most of the discussion going on here is already answered in the new
>>>> re-factored cheat sheet I wrote.
>>>>
>>>>
>>>>
>>>> @Pankaj ? Go through the respective sections in the new cheat sheet. If
>>>> they are not clear / you are not convinced, we can discuss more. Below is
>>>> the summary of my response to your questions (you will find the same gist
>>>> going through the cheat sheet as well).
>>>>
>>>>
>>>>
>>>> Go through [2] to understand more detailed on how flash based bypass on
>>>> CSRF custom mitigation defense works. You can see there that the origin
>>>> headers are passed along with the custom headers and hence current wiki
>>>> asks to do origin and/or referrer header check as defense-in-depth (it
>>>> would help even if flash sometime in the future repeats same mistake and
>>>> forwards custom headers without crossdomain.xml checks. Domain requesting
>>>> the redirected request might be fooled with custom header bypass but not
>>>> the origin header check). If both these checks are done, it is indeed a
>>>> good defense but origin header is not always included etc. (just as Jim
>>>> mentioned and also as new cheatsheet mentions).  I don?t think deprecating
>>>> custom header check is a good idea. It is indeed a good solution for
>>>> stateless services though they have to keep issues like I mentioned before
>>>> in mind. Your statement of custom header itself doesn?t mitigate CSRF
>>>> relies on the fact that ?Flash being vulnerable to same bug again in
>>>> future?. We cannot rely on a future statement and deprecate a technique,
>>>> instead providing defense in depth measure for it and also cautioning users
>>>> about past issues might be good idea. Users can take their call. Please
>>>> read custom headers and origin check sections I re-wrote for more
>>>> in-details. It talks about the issues and people can select if they want to
>>>> use it or not.
>>>>
>>>>
>>>>
>>>> Also, Login CSRF has nothing to do with custom header mitigation. Login
>>>> forms are usually handled on <form> tags and custom header mitigation is
>>>> only applicable on ajax calls because you cannot set custom headers on form
>>>> tags. It can be applicable if you are doing logins on Ajax/XHR requests in
>>>> which case my above response from custom header mitigation applies. I also
>>>> proposed few methods for mitigating login CSRF which aligns with our
>>>> primary defense on the new cheatsheet (tokens). Please review it as well.
>>>>
>>>>
>>>>
>>>> Also, CORS has nothing to do with CSRF. I infact added CORS as a
>>>> technique that should not be used/even thought for CSRF in the new
>>>> cheatsheet I wrote. Please check that and also read [1]
>>>>
>>>>
>>>>
>>>> [1]
>>>> https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
>>>>
>>>> [2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/
>>>>
>>>>
>>>>
>>>> BTW - Here is the link to the new cheat sheet -
>>>> https://tinyurl.com/y7k9fded
>>>>
>>>>
>>>>
>>>> Again,  I you are not convinced ? please let me know specific item and
>>>> we can happily discuss further J Alternatively, you can send us your
>>>> edits here for review and if it looks good for everyone ? you can edit it
>>>> in the wiki.
>>>>
>>>>
>>>>
>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>> *Sent:* Sunday, October 7, 2018 1:13 PM
>>>> *To:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>>>> *Cc:* Jim Manico <jim at manicode.com>; Konakandla, Manideep <
>>>> mkonakan at amazon.com>; owasp-cheat-sheets at lists.owasp.org
>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> Sync your update with one from Konakandla Manideep please ?
>>>>
>>>>
>>>>
>>>> Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>>>> a ?crit :
>>>>
>>>> Aloha Jim!
>>>>
>>>> With XSS, even CSRF tokens can be stolen :).
>>>>
>>>> But I'll keep your tip in mind when editing the wiki. I'm planning to
>>>> do that sometime this month.
>>>>
>>>> Please feel free to review it whenever you guys get a chance.
>>>>
>>>>
>>>>
>>>> Best,
>>>>
>>>> Pankaj
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com> wrote:
>>>>
>>>> I agree JWT's architectures *where cookies are not involved* are
>>>> resistant to CSRF but those tokens are at the risk of being stolen over XSS!
>>>>
>>>> The Origin header does not go with all requests and FireFox does not
>>>> fully support it yet. So careful!
>>>>
>>>> :)
>>>>
>>>>
>>>>
>>>> On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
>>>>
>>>> I agree and that's why I would like to propose deprecation of 'custom
>>>> header approach' as a CSRF defense.
>>>> Presently the mechanism that seems to work across applications is
>>>> validating custom header as well as a forbidden header name (that cannot be
>>>> set by a software or a program) e.g. Origin. If we want to give it a new
>>>> name like 'Double Header Validation' or something else, I'm fine with that
>>>> but custom header alone doesn't seem sufficient to mitigate CSRF issue.
>>>>
>>>>
>>>>
>>>> There are some other best practices that should also be considered. I
>>>> think CORS is now mature enough to have a mention in the CSRF defense Also,
>>>> applications utilizing JWT token in the header seem immune to CSRF.
>>>>
>>>>
>>>>
>>>> Please let me know what you guys think and if allowed, I can go ahead
>>>> and make some of these edits for your perusal.
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <
>>>> dominique.righetto at owasp.org> wrote:
>>>>
>>>> Good question, I think it's more a point about to be consistent in
>>>> terms of CSRF check across the application. Indeed, if you begin to perform
>>>> different kind of CSRF check depending on the feature of the application
>>>> (login, business feature, reset password...) it becomes risky and you
>>>> significantly increase the chance to include location in which you will
>>>> have a CSRF check weakness...
>>>>
>>>> --
>>>> Cordialement, Best regards,
>>>> Dominique Righetto
>>>> dominique.righetto at gmail.com
>>>>
>>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>>
>>>> https://righettod.eu
>>>> GPG: 323D19BA
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> On Sat, Oct 6, 2018 at 9:51 PM Pankaj Upadhyay <
>>>> p.upadhyay9999 at gmail.com> wrote:
>>>>
>>>> Do we know, regarding login CSRF, why validating the custom header as
>>>> well as the Origin/Host header is not a sufficient mitigation?
>>>>
>>>>
>>>>
>>>> On Fri, Sep 28, 2018 at 9:35 PM Konakandla, Manideep <
>>>> mkonakan at amazon.com> wrote:
>>>>
>>>> Login CSRF is a way of exploiting CSRF on login forms (details here
>>>> <https://seclab.stanford.edu/websec/csrf/csrf.pdf>). Though there is a
>>>> line about it in referrer validation section, it was not explained clearly
>>>> and how it can scale with other techniques such as token based mitigation.
>>>> No worries, I added a section about it!
>>>>
>>>>
>>>>
>>>> Finally, I am done with the document from my side and its sent for
>>>> internal reviews now. It should take 1-2 weeks before it comes to you guys.
>>>> Meanwhile, I still need help on below items from you guys. If no one was
>>>> able to find references for a), we can very well remove it.
>>>>
>>>>
>>>>
>>>> a.     Under double submit cookie section, it is mentioned that DWR
>>>> uses that approach but I could not find that anywhere within DWR
>>>> documentation that it uses double submit cookie. Can someone help me
>>>> finding reference if they know any?
>>>>
>>>> b.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>>> in the wiki
>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>>> to me like there are latest resources than the one?s linked in current
>>>> cheatsheet
>>>>
>>>>
>>>>
>>>> Happy weekend folks J
>>>>
>>>>
>>>>
>>>> *From:* Jim Manico <jim at manicode.com>
>>>> *Sent:* Thursday, September 27, 2018 3:02 AM
>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Jim Manico <
>>>> jim.manico at owasp.org>; Dave Wichers <dave.wichers at owasp.org>;
>>>> eric.sheridan at owasp.org; owasp-cheat-sheets at lists.owasp.org
>>>> *Subject:* Re:
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> ...as for (d) I dont see any problems with passing tokens as headers or
>>>> parameters
>>>>
>>>>
>>>>
>>>> I dont understand (e) can you explain that again?
>>>>
>>>> --
>>>>
>>>> Jim Manico
>>>>
>>>> @Manicode
>>>>
>>>> Secure Coding Education
>>>>
>>>> +1 (808) 652-3805
>>>>
>>>>
>>>> On Sep 26, 2018, at 4:46 PM, Konakandla, Manideep <mkonakan at amazon.com>
>>>> wrote:
>>>>
>>>> 2 more questions added  (Jim already started helping me on #a)
>>>>
>>>>
>>>>
>>>> a.     I requested for an OWASP account and it?s still in pending.
>>>> @JIM ? Can you please help me in getting my account approved? (registered
>>>> with mani.konakandla at gmail.com)
>>>>
>>>> b.     Under double submit cookie section, it is mentioned that DWR
>>>> uses that approach but I could not find that anywhere within DWR
>>>> documentation that it uses double submit cookie. Can someone help me
>>>> finding reference if they know any?
>>>>
>>>> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>>> in the wiki
>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>>> to me like there are latest resources than the one?s linked
>>>>
>>>> d.     At few places within the wiki, I have seen recommending to
>>>> include token in headers for Ajax requests. I also don?t see a problem in
>>>> passing them as parameters as well. Do you guys see any?
>>>>
>>>> e.     I also have not seen at any place within the wiki talking about
>>>> login CSRF issues and how each of the techniques described can be
>>>> prone/immune to it. Is there any reason for it or are we open to include
>>>> that?
>>>>
>>>>
>>>>
>>>> *From:* Konakandla, Manideep
>>>> *Sent:* Wednesday, September 26, 2018 5:27 PM
>>>> *To:* 'Jim Manico' <jim at manicode.com>; 'Dominique Righetto' <
>>>> dominique.righetto at owasp.org>
>>>> *Cc:* 'Jim Manico' <jim.manico at owasp.org>; 'Dave Wichers' <
>>>> dave.wichers at owasp.org>; 'eric.sheridan at owasp.org' <
>>>> eric.sheridan at owasp.org>; owasp-cheat-sheets at lists.owasp.org
>>>> *Subject:* RE:
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> Yeah. My understanding of the breadth of exploitation of XSS in an
>>>> application protected with just origin/referrer and other application
>>>> protected with just token based mitigation earlier was wrong. Dominique
>>>> earlier email thread cleared that to me (breadth of exploitation is same in
>>>> both the cases. i.e., if an XSS vulnerability is found in any individual
>>>> application protected with only one of those techniques, it still can
>>>> exploit all state changing operations on entire application [though the
>>>> complexity of exploitation is easy in origin/referrer check than token
>>>> based mitigation]).
>>>>
>>>>
>>>>
>>>> Anyway, I am all clear and also almost done with re-factoring the
>>>> cheatsheet  [1] J Should be fully completed by Friday unless something
>>>> comes up meanwhile. I will then send it to my colleagues for review and
>>>> then for Legal, PR approvals. Before that, I need help from you guys on
>>>> below items
>>>>
>>>>
>>>>
>>>> a.     I requested for an OWASP account and it?s still in pending.
>>>> @JIM ? Can you please help me in getting my account approved? (registered
>>>> with mani.konakandla at gmail.com)
>>>>
>>>> b.     Under double submit cookie section, it is mentioned that DWR
>>>> uses that approach but I could not find that anywhere within DWR
>>>> documentation that it uses double submit cookie. Can someone help me
>>>> finding reference if they know any?
>>>>
>>>> c.     One thing I wouldn?t be reviewing is the ASP.NET references mentioned
>>>> in the wiki
>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#ASP.NET.2C_MVC_and_.NET_Web_Pages>.
>>>> Can someone with .NET expertize verify if these are still accurate? Looks
>>>> to me like there are latest resources than the one?s linked
>>>>
>>>>
>>>>
>>>> [1] Below are changes done so far
>>>>
>>>> a. Switched primary, secondary defense and our reasoning behind it
>>>> (added lot of reasons on issues with origin/referrer header check and why
>>>> token should be made primary)
>>>>
>>>> b. Added CSRF mitigation myths (CORS, content-type validation etc.)
>>>>
>>>> c. Added a section called ?Not so popular CSRF mitigations? (mentioned
>>>> details about triple submit cookie)
>>>>
>>>> d. Included limitations / issues associated with double submit cookie,
>>>> same site cookie, captcha as a CSRF defense etc.
>>>>
>>>> e. Removed lot of obsolete content and added some new content to some
>>>> of the mitigations
>>>>
>>>> f. Made document look more better by adding RFC?s links wherever
>>>> possible and lot of other minor changes.
>>>>
>>>>
>>>>
>>>> *From:* Jim Manico <jim at manicode.com>
>>>> *Sent:* Wednesday, September 26, 2018 4:19 PM
>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>; Dominique Righetto <
>>>> dominique.righetto at owasp.org>
>>>> *Cc:* Jim Manico <jim.manico at owasp.org>; Dave Wichers <
>>>> dave.wichers at owasp.org>; eric.sheridan at owasp.org
>>>> *Subject:* Re:
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> Well tokens can be placed in cookies.
>>>>
>>>> The real answer to avoid CSRF is tokens in JavaScript variable as
>>>> opposed to cookies. They are not automatically sent and indeed make CSRF
>>>> impossible - at the expense of tokens being fully stolen via XSS. Pick your
>>>> poison!
>>>>
>>>> I recommend a COMBO of these defenses. For web apps, sychronizer token
>>>> + header verification + re-authentication for sensitive features.
>>>>
>>>> For API's double-cookie submit or just use JavaScript variable based
>>>> tokens + header verification for same-site API's + re-authentication for
>>>> sensitive features.
>>>>
>>>> > [1] If there is an XSS vulnerability at a single place on a domain
>>>> (it can add custom header), it can be used to make CSRF *on all other
>>>> state changing operationswithin that domain *done to that AJAX
>>>> endpoint. Do you agree?
>>>>
>>>>
>>>>
>>>> Absolutely!
>>>>
>>>>
>>>>
>>>> On 9/20/18 11:12 AM, Konakandla, Manideep wrote:
>>>>
>>>> Yeah, I understand that any XSS and CSRF game is over but I am
>>>> stressing out on the highlighted part in [1]. I am trying to highlight and
>>>> get an affirmation on why my understanding on token based mitigation is
>>>> better than origin/referrer header check will also apply to ?token based
>>>> mitigation Vs custom header mitigation (if static tokens are used in custom
>>>> headers)?.
>>>>
>>>>
>>>>
>>>> In case of tokens, we have an option to use different tokens on each
>>>> page (taking things like URL, timestamp etc. into consideration) and hence
>>>> XSS vulnerability on one page will only make state changing operations in
>>>> that page vulnerable to CSRF but not state changing operations on other
>>>> pages within that domain (because token value is different) but whereas in
>>>> origin/referrer header check and custom header check, the token value is
>>>> constant and hence XSS vulnerability in one page will also cause state
>>>> changing operations in other pages to be vulnerable to CSRF as well. Off
>>>> course, this can be mitigated in custom header checks by adding tokens to
>>>> custom headers rather than static constant but this cannot be mitigated in
>>>> origin/referrer check because those headers cannot be modified. So, yeah a
>>>> single XSS any CSRF is bypassed but the breadth of the impact is different
>>>> for each of them.
>>>>
>>>>
>>>>
>>>> Regarding code samples ? I currently was able to allocate only some
>>>> time for this task and I don?t think I will be able to do code samples
>>>> within this time frame. I am also leaving for a long vacation starting Oct
>>>> 12 and hence let?s try to get this out first and we can add code samples
>>>> later on considering my work load after I return from vacation.
>>>>
>>>>
>>>>
>>>> [1] If there is an XSS vulnerability at a single place on a domain (it
>>>> can add custom header), it can be used to make CSRF *on all other
>>>> state changing operationswithin that domain *done to that AJAX
>>>> endpoint. Do you agree?
>>>>
>>>>
>>>>
>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>> <dominique.righetto at owasp.org>
>>>> *Sent:* Thursday, September 20, 2018 8:45 AM
>>>> *To:* Jim Manico <jim at manicode.com> <jim at manicode.com>
>>>> *Cc:* Konakandla, Manideep <mkonakan at amazon.com> <mkonakan at amazon.com>;
>>>> Jim Manico <jim.manico at owasp.org> <jim.manico at owasp.org>; Dave Wichers
>>>> <dave.wichers at owasp.org> <dave.wichers at owasp.org>;
>>>> eric.sheridan at owasp.org
>>>> *Subject:* Re:
>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>
>>>>
>>>>
>>>> Hi,
>>>>
>>>>
>>>>
>>>> Thanks for your contribution.
>>>>
>>>>
>>>>
>>>> I like very much your plan ?
>>>>
>>>>
>>>>
>>>> I ask for some favor in addition :
>>>>
>>>> - can you provide code sample (in one language like java or .net or the
>>>> one you want but it must be easy to read and understand) or libraires along
>>>> your proposal for each section?
>>>>
>>>> - can you use the syntaxhighlight tag for code?
>>>>
>>>>
>>>>
>>>> I'am agree with Jim, XSS  means game over because your browsing context
>>>> can be used as proxy so csrf protection will be defeated because request
>>>> came from the legitimate user.
>>>>
>>>>
>>>>
>>>> Thanks you again for all your help ???
>>>>
>>>>
>>>>
>>>> Le jeu. 20 sept. 2018 ? 18:31, Jim Manico <jim at manicode.com> a ?crit :
>>>>
>>>> > If there is an XSS vulnerability at a single place on a domain (it
>>>> can add custom header), it can be used to make CSRF on all other state
>>>> changing operations within that domain done to that AJAX endpoint. Do you
>>>> agree?
>>>>
>>>> Any XSS is game over and all CSRF are useless in the face of XSS. I
>>>> Agree!
>>>>
>>>> - Jim
>>>>
>>>>
>>>>
>>>> On 9/19/18 10:52 PM, Konakandla, Manideep wrote:
>>>>
>>>> Hey Guys,
>>>>
>>>>
>>>>
>>>> [1] is what I said for origin/referrer header check in this e-mail
>>>> thread. I also believe that this applies for custom headers for AJAX
>>>> endpoints as well. If there is an XSS vulnerability at a single place on a
>>>> domain (it can add custom header), it can be used to make CSRF on all other
>>>> state changing operations within that domain done to that AJAX endpoint. Do
>>>> you agree?
>>>>
>>>>
>>>>
>>>> Here is how I am keeping the new re-factored cheatsheet. Does this look
>>>> good to you guys?
>>>>
>>>>
>>>>
>>>> 1.       Use token based method as primary defense
>>>>
>>>> a.       Can use synchronizer pattern for stateful applications
>>>>
>>>> b.       Can use hah based/ encryption based token pattern for
>>>> stateless applications
>>>>
>>>> 2.       Defense in depth measures along with drawbacks of each one
>>>>
>>>> a.       Origin/referrer header check
>>>>
>>>> b.       Double submit cookie
>>>>
>>>> c.       Samesite cookie
>>>>
>>>> d.       Custom headers (people still need to use tokens for forms
>>>> etc. if they have mix of ajax endpoints and general HTML)
>>>>
>>>> 3.       Strong CSRF defenses but very less usable : captcha etc.
>>>>
>>>> 4.       CSRF Myths / techniques that do not work section
>>>>
>>>>
>>>>
>>>> [1] if we solely rely on origin/referrer header check - an XSS
>>>> vulnerability within a single page on that domain will also give CSRF
>>>> vulnerability to all other state changing operations under that entire
>>>> domain.
>>>>
>>>>
>>>>
>>>> *From:* Dominique Righetto <span st <dominique.righetto at owasp.org>
>>>>
>>>> _______________________________________________
> OWASP-cheat-sheets mailing list
> OWASP-cheat-sheets at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190208/a80be778/attachment-0001.html>

From dominique.righetto at owasp.org  Fri Feb  8 19:27:21 2019
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Fri, 8 Feb 2019 20:27:21 +0100
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CAJq9yoRQ0G8x_AmdPVq_AWJvVJG+VdFDY2BnAja2YCD=yxHEyw@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<46fa44e0bd7941eaa029659ca8f3291f@EX13D11UWB004.ant.amazon.com>
	<CANos97csCLS8cgWwduXWt520AcT5Z_sfRXbNUc=Yq6+P8Tx1UA@mail.gmail.com>
	<ea0ad8742d904ea792880b77e6e81678@EX13D11UWB004.ant.amazon.com>
	<70E7657A-CA1F-4BD7-ADF7-07A85CD08E6B@manicode.com>
	<37df98b064aa4b39af8d0e585638b3c4@EX13D11UWB004.ant.amazon.com>
	<CANos97cXnfb_foCaPaYXQEGRnphTQu8P_KC7pXwkeb7_ak0m-A@mail.gmail.com>
	<2bf303591c134e949d52c3d8d5a155d0@EX13D11UWB004.ant.amazon.com>
	<CANos97c6xDAycEr=YY_LaDWaffohmq17Cy1o9iSDPSYBaUa4_A@mail.gmail.com>
	<92ffc47ab9d14f4f9723d1feca90e1ab@EX13D11UWB004.ant.amazon.com>
	<CANos97dTh0Tia6MftWq-_kWFzejWx7o0Uh=NyC8W_=jVpCUdOQ@mail.gmail.com>
	<e832f8afafc945e3b65cd5f17fe15c6b@EX13D11UWB004.ant.amazon.com>
	<CANos97ew=HjNnO+TSgUL55x8WPyzpuKhjERwmvHqEyx5XYMvTg@mail.gmail.com>
	<CAMjpMgcykhmtoA32F+BDZ=8nRkT8z-oM_HX=6Z2kdmKdHvAjUQ@mail.gmail.com>
	<CANos97dHxj6B0H+br7-NKxJkAhZT-Bm525i0DqHwoeAR=Hjnkg@mail.gmail.com>
	<6714ef10-aee3-6720-023d-a4dbc9399b3c@owasp.org>
	<CAJq9yoRQ0G8x_AmdPVq_AWJvVJG+VdFDY2BnAja2YCD=yxHEyw@mail.gmail.com>
Message-ID: <CANos97c1+LH=Fi3d-FfdOoCT3EaBkwd9avuzXCik208VGY6G9Q@mail.gmail.com>

Thanks you very much Matt for your supports and your feedback.

Le ven. 8 f?vr. 2019 ? 19:18, Matt Tesauro <matt.tesauro at owasp.org> a
?crit :

> For what it's worth, I'd strongly support this move.  Putting the cheat
> sheets in Github in something like Markdown makes great sense both in terms
> of ease to transform that content to other formats with something like
> pandoc or Jekyll plus the ability to use Git, GH issues, PRs,  GH projects
> ("kanban-like board) to discuss and track changes to that content.
> Additionally, you could use GH Pages to provide nicely rendered version of
> the cheat sheets as well.
>
> I believe it would help increase contribution to this great project.
>
> Cheers!
>
> --
> -- Matt Tesauro
> *OWASP Foundation*
> Director of Community and Operations
> matt.tesauro at owasp.org
>
> Consider giving back, and supporting the open source community by becoming
> a member <https://www.owasp.org/index.php/Membership> or making a donation
> <https://www.owasp.org/index.php/Donate> today!
>
>
> On Fri, Feb 8, 2019 at 11:48 AM Jim Manico <jim.manico at owasp.org> wrote:
>
>> We already as leaders made the call to move to the official OWASP GitHub.
>> The Wiki is highly limited. We're close to deleting those pages and just
>> reference Github. That way we have a comment system and a mature process
>> for tracking requests.
>>
>> It's already a done deal at this point, I'm sorry Dave.
>>
>> Aloha, Jim
>> On 2/8/19 6:40 AM, Dominique Righetto wrote:
>>
>> Section "Migration Pending" from
>> https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series
>>
>> I understand that you don't follow our communication channel but we use
>> it to communicate and it's the communication process choosen by the project
>> and we have many good feedback about it. Slack members of the CS channel
>> increase at a high speed.
>>
>> I respect your point of view but, as PL, the wiki mode allow uncontrolled
>> process of edition/creation and Jim/Me are responsible/accountable for the
>> quality/integrity of the CS/projects. Moreover the wiki do not allow
>> integration into CI for create others format or automate control. GH allow
>> also a fully open discution about any operation on CS.
>>
>> I respect also the fact that you do not like the gihub way but it's the
>> new way followed by new owasp projects (masvs, mstg, asvs, proactive
>> control and the top 10) and it faciliate the contribution even if you dont
>> like it. It's more easy to create a GH account than an OWASP one.
>>
>> If you dont like this way at the point that it block your to contribute
>> then i understand and respect your position but as PL Jim/Me has decided
>> this way so we will continue the road wihtout you even if we thanks you
>> very very much for your contribution.
>>
>> --
>> Cordialement, Best regards,
>> Dominique Righetto
>> dominique.righetto at gmail.com
>> <dominique.righetto at gmail.com>dominique.righetto at owasp.org
>> <dominique.righetto at gmail.com>
>> https://righettod.eu
>> GPG: 323D19BA
>>
>>
>> On Fri, Feb 8, 2019 at 5:27 PM Dave Wichers <dave.wichers at owasp.org>
>> wrote:
>>
>>> Clearly indicated on the home page where?  And I don't follow OWASP on
>>> Slack or Twitter so I was completely unaware of this.  You say follow 'the
>>> process' but I can't find it anywhere.
>>>
>>> If you really don't want the cheat sheets to be edited, lock them, and
>>> put notes ON the cheat sheets themselves about what the process is/where to
>>> find them.
>>>
>>> I'm also concerned that this process will make it MUCH harder to
>>> contribute, reducing people's willingness to do so (like me).
>>>
>>> -Dave
>>>
>>>
>>> On Thu, Feb 7, 2019 at 11:54 PM Dominique Righetto <
>>> dominique.righetto at owasp.org> wrote:
>>>
>>>> Hello all
>>>>
>>>> Since december wiki update of cs are deprecated. It is clearly
>>>> indicated on the homepage and slack and Twitter and GitHub since 3 month.
>>>>
>>>> If you modify the wiki your update will simply be ignored and lost.
>>>>
>>>> Please follow the process.
>>>>
>>>> All modification and creation of cs is now controlled by Jim and me as
>>>> PL along Continuous Integration process.
>>>>
>>>> Le ven. 8 f?vr. 2019 ? 00:43, Konakandla, Manideep <mkonakan at amazon.com>
>>>> a ?crit :
>>>>
>>>>> Hi Dave - Let?s continue our discussion here so that we have
>>>>> everything tracked in the cheat sheet email list (copying our 1:1
>>>>> conversation below).
>>>>>
>>>>>
>>>>>
>>>>> I really appreciate your support in the changes. I have few comments
>>>>> below
>>>>>
>>>>>
>>>>>
>>>>> a)       Dominique and Jim decided to move cheat sheets to Github.
>>>>> So, all new changes should be on Github CSRF
>>>>> <https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md>
>>>>> page. I think they are also working on deprecating the old wiki pages on
>>>>> OWASP. I am fine with all your changes (as most of them are
>>>>> cosmetic/grammatical/structural) except [1]. If you don?t mind, can you do
>>>>> these changes on the Github? I am fine with you moving the reference
>>>>> example to a different page as well. I have plans to add some other content
>>>>> (not anytime in next month) during which I will also try to trim the
>>>>> content as much as possible.
>>>>>
>>>>> b)      ?If a developer forgets to add the token to any state
>>>>> changing operation, they are making the application vulnerable to CSRF." is
>>>>> flat out wrong.  If a dev forgets to add a token, then the server is simply
>>>>> going to reject the request. It's not going to be vulnerable.  If you
>>>>> agree, can you fix this?
>>>>>
>>>>> >> You are ?assuming? here that the server has a token verification
>>>>> system which is not true by default. By default, all applications are
>>>>> vulnerable to CSRF unless developers add tokens / the system has a token
>>>>> verification system.
>>>>>
>>>>> c)       I am removing the changes related to [1] for now as they are
>>>>> clearly contradicting what we have in other parts of the cheat sheet. If
>>>>> you disagree, I am open to discussion before we get them back to the
>>>>> cheatsheet again. I might be missing something and I would love to hear
>>>>> your side of the story.
>>>>>
>>>>>
>>>>>
>>>>> *1.* Earlier, I rejected both the techniques you mentioned in
>>>>> ?Stateless/Tokenless Defense Techniques? to be in primary because
>>>>>
>>>>> *1.1* X-Requested-With: XMLHttpRequest Header: For the same FLASH
>>>>> related reasons mentioned under this
>>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Use_of_Custom_Request_Headers>
>>>>> section. On a separate thread, I was working with Riyaz who authored
>>>>> this
>>>>> <https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b>
>>>>> blog and you wouldn?t believe how many old browser versions are still
>>>>> vulnerable to this FLASH based redirect CSRF vulnerability. He also gave
>>>>> link to a HTML wrapper which seems to make this attack work on newer Chrome
>>>>> versions as well. If you are interested, I can provide more details about
>>>>> these. Hence, I don?t want users to be vulnerable by using this as a
>>>>> primary defense.
>>>>>
>>>>> *1.2 *Not a Simple HTTP Request Verification: Again, this is a
>>>>> technique that I rejected in the later section
>>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Content-Type_Header_Validation>
>>>>> of the document along with the reasoning.
>>>>>
>>>>>
>>>>>
>>>>> I just made some changes, feel free to review.
>>>>>
>>>>>
>>>>>
>>>>> I also think this comment: "If a developer forgets to add the token
>>>>> to any state changing operation, they are making the application vulnerable
>>>>> to CSRF." is flat out wrong.  If a dev forgets to add a token, then
>>>>> the server is simply going to reject the request. It's not going to be
>>>>> vulnerable.  If you agree, can you fix this?
>>>>>
>>>>>
>>>>>
>>>>> The article is also REALLY LONG. If you can identify anything to trim
>>>>> out, that would be great. I just trimmed out a few things, but I think we
>>>>> can do a lot more. Cheat sheets are supposed to be SHORT, but I realize
>>>>> many are not.
>>>>>
>>>>>
>>>>>
>>>>> For example, maybe we can move the reference example to a completely
>>>>> different page? That would shorten this alot.
>>>>>
>>>>> [image: https://ssl.gstatic.com/ui/v1/icons/mail/images/cleardot.gif]
>>>>>
>>>>>
>>>>>
>>>>> -Dave
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Wed, Feb 6, 2019 at 5:25 PM manideep konakandla <
>>>>> mani.konakandla at gmail.com> wrote:
>>>>>
>>>>> Yes. All those changes passed through review on email list but yes,
>>>>> please feel free to provide any more comments.
>>>>>
>>>>>
>>>>>
>>>>> On Wed, Feb 6, 2019, 1:21 PM Dave Wichers <dave.wichers at owasp.org
>>>>>  wrote:
>>>>>
>>>>> Are you:  Manideepk <https://www.owasp.org/index.php/User:Manideepk> on
>>>>> the OWASP site?
>>>>>
>>>>>
>>>>>
>>>>> I have some questions/comments about your changes to the OWASP CSRF
>>>>> Cheat Sheet.
>>>>>
>>>>>
>>>>>
>>>>> The bulk of those changes are here:
>>>>> https://www.owasp.org/index.php?title=Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet&type=revision&diff=244184&oldid=242455
>>>>>
>>>>>
>>>>>
>>>>> If this is you, I'll provide more details, but wanted to make sure I'm
>>>>> in touch with the right person first.
>>>>>
>>>>>
>>>>>
>>>>> -Dave
>>>>>
>>>>>
>>>>>
>>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>>> *Sent:* Sunday, December 23, 2018 4:13 AM
>>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>>> *Cc:* Jim Manico <jim at manicode.com>;
>>>>> owasp-cheat-sheets at lists.owasp.org
>>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Thanksyou very much for your support ???
>>>>>
>>>>>
>>>>>
>>>>> Le sam. 22 d?c. 2018 ? 22:24, Konakandla, Manideep <
>>>>> mkonakan at amazon.com> a ?crit :
>>>>>
>>>>> Let me know once the migration is started. I will do it for the CSRF
>>>>> prevention cheatsheet page J
>>>>>
>>>>>
>>>>>
>>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>>> *Sent:* Saturday, December 22, 2018 12:29 AM
>>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>>> *Cc:* Jim Manico <jim at manicode.com>;
>>>>> owasp-cheat-sheets at lists.owasp.org
>>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Hello Manideep,
>>>>>
>>>>>
>>>>>
>>>>> Thanks you for the update.
>>>>>
>>>>>
>>>>>
>>>>> For info we will migrate the entire project content (unless the
>>>>> homepage) to github so it is possible that you need to also made the update
>>>>> on the github repository.
>>>>>
>>>>>
>>>>>
>>>>> The migration work will start on January, i will take some rest until
>>>>> January, i really need it.
>>>>>
>>>>>
>>>>>
>>>>> Thanks you very much for your help on this project :)
>>>>>
>>>>>
>>>>>
>>>>> Happy holidays too
>>>>>
>>>>>
>>>>> --
>>>>> Cordialement, Best regards,
>>>>> Dominique Righetto
>>>>> dominique.righetto at gmail.com
>>>>>
>>>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>>>
>>>>> https://righettod.eu
>>>>> GPG: 323D19BA
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Sat, Dec 22, 2018 at 3:40 AM Konakandla, Manideep <
>>>>> mkonakan at amazon.com> wrote:
>>>>>
>>>>> Hello all,
>>>>>
>>>>>
>>>>>
>>>>> I made a change to ?Double Submit Cookie? technique [1]. I added a
>>>>> variant to it which now mitigates well-known security issues with standard
>>>>> ?Double Submit Cookie? technique. So, people can use this technique without
>>>>> any issues. Please let me know if anyone finds any issues within it.
>>>>>
>>>>>
>>>>>
>>>>> Whenever I get some free time in next 1-2 months, I am planning to
>>>>> include
>>>>>
>>>>> a)       Details about popular 6-7 web frameworks and the CSRF
>>>>> mitigations implemented by them
>>>>>
>>>>> b)      Re-organize the page even more better by switching variant of
>>>>> double submit cookie to primary defense (under stateless section) etc.
>>>>>
>>>>>
>>>>>
>>>>> Happy holidays everyone J
>>>>>
>>>>>
>>>>>
>>>>> [1]
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Double_Submit_Cookie
>>>>> (read the last para under this mitigation)
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>>> *Sent:* Saturday, October 13, 2018 12:59 AM
>>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>>> *Cc:* Jim Manico <jim at manicode.com>; Pankaj Upadhyay <
>>>>> p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
>>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Hi,
>>>>>
>>>>> CS publishing released and notification sent to the community via
>>>>> Twitter and Slack channel.
>>>>>
>>>>> --
>>>>> Cordialement, Best regards,
>>>>> Dominique Righetto
>>>>> dominique.righetto at gmail.com
>>>>>
>>>>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>>>>
>>>>> https://righettod.eu
>>>>> GPG: 323D19BA
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Fri, Oct 12, 2018 at 3:47 AM Konakandla, Manideep <
>>>>> mkonakan at amazon.com> wrote:
>>>>>
>>>>> Yes, I am feeling way better now. Thank you J
>>>>>
>>>>>
>>>>>
>>>>> *@ALL: *Cheat sheet is updated with all the changes now
>>>>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>.
>>>>> Please let me know if you have any issues by end of tomorrow. If there are
>>>>> no issues - I/we can start advertising the refactored cheat sheet in our
>>>>> networks J
>>>>>
>>>>>
>>>>>
>>>>> Thanks a ton *Dominique* and *Jim* for all your help till date. I
>>>>> really appreciate it!!! I will be actively maintaining this as well from
>>>>> today J
>>>>>
>>>>>
>>>>>
>>>>> Regards,
>>>>>
>>>>> Manideep Konakandla
>>>>>
>>>>> www.manideepk.com
>>>>>
>>>>> Security Engineer @ Amazon
>>>>>
>>>>> mkonakan at amazon.com
>>>>>
>>>>>
>>>>>
>>>>> *From:* Jim Manico <jim at manicode.com>
>>>>> *Sent:* Wednesday, October 10, 2018 10:39 PM
>>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>>> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Pankaj
>>>>> Upadhyay <p.upadhyay9999 at gmail.com>;
>>>>> owasp-cheat-sheets at lists.owasp.org
>>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Go for it!!! I hope you?re feeling better!
>>>>>
>>>>> --
>>>>>
>>>>> Jim Manico
>>>>>
>>>>> @Manicode
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Oct 10, 2018, at 10:18 PM, Konakandla, Manideep <
>>>>> mkonakan at amazon.com> wrote:
>>>>>
>>>>> Sorry for late reply. I was on sick leave for last 2 days.
>>>>>
>>>>>
>>>>>
>>>>> I synced up with Dominique in a different email chain to clarify
>>>>> something in his previous email. He gave me a go ahead to update wiki with
>>>>> new re-factored cheat sheet. I am planning to do it sometime tomorrow.
>>>>> *@Jim* : Is it with fine with you as well? Please let me know if you
>>>>> have any concerns.
>>>>>
>>>>>
>>>>>
>>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>>> *Sent:* Monday, October 8, 2018 1:47 AM
>>>>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>>>>> *Cc:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>; Jim Manico <
>>>>> jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
>>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Hello all,
>>>>>
>>>>>
>>>>>
>>>>> In order to move forward and deliver something in the project please
>>>>> update the wiki with content from the refactoring from Konakandla Manideep.
>>>>> If there missing points they will be added in another round it is the role
>>>>> of the wiki based usage.
>>>>>
>>>>>
>>>>>
>>>>> Thanks in advance for your understanding ?
>>>>>
>>>>>
>>>>>
>>>>> Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com>
>>>>> a ?crit :
>>>>>
>>>>> Hey Folks J
>>>>>
>>>>>
>>>>>
>>>>> Good conversation :) Can you guys review the new cheat sheet once? I
>>>>> am sure most of the discussion going on here is already answered in the new
>>>>> re-factored cheat sheet I wrote.
>>>>>
>>>>>
>>>>>
>>>>> @Pankaj ? Go through the respective sections in the new cheat sheet.
>>>>> If they are not clear / you are not convinced, we can discuss more. Below
>>>>> is the summary of my response to your questions (you will find the same
>>>>> gist going through the cheat sheet as well).
>>>>>
>>>>>
>>>>>
>>>>> Go through [2] to understand more detailed on how flash based bypass
>>>>> on CSRF custom mitigation defense works. You can see there that the origin
>>>>> headers are passed along with the custom headers and hence current wiki
>>>>> asks to do origin and/or referrer header check as defense-in-depth (it
>>>>> would help even if flash sometime in the future repeats same mistake and
>>>>> forwards custom headers without crossdomain.xml checks. Domain requesting
>>>>> the redirected request might be fooled with custom header bypass but not
>>>>> the origin header check). If both these checks are done, it is indeed a
>>>>> good defense but origin header is not always included etc. (just as Jim
>>>>> mentioned and also as new cheatsheet mentions).  I don?t think deprecating
>>>>> custom header check is a good idea. It is indeed a good solution for
>>>>> stateless services though they have to keep issues like I mentioned before
>>>>> in mind. Your statement of custom header itself doesn?t mitigate CSRF
>>>>> relies on the fact that ?Flash being vulnerable to same bug again in
>>>>> future?. We cannot rely on a future statement and deprecate a technique,
>>>>> instead providing defense in depth measure for it and also cautioning users
>>>>> about past issues might be good idea. Users can take their call. Please
>>>>> read custom headers and origin check sections I re-wrote for more
>>>>> in-details. It talks about the issues and people can select if they want to
>>>>> use it or not.
>>>>>
>>>>>
>>>>>
>>>>> Also, Login CSRF has nothing to do with custom header mitigation.
>>>>> Login forms are usually handled on <form> tags and custom header mitigation
>>>>> is only applicable on ajax calls because you cannot set custom headers on
>>>>> form tags. It can be applicable if you are doing logins on Ajax/XHR
>>>>> requests in which case my above response from custom header mitigation
>>>>> applies. I also proposed few methods for mitigating login CSRF which aligns
>>>>> with our primary defense on the new cheatsheet (tokens). Please review it
>>>>> as well.
>>>>>
>>>>>
>>>>>
>>>>> Also, CORS has nothing to do with CSRF. I infact added CORS as a
>>>>> technique that should not be used/even thought for CSRF in the new
>>>>> cheatsheet I wrote. Please check that and also read [1]
>>>>>
>>>>>
>>>>>
>>>>> [1]
>>>>> https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
>>>>>
>>>>> [2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/
>>>>>
>>>>>
>>>>>
>>>>> BTW - Here is the link to the new cheat sheet -
>>>>> https://tinyurl.com/y7k9fded
>>>>>
>>>>>
>>>>>
>>>>> Again,  I you are not convinced ? please let me know specific item and
>>>>> we can happily discuss further J Alternatively, you can send us your
>>>>> edits here for review and if it looks good for everyone ? you can edit it
>>>>> in the wiki.
>>>>>
>>>>>
>>>>>
>>>>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>>>>> *Sent:* Sunday, October 7, 2018 1:13 PM
>>>>> *To:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>>>>> *Cc:* Jim Manico <jim at manicode.com>; Konakandla, Manideep <
>>>>> mkonakan at amazon.com>; owasp-cheat-sheets at lists.owasp.org
>>>>> *Subject:* Re: [OWASP-cheat-sheets]
>>>>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>>>>
>>>>>
>>>>>
>>>>> Sync your update with one from Konakandla Manideep please ?
>>>>>
>>>>>
>>>>>
>>>>> Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>>>>> a ?crit :
>>>>>
>>>>> Aloha Jim!
>>>>>
>>>>> With XSS, even CSRF tokens can be stolen :).
>>>>>
>>>>> But I'll keep your tip in mind when editing the wiki. I'm planning to
>>>>> do that sometime this month.
>>>>>
>>>>> Please feel free to review it whenever you guys get a chance.
>>>>>
>>>>>
>>>>>
>>>>> Best,
>>>>>
>>>>> Pankaj
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com> wrote:
>>>>>
>>>>> I agree JWT's architectures *where cookies are not involved* are
>>>>> resistant to CSRF but those tokens are at the risk of being stolen over XSS!
>>>>>
>>>>> The Origin header does not go with all requests and FireFox does not
>>>>> fully support it yet. So careful!
>>>>>
>>>>> :)
>>>>>
>>>>>
>>>>>
>>>>> On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
>>>>>
>>>>> I agree and that's why I would like to propose deprecation of 'custom
>>>>> header approach' as a CSRF defense.
>>>>> Presently the mechanism that seems to work across applications is
>>>>> validating custom header as well as a forbidden header name (that cannot be
>>>>> set by a software or a program) e.g. Origin. If we want to give it a new
>>>>> name like 'Double Header Validation' or something else, I'm fine with that
>>>>> but custom header alone doesn't seem sufficient to mitigate CSRF issue.
>>>>>
>>>>>
>>>>>
>>>>> There are some other best practices that should also be considered. I
>>>>> think CORS is now mature enough to have a mention in the CSRF defense Also,
>>>>> applications utilizing JWT token in the header seem immune to CSRF.
>>>>>
>>>>>
>>>>>
>>>>> Please let me know what you guys think and if allowed, I can go ahead
>>>>> and make some of these edits for your perusal.
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <
>>>>> dominique.righetto at owasp.org> wrote:
>>>>>
>>>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190208/0a0324bb/attachment-0001.html>

From mkonakan at amazon.com  Fri Feb  8 21:27:58 2019
From: mkonakan at amazon.com (Konakandla, Manideep)
Date: Fri, 8 Feb 2019 21:27:58 +0000
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CANos97c1+LH=Fi3d-FfdOoCT3EaBkwd9avuzXCik208VGY6G9Q@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<46fa44e0bd7941eaa029659ca8f3291f@EX13D11UWB004.ant.amazon.com>
	<CANos97csCLS8cgWwduXWt520AcT5Z_sfRXbNUc=Yq6+P8Tx1UA@mail.gmail.com>
	<ea0ad8742d904ea792880b77e6e81678@EX13D11UWB004.ant.amazon.com>
	<70E7657A-CA1F-4BD7-ADF7-07A85CD08E6B@manicode.com>
	<37df98b064aa4b39af8d0e585638b3c4@EX13D11UWB004.ant.amazon.com>
	<CANos97cXnfb_foCaPaYXQEGRnphTQu8P_KC7pXwkeb7_ak0m-A@mail.gmail.com>
	<2bf303591c134e949d52c3d8d5a155d0@EX13D11UWB004.ant.amazon.com>
	<CANos97c6xDAycEr=YY_LaDWaffohmq17Cy1o9iSDPSYBaUa4_A@mail.gmail.com>
	<92ffc47ab9d14f4f9723d1feca90e1ab@EX13D11UWB004.ant.amazon.com>
	<CANos97dTh0Tia6MftWq-_kWFzejWx7o0Uh=NyC8W_=jVpCUdOQ@mail.gmail.com>
	<e832f8afafc945e3b65cd5f17fe15c6b@EX13D11UWB004.ant.amazon.com>
	<CANos97ew=HjNnO+TSgUL55x8WPyzpuKhjERwmvHqEyx5XYMvTg@mail.gmail.com>
	<CAMjpMgcykhmtoA32F+BDZ=8nRkT8z-oM_HX=6Z2kdmKdHvAjUQ@mail.gmail.com>
	<CANos97dHxj6B0H+br7-NKxJkAhZT-Bm525i0DqHwoeAR=Hjnkg@mail.gmail.com>
	<6714ef10-aee3-6720-023d-a4dbc9399b3c@owasp.org>
	<CAJq9yoRQ0G8x_AmdPVq_AWJvVJG+VdFDY2BnAja2YCD=yxHEyw@mail.gmail.com>
	<CANos97c1+LH=Fi3d-FfdOoCT3EaBkwd9avuzXCik208VGY6G9Q@mail.gmail.com>
Message-ID: <f056014958204a36b0dc6307a217b51d@EX13D11UWB004.ant.amazon.com>

I personally feel that Github is a nice move as well ?but? I think atleast 1 or 2 people should be given control over each cheat sheet along with the PLs. I agree PLs are great, knowledgable but I contributed a lot to CSRF cheat sheet recently and also have BUNCH of other things that I planned to add. I obviously would know more about this stuff than PLs (really, no offense, I am just saying that I know more about the stuff that I added). PLs can make sure the overall quality of the cheat sheets is being maintained and individual cheat sheet owners can make sure that their particular cheat sheet is in quality. I just feel that we are trying to convert a wide open Wikipedia (OWASP wikis) into closed controlled market. It?s fine doing it but atleast let the control be kept in few more deserved hands as well. What do you guys think about this? I would love to hear your side of the story.

Hi Dave, Regarding

a)       Feel free to go ahead and submit a PR for reflecting the clarity. I am fine with it, it?s not any technical change.

b)      I provided the resources you requested in a separate email. Unless there is some technical reasoning that those techniques are not having any vulnerability out in market today, I am not comfortable moving them to primary defense.

P.S: I tried putting up my views/opinions/answers as a friendly constructive conversation and would appreciate the same in return ?

From: owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org <owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org> On Behalf Of Dominique Righetto
Sent: Friday, February 8, 2019 11:27 AM
To: Matt Tesauro <matt.tesauro at owasp.org>
Cc: owasp-cheat-sheets at lists.owasp.org
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Thanks you very much Matt for your supports and your feedback.

Le ven. 8 f?vr. 2019 ? 19:18, Matt Tesauro <matt.tesauro at owasp.org<mailto:matt.tesauro at owasp.org>> a ?crit :
For what it's worth, I'd strongly support this move.  Putting the cheat sheets in Github in something like Markdown makes great sense both in terms of ease to transform that content to other formats with something like pandoc or Jekyll plus the ability to use Git, GH issues, PRs,  GH projects ("kanban-like board) to discuss and track changes to that content.  Additionally, you could use GH Pages to provide nicely rendered version of the cheat sheets as well.

I believe it would help increase contribution to this great project.

Cheers!

--
-- Matt Tesauro
OWASP Foundation
Director of Community and Operations
matt.tesauro at owasp.org<mailto:matt.tesauro at owasp.org>

Consider giving back, and supporting the open source community by becoming a member<https://www.owasp.org/index.php/Membership> or making a donation<https://www.owasp.org/index.php/Donate> today!


On Fri, Feb 8, 2019 at 11:48 AM Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>> wrote:

We already as leaders made the call to move to the official OWASP GitHub. The Wiki is highly limited. We're close to deleting those pages and just reference Github. That way we have a comment system and a mature process for tracking requests.

It's already a done deal at this point, I'm sorry Dave.

Aloha, Jim
On 2/8/19 6:40 AM, Dominique Righetto wrote:
Section "Migration Pending" from https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series

I understand that you don't follow our communication channel but we use it to communicate and it's the communication process choosen by the project and we have many good feedback about it. Slack members of the CS channel increase at a high speed.

I respect your point of view but, as PL, the wiki mode allow uncontrolled process of edition/creation and Jim/Me are responsible/accountable for the quality/integrity of the CS/projects. Moreover the wiki do not allow integration into CI for create others format or automate control. GH allow also a fully open discution about any operation on CS.

I respect also the fact that you do not like the gihub way but it's the new way followed by new owasp projects (masvs, mstg, asvs, proactive control and the top 10) and it faciliate the contribution even if you dont like it. It's more easy to create a GH account than an OWASP one.

If you dont like this way at the point that it block your to contribute then i understand and respect your position but as PL Jim/Me has decided this way so we will continue the road wihtout you even if we thanks you very very much for your contribution.

--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Feb 8, 2019 at 5:27 PM Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>> wrote:
Clearly indicated on the home page where?  And I don't follow OWASP on Slack or Twitter so I was completely unaware of this.  You say follow 'the process' but I can't find it anywhere.

If you really don't want the cheat sheets to be edited, lock them, and put notes ON the cheat sheets themselves about what the process is/where to find them.

I'm also concerned that this process will make it MUCH harder to contribute, reducing people's willingness to do so (like me).

-Dave


On Thu, Feb 7, 2019 at 11:54 PM Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>> wrote:
Hello all

Since december wiki update of cs are deprecated. It is clearly indicated on the homepage and slack and Twitter and GitHub since 3 month.

If you modify the wiki your update will simply be ignored and lost.

Please follow the process.

All modification and creation of cs is now controlled by Jim and me as PL along Continuous Integration process.

Le ven. 8 f?vr. 2019 ? 00:43, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Hi Dave - Let?s continue our discussion here so that we have everything tracked in the cheat sheet email list (copying our 1:1 conversation below).

I really appreciate your support in the changes. I have few comments below


a)       Dominique and Jim decided to move cheat sheets to Github. So, all new changes should be on Github CSRF<https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md> page. I think they are also working on deprecating the old wiki pages on OWASP. I am fine with all your changes (as most of them are cosmetic/grammatical/structural) except [1]. If you don?t mind, can you do these changes on the Github? I am fine with you moving the reference example to a different page as well. I have plans to add some other content (not anytime in next month) during which I will also try to trim the content as much as possible.

b)      ?If a developer forgets to add the token to any state changing operation, they are making the application vulnerable to CSRF." is flat out wrong.  If a dev forgets to add a token, then the server is simply going to reject the request. It's not going to be vulnerable.  If you agree, can you fix this?

>> You are ?assuming? here that the server has a token verification system which is not true by default. By default, all applications are vulnerable to CSRF unless developers add tokens / the system has a token verification system.

c)       I am removing the changes related to [1] for now as they are clearly contradicting what we have in other parts of the cheat sheet. If you disagree, I am open to discussion before we get them back to the cheatsheet again. I might be missing something and I would love to hear your side of the story.

1. Earlier, I rejected both the techniques you mentioned in ?Stateless/Tokenless Defense Techniques? to be in primary because
1.1 X-Requested-With: XMLHttpRequest Header: For the same FLASH related reasons mentioned under this<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Use_of_Custom_Request_Headers> section. On a separate thread, I was working with Riyaz who authored this<https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b> blog and you wouldn?t believe how many old browser versions are still vulnerable to this FLASH based redirect CSRF vulnerability. He also gave link to a HTML wrapper which seems to make this attack work on newer Chrome versions as well. If you are interested, I can provide more details about these. Hence, I don?t want users to be vulnerable by using this as a primary defense.
1.2 Not a Simple HTTP Request Verification: Again, this is a technique that I rejected in the later section<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Content-Type_Header_Validation> of the document along with the reasoning.

I just made some changes, feel free to review.

I also think this comment: "If a developer forgets to add the token to any state changing operation, they are making the application vulnerable to CSRF." is flat out wrong.  If a dev forgets to add a token, then the server is simply going to reject the request. It's not going to be vulnerable.  If you agree, can you fix this?

The article is also REALLY LONG. If you can identify anything to trim out, that would be great. I just trimmed out a few things, but I think we can do a lot more. Cheat sheets are supposed to be SHORT, but I realize many are not.

For example, maybe we can move the reference example to a completely different page? That would shorten this alot.

-Dave


On Wed, Feb 6, 2019 at 5:25 PM manideep konakandla <mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>> wrote:
Yes. All those changes passed through review on email list but yes, please feel free to provide any more comments.

On Wed, Feb 6, 2019, 1:21 PM Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org> wrote:
Are you:  Manideepk<https://www.owasp.org/index.php/User:Manideepk> on the OWASP site?

I have some questions/comments about your changes to the OWASP CSRF Cheat Sheet.

The bulk of those changes are here: https://www.owasp.org/index.php?title=Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet&type=revision&diff=244184&oldid=242455

If this is you, I'll provide more details, but wanted to make sure I'm in touch with the right person first.

-Dave

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Sunday, December 23, 2018 4:13 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Thanksyou very much for your support ???

Le sam. 22 d?c. 2018 ? 22:24, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Let me know once the migration is started. I will do it for the CSRF prevention cheatsheet page ?

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Saturday, December 22, 2018 12:29 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hello Manideep,

Thanks you for the update.

For info we will migrate the entire project content (unless the homepage) to github so it is possible that you need to also made the update on the github repository.

The migration work will start on January, i will take some rest until January, i really need it.

Thanks you very much for your help on this project :)

Happy holidays too

--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Sat, Dec 22, 2018 at 3:40 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Hello all,

I made a change to ?Double Submit Cookie? technique [1]. I added a variant to it which now mitigates well-known security issues with standard ?Double Submit Cookie? technique. So, people can use this technique without any issues. Please let me know if anyone finds any issues within it.

Whenever I get some free time in next 1-2 months, I am planning to include

a)       Details about popular 6-7 web frameworks and the CSRF mitigations implemented by them

b)      Re-organize the page even more better by switching variant of double submit cookie to primary defense (under stateless section) etc.

Happy holidays everyone ?

[1]  https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Double_Submit_Cookie  (read the last para under this mitigation)


From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Saturday, October 13, 2018 12:59 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hi,
CS publishing released and notification sent to the community via Twitter and Slack channel.
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Oct 12, 2018 at 3:47 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Yes, I am feeling way better now. Thank you ?

@ALL: Cheat sheet is updated with all the changes now<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>. Please let me know if you have any issues by end of tomorrow. If there are no issues - I/we can start advertising the refactored cheat sheet in our networks ?

Thanks a ton Dominique and Jim for all your help till date. I really appreciate it!!! I will be actively maintaining this as well from today ?

Regards,
Manideep Konakandla
www.manideepk.com<http://www.manideepk.com>
Security Engineer @ Amazon
mkonakan at amazon.com<mailto:mkonakan at amazon.com>

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Wednesday, October 10, 2018 10:39 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Go for it!!! I hope you?re feeling better!
--
Jim Manico
@Manicode


On Oct 10, 2018, at 10:18 PM, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Sorry for late reply. I was on sick leave for last 2 days.

I synced up with Dominique in a different email chain to clarify something in his previous email. He gave me a go ahead to update wiki with new re-factored cheat sheet. I am planning to do it sometime tomorrow. @Jim : Is it with fine with you as well? Please let me know if you have any concerns.

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Monday, October 8, 2018 1:47 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>; Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hello all,

In order to move forward and deliver something in the project please update the wiki with content from the refactoring from Konakandla Manideep. If there missing points they will be added in another round it is the role of the wiki based usage.

Thanks in advance for your understanding ?

Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Hey Folks ?

Good conversation :) Can you guys review the new cheat sheet once? I am sure most of the discussion going on here is already answered in the new re-factored cheat sheet I wrote.

@Pankaj ? Go through the respective sections in the new cheat sheet. If they are not clear / you are not convinced, we can discuss more. Below is the summary of my response to your questions (you will find the same gist going through the cheat sheet as well).

Go through [2] to understand more detailed on how flash based bypass on CSRF custom mitigation defense works. You can see there that the origin headers are passed along with the custom headers and hence current wiki asks to do origin and/or referrer header check as defense-in-depth (it would help even if flash sometime in the future repeats same mistake and forwards custom headers without crossdomain.xml checks. Domain requesting the redirected request might be fooled with custom header bypass but not the origin header check). If both these checks are done, it is indeed a good defense but origin header is not always included etc. (just as Jim mentioned and also as new cheatsheet mentions).  I don?t think deprecating custom header check is a good idea. It is indeed a good solution for stateless services though they have to keep issues like I mentioned before in mind. Your statement of custom header itself doesn?t mitigate CSRF relies on the fact that ?Flash being vulnerable to same bug again in future?. We cannot rely on a future statement and deprecate a technique, instead providing defense in depth measure for it and also cautioning users about past issues might be good idea. Users can take their call. Please read custom headers and origin check sections I re-wrote for more in-details. It talks about the issues and people can select if they want to use it or not.

Also, Login CSRF has nothing to do with custom header mitigation. Login forms are usually handled on <form> tags and custom header mitigation is only applicable on ajax calls because you cannot set custom headers on form tags. It can be applicable if you are doing logins on Ajax/XHR requests in which case my above response from custom header mitigation applies. I also proposed few methods for mitigating login CSRF which aligns with our primary defense on the new cheatsheet (tokens). Please review it as well.

Also, CORS has nothing to do with CSRF. I infact added CORS as a technique that should not be used/even thought for CSRF in the new cheatsheet I wrote. Please check that and also read [1]

[1] https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
[2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/

BTW - Here is the link to the new cheat sheet - https://tinyurl.com/y7k9fded

Again,  I you are not convinced ? please let me know specific item and we can happily discuss further ? Alternatively, you can send us your edits here for review and if it looks good for everyone ? you can edit it in the wiki.

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Sunday, October 7, 2018 1:13 PM
To: Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Sync your update with one from Konakandla Manideep please ?

Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>> a ?crit :
Aloha Jim!
With XSS, even CSRF tokens can be stolen :).
But I'll keep your tip in mind when editing the wiki. I'm planning to do that sometime this month.
Please feel free to review it whenever you guys get a chance.

Best,
Pankaj


On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com<mailto:jim at manicode.com>> wrote:

I agree JWT's architectures where cookies are not involved are resistant to CSRF but those tokens are at the risk of being stolen over XSS!

The Origin header does not go with all requests and FireFox does not fully support it yet. So careful!

:)

On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
I agree and that's why I would like to propose deprecation of 'custom header approach' as a CSRF defense.
Presently the mechanism that seems to work across applications is validating custom header as well as a forbidden header name (that cannot be set by a software or a program) e.g. Origin. If we want to give it a new name like 'Double Header Validation' or something else, I'm fine with that but custom header alone doesn't seem sufficient to mitigate CSRF issue.

There are some other best practices that should also be considered. I think CORS is now mature enough to have a mention in the CSRF defense Also, applications utilizing JWT token in the header seem immune to CSRF.

Please let me know what you guys think and if allowed, I can go ahead and make some of these edits for your perusal.


On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>> wrote:
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190208/bcb1aa61/attachment-0001.html>

From mkonakan at amazon.com  Fri Feb  8 21:41:57 2019
From: mkonakan at amazon.com (Konakandla, Manideep)
Date: Fri, 8 Feb 2019 21:41:57 +0000
Subject: [OWASP-cheat-sheets]
 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <c358f250-eb5d-95d4-e95a-a747aa41400f@manicode.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<37df98b064aa4b39af8d0e585638b3c4@EX13D11UWB004.ant.amazon.com>
	<CANos97cXnfb_foCaPaYXQEGRnphTQu8P_KC7pXwkeb7_ak0m-A@mail.gmail.com>
	<2bf303591c134e949d52c3d8d5a155d0@EX13D11UWB004.ant.amazon.com>
	<CANos97c6xDAycEr=YY_LaDWaffohmq17Cy1o9iSDPSYBaUa4_A@mail.gmail.com>
	<92ffc47ab9d14f4f9723d1feca90e1ab@EX13D11UWB004.ant.amazon.com>
	<CANos97dTh0Tia6MftWq-_kWFzejWx7o0Uh=NyC8W_=jVpCUdOQ@mail.gmail.com>
	<e832f8afafc945e3b65cd5f17fe15c6b@EX13D11UWB004.ant.amazon.com>
	<CANos97ew=HjNnO+TSgUL55x8WPyzpuKhjERwmvHqEyx5XYMvTg@mail.gmail.com>
	<CAMjpMgcykhmtoA32F+BDZ=8nRkT8z-oM_HX=6Z2kdmKdHvAjUQ@mail.gmail.com>
	<CANos97dHxj6B0H+br7-NKxJkAhZT-Bm525i0DqHwoeAR=Hjnkg@mail.gmail.com>
	<6714ef10-aee3-6720-023d-a4dbc9399b3c@owasp.org>
	<CAJq9yoRQ0G8x_AmdPVq_AWJvVJG+VdFDY2BnAja2YCD=yxHEyw@mail.gmail.com>
	<CANos97c1+LH=Fi3d-FfdOoCT3EaBkwd9avuzXCik208VGY6G9Q@mail.gmail.com>
	<f056014958204a36b0dc6307a217b51d@EX13D11UWB004.ant.amazon.com>
	<c358f250-eb5d-95d4-e95a-a747aa41400f@manicode.com>
Message-ID: <dfeac335745a4c50b03e883d3e7bbd3a@EX13D11UWB004.ant.amazon.com>

I haven?t used public facing Github much in last year and I am not sure about that. You guys might want to see it if it?s possible with the type of account you may have and if not, may you might wanna think about considering alternatives (I think making people editors for full package and providing them instructions to just make sure that they touch only their cheat sheet is not a bad idea too).

From: Jim Manico <jim at manicode.com>
Sent: Friday, February 8, 2019 1:30 PM
To: Konakandla, Manideep <mkonakan at amazon.com>; Dominique Righetto <dominique.righetto at owasp.org>; Matt Tesauro <matt.tesauro at owasp.org>
Cc: owasp-cheat-sheets at lists.owasp.org; Dave Wichers <dave.wichers at owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet


Will GitHub let us make you editor of the one cheatsheet you authored? If so I think that is ok.

Aloha, Jim
On 2/8/19 11:27 AM, Konakandla, Manideep wrote:
I personally feel that Github is a nice move as well ?but? I think atleast 1 or 2 people should be given control over each cheat sheet along with the PLs. I agree PLs are great, knowledgable but I contributed a lot to CSRF cheat sheet recently and also have BUNCH of other things that I planned to add. I obviously would know more about this stuff than PLs (really, no offense, I am just saying that I know more about the stuff that I added). PLs can make sure the overall quality of the cheat sheets is being maintained and individual cheat sheet owners can make sure that their particular cheat sheet is in quality. I just feel that we are trying to convert a wide open Wikipedia (OWASP wikis) into closed controlled market. It?s fine doing it but atleast let the control be kept in few more deserved hands as well. What do you guys think about this? I would love to hear your side of the story.

Hi Dave, Regarding

a)     Feel free to go ahead and submit a PR for reflecting the clarity. I am fine with it, it?s not any technical change.

b)    I provided the resources you requested in a separate email. Unless there is some technical reasoning that those techniques are not having any vulnerability out in market today, I am not comfortable moving them to primary defense.

P.S: I tried putting up my views/opinions/answers as a friendly constructive conversation and would appreciate the same in return ?

From: owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org<mailto:owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org> <owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org><mailto:owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org> On Behalf Of Dominique Righetto
Sent: Friday, February 8, 2019 11:27 AM
To: Matt Tesauro <matt.tesauro at owasp.org><mailto:matt.tesauro at owasp.org>
Cc: owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Thanks you very much Matt for your supports and your feedback.

Le ven. 8 f?vr. 2019 ? 19:18, Matt Tesauro <matt.tesauro at owasp.org<mailto:matt.tesauro at owasp.org>> a ?crit :
For what it's worth, I'd strongly support this move.  Putting the cheat sheets in Github in something like Markdown makes great sense both in terms of ease to transform that content to other formats with something like pandoc or Jekyll plus the ability to use Git, GH issues, PRs,  GH projects ("kanban-like board) to discuss and track changes to that content.  Additionally, you could use GH Pages to provide nicely rendered version of the cheat sheets as well.

I believe it would help increase contribution to this great project.

Cheers!

--
-- Matt Tesauro
OWASP Foundation
Director of Community and Operations
matt.tesauro at owasp.org<mailto:matt.tesauro at owasp.org>

Consider giving back, and supporting the open source community by becoming a member<https://www.owasp.org/index.php/Membership> or making a donation<https://www.owasp.org/index.php/Donate> today!


On Fri, Feb 8, 2019 at 11:48 AM Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>> wrote:

We already as leaders made the call to move to the official OWASP GitHub. The Wiki is highly limited. We're close to deleting those pages and just reference Github. That way we have a comment system and a mature process for tracking requests.

It's already a done deal at this point, I'm sorry Dave.

Aloha, Jim
On 2/8/19 6:40 AM, Dominique Righetto wrote:
Section "Migration Pending" from https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series

I understand that you don't follow our communication channel but we use it to communicate and it's the communication process choosen by the project and we have many good feedback about it. Slack members of the CS channel increase at a high speed.

I respect your point of view but, as PL, the wiki mode allow uncontrolled process of edition/creation and Jim/Me are responsible/accountable for the quality/integrity of the CS/projects. Moreover the wiki do not allow integration into CI for create others format or automate control. GH allow also a fully open discution about any operation on CS.

I respect also the fact that you do not like the gihub way but it's the new way followed by new owasp projects (masvs, mstg, asvs, proactive control and the top 10) and it faciliate the contribution even if you dont like it. It's more easy to create a GH account than an OWASP one.

If you dont like this way at the point that it block your to contribute then i understand and respect your position but as PL Jim/Me has decided this way so we will continue the road wihtout you even if we thanks you very very much for your contribution.

--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Feb 8, 2019 at 5:27 PM Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>> wrote:
Clearly indicated on the home page where?  And I don't follow OWASP on Slack or Twitter so I was completely unaware of this.  You say follow 'the process' but I can't find it anywhere.

If you really don't want the cheat sheets to be edited, lock them, and put notes ON the cheat sheets themselves about what the process is/where to find them.

I'm also concerned that this process will make it MUCH harder to contribute, reducing people's willingness to do so (like me).

-Dave


On Thu, Feb 7, 2019 at 11:54 PM Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>> wrote:
Hello all

Since december wiki update of cs are deprecated. It is clearly indicated on the homepage and slack and Twitter and GitHub since 3 month.

If you modify the wiki your update will simply be ignored and lost.

Please follow the process.

All modification and creation of cs is now controlled by Jim and me as PL along Continuous Integration process.

Le ven. 8 f?vr. 2019 ? 00:43, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Hi Dave - Let?s continue our discussion here so that we have everything tracked in the cheat sheet email list (copying our 1:1 conversation below).

I really appreciate your support in the changes. I have few comments below


a)       Dominique and Jim decided to move cheat sheets to Github. So, all new changes should be on Github CSRF<https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md> page. I think they are also working on deprecating the old wiki pages on OWASP. I am fine with all your changes (as most of them are cosmetic/grammatical/structural) except [1]. If you don?t mind, can you do these changes on the Github? I am fine with you moving the reference example to a different page as well. I have plans to add some other content (not anytime in next month) during which I will also try to trim the content as much as possible.

b)      ?If a developer forgets to add the token to any state changing operation, they are making the application vulnerable to CSRF." is flat out wrong.  If a dev forgets to add a token, then the server is simply going to reject the request. It's not going to be vulnerable.  If you agree, can you fix this?

>> You are ?assuming? here that the server has a token verification system which is not true by default. By default, all applications are vulnerable to CSRF unless developers add tokens / the system has a token verification system.

c)       I am removing the changes related to [1] for now as they are clearly contradicting what we have in other parts of the cheat sheet. If you disagree, I am open to discussion before we get them back to the cheatsheet again. I might be missing something and I would love to hear your side of the story.

1. Earlier, I rejected both the techniques you mentioned in ?Stateless/Tokenless Defense Techniques? to be in primary because
1.1 X-Requested-With: XMLHttpRequest Header: For the same FLASH related reasons mentioned under this<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Use_of_Custom_Request_Headers> section. On a separate thread, I was working with Riyaz who authored this<https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b> blog and you wouldn?t believe how many old browser versions are still vulnerable to this FLASH based redirect CSRF vulnerability. He also gave link to a HTML wrapper which seems to make this attack work on newer Chrome versions as well. If you are interested, I can provide more details about these. Hence, I don?t want users to be vulnerable by using this as a primary defense.
1.2 Not a Simple HTTP Request Verification: Again, this is a technique that I rejected in the later section<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Content-Type_Header_Validation> of the document along with the reasoning.

I just made some changes, feel free to review.

I also think this comment: "If a developer forgets to add the token to any state changing operation, they are making the application vulnerable to CSRF." is flat out wrong.  If a dev forgets to add a token, then the server is simply going to reject the request. It's not going to be vulnerable.  If you agree, can you fix this?

The article is also REALLY LONG. If you can identify anything to trim out, that would be great. I just trimmed out a few things, but I think we can do a lot more. Cheat sheets are supposed to be SHORT, but I realize many are not.

For example, maybe we can move the reference example to a completely different page? That would shorten this alot.

-Dave


On Wed, Feb 6, 2019 at 5:25 PM manideep konakandla <mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>> wrote:
Yes. All those changes passed through review on email list but yes, please feel free to provide any more comments.

On Wed, Feb 6, 2019, 1:21 PM Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org> wrote:
Are you:  Manideepk<https://www.owasp.org/index.php/User:Manideepk> on the OWASP site?

I have some questions/comments about your changes to the OWASP CSRF Cheat Sheet.

The bulk of those changes are here: https://www.owasp.org/index.php?title=Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet&type=revision&diff=244184&oldid=242455

If this is you, I'll provide more details, but wanted to make sure I'm in touch with the right person first.

-Dave

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Sunday, December 23, 2018 4:13 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Thanksyou very much for your support ???

Le sam. 22 d?c. 2018 ? 22:24, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Let me know once the migration is started. I will do it for the CSRF prevention cheatsheet page ?

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Saturday, December 22, 2018 12:29 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hello Manideep,

Thanks you for the update.

For info we will migrate the entire project content (unless the homepage) to github so it is possible that you need to also made the update on the github repository.

The migration work will start on January, i will take some rest until January, i really need it.

Thanks you very much for your help on this project :)

Happy holidays too

--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Sat, Dec 22, 2018 at 3:40 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Hello all,

I made a change to ?Double Submit Cookie? technique [1]. I added a variant to it which now mitigates well-known security issues with standard ?Double Submit Cookie? technique. So, people can use this technique without any issues. Please let me know if anyone finds any issues within it.

Whenever I get some free time in next 1-2 months, I am planning to include

a)       Details about popular 6-7 web frameworks and the CSRF mitigations implemented by them

b)      Re-organize the page even more better by switching variant of double submit cookie to primary defense (under stateless section) etc.

Happy holidays everyone ?

[1]  https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Double_Submit_Cookie  (read the last para under this mitigation)


From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Saturday, October 13, 2018 12:59 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hi,
CS publishing released and notification sent to the community via Twitter and Slack channel.
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Oct 12, 2018 at 3:47 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Yes, I am feeling way better now. Thank you ?

@ALL: Cheat sheet is updated with all the changes now<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>. Please let me know if you have any issues by end of tomorrow. If there are no issues - I/we can start advertising the refactored cheat sheet in our networks ?

Thanks a ton Dominique and Jim for all your help till date. I really appreciate it!!! I will be actively maintaining this as well from today ?

Regards,
Manideep Konakandla
www.manideepk.com<http://www.manideepk.com>
Security Engineer @ Amazon
mkonakan at amazon.com<mailto:mkonakan at amazon.com>

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Wednesday, October 10, 2018 10:39 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Go for it!!! I hope you?re feeling better!
--
Jim Manico
@Manicode


On Oct 10, 2018, at 10:18 PM, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Sorry for late reply. I was on sick leave for last 2 days.

I synced up with Dominique in a different email chain to clarify something in his previous email. He gave me a go ahead to update wiki with new re-factored cheat sheet. I am planning to do it sometime tomorrow. @Jim : Is it with fine with you as well? Please let me know if you have any concerns.

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Monday, October 8, 2018 1:47 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>; Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hello all,

In order to move forward and deliver something in the project please update the wiki with content from the refactoring from Konakandla Manideep. If there missing points they will be added in another round it is the role of the wiki based usage.

Thanks in advance for your understanding ?

Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Hey Folks ?

Good conversation :) Can you guys review the new cheat sheet once? I am sure most of the discussion going on here is already answered in the new re-factored cheat sheet I wrote.

@Pankaj ? Go through the respective sections in the new cheat sheet. If they are not clear / you are not convinced, we can discuss more. Below is the summary of my response to your questions (you will find the same gist going through the cheat sheet as well).

Go through [2] to understand more detailed on how flash based bypass on CSRF custom mitigation defense works. You can see there that the origin headers are passed along with the custom headers and hence current wiki asks to do origin and/or referrer header check as defense-in-depth (it would help even if flash sometime in the future repeats same mistake and forwards custom headers without crossdomain.xml checks. Domain requesting the redirected request might be fooled with custom header bypass but not the origin header check). If both these checks are done, it is indeed a good defense but origin header is not always included etc. (just as Jim mentioned and also as new cheatsheet mentions).  I don?t think deprecating custom header check is a good idea. It is indeed a good solution for stateless services though they have to keep issues like I mentioned before in mind. Your statement of custom header itself doesn?t mitigate CSRF relies on the fact that ?Flash being vulnerable to same bug again in future?. We cannot rely on a future statement and deprecate a technique, instead providing defense in depth measure for it and also cautioning users about past issues might be good idea. Users can take their call. Please read custom headers and origin check sections I re-wrote for more in-details. It talks about the issues and people can select if they want to use it or not.

Also, Login CSRF has nothing to do with custom header mitigation. Login forms are usually handled on <form> tags and custom header mitigation is only applicable on ajax calls because you cannot set custom headers on form tags. It can be applicable if you are doing logins on Ajax/XHR requests in which case my above response from custom header mitigation applies. I also proposed few methods for mitigating login CSRF which aligns with our primary defense on the new cheatsheet (tokens). Please review it as well.

Also, CORS has nothing to do with CSRF. I infact added CORS as a technique that should not be used/even thought for CSRF in the new cheatsheet I wrote. Please check that and also read [1]

[1] https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
[2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/

BTW - Here is the link to the new cheat sheet - https://tinyurl.com/y7k9fded

Again,  I you are not convinced ? please let me know specific item and we can happily discuss further ? Alternatively, you can send us your edits here for review and if it looks good for everyone ? you can edit it in the wiki.

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Sunday, October 7, 2018 1:13 PM
To: Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Sync your update with one from Konakandla Manideep please ?

Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>> a ?crit :
Aloha Jim!
With XSS, even CSRF tokens can be stolen :).
But I'll keep your tip in mind when editing the wiki. I'm planning to do that sometime this month.
Please feel free to review it whenever you guys get a chance.

Best,
Pankaj


On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com<mailto:jim at manicode.com>> wrote:

I agree JWT's architectures where cookies are not involved are resistant to CSRF but those tokens are at the risk of being stolen over XSS!

The Origin header does not go with all requests and FireFox does not fully support it yet. So careful!

:)

On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
I agree and that's why I would like to propose deprecation of 'custom header approach' as a CSRF defense.
Presently the mechanism that seems to work across applications is validating custom header as well as a forbidden header name (that cannot be set by a software or a program) e.g. Origin. If we want to give it a new name like 'Double Header Validation' or something else, I'm fine with that but custom header alone doesn't seem sufficient to mitigate CSRF issue.

There are some other best practices that should also be considered. I think CORS is now mature enough to have a mention in the CSRF defense Also, applications utilizing JWT token in the header seem immune to CSRF.

Please let me know what you guys think and if allowed, I can go ahead and make some of these edits for your perusal.


On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>> wrote:

--

Jim Manico

Manicode Security

https://www.manicode.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190208/e2e18692/attachment-0001.html>

From mkonakan at amazon.com  Fri Feb  8 21:47:39 2019
From: mkonakan at amazon.com (Konakandla, Manideep)
Date: Fri, 8 Feb 2019 21:47:39 +0000
Subject: [OWASP-cheat-sheets]
 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <dfeac335745a4c50b03e883d3e7bbd3a@EX13D11UWB004.ant.amazon.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<37df98b064aa4b39af8d0e585638b3c4@EX13D11UWB004.ant.amazon.com>
	<CANos97cXnfb_foCaPaYXQEGRnphTQu8P_KC7pXwkeb7_ak0m-A@mail.gmail.com>
	<2bf303591c134e949d52c3d8d5a155d0@EX13D11UWB004.ant.amazon.com>
	<CANos97c6xDAycEr=YY_LaDWaffohmq17Cy1o9iSDPSYBaUa4_A@mail.gmail.com>
	<92ffc47ab9d14f4f9723d1feca90e1ab@EX13D11UWB004.ant.amazon.com>
	<CANos97dTh0Tia6MftWq-_kWFzejWx7o0Uh=NyC8W_=jVpCUdOQ@mail.gmail.com>
	<e832f8afafc945e3b65cd5f17fe15c6b@EX13D11UWB004.ant.amazon.com>
	<CANos97ew=HjNnO+TSgUL55x8WPyzpuKhjERwmvHqEyx5XYMvTg@mail.gmail.com>
	<CAMjpMgcykhmtoA32F+BDZ=8nRkT8z-oM_HX=6Z2kdmKdHvAjUQ@mail.gmail.com>
	<CANos97dHxj6B0H+br7-NKxJkAhZT-Bm525i0DqHwoeAR=Hjnkg@mail.gmail.com>
	<6714ef10-aee3-6720-023d-a4dbc9399b3c@owasp.org>
	<CAJq9yoRQ0G8x_AmdPVq_AWJvVJG+VdFDY2BnAja2YCD=yxHEyw@mail.gmail.com>
	<CANos97c1+LH=Fi3d-FfdOoCT3EaBkwd9avuzXCik208VGY6G9Q@mail.gmail.com>
	<f056014958204a36b0dc6307a217b51d@EX13D11UWB004.ant.amazon.com>
	<c358f250-eb5d-95d4-e95a-a747aa41400f@manicode.com>
	<dfeac335745a4c50b03e883d3e7bbd3a@EX13D11UWB004.ant.amazon.com>
Message-ID: <775fcb89465d49f8a650e4b5932d2677@EX13D11UWB004.ant.amazon.com>

Also, I would like to know if there is an option to get notifications only about the PR?s/edit?s done to CSRF cheat sheet. I only see an option (Watch) to get notifications for entire cheat sheet series ? Any leads on how/if that can be done?

From: owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org <owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org> On Behalf Of Konakandla, Manideep
Sent: Friday, February 8, 2019 1:42 PM
To: Jim Manico <jim at manicode.com>; Dominique Righetto <dominique.righetto at owasp.org>; Matt Tesauro <matt.tesauro at owasp.org>
Cc: owasp-cheat-sheets at lists.owasp.org
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

I haven?t used public facing Github much in last year and I am not sure about that. You guys might want to see it if it?s possible with the type of account you may have and if not, may you might wanna think about considering alternatives (I think making people editors for full package and providing them instructions to just make sure that they touch only their cheat sheet is not a bad idea too).

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Friday, February 8, 2019 1:30 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Matt Tesauro <matt.tesauro at owasp.org<mailto:matt.tesauro at owasp.org>>
Cc: owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>; Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet


Will GitHub let us make you editor of the one cheatsheet you authored? If so I think that is ok.

Aloha, Jim
On 2/8/19 11:27 AM, Konakandla, Manideep wrote:
I personally feel that Github is a nice move as well ?but? I think atleast 1 or 2 people should be given control over each cheat sheet along with the PLs. I agree PLs are great, knowledgable but I contributed a lot to CSRF cheat sheet recently and also have BUNCH of other things that I planned to add. I obviously would know more about this stuff than PLs (really, no offense, I am just saying that I know more about the stuff that I added). PLs can make sure the overall quality of the cheat sheets is being maintained and individual cheat sheet owners can make sure that their particular cheat sheet is in quality. I just feel that we are trying to convert a wide open Wikipedia (OWASP wikis) into closed controlled market. It?s fine doing it but atleast let the control be kept in few more deserved hands as well. What do you guys think about this? I would love to hear your side of the story.

Hi Dave, Regarding

a)     Feel free to go ahead and submit a PR for reflecting the clarity. I am fine with it, it?s not any technical change.

b)    I provided the resources you requested in a separate email. Unless there is some technical reasoning that those techniques are not having any vulnerability out in market today, I am not comfortable moving them to primary defense.

P.S: I tried putting up my views/opinions/answers as a friendly constructive conversation and would appreciate the same in return ?

From: owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org<mailto:owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org> <owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org><mailto:owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org> On Behalf Of Dominique Righetto
Sent: Friday, February 8, 2019 11:27 AM
To: Matt Tesauro <matt.tesauro at owasp.org><mailto:matt.tesauro at owasp.org>
Cc: owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Thanks you very much Matt for your supports and your feedback.

Le ven. 8 f?vr. 2019 ? 19:18, Matt Tesauro <matt.tesauro at owasp.org<mailto:matt.tesauro at owasp.org>> a ?crit :
For what it's worth, I'd strongly support this move.  Putting the cheat sheets in Github in something like Markdown makes great sense both in terms of ease to transform that content to other formats with something like pandoc or Jekyll plus the ability to use Git, GH issues, PRs,  GH projects ("kanban-like board) to discuss and track changes to that content.  Additionally, you could use GH Pages to provide nicely rendered version of the cheat sheets as well.

I believe it would help increase contribution to this great project.

Cheers!

--
-- Matt Tesauro
OWASP Foundation
Director of Community and Operations
matt.tesauro at owasp.org<mailto:matt.tesauro at owasp.org>

Consider giving back, and supporting the open source community by becoming a member<https://www.owasp.org/index.php/Membership> or making a donation<https://www.owasp.org/index.php/Donate> today!


On Fri, Feb 8, 2019 at 11:48 AM Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>> wrote:

We already as leaders made the call to move to the official OWASP GitHub. The Wiki is highly limited. We're close to deleting those pages and just reference Github. That way we have a comment system and a mature process for tracking requests.

It's already a done deal at this point, I'm sorry Dave.

Aloha, Jim
On 2/8/19 6:40 AM, Dominique Righetto wrote:
Section "Migration Pending" from https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series

I understand that you don't follow our communication channel but we use it to communicate and it's the communication process choosen by the project and we have many good feedback about it. Slack members of the CS channel increase at a high speed.

I respect your point of view but, as PL, the wiki mode allow uncontrolled process of edition/creation and Jim/Me are responsible/accountable for the quality/integrity of the CS/projects. Moreover the wiki do not allow integration into CI for create others format or automate control. GH allow also a fully open discution about any operation on CS.

I respect also the fact that you do not like the gihub way but it's the new way followed by new owasp projects (masvs, mstg, asvs, proactive control and the top 10) and it faciliate the contribution even if you dont like it. It's more easy to create a GH account than an OWASP one.

If you dont like this way at the point that it block your to contribute then i understand and respect your position but as PL Jim/Me has decided this way so we will continue the road wihtout you even if we thanks you very very much for your contribution.

--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Feb 8, 2019 at 5:27 PM Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>> wrote:
Clearly indicated on the home page where?  And I don't follow OWASP on Slack or Twitter so I was completely unaware of this.  You say follow 'the process' but I can't find it anywhere.

If you really don't want the cheat sheets to be edited, lock them, and put notes ON the cheat sheets themselves about what the process is/where to find them.

I'm also concerned that this process will make it MUCH harder to contribute, reducing people's willingness to do so (like me).

-Dave


On Thu, Feb 7, 2019 at 11:54 PM Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>> wrote:
Hello all

Since december wiki update of cs are deprecated. It is clearly indicated on the homepage and slack and Twitter and GitHub since 3 month.

If you modify the wiki your update will simply be ignored and lost.

Please follow the process.

All modification and creation of cs is now controlled by Jim and me as PL along Continuous Integration process.

Le ven. 8 f?vr. 2019 ? 00:43, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Hi Dave - Let?s continue our discussion here so that we have everything tracked in the cheat sheet email list (copying our 1:1 conversation below).

I really appreciate your support in the changes. I have few comments below


a)       Dominique and Jim decided to move cheat sheets to Github. So, all new changes should be on Github CSRF<https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md> page. I think they are also working on deprecating the old wiki pages on OWASP. I am fine with all your changes (as most of them are cosmetic/grammatical/structural) except [1]. If you don?t mind, can you do these changes on the Github? I am fine with you moving the reference example to a different page as well. I have plans to add some other content (not anytime in next month) during which I will also try to trim the content as much as possible.

b)      ?If a developer forgets to add the token to any state changing operation, they are making the application vulnerable to CSRF." is flat out wrong.  If a dev forgets to add a token, then the server is simply going to reject the request. It's not going to be vulnerable.  If you agree, can you fix this?

>> You are ?assuming? here that the server has a token verification system which is not true by default. By default, all applications are vulnerable to CSRF unless developers add tokens / the system has a token verification system.

c)       I am removing the changes related to [1] for now as they are clearly contradicting what we have in other parts of the cheat sheet. If you disagree, I am open to discussion before we get them back to the cheatsheet again. I might be missing something and I would love to hear your side of the story.

1. Earlier, I rejected both the techniques you mentioned in ?Stateless/Tokenless Defense Techniques? to be in primary because
1.1 X-Requested-With: XMLHttpRequest Header: For the same FLASH related reasons mentioned under this<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Use_of_Custom_Request_Headers> section. On a separate thread, I was working with Riyaz who authored this<https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b> blog and you wouldn?t believe how many old browser versions are still vulnerable to this FLASH based redirect CSRF vulnerability. He also gave link to a HTML wrapper which seems to make this attack work on newer Chrome versions as well. If you are interested, I can provide more details about these. Hence, I don?t want users to be vulnerable by using this as a primary defense.
1.2 Not a Simple HTTP Request Verification: Again, this is a technique that I rejected in the later section<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Content-Type_Header_Validation> of the document along with the reasoning.

I just made some changes, feel free to review.

I also think this comment: "If a developer forgets to add the token to any state changing operation, they are making the application vulnerable to CSRF." is flat out wrong.  If a dev forgets to add a token, then the server is simply going to reject the request. It's not going to be vulnerable.  If you agree, can you fix this?

The article is also REALLY LONG. If you can identify anything to trim out, that would be great. I just trimmed out a few things, but I think we can do a lot more. Cheat sheets are supposed to be SHORT, but I realize many are not.

For example, maybe we can move the reference example to a completely different page? That would shorten this alot.

-Dave


On Wed, Feb 6, 2019 at 5:25 PM manideep konakandla <mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>> wrote:
Yes. All those changes passed through review on email list but yes, please feel free to provide any more comments.

On Wed, Feb 6, 2019, 1:21 PM Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org> wrote:
Are you:  Manideepk<https://www.owasp.org/index.php/User:Manideepk> on the OWASP site?

I have some questions/comments about your changes to the OWASP CSRF Cheat Sheet.

The bulk of those changes are here: https://www.owasp.org/index.php?title=Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet&type=revision&diff=244184&oldid=242455

If this is you, I'll provide more details, but wanted to make sure I'm in touch with the right person first.

-Dave

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Sunday, December 23, 2018 4:13 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Thanksyou very much for your support ???

Le sam. 22 d?c. 2018 ? 22:24, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Let me know once the migration is started. I will do it for the CSRF prevention cheatsheet page ?

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Saturday, December 22, 2018 12:29 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hello Manideep,

Thanks you for the update.

For info we will migrate the entire project content (unless the homepage) to github so it is possible that you need to also made the update on the github repository.

The migration work will start on January, i will take some rest until January, i really need it.

Thanks you very much for your help on this project :)

Happy holidays too

--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Sat, Dec 22, 2018 at 3:40 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Hello all,

I made a change to ?Double Submit Cookie? technique [1]. I added a variant to it which now mitigates well-known security issues with standard ?Double Submit Cookie? technique. So, people can use this technique without any issues. Please let me know if anyone finds any issues within it.

Whenever I get some free time in next 1-2 months, I am planning to include

a)       Details about popular 6-7 web frameworks and the CSRF mitigations implemented by them

b)      Re-organize the page even more better by switching variant of double submit cookie to primary defense (under stateless section) etc.

Happy holidays everyone ?

[1]  https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Double_Submit_Cookie  (read the last para under this mitigation)


From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Saturday, October 13, 2018 12:59 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hi,
CS publishing released and notification sent to the community via Twitter and Slack channel.
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Oct 12, 2018 at 3:47 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Yes, I am feeling way better now. Thank you ?

@ALL: Cheat sheet is updated with all the changes now<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>. Please let me know if you have any issues by end of tomorrow. If there are no issues - I/we can start advertising the refactored cheat sheet in our networks ?

Thanks a ton Dominique and Jim for all your help till date. I really appreciate it!!! I will be actively maintaining this as well from today ?

Regards,
Manideep Konakandla
www.manideepk.com<http://www.manideepk.com>
Security Engineer @ Amazon
mkonakan at amazon.com<mailto:mkonakan at amazon.com>

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Wednesday, October 10, 2018 10:39 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Go for it!!! I hope you?re feeling better!
--
Jim Manico
@Manicode


On Oct 10, 2018, at 10:18 PM, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Sorry for late reply. I was on sick leave for last 2 days.

I synced up with Dominique in a different email chain to clarify something in his previous email. He gave me a go ahead to update wiki with new re-factored cheat sheet. I am planning to do it sometime tomorrow. @Jim : Is it with fine with you as well? Please let me know if you have any concerns.

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Monday, October 8, 2018 1:47 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>; Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hello all,

In order to move forward and deliver something in the project please update the wiki with content from the refactoring from Konakandla Manideep. If there missing points they will be added in another round it is the role of the wiki based usage.

Thanks in advance for your understanding ?

Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Hey Folks ?

Good conversation :) Can you guys review the new cheat sheet once? I am sure most of the discussion going on here is already answered in the new re-factored cheat sheet I wrote.

@Pankaj ? Go through the respective sections in the new cheat sheet. If they are not clear / you are not convinced, we can discuss more. Below is the summary of my response to your questions (you will find the same gist going through the cheat sheet as well).

Go through [2] to understand more detailed on how flash based bypass on CSRF custom mitigation defense works. You can see there that the origin headers are passed along with the custom headers and hence current wiki asks to do origin and/or referrer header check as defense-in-depth (it would help even if flash sometime in the future repeats same mistake and forwards custom headers without crossdomain.xml checks. Domain requesting the redirected request might be fooled with custom header bypass but not the origin header check). If both these checks are done, it is indeed a good defense but origin header is not always included etc. (just as Jim mentioned and also as new cheatsheet mentions).  I don?t think deprecating custom header check is a good idea. It is indeed a good solution for stateless services though they have to keep issues like I mentioned before in mind. Your statement of custom header itself doesn?t mitigate CSRF relies on the fact that ?Flash being vulnerable to same bug again in future?. We cannot rely on a future statement and deprecate a technique, instead providing defense in depth measure for it and also cautioning users about past issues might be good idea. Users can take their call. Please read custom headers and origin check sections I re-wrote for more in-details. It talks about the issues and people can select if they want to use it or not.

Also, Login CSRF has nothing to do with custom header mitigation. Login forms are usually handled on <form> tags and custom header mitigation is only applicable on ajax calls because you cannot set custom headers on form tags. It can be applicable if you are doing logins on Ajax/XHR requests in which case my above response from custom header mitigation applies. I also proposed few methods for mitigating login CSRF which aligns with our primary defense on the new cheatsheet (tokens). Please review it as well.

Also, CORS has nothing to do with CSRF. I infact added CORS as a technique that should not be used/even thought for CSRF in the new cheatsheet I wrote. Please check that and also read [1]

[1] https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
[2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/

BTW - Here is the link to the new cheat sheet - https://tinyurl.com/y7k9fded

Again,  I you are not convinced ? please let me know specific item and we can happily discuss further ? Alternatively, you can send us your edits here for review and if it looks good for everyone ? you can edit it in the wiki.

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Sunday, October 7, 2018 1:13 PM
To: Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Sync your update with one from Konakandla Manideep please ?

Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>> a ?crit :
Aloha Jim!
With XSS, even CSRF tokens can be stolen :).
But I'll keep your tip in mind when editing the wiki. I'm planning to do that sometime this month.
Please feel free to review it whenever you guys get a chance.

Best,
Pankaj


On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com<mailto:jim at manicode.com>> wrote:

I agree JWT's architectures where cookies are not involved are resistant to CSRF but those tokens are at the risk of being stolen over XSS!

The Origin header does not go with all requests and FireFox does not fully support it yet. So careful!

:)

On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
I agree and that's why I would like to propose deprecation of 'custom header approach' as a CSRF defense.
Presently the mechanism that seems to work across applications is validating custom header as well as a forbidden header name (that cannot be set by a software or a program) e.g. Origin. If we want to give it a new name like 'Double Header Validation' or something else, I'm fine with that but custom header alone doesn't seem sufficient to mitigate CSRF issue.

There are some other best practices that should also be considered. I think CORS is now mature enough to have a mention in the CSRF defense Also, applications utilizing JWT token in the header seem immune to CSRF.

Please let me know what you guys think and if allowed, I can go ahead and make some of these edits for your perusal.


On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>> wrote:

--

Jim Manico

Manicode Security

https://www.manicode.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190208/643d1b5a/attachment-0001.html>

From dominique.righetto at owasp.org  Fri Feb  8 21:52:13 2019
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Fri, 8 Feb 2019 22:52:13 +0100
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <f056014958204a36b0dc6307a217b51d@EX13D11UWB004.ant.amazon.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<46fa44e0bd7941eaa029659ca8f3291f@EX13D11UWB004.ant.amazon.com>
	<CANos97csCLS8cgWwduXWt520AcT5Z_sfRXbNUc=Yq6+P8Tx1UA@mail.gmail.com>
	<ea0ad8742d904ea792880b77e6e81678@EX13D11UWB004.ant.amazon.com>
	<70E7657A-CA1F-4BD7-ADF7-07A85CD08E6B@manicode.com>
	<37df98b064aa4b39af8d0e585638b3c4@EX13D11UWB004.ant.amazon.com>
	<CANos97cXnfb_foCaPaYXQEGRnphTQu8P_KC7pXwkeb7_ak0m-A@mail.gmail.com>
	<2bf303591c134e949d52c3d8d5a155d0@EX13D11UWB004.ant.amazon.com>
	<CANos97c6xDAycEr=YY_LaDWaffohmq17Cy1o9iSDPSYBaUa4_A@mail.gmail.com>
	<92ffc47ab9d14f4f9723d1feca90e1ab@EX13D11UWB004.ant.amazon.com>
	<CANos97dTh0Tia6MftWq-_kWFzejWx7o0Uh=NyC8W_=jVpCUdOQ@mail.gmail.com>
	<e832f8afafc945e3b65cd5f17fe15c6b@EX13D11UWB004.ant.amazon.com>
	<CANos97ew=HjNnO+TSgUL55x8WPyzpuKhjERwmvHqEyx5XYMvTg@mail.gmail.com>
	<CAMjpMgcykhmtoA32F+BDZ=8nRkT8z-oM_HX=6Z2kdmKdHvAjUQ@mail.gmail.com>
	<CANos97dHxj6B0H+br7-NKxJkAhZT-Bm525i0DqHwoeAR=Hjnkg@mail.gmail.com>
	<6714ef10-aee3-6720-023d-a4dbc9399b3c@owasp.org>
	<CAJq9yoRQ0G8x_AmdPVq_AWJvVJG+VdFDY2BnAja2YCD=yxHEyw@mail.gmail.com>
	<CANos97c1+LH=Fi3d-FfdOoCT3EaBkwd9avuzXCik208VGY6G9Q@mail.gmail.com>
	<f056014958204a36b0dc6307a217b51d@EX13D11UWB004.ant.amazon.com>
Message-ID: <CANos97dMUTWw4oE4jFaQjbcJExLytBENp9CN0kEnhD3OTZ+8EA@mail.gmail.com>

Everyone have control over the CS because they can submit PR on any CS, and
discution about PR merge or not will be publicly debated into the CS
community.
It's also the reason why there 2 leaders in order prevent block point
One point, when you contribute to CS project, is not your CS anymore it's
become part of a collection that can be updated by anyone and that have
been given to OWASP under the CC license.
The PR is only a process to ensure the quality, the structure and the
consistency of CS accross the collection.
With the wiki it's a true hell to manage, no one respect the format defined
and PL pass their time to cleanup the CS to keep the collection consistent
for the readers/users (it was my job before the migration). I have also do
this job with your contribution too but i have do it in the shadown to not
bother you...
By the way about knowledge, PL are not "paper worker" or blocker,
personnaly i do appsec in pro life along my personal life so i apply and
question all the content of the CS and for topic that i don"t know we ask
to specialized people.
See the current issues or PR in the project, does we have blocked one ? NO,
we work in a way to enhance the project and faciliate the contribution.
Migration to GH is also a step performed by others big project and they are
successful.
Last point " into closed controlled market", no there no market, all stuff
is open and everyone is free to contribute or create...

To be clear, i have performed until now the migration job alone on my spare
time with many personnal sacrifice in terms of time, when i have ask help,
response was NO, so before to say to me that i want to close the access to
the CS collections and control everything, verify if i really close the
contribution and the response is not, all my action move to a more open way
but with quality and consistency.

Jim has emboarded me to move the project to the next level: End of 2019:
- Project migration to GH with the same quality that MSTG and genenrated
PDF or site
- Project level moved to Flagship

Before to reproach me something, let me finish my job and after i will give
back the project key to anyone because PL role is not the same like
contributor.

--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com
<dominique.righetto at gmail.com>dominique.righetto at owasp.org
<dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Feb 8, 2019 at 10:28 PM Konakandla, Manideep <mkonakan at amazon.com>
wrote:

> I personally feel that Github is a nice move as well ?but? I think atleast
> 1 or 2 people should be given control over each cheat sheet along with the
> PLs. I agree PLs are great, knowledgable but I contributed a lot to CSRF
> cheat sheet recently and also have BUNCH of other things that I planned to
> add. I obviously would know more about this stuff than PLs (really, no
> offense, I am just saying that I know more about the stuff that I added).
> PLs can make sure the overall quality of the cheat sheets is being
> maintained and individual cheat sheet owners can make sure that their
> particular cheat sheet is in quality. I just feel that we are trying to
> convert a wide open Wikipedia (OWASP wikis) into closed controlled market.
> It?s fine doing it but atleast let the control be kept in few more deserved
> hands as well. What do you guys think about this? I would love to hear your
> side of the story.
>
>
>
> Hi Dave, Regarding
>
> a)       Feel free to go ahead and submit a PR for reflecting the
> clarity. I am fine with it, it?s not any technical change.
>
> b)      I provided the resources you requested in a separate email.
> Unless there is some technical reasoning that those techniques are not
> having any vulnerability out in market today, I am not comfortable moving
> them to primary defense.
>
>
>
> *P.S:* I tried putting up my views/opinions/answers as a friendly
> constructive conversation and would appreciate the same in return J
>
>
>
> *From:* owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org
> <owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org> *On
> Behalf Of *Dominique Righetto
> *Sent:* Friday, February 8, 2019 11:27 AM
> *To:* Matt Tesauro <matt.tesauro at owasp.org>
> *Cc:* owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Thanks you very much Matt for your supports and your feedback.
>
>
>
> Le ven. 8 f?vr. 2019 ? 19:18, Matt Tesauro <matt.tesauro at owasp.org> a
> ?crit :
>
> For what it's worth, I'd strongly support this move.  Putting the cheat
> sheets in Github in something like Markdown makes great sense both in terms
> of ease to transform that content to other formats with something like
> pandoc or Jekyll plus the ability to use Git, GH issues, PRs,  GH projects
> ("kanban-like board) to discuss and track changes to that content.
> Additionally, you could use GH Pages to provide nicely rendered version of
> the cheat sheets as well.
>
>
>
> I believe it would help increase contribution to this great project.
>
>
>
> Cheers!
>
>
> --
> -- Matt Tesauro
>
> *OWASP Foundation*
>
> Director of Community and Operations
>
> matt.tesauro at owasp.org
>
> Consider giving back, and supporting the open source community by becoming
> a member <https://www.owasp.org/index.php/Membership> or making a donation
> <https://www.owasp.org/index.php/Donate> today!
>
>
>
>
>
> On Fri, Feb 8, 2019 at 11:48 AM Jim Manico <jim.manico at owasp.org> wrote:
>
> We already as leaders made the call to move to the official OWASP GitHub.
> The Wiki is highly limited. We're close to deleting those pages and just
> reference Github. That way we have a comment system and a mature process
> for tracking requests.
>
> It's already a done deal at this point, I'm sorry Dave.
>
> Aloha, Jim
>
> On 2/8/19 6:40 AM, Dominique Righetto wrote:
>
> Section "Migration Pending" from
> https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series
>
>
>
> I understand that you don't follow our communication channel but we use it
> to communicate and it's the communication process choosen by the project
> and we have many good feedback about it. Slack members of the CS channel
> increase at a high speed.
>
>
>
> I respect your point of view but, as PL, the wiki mode allow uncontrolled
> process of edition/creation and Jim/Me are responsible/accountable for the
> quality/integrity of the CS/projects. Moreover the wiki do not allow
> integration into CI for create others format or automate control. GH allow
> also a fully open discution about any operation on CS.
>
>
>
> I respect also the fact that you do not like the gihub way but it's the
> new way followed by new owasp projects (masvs, mstg, asvs, proactive
> control and the top 10) and it faciliate the contribution even if you dont
> like it. It's more easy to create a GH account than an OWASP one.
>
>
>
> If you dont like this way at the point that it block your to contribute
> then i understand and respect your position but as PL Jim/Me has decided
> this way so we will continue the road wihtout you even if we thanks you
> very very much for your contribution.
>
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Fri, Feb 8, 2019 at 5:27 PM Dave Wichers <dave.wichers at owasp.org>
> wrote:
>
> Clearly indicated on the home page where?  And I don't follow OWASP on
> Slack or Twitter so I was completely unaware of this.  You say follow 'the
> process' but I can't find it anywhere.
>
>
>
> If you really don't want the cheat sheets to be edited, lock them, and put
> notes ON the cheat sheets themselves about what the process is/where to
> find them.
>
>
>
> I'm also concerned that this process will make it MUCH harder to
> contribute, reducing people's willingness to do so (like me).
>
>
>
> -Dave
>
>
>
>
>
> On Thu, Feb 7, 2019 at 11:54 PM Dominique Righetto <
> dominique.righetto at owasp.org> wrote:
>
> Hello all
>
>
>
> Since december wiki update of cs are deprecated. It is clearly indicated
> on the homepage and slack and Twitter and GitHub since 3 month.
>
>
>
> If you modify the wiki your update will simply be ignored and lost.
>
>
>
> Please follow the process.
>
>
>
> All modification and creation of cs is now controlled by Jim and me as PL
> along Continuous Integration process.
>
>
>
> Le ven. 8 f?vr. 2019 ? 00:43, Konakandla, Manideep <mkonakan at amazon.com>
> a ?crit :
>
> Hi Dave - Let?s continue our discussion here so that we have everything
> tracked in the cheat sheet email list (copying our 1:1 conversation below).
>
>
>
> I really appreciate your support in the changes. I have few comments below
>
>
>
> a)       Dominique and Jim decided to move cheat sheets to Github. So, all
> new changes should be on Github CSRF
> <https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md>
> page. I think they are also working on deprecating the old wiki pages on
> OWASP. I am fine with all your changes (as most of them are
> cosmetic/grammatical/structural) except [1]. If you don?t mind, can you do
> these changes on the Github? I am fine with you moving the reference
> example to a different page as well. I have plans to add some other content
> (not anytime in next month) during which I will also try to trim the
> content as much as possible.
>
> b)      ?If a developer forgets to add the token to any state changing
> operation, they are making the application vulnerable to CSRF." is flat out
> wrong.  If a dev forgets to add a token, then the server is simply going to
> reject the request. It's not going to be vulnerable.  If you agree, can you
> fix this?
>
> >> You are ?assuming? here that the server has a token verification system
> which is not true by default. By default, all applications are vulnerable
> to CSRF unless developers add tokens / the system has a token verification
> system.
>
> c)       I am removing the changes related to [1] for now as they are
> clearly contradicting what we have in other parts of the cheat sheet. If
> you disagree, I am open to discussion before we get them back to the
> cheatsheet again. I might be missing something and I would love to hear
> your side of the story.
>
>
>
> *1.* Earlier, I rejected both the techniques you mentioned in
> ?Stateless/Tokenless Defense Techniques? to be in primary because
>
> *1.1* X-Requested-With: XMLHttpRequest Header: For the same FLASH related
> reasons mentioned under this
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Use_of_Custom_Request_Headers>
> section. On a separate thread, I was working with Riyaz who authored this
> <https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b>
> blog and you wouldn?t believe how many old browser versions are still
> vulnerable to this FLASH based redirect CSRF vulnerability. He also gave
> link to a HTML wrapper which seems to make this attack work on newer Chrome
> versions as well. If you are interested, I can provide more details about
> these. Hence, I don?t want users to be vulnerable by using this as a
> primary defense.
>
> *1.2 *Not a Simple HTTP Request Verification: Again, this is a technique
> that I rejected in the later section
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Content-Type_Header_Validation>
> of the document along with the reasoning.
>
>
>
> I just made some changes, feel free to review.
>
>
>
> I also think this comment: "If a developer forgets to add the token to
> any state changing operation, they are making the application vulnerable to
> CSRF." is flat out wrong.  If a dev forgets to add a token, then the
> server is simply going to reject the request. It's not going to be
> vulnerable.  If you agree, can you fix this?
>
>
>
> The article is also REALLY LONG. If you can identify anything to trim out,
> that would be great. I just trimmed out a few things, but I think we can do
> a lot more. Cheat sheets are supposed to be SHORT, but I realize many are
> not.
>
>
>
> For example, maybe we can move the reference example to a completely
> different page? That would shorten this alot.
>
>
>
> -Dave
>
>
>
>
>
> On Wed, Feb 6, 2019 at 5:25 PM manideep konakandla <
> mani.konakandla at gmail.com> wrote:
>
> Yes. All those changes passed through review on email list but yes, please
> feel free to provide any more comments.
>
>
>
> On Wed, Feb 6, 2019, 1:21 PM Dave Wichers <dave.wichers at owasp.org wrote:
>
> Are you:  Manideepk <https://www.owasp.org/index.php/User:Manideepk> on
> the OWASP site?
>
>
>
> I have some questions/comments about your changes to the OWASP CSRF Cheat
> Sheet.
>
>
>
> The bulk of those changes are here:
> https://www.owasp.org/index.php?title=Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet&type=revision&diff=244184&oldid=242455
>
>
>
> If this is you, I'll provide more details, but wanted to make sure I'm in
> touch with the right person first.
>
>
>
> -Dave
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Sunday, December 23, 2018 4:13 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Thanksyou very much for your support ???
>
>
>
> Le sam. 22 d?c. 2018 ? 22:24, Konakandla, Manideep <mkonakan at amazon.com>
> a ?crit :
>
> Let me know once the migration is started. I will do it for the CSRF
> prevention cheatsheet page J
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Saturday, December 22, 2018 12:29 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hello Manideep,
>
>
>
> Thanks you for the update.
>
>
>
> For info we will migrate the entire project content (unless the homepage)
> to github so it is possible that you need to also made the update on the
> github repository.
>
>
>
> The migration work will start on January, i will take some rest until
> January, i really need it.
>
>
>
> Thanks you very much for your help on this project :)
>
>
>
> Happy holidays too
>
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Sat, Dec 22, 2018 at 3:40 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Hello all,
>
>
>
> I made a change to ?Double Submit Cookie? technique [1]. I added a variant
> to it which now mitigates well-known security issues with standard ?Double
> Submit Cookie? technique. So, people can use this technique without any
> issues. Please let me know if anyone finds any issues within it.
>
>
>
> Whenever I get some free time in next 1-2 months, I am planning to include
>
> a)       Details about popular 6-7 web frameworks and the CSRF
> mitigations implemented by them
>
> b)      Re-organize the page even more better by switching variant of
> double submit cookie to primary defense (under stateless section) etc.
>
>
>
> Happy holidays everyone J
>
>
>
> [1]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Double_Submit_Cookie
> (read the last para under this mitigation)
>
>
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Saturday, October 13, 2018 12:59 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim at manicode.com>; Pankaj Upadhyay <
> p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi,
>
> CS publishing released and notification sent to the community via Twitter
> and Slack channel.
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Fri, Oct 12, 2018 at 3:47 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Yes, I am feeling way better now. Thank you J
>
>
>
> *@ALL: *Cheat sheet is updated with all the changes now
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>.
> Please let me know if you have any issues by end of tomorrow. If there are
> no issues - I/we can start advertising the refactored cheat sheet in our
> networks J
>
>
>
> Thanks a ton *Dominique* and *Jim* for all your help till date. I really
> appreciate it!!! I will be actively maintaining this as well from today J
>
>
>
> Regards,
>
> Manideep Konakandla
>
> www.manideepk.com
>
> Security Engineer @ Amazon
>
> mkonakan at amazon.com
>
>
>
> *From:* Jim Manico <jim at manicode.com>
> *Sent:* Wednesday, October 10, 2018 10:39 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Pankaj Upadhyay <
> p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Go for it!!! I hope you?re feeling better!
>
> --
>
> Jim Manico
>
> @Manicode
>
>
>
>
> On Oct 10, 2018, at 10:18 PM, Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Sorry for late reply. I was on sick leave for last 2 days.
>
>
>
> I synced up with Dominique in a different email chain to clarify something
> in his previous email. He gave me a go ahead to update wiki with new
> re-factored cheat sheet. I am planning to do it sometime tomorrow. *@Jim*
> : Is it with fine with you as well? Please let me know if you have any
> concerns.
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Monday, October 8, 2018 1:47 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>; Jim Manico <
> jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hello all,
>
>
>
> In order to move forward and deliver something in the project please
> update the wiki with content from the refactoring from Konakandla Manideep.
> If there missing points they will be added in another round it is the role
> of the wiki based usage.
>
>
>
> Thanks in advance for your understanding ?
>
>
>
> Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com> a
> ?crit :
>
> Hey Folks J
>
>
>
> Good conversation :) Can you guys review the new cheat sheet once? I am
> sure most of the discussion going on here is already answered in the new
> re-factored cheat sheet I wrote.
>
>
>
> @Pankaj ? Go through the respective sections in the new cheat sheet. If
> they are not clear / you are not convinced, we can discuss more. Below is
> the summary of my response to your questions (you will find the same gist
> going through the cheat sheet as well).
>
>
>
> Go through [2] to understand more detailed on how flash based bypass on
> CSRF custom mitigation defense works. You can see there that the origin
> headers are passed along with the custom headers and hence current wiki
> asks to do origin and/or referrer header check as defense-in-depth (it
> would help even if flash sometime in the future repeats same mistake and
> forwards custom headers without crossdomain.xml checks. Domain requesting
> the redirected request might be fooled with custom header bypass but not
> the origin header check). If both these checks are done, it is indeed a
> good defense but origin header is not always included etc. (just as Jim
> mentioned and also as new cheatsheet mentions).  I don?t think deprecating
> custom header check is a good idea. It is indeed a good solution for
> stateless services though they have to keep issues like I mentioned before
> in mind. Your statement of custom header itself doesn?t mitigate CSRF
> relies on the fact that ?Flash being vulnerable to same bug again in
> future?. We cannot rely on a future statement and deprecate a technique,
> instead providing defense in depth measure for it and also cautioning users
> about past issues might be good idea. Users can take their call. Please
> read custom headers and origin check sections I re-wrote for more
> in-details. It talks about the issues and people can select if they want to
> use it or not.
>
>
>
> Also, Login CSRF has nothing to do with custom header mitigation. Login
> forms are usually handled on <form> tags and custom header mitigation is
> only applicable on ajax calls because you cannot set custom headers on form
> tags. It can be applicable if you are doing logins on Ajax/XHR requests in
> which case my above response from custom header mitigation applies. I also
> proposed few methods for mitigating login CSRF which aligns with our
> primary defense on the new cheatsheet (tokens). Please review it as well.
>
>
>
> Also, CORS has nothing to do with CSRF. I infact added CORS as a technique
> that should not be used/even thought for CSRF in the new cheatsheet I
> wrote. Please check that and also read [1]
>
>
>
> [1]
> https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
>
> [2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/
>
>
>
> BTW - Here is the link to the new cheat sheet -
> https://tinyurl.com/y7k9fded
>
>
>
> Again,  I you are not convinced ? please let me know specific item and we
> can happily discuss further J Alternatively, you can send us your edits
> here for review and if it looks good for everyone ? you can edit it in the
> wiki.
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Sunday, October 7, 2018 1:13 PM
> *To:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
> *Cc:* Jim Manico <jim at manicode.com>; Konakandla, Manideep <
> mkonakan at amazon.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Sync your update with one from Konakandla Manideep please ?
>
>
>
> Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com> a
> ?crit :
>
> Aloha Jim!
>
> With XSS, even CSRF tokens can be stolen :).
>
> But I'll keep your tip in mind when editing the wiki. I'm planning to do
> that sometime this month.
>
> Please feel free to review it whenever you guys get a chance.
>
>
>
> Best,
>
> Pankaj
>
>
>
>
>
> On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com> wrote:
>
> I agree JWT's architectures *where cookies are not involved* are
> resistant to CSRF but those tokens are at the risk of being stolen over XSS!
>
> The Origin header does not go with all requests and FireFox does not fully
> support it yet. So careful!
>
> :)
>
>
>
> On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
>
> I agree and that's why I would like to propose deprecation of 'custom
> header approach' as a CSRF defense.
> Presently the mechanism that seems to work across applications is
> validating custom header as well as a forbidden header name (that cannot be
> set by a software or a program) e.g. Origin. If we want to give it a new
> name like 'Double Header Validation' or something else, I'm fine with that
> but custom header alone doesn't seem sufficient to mitigate CSRF issue.
>
>
>
> There are some other best practices that should also be considered. I
> think CORS is now mature enough to have a mention in the CSRF defense Also,
> applications utilizing JWT token in the header seem immune to CSRF.
>
>
>
> Please let me know what you guys think and if allowed, I can go ahead and
> make some of these edits for your perusal.
>
>
>
>
>
> On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <
> dominique.righetto at owasp.org> wrote:
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190208/4d82a034/attachment-0001.html>

From mkonakan at amazon.com  Fri Feb  8 22:09:26 2019
From: mkonakan at amazon.com (Konakandla, Manideep)
Date: Fri, 8 Feb 2019 22:09:26 +0000
Subject: [OWASP-cheat-sheets]
 https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CANos97dMUTWw4oE4jFaQjbcJExLytBENp9CN0kEnhD3OTZ+8EA@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<46fa44e0bd7941eaa029659ca8f3291f@EX13D11UWB004.ant.amazon.com>
	<CANos97csCLS8cgWwduXWt520AcT5Z_sfRXbNUc=Yq6+P8Tx1UA@mail.gmail.com>
	<ea0ad8742d904ea792880b77e6e81678@EX13D11UWB004.ant.amazon.com>
	<70E7657A-CA1F-4BD7-ADF7-07A85CD08E6B@manicode.com>
	<37df98b064aa4b39af8d0e585638b3c4@EX13D11UWB004.ant.amazon.com>
	<CANos97cXnfb_foCaPaYXQEGRnphTQu8P_KC7pXwkeb7_ak0m-A@mail.gmail.com>
	<2bf303591c134e949d52c3d8d5a155d0@EX13D11UWB004.ant.amazon.com>
	<CANos97c6xDAycEr=YY_LaDWaffohmq17Cy1o9iSDPSYBaUa4_A@mail.gmail.com>
	<92ffc47ab9d14f4f9723d1feca90e1ab@EX13D11UWB004.ant.amazon.com>
	<CANos97dTh0Tia6MftWq-_kWFzejWx7o0Uh=NyC8W_=jVpCUdOQ@mail.gmail.com>
	<e832f8afafc945e3b65cd5f17fe15c6b@EX13D11UWB004.ant.amazon.com>
	<CANos97ew=HjNnO+TSgUL55x8WPyzpuKhjERwmvHqEyx5XYMvTg@mail.gmail.com>
	<CAMjpMgcykhmtoA32F+BDZ=8nRkT8z-oM_HX=6Z2kdmKdHvAjUQ@mail.gmail.com>
	<CANos97dHxj6B0H+br7-NKxJkAhZT-Bm525i0DqHwoeAR=Hjnkg@mail.gmail.com>
	<6714ef10-aee3-6720-023d-a4dbc9399b3c@owasp.org>
	<CAJq9yoRQ0G8x_AmdPVq_AWJvVJG+VdFDY2BnAja2YCD=yxHEyw@mail.gmail.com>
	<CANos97c1+LH=Fi3d-FfdOoCT3EaBkwd9avuzXCik208VGY6G9Q@mail.gmail.com>
	<f056014958204a36b0dc6307a217b51d@EX13D11UWB004.ant.amazon.com>
	<CANos97dMUTWw4oE4jFaQjbcJExLytBENp9CN0kEnhD3OTZ+8EA@mail.gmail.com>
Message-ID: <a29edd3e9bb74834b6997298b0d31a92@EX13D11UWB004.ant.amazon.com>

No one is doubting your work and we truly appreciate everything that you and Jim has done and are doing so far. No arguments /questions on that at all. I totally agree that its not an easy job to do this.

We are just trying to see if we can make this process little more better (as I suggested in my earlier e-mails). That?s it!

From: Dominique Righetto <dominique.righetto at owasp.org>
Sent: Friday, February 8, 2019 1:52 PM
To: Konakandla, Manideep <mkonakan at amazon.com>
Cc: Matt Tesauro <matt.tesauro at owasp.org>; owasp-cheat-sheets at lists.owasp.org; Jim Manico <jim at manicode.com>; Dave Wichers <dave.wichers at owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Everyone have control over the CS because they can submit PR on any CS, and discution about PR merge or not will be publicly debated into the CS community.
It's also the reason why there 2 leaders in order prevent block point
One point, when you contribute to CS project, is not your CS anymore it's become part of a collection that can be updated by anyone and that have been given to OWASP under the CC license.
The PR is only a process to ensure the quality, the structure and the consistency of CS accross the collection.
With the wiki it's a true hell to manage, no one respect the format defined and PL pass their time to cleanup the CS to keep the collection consistent for the readers/users (it was my job before the migration). I have also do this job with your contribution too but i have do it in the shadown to not bother you...
By the way about knowledge, PL are not "paper worker" or blocker, personnaly i do appsec in pro life along my personal life so i apply and question all the content of the CS and for topic that i don"t know we ask to specialized people.
See the current issues or PR in the project, does we have blocked one ? NO, we work in a way to enhance the project and faciliate the contribution.
Migration to GH is also a step performed by others big project and they are successful.
Last point " into closed controlled market", no there no market, all stuff is open and everyone is free to contribute or create...

To be clear, i have performed until now the migration job alone on my spare time with many personnal sacrifice in terms of time, when i have ask help, response was NO, so before to say to me that i want to close the access to the CS collections and control everything, verify if i really close the contribution and the response is not, all my action move to a more open way but with quality and consistency.

Jim has emboarded me to move the project to the next level: End of 2019:
- Project migration to GH with the same quality that MSTG and genenrated PDF or site
- Project level moved to Flagship

Before to reproach me something, let me finish my job and after i will give back the project key to anyone because PL role is not the same like contributor.

--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Feb 8, 2019 at 10:28 PM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
I personally feel that Github is a nice move as well ?but? I think atleast 1 or 2 people should be given control over each cheat sheet along with the PLs. I agree PLs are great, knowledgable but I contributed a lot to CSRF cheat sheet recently and also have BUNCH of other things that I planned to add. I obviously would know more about this stuff than PLs (really, no offense, I am just saying that I know more about the stuff that I added). PLs can make sure the overall quality of the cheat sheets is being maintained and individual cheat sheet owners can make sure that their particular cheat sheet is in quality. I just feel that we are trying to convert a wide open Wikipedia (OWASP wikis) into closed controlled market. It?s fine doing it but atleast let the control be kept in few more deserved hands as well. What do you guys think about this? I would love to hear your side of the story.

Hi Dave, Regarding

a)       Feel free to go ahead and submit a PR for reflecting the clarity. I am fine with it, it?s not any technical change.

b)      I provided the resources you requested in a separate email. Unless there is some technical reasoning that those techniques are not having any vulnerability out in market today, I am not comfortable moving them to primary defense.

P.S: I tried putting up my views/opinions/answers as a friendly constructive conversation and would appreciate the same in return ?

From: owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org<mailto:amazon.com at lists.owasp.org> <owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org<mailto:amazon.com at lists.owasp.org>> On Behalf Of Dominique Righetto
Sent: Friday, February 8, 2019 11:27 AM
To: Matt Tesauro <matt.tesauro at owasp.org<mailto:matt.tesauro at owasp.org>>
Cc: owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Thanks you very much Matt for your supports and your feedback.

Le ven. 8 f?vr. 2019 ? 19:18, Matt Tesauro <matt.tesauro at owasp.org<mailto:matt.tesauro at owasp.org>> a ?crit :
For what it's worth, I'd strongly support this move.  Putting the cheat sheets in Github in something like Markdown makes great sense both in terms of ease to transform that content to other formats with something like pandoc or Jekyll plus the ability to use Git, GH issues, PRs,  GH projects ("kanban-like board) to discuss and track changes to that content.  Additionally, you could use GH Pages to provide nicely rendered version of the cheat sheets as well.

I believe it would help increase contribution to this great project.

Cheers!

--
-- Matt Tesauro
OWASP Foundation
Director of Community and Operations
matt.tesauro at owasp.org<mailto:matt.tesauro at owasp.org>

Consider giving back, and supporting the open source community by becoming a member<https://www.owasp.org/index.php/Membership> or making a donation<https://www.owasp.org/index.php/Donate> today!


On Fri, Feb 8, 2019 at 11:48 AM Jim Manico <jim.manico at owasp.org<mailto:jim.manico at owasp.org>> wrote:

We already as leaders made the call to move to the official OWASP GitHub. The Wiki is highly limited. We're close to deleting those pages and just reference Github. That way we have a comment system and a mature process for tracking requests.

It's already a done deal at this point, I'm sorry Dave.

Aloha, Jim
On 2/8/19 6:40 AM, Dominique Righetto wrote:
Section "Migration Pending" from https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series

I understand that you don't follow our communication channel but we use it to communicate and it's the communication process choosen by the project and we have many good feedback about it. Slack members of the CS channel increase at a high speed.

I respect your point of view but, as PL, the wiki mode allow uncontrolled process of edition/creation and Jim/Me are responsible/accountable for the quality/integrity of the CS/projects. Moreover the wiki do not allow integration into CI for create others format or automate control. GH allow also a fully open discution about any operation on CS.

I respect also the fact that you do not like the gihub way but it's the new way followed by new owasp projects (masvs, mstg, asvs, proactive control and the top 10) and it faciliate the contribution even if you dont like it. It's more easy to create a GH account than an OWASP one.

If you dont like this way at the point that it block your to contribute then i understand and respect your position but as PL Jim/Me has decided this way so we will continue the road wihtout you even if we thanks you very very much for your contribution.

--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Feb 8, 2019 at 5:27 PM Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org>> wrote:
Clearly indicated on the home page where?  And I don't follow OWASP on Slack or Twitter so I was completely unaware of this.  You say follow 'the process' but I can't find it anywhere.

If you really don't want the cheat sheets to be edited, lock them, and put notes ON the cheat sheets themselves about what the process is/where to find them.

I'm also concerned that this process will make it MUCH harder to contribute, reducing people's willingness to do so (like me).

-Dave


On Thu, Feb 7, 2019 at 11:54 PM Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>> wrote:
Hello all

Since december wiki update of cs are deprecated. It is clearly indicated on the homepage and slack and Twitter and GitHub since 3 month.

If you modify the wiki your update will simply be ignored and lost.

Please follow the process.

All modification and creation of cs is now controlled by Jim and me as PL along Continuous Integration process.

Le ven. 8 f?vr. 2019 ? 00:43, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Hi Dave - Let?s continue our discussion here so that we have everything tracked in the cheat sheet email list (copying our 1:1 conversation below).

I really appreciate your support in the changes. I have few comments below


a)       Dominique and Jim decided to move cheat sheets to Github. So, all new changes should be on Github CSRF<https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md> page. I think they are also working on deprecating the old wiki pages on OWASP. I am fine with all your changes (as most of them are cosmetic/grammatical/structural) except [1]. If you don?t mind, can you do these changes on the Github? I am fine with you moving the reference example to a different page as well. I have plans to add some other content (not anytime in next month) during which I will also try to trim the content as much as possible.

b)      ?If a developer forgets to add the token to any state changing operation, they are making the application vulnerable to CSRF." is flat out wrong.  If a dev forgets to add a token, then the server is simply going to reject the request. It's not going to be vulnerable.  If you agree, can you fix this?

>> You are ?assuming? here that the server has a token verification system which is not true by default. By default, all applications are vulnerable to CSRF unless developers add tokens / the system has a token verification system.

c)       I am removing the changes related to [1] for now as they are clearly contradicting what we have in other parts of the cheat sheet. If you disagree, I am open to discussion before we get them back to the cheatsheet again. I might be missing something and I would love to hear your side of the story.

1. Earlier, I rejected both the techniques you mentioned in ?Stateless/Tokenless Defense Techniques? to be in primary because
1.1 X-Requested-With: XMLHttpRequest Header: For the same FLASH related reasons mentioned under this<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Use_of_Custom_Request_Headers> section. On a separate thread, I was working with Riyaz who authored this<https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b> blog and you wouldn?t believe how many old browser versions are still vulnerable to this FLASH based redirect CSRF vulnerability. He also gave link to a HTML wrapper which seems to make this attack work on newer Chrome versions as well. If you are interested, I can provide more details about these. Hence, I don?t want users to be vulnerable by using this as a primary defense.
1.2 Not a Simple HTTP Request Verification: Again, this is a technique that I rejected in the later section<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Content-Type_Header_Validation> of the document along with the reasoning.

I just made some changes, feel free to review.

I also think this comment: "If a developer forgets to add the token to any state changing operation, they are making the application vulnerable to CSRF." is flat out wrong.  If a dev forgets to add a token, then the server is simply going to reject the request. It's not going to be vulnerable.  If you agree, can you fix this?

The article is also REALLY LONG. If you can identify anything to trim out, that would be great. I just trimmed out a few things, but I think we can do a lot more. Cheat sheets are supposed to be SHORT, but I realize many are not.

For example, maybe we can move the reference example to a completely different page? That would shorten this alot.

-Dave


On Wed, Feb 6, 2019 at 5:25 PM manideep konakandla <mani.konakandla at gmail.com<mailto:mani.konakandla at gmail.com>> wrote:
Yes. All those changes passed through review on email list but yes, please feel free to provide any more comments.

On Wed, Feb 6, 2019, 1:21 PM Dave Wichers <dave.wichers at owasp.org<mailto:dave.wichers at owasp.org> wrote:
Are you:  Manideepk<https://www.owasp.org/index.php/User:Manideepk> on the OWASP site?

I have some questions/comments about your changes to the OWASP CSRF Cheat Sheet.

The bulk of those changes are here: https://www.owasp.org/index.php?title=Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet&type=revision&diff=244184&oldid=242455

If this is you, I'll provide more details, but wanted to make sure I'm in touch with the right person first.

-Dave

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Sunday, December 23, 2018 4:13 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Thanksyou very much for your support ???

Le sam. 22 d?c. 2018 ? 22:24, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Let me know once the migration is started. I will do it for the CSRF prevention cheatsheet page ?

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Saturday, December 22, 2018 12:29 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hello Manideep,

Thanks you for the update.

For info we will migrate the entire project content (unless the homepage) to github so it is possible that you need to also made the update on the github repository.

The migration work will start on January, i will take some rest until January, i really need it.

Thanks you very much for your help on this project :)

Happy holidays too

--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Sat, Dec 22, 2018 at 3:40 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Hello all,

I made a change to ?Double Submit Cookie? technique [1]. I added a variant to it which now mitigates well-known security issues with standard ?Double Submit Cookie? technique. So, people can use this technique without any issues. Please let me know if anyone finds any issues within it.

Whenever I get some free time in next 1-2 months, I am planning to include

a)       Details about popular 6-7 web frameworks and the CSRF mitigations implemented by them

b)      Re-organize the page even more better by switching variant of double submit cookie to primary defense (under stateless section) etc.

Happy holidays everyone ?

[1]  https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Double_Submit_Cookie  (read the last para under this mitigation)


From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Saturday, October 13, 2018 12:59 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hi,
CS publishing released and notification sent to the community via Twitter and Slack channel.
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com<mailto:dominique.righetto at gmail.com>
dominique.righetto at owasp.org<mailto:dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Oct 12, 2018 at 3:47 AM Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Yes, I am feeling way better now. Thank you ?

@ALL: Cheat sheet is updated with all the changes now<https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>. Please let me know if you have any issues by end of tomorrow. If there are no issues - I/we can start advertising the refactored cheat sheet in our networks ?

Thanks a ton Dominique and Jim for all your help till date. I really appreciate it!!! I will be actively maintaining this as well from today ?

Regards,
Manideep Konakandla
www.manideepk.com<http://www.manideepk.com>
Security Engineer @ Amazon
mkonakan at amazon.com<mailto:mkonakan at amazon.com>

From: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>
Sent: Wednesday, October 10, 2018 10:39 PM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>; Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Go for it!!! I hope you?re feeling better!
--
Jim Manico
@Manicode


On Oct 10, 2018, at 10:18 PM, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> wrote:
Sorry for late reply. I was on sick leave for last 2 days.

I synced up with Dominique in a different email chain to clarify something in his previous email. He gave me a go ahead to update wiki with new re-factored cheat sheet. I am planning to do it sometime tomorrow. @Jim : Is it with fine with you as well? Please let me know if you have any concerns.

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Monday, October 8, 2018 1:47 AM
To: Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>
Cc: Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>; Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Hello all,

In order to move forward and deliver something in the project please update the wiki with content from the refactoring from Konakandla Manideep. If there missing points they will be added in another round it is the role of the wiki based usage.

Thanks in advance for your understanding ?

Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>> a ?crit :
Hey Folks ?

Good conversation :) Can you guys review the new cheat sheet once? I am sure most of the discussion going on here is already answered in the new re-factored cheat sheet I wrote.

@Pankaj ? Go through the respective sections in the new cheat sheet. If they are not clear / you are not convinced, we can discuss more. Below is the summary of my response to your questions (you will find the same gist going through the cheat sheet as well).

Go through [2] to understand more detailed on how flash based bypass on CSRF custom mitigation defense works. You can see there that the origin headers are passed along with the custom headers and hence current wiki asks to do origin and/or referrer header check as defense-in-depth (it would help even if flash sometime in the future repeats same mistake and forwards custom headers without crossdomain.xml checks. Domain requesting the redirected request might be fooled with custom header bypass but not the origin header check). If both these checks are done, it is indeed a good defense but origin header is not always included etc. (just as Jim mentioned and also as new cheatsheet mentions).  I don?t think deprecating custom header check is a good idea. It is indeed a good solution for stateless services though they have to keep issues like I mentioned before in mind. Your statement of custom header itself doesn?t mitigate CSRF relies on the fact that ?Flash being vulnerable to same bug again in future?. We cannot rely on a future statement and deprecate a technique, instead providing defense in depth measure for it and also cautioning users about past issues might be good idea. Users can take their call. Please read custom headers and origin check sections I re-wrote for more in-details. It talks about the issues and people can select if they want to use it or not.

Also, Login CSRF has nothing to do with custom header mitigation. Login forms are usually handled on <form> tags and custom header mitigation is only applicable on ajax calls because you cannot set custom headers on form tags. It can be applicable if you are doing logins on Ajax/XHR requests in which case my above response from custom header mitigation applies. I also proposed few methods for mitigating login CSRF which aligns with our primary defense on the new cheatsheet (tokens). Please review it as well.

Also, CORS has nothing to do with CSRF. I infact added CORS as a technique that should not be used/even thought for CSRF in the new cheatsheet I wrote. Please check that and also read [1]

[1] https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
[2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/

BTW - Here is the link to the new cheat sheet - https://tinyurl.com/y7k9fded

Again,  I you are not convinced ? please let me know specific item and we can happily discuss further ? Alternatively, you can send us your edits here for review and if it looks good for everyone ? you can edit it in the wiki.

From: Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>>
Sent: Sunday, October 7, 2018 1:13 PM
To: Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>>
Cc: Jim Manico <jim at manicode.com<mailto:jim at manicode.com>>; Konakandla, Manideep <mkonakan at amazon.com<mailto:mkonakan at amazon.com>>; owasp-cheat-sheets at lists.owasp.org<mailto:owasp-cheat-sheets at lists.owasp.org>
Subject: Re: [OWASP-cheat-sheets] https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet

Sync your update with one from Konakandla Manideep please ?

Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com<mailto:p.upadhyay9999 at gmail.com>> a ?crit :
Aloha Jim!
With XSS, even CSRF tokens can be stolen :).
But I'll keep your tip in mind when editing the wiki. I'm planning to do that sometime this month.
Please feel free to review it whenever you guys get a chance.

Best,
Pankaj


On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com<mailto:jim at manicode.com>> wrote:

I agree JWT's architectures where cookies are not involved are resistant to CSRF but those tokens are at the risk of being stolen over XSS!

The Origin header does not go with all requests and FireFox does not fully support it yet. So careful!

:)

On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
I agree and that's why I would like to propose deprecation of 'custom header approach' as a CSRF defense.
Presently the mechanism that seems to work across applications is validating custom header as well as a forbidden header name (that cannot be set by a software or a program) e.g. Origin. If we want to give it a new name like 'Double Header Validation' or something else, I'm fine with that but custom header alone doesn't seem sufficient to mitigate CSRF issue.

There are some other best practices that should also be considered. I think CORS is now mature enough to have a mention in the CSRF defense Also, applications utilizing JWT token in the header seem immune to CSRF.

Please let me know what you guys think and if allowed, I can go ahead and make some of these edits for your perusal.


On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <dominique.righetto at owasp.org<mailto:dominique.righetto at owasp.org>> wrote:
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190208/b126e6b7/attachment-0001.html>

From dominique.righetto at owasp.org  Fri Feb  8 22:14:33 2019
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Fri, 8 Feb 2019 23:14:33 +0100
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <a29edd3e9bb74834b6997298b0d31a92@EX13D11UWB004.ant.amazon.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<46fa44e0bd7941eaa029659ca8f3291f@EX13D11UWB004.ant.amazon.com>
	<CANos97csCLS8cgWwduXWt520AcT5Z_sfRXbNUc=Yq6+P8Tx1UA@mail.gmail.com>
	<ea0ad8742d904ea792880b77e6e81678@EX13D11UWB004.ant.amazon.com>
	<70E7657A-CA1F-4BD7-ADF7-07A85CD08E6B@manicode.com>
	<37df98b064aa4b39af8d0e585638b3c4@EX13D11UWB004.ant.amazon.com>
	<CANos97cXnfb_foCaPaYXQEGRnphTQu8P_KC7pXwkeb7_ak0m-A@mail.gmail.com>
	<2bf303591c134e949d52c3d8d5a155d0@EX13D11UWB004.ant.amazon.com>
	<CANos97c6xDAycEr=YY_LaDWaffohmq17Cy1o9iSDPSYBaUa4_A@mail.gmail.com>
	<92ffc47ab9d14f4f9723d1feca90e1ab@EX13D11UWB004.ant.amazon.com>
	<CANos97dTh0Tia6MftWq-_kWFzejWx7o0Uh=NyC8W_=jVpCUdOQ@mail.gmail.com>
	<e832f8afafc945e3b65cd5f17fe15c6b@EX13D11UWB004.ant.amazon.com>
	<CANos97ew=HjNnO+TSgUL55x8WPyzpuKhjERwmvHqEyx5XYMvTg@mail.gmail.com>
	<CAMjpMgcykhmtoA32F+BDZ=8nRkT8z-oM_HX=6Z2kdmKdHvAjUQ@mail.gmail.com>
	<CANos97dHxj6B0H+br7-NKxJkAhZT-Bm525i0DqHwoeAR=Hjnkg@mail.gmail.com>
	<6714ef10-aee3-6720-023d-a4dbc9399b3c@owasp.org>
	<CAJq9yoRQ0G8x_AmdPVq_AWJvVJG+VdFDY2BnAja2YCD=yxHEyw@mail.gmail.com>
	<CANos97c1+LH=Fi3d-FfdOoCT3EaBkwd9avuzXCik208VGY6G9Q@mail.gmail.com>
	<f056014958204a36b0dc6307a217b51d@EX13D11UWB004.ant.amazon.com>
	<CANos97dMUTWw4oE4jFaQjbcJExLytBENp9CN0kEnhD3OTZ+8EA@mail.gmail.com>
	<a29edd3e9bb74834b6997298b0d31a92@EX13D11UWB004.ant.amazon.com>
Message-ID: <CANos97e04fRUR6s2n=8+TQ=FToD15vfM1NSEQ3pWzX9mieGG7w@mail.gmail.com>

And i thanks you very much for that along your contribution.
The thing that i want to highlight in my previous mail is: Let us finish
the migration, we will ensure that you have all the possibility to update
or create any content of the project and respect the OWASP spirit.
We will never block someone about contributing, the move have a single
goal, make it better because the project need to be refreshed...
My unique goal is to allow more exchange and not block at all...
But for the moment i need to finish my job in order to present you a cool V2
After we can start a second phase with analysis of the access issue and
grant commit access to more people if needed...
Thanks you in advance for your understanding and context of my response.
--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com
<dominique.righetto at gmail.com>dominique.righetto at owasp.org
<dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA


On Fri, Feb 8, 2019 at 11:09 PM Konakandla, Manideep <mkonakan at amazon.com>
wrote:

> No one is doubting your work and we truly appreciate everything that you
> and Jim has done and are doing so far. No arguments /questions on that at
> all. I totally agree that its not an easy job to do this.
>
>
>
> We are just trying to see if we can make this process little more better
> (as I suggested in my earlier e-mails). That?s it!
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Friday, February 8, 2019 1:52 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Matt Tesauro <matt.tesauro at owasp.org>;
> owasp-cheat-sheets at lists.owasp.org; Jim Manico <jim at manicode.com>; Dave
> Wichers <dave.wichers at owasp.org>
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Everyone have control over the CS because they can submit PR on any CS,
> and discution about PR merge or not will be publicly debated into the CS
> community.
>
> It's also the reason why there 2 leaders in order prevent block point
>
> One point, when you contribute to CS project, is not your CS anymore it's
> become part of a collection that can be updated by anyone and that have
> been given to OWASP under the CC license.
>
> The PR is only a process to ensure the quality, the structure and the
> consistency of CS accross the collection.
>
> With the wiki it's a true hell to manage, no one respect the format
> defined and PL pass their time to cleanup the CS to keep the collection
> consistent for the readers/users (it was my job before the migration). I
> have also do this job with your contribution too but i have do it in the
> shadown to not bother you...
>
> By the way about knowledge, PL are not "paper worker" or blocker,
> personnaly i do appsec in pro life along my personal life so i apply and
> question all the content of the CS and for topic that i don"t know we ask
> to specialized people.
>
> See the current issues or PR in the project, does we have blocked one ?
> NO, we work in a way to enhance the project and faciliate the contribution.
>
> Migration to GH is also a step performed by others big project and they
> are successful.
>
> Last point " into closed controlled market", no there no market, all
> stuff is open and everyone is free to contribute or create...
>
>
>
> To be clear, i have performed until now the migration job alone on my
> spare time with many personnal sacrifice in terms of time, when i have ask
> help, response was NO, so before to say to me that i want to close the
> access to the CS collections and control everything, verify if i really
> close the contribution and the response is not, all my action move to a
> more open way but with quality and consistency.
>
>
>
> Jim has emboarded me to move the project to the next level: End of 2019:
>
> - Project migration to GH with the same quality that MSTG and genenrated
> PDF or site
>
> - Project level moved to Flagship
>
>
>
> Before to reproach me something, let me finish my job and after i will
> give back the project key to anyone because PL role is not the same like
> contributor.
>
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Fri, Feb 8, 2019 at 10:28 PM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> I personally feel that Github is a nice move as well ?but? I think atleast
> 1 or 2 people should be given control over each cheat sheet along with the
> PLs. I agree PLs are great, knowledgable but I contributed a lot to CSRF
> cheat sheet recently and also have BUNCH of other things that I planned to
> add. I obviously would know more about this stuff than PLs (really, no
> offense, I am just saying that I know more about the stuff that I added).
> PLs can make sure the overall quality of the cheat sheets is being
> maintained and individual cheat sheet owners can make sure that their
> particular cheat sheet is in quality. I just feel that we are trying to
> convert a wide open Wikipedia (OWASP wikis) into closed controlled market.
> It?s fine doing it but atleast let the control be kept in few more deserved
> hands as well. What do you guys think about this? I would love to hear your
> side of the story.
>
>
>
> Hi Dave, Regarding
>
> a)       Feel free to go ahead and submit a PR for reflecting the
> clarity. I am fine with it, it?s not any technical change.
>
> b)      I provided the resources you requested in a separate email.
> Unless there is some technical reasoning that those techniques are not
> having any vulnerability out in market today, I am not comfortable moving
> them to primary defense.
>
>
>
> *P.S:* I tried putting up my views/opinions/answers as a friendly
> constructive conversation and would appreciate the same in return J
>
>
>
> *From:* owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org
> <owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org> *On
> Behalf Of *Dominique Righetto
> *Sent:* Friday, February 8, 2019 11:27 AM
> *To:* Matt Tesauro <matt.tesauro at owasp.org>
> *Cc:* owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Thanks you very much Matt for your supports and your feedback.
>
>
>
> Le ven. 8 f?vr. 2019 ? 19:18, Matt Tesauro <matt.tesauro at owasp.org> a
> ?crit :
>
> For what it's worth, I'd strongly support this move.  Putting the cheat
> sheets in Github in something like Markdown makes great sense both in terms
> of ease to transform that content to other formats with something like
> pandoc or Jekyll plus the ability to use Git, GH issues, PRs,  GH projects
> ("kanban-like board) to discuss and track changes to that content.
> Additionally, you could use GH Pages to provide nicely rendered version of
> the cheat sheets as well.
>
>
>
> I believe it would help increase contribution to this great project.
>
>
>
> Cheers!
>
>
> --
> -- Matt Tesauro
>
> *OWASP Foundation*
>
> Director of Community and Operations
>
> matt.tesauro at owasp.org
>
> Consider giving back, and supporting the open source community by becoming
> a member <https://www.owasp.org/index.php/Membership> or making a donation
> <https://www.owasp.org/index.php/Donate> today!
>
>
>
>
>
> On Fri, Feb 8, 2019 at 11:48 AM Jim Manico <jim.manico at owasp.org> wrote:
>
> We already as leaders made the call to move to the official OWASP GitHub.
> The Wiki is highly limited. We're close to deleting those pages and just
> reference Github. That way we have a comment system and a mature process
> for tracking requests.
>
> It's already a done deal at this point, I'm sorry Dave.
>
> Aloha, Jim
>
> On 2/8/19 6:40 AM, Dominique Righetto wrote:
>
> Section "Migration Pending" from
> https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series
>
>
>
> I understand that you don't follow our communication channel but we use it
> to communicate and it's the communication process choosen by the project
> and we have many good feedback about it. Slack members of the CS channel
> increase at a high speed.
>
>
>
> I respect your point of view but, as PL, the wiki mode allow uncontrolled
> process of edition/creation and Jim/Me are responsible/accountable for the
> quality/integrity of the CS/projects. Moreover the wiki do not allow
> integration into CI for create others format or automate control. GH allow
> also a fully open discution about any operation on CS.
>
>
>
> I respect also the fact that you do not like the gihub way but it's the
> new way followed by new owasp projects (masvs, mstg, asvs, proactive
> control and the top 10) and it faciliate the contribution even if you dont
> like it. It's more easy to create a GH account than an OWASP one.
>
>
>
> If you dont like this way at the point that it block your to contribute
> then i understand and respect your position but as PL Jim/Me has decided
> this way so we will continue the road wihtout you even if we thanks you
> very very much for your contribution.
>
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Fri, Feb 8, 2019 at 5:27 PM Dave Wichers <dave.wichers at owasp.org>
> wrote:
>
> Clearly indicated on the home page where?  And I don't follow OWASP on
> Slack or Twitter so I was completely unaware of this.  You say follow 'the
> process' but I can't find it anywhere.
>
>
>
> If you really don't want the cheat sheets to be edited, lock them, and put
> notes ON the cheat sheets themselves about what the process is/where to
> find them.
>
>
>
> I'm also concerned that this process will make it MUCH harder to
> contribute, reducing people's willingness to do so (like me).
>
>
>
> -Dave
>
>
>
>
>
> On Thu, Feb 7, 2019 at 11:54 PM Dominique Righetto <
> dominique.righetto at owasp.org> wrote:
>
> Hello all
>
>
>
> Since december wiki update of cs are deprecated. It is clearly indicated
> on the homepage and slack and Twitter and GitHub since 3 month.
>
>
>
> If you modify the wiki your update will simply be ignored and lost.
>
>
>
> Please follow the process.
>
>
>
> All modification and creation of cs is now controlled by Jim and me as PL
> along Continuous Integration process.
>
>
>
> Le ven. 8 f?vr. 2019 ? 00:43, Konakandla, Manideep <mkonakan at amazon.com>
> a ?crit :
>
> Hi Dave - Let?s continue our discussion here so that we have everything
> tracked in the cheat sheet email list (copying our 1:1 conversation below).
>
>
>
> I really appreciate your support in the changes. I have few comments below
>
>
>
> a)       Dominique and Jim decided to move cheat sheets to Github. So, all
> new changes should be on Github CSRF
> <https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md>
> page. I think they are also working on deprecating the old wiki pages on
> OWASP. I am fine with all your changes (as most of them are
> cosmetic/grammatical/structural) except [1]. If you don?t mind, can you do
> these changes on the Github? I am fine with you moving the reference
> example to a different page as well. I have plans to add some other content
> (not anytime in next month) during which I will also try to trim the
> content as much as possible.
>
> b)      ?If a developer forgets to add the token to any state changing
> operation, they are making the application vulnerable to CSRF." is flat out
> wrong.  If a dev forgets to add a token, then the server is simply going to
> reject the request. It's not going to be vulnerable.  If you agree, can you
> fix this?
>
> >> You are ?assuming? here that the server has a token verification system
> which is not true by default. By default, all applications are vulnerable
> to CSRF unless developers add tokens / the system has a token verification
> system.
>
> c)       I am removing the changes related to [1] for now as they are
> clearly contradicting what we have in other parts of the cheat sheet. If
> you disagree, I am open to discussion before we get them back to the
> cheatsheet again. I might be missing something and I would love to hear
> your side of the story.
>
>
>
> *1.* Earlier, I rejected both the techniques you mentioned in
> ?Stateless/Tokenless Defense Techniques? to be in primary because
>
> *1.1* X-Requested-With: XMLHttpRequest Header: For the same FLASH related
> reasons mentioned under this
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Use_of_Custom_Request_Headers>
> section. On a separate thread, I was working with Riyaz who authored this
> <https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b>
> blog and you wouldn?t believe how many old browser versions are still
> vulnerable to this FLASH based redirect CSRF vulnerability. He also gave
> link to a HTML wrapper which seems to make this attack work on newer Chrome
> versions as well. If you are interested, I can provide more details about
> these. Hence, I don?t want users to be vulnerable by using this as a
> primary defense.
>
> *1.2 *Not a Simple HTTP Request Verification: Again, this is a technique
> that I rejected in the later section
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Content-Type_Header_Validation>
> of the document along with the reasoning.
>
>
>
> I just made some changes, feel free to review.
>
>
>
> I also think this comment: "If a developer forgets to add the token to
> any state changing operation, they are making the application vulnerable to
> CSRF." is flat out wrong.  If a dev forgets to add a token, then the
> server is simply going to reject the request. It's not going to be
> vulnerable.  If you agree, can you fix this?
>
>
>
> The article is also REALLY LONG. If you can identify anything to trim out,
> that would be great. I just trimmed out a few things, but I think we can do
> a lot more. Cheat sheets are supposed to be SHORT, but I realize many are
> not.
>
>
>
> For example, maybe we can move the reference example to a completely
> different page? That would shorten this alot.
>
>
>
> -Dave
>
>
>
>
>
> On Wed, Feb 6, 2019 at 5:25 PM manideep konakandla <
> mani.konakandla at gmail.com> wrote:
>
> Yes. All those changes passed through review on email list but yes, please
> feel free to provide any more comments.
>
>
>
> On Wed, Feb 6, 2019, 1:21 PM Dave Wichers <dave.wichers at owasp.org wrote:
>
> Are you:  Manideepk <https://www.owasp.org/index.php/User:Manideepk> on
> the OWASP site?
>
>
>
> I have some questions/comments about your changes to the OWASP CSRF Cheat
> Sheet.
>
>
>
> The bulk of those changes are here:
> https://www.owasp.org/index.php?title=Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet&type=revision&diff=244184&oldid=242455
>
>
>
> If this is you, I'll provide more details, but wanted to make sure I'm in
> touch with the right person first.
>
>
>
> -Dave
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Sunday, December 23, 2018 4:13 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Thanksyou very much for your support ???
>
>
>
> Le sam. 22 d?c. 2018 ? 22:24, Konakandla, Manideep <mkonakan at amazon.com>
> a ?crit :
>
> Let me know once the migration is started. I will do it for the CSRF
> prevention cheatsheet page J
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Saturday, December 22, 2018 12:29 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hello Manideep,
>
>
>
> Thanks you for the update.
>
>
>
> For info we will migrate the entire project content (unless the homepage)
> to github so it is possible that you need to also made the update on the
> github repository.
>
>
>
> The migration work will start on January, i will take some rest until
> January, i really need it.
>
>
>
> Thanks you very much for your help on this project :)
>
>
>
> Happy holidays too
>
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Sat, Dec 22, 2018 at 3:40 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Hello all,
>
>
>
> I made a change to ?Double Submit Cookie? technique [1]. I added a variant
> to it which now mitigates well-known security issues with standard ?Double
> Submit Cookie? technique. So, people can use this technique without any
> issues. Please let me know if anyone finds any issues within it.
>
>
>
> Whenever I get some free time in next 1-2 months, I am planning to include
>
> a)       Details about popular 6-7 web frameworks and the CSRF
> mitigations implemented by them
>
> b)      Re-organize the page even more better by switching variant of
> double submit cookie to primary defense (under stateless section) etc.
>
>
>
> Happy holidays everyone J
>
>
>
> [1]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Double_Submit_Cookie
> (read the last para under this mitigation)
>
>
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Saturday, October 13, 2018 12:59 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim at manicode.com>; Pankaj Upadhyay <
> p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi,
>
> CS publishing released and notification sent to the community via Twitter
> and Slack channel.
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Fri, Oct 12, 2018 at 3:47 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Yes, I am feeling way better now. Thank you J
>
>
>
> *@ALL: *Cheat sheet is updated with all the changes now
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>.
> Please let me know if you have any issues by end of tomorrow. If there are
> no issues - I/we can start advertising the refactored cheat sheet in our
> networks J
>
>
>
> Thanks a ton *Dominique* and *Jim* for all your help till date. I really
> appreciate it!!! I will be actively maintaining this as well from today J
>
>
>
> Regards,
>
> Manideep Konakandla
>
> www.manideepk.com
>
> Security Engineer @ Amazon
>
> mkonakan at amazon.com
>
>
>
> *From:* Jim Manico <jim at manicode.com>
> *Sent:* Wednesday, October 10, 2018 10:39 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Pankaj Upadhyay <
> p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Go for it!!! I hope you?re feeling better!
>
> --
>
> Jim Manico
>
> @Manicode
>
>
>
>
> On Oct 10, 2018, at 10:18 PM, Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Sorry for late reply. I was on sick leave for last 2 days.
>
>
>
> I synced up with Dominique in a different email chain to clarify something
> in his previous email. He gave me a go ahead to update wiki with new
> re-factored cheat sheet. I am planning to do it sometime tomorrow. *@Jim*
> : Is it with fine with you as well? Please let me know if you have any
> concerns.
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Monday, October 8, 2018 1:47 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>; Jim Manico <
> jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hello all,
>
>
>
> In order to move forward and deliver something in the project please
> update the wiki with content from the refactoring from Konakandla Manideep.
> If there missing points they will be added in another round it is the role
> of the wiki based usage.
>
>
>
> Thanks in advance for your understanding ?
>
>
>
> Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com> a
> ?crit :
>
> Hey Folks J
>
>
>
> Good conversation :) Can you guys review the new cheat sheet once? I am
> sure most of the discussion going on here is already answered in the new
> re-factored cheat sheet I wrote.
>
>
>
> @Pankaj ? Go through the respective sections in the new cheat sheet. If
> they are not clear / you are not convinced, we can discuss more. Below is
> the summary of my response to your questions (you will find the same gist
> going through the cheat sheet as well).
>
>
>
> Go through [2] to understand more detailed on how flash based bypass on
> CSRF custom mitigation defense works. You can see there that the origin
> headers are passed along with the custom headers and hence current wiki
> asks to do origin and/or referrer header check as defense-in-depth (it
> would help even if flash sometime in the future repeats same mistake and
> forwards custom headers without crossdomain.xml checks. Domain requesting
> the redirected request might be fooled with custom header bypass but not
> the origin header check). If both these checks are done, it is indeed a
> good defense but origin header is not always included etc. (just as Jim
> mentioned and also as new cheatsheet mentions).  I don?t think deprecating
> custom header check is a good idea. It is indeed a good solution for
> stateless services though they have to keep issues like I mentioned before
> in mind. Your statement of custom header itself doesn?t mitigate CSRF
> relies on the fact that ?Flash being vulnerable to same bug again in
> future?. We cannot rely on a future statement and deprecate a technique,
> instead providing defense in depth measure for it and also cautioning users
> about past issues might be good idea. Users can take their call. Please
> read custom headers and origin check sections I re-wrote for more
> in-details. It talks about the issues and people can select if they want to
> use it or not.
>
>
>
> Also, Login CSRF has nothing to do with custom header mitigation. Login
> forms are usually handled on <form> tags and custom header mitigation is
> only applicable on ajax calls because you cannot set custom headers on form
> tags. It can be applicable if you are doing logins on Ajax/XHR requests in
> which case my above response from custom header mitigation applies. I also
> proposed few methods for mitigating login CSRF which aligns with our
> primary defense on the new cheatsheet (tokens). Please review it as well.
>
>
>
> Also, CORS has nothing to do with CSRF. I infact added CORS as a technique
> that should not be used/even thought for CSRF in the new cheatsheet I
> wrote. Please check that and also read [1]
>
>
>
> [1]
> https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
>
> [2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/
>
>
>
> BTW - Here is the link to the new cheat sheet -
> https://tinyurl.com/y7k9fded
>
>
>
> Again,  I you are not convinced ? please let me know specific item and we
> can happily discuss further J Alternatively, you can send us your edits
> here for review and if it looks good for everyone ? you can edit it in the
> wiki.
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Sunday, October 7, 2018 1:13 PM
> *To:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
> *Cc:* Jim Manico <jim at manicode.com>; Konakandla, Manideep <
> mkonakan at amazon.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Sync your update with one from Konakandla Manideep please ?
>
>
>
> Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com> a
> ?crit :
>
> Aloha Jim!
>
> With XSS, even CSRF tokens can be stolen :).
>
> But I'll keep your tip in mind when editing the wiki. I'm planning to do
> that sometime this month.
>
> Please feel free to review it whenever you guys get a chance.
>
>
>
> Best,
>
> Pankaj
>
>
>
>
>
> On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com> wrote:
>
> I agree JWT's architectures *where cookies are not involved* are
> resistant to CSRF but those tokens are at the risk of being stolen over XSS!
>
> The Origin header does not go with all requests and FireFox does not fully
> support it yet. So careful!
>
> :)
>
>
>
> On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
>
> I agree and that's why I would like to propose deprecation of 'custom
> header approach' as a CSRF defense.
> Presently the mechanism that seems to work across applications is
> validating custom header as well as a forbidden header name (that cannot be
> set by a software or a program) e.g. Origin. If we want to give it a new
> name like 'Double Header Validation' or something else, I'm fine with that
> but custom header alone doesn't seem sufficient to mitigate CSRF issue.
>
>
>
> There are some other best practices that should also be considered. I
> think CORS is now mature enough to have a mention in the CSRF defense Also,
> applications utilizing JWT token in the header seem immune to CSRF.
>
>
>
> Please let me know what you guys think and if allowed, I can go ahead and
> make some of these edits for your perusal.
>
>
>
>
>
> On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <
> dominique.righetto at owasp.org> wrote:
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190208/15121848/attachment-0001.html>

From matt.tesauro at owasp.org  Fri Feb  8 23:59:46 2019
From: matt.tesauro at owasp.org (Matt Tesauro)
Date: Fri, 8 Feb 2019 17:59:46 -0600
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <dfeac335745a4c50b03e883d3e7bbd3a@EX13D11UWB004.ant.amazon.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<37df98b064aa4b39af8d0e585638b3c4@EX13D11UWB004.ant.amazon.com>
	<CANos97cXnfb_foCaPaYXQEGRnphTQu8P_KC7pXwkeb7_ak0m-A@mail.gmail.com>
	<2bf303591c134e949d52c3d8d5a155d0@EX13D11UWB004.ant.amazon.com>
	<CANos97c6xDAycEr=YY_LaDWaffohmq17Cy1o9iSDPSYBaUa4_A@mail.gmail.com>
	<92ffc47ab9d14f4f9723d1feca90e1ab@EX13D11UWB004.ant.amazon.com>
	<CANos97dTh0Tia6MftWq-_kWFzejWx7o0Uh=NyC8W_=jVpCUdOQ@mail.gmail.com>
	<e832f8afafc945e3b65cd5f17fe15c6b@EX13D11UWB004.ant.amazon.com>
	<CANos97ew=HjNnO+TSgUL55x8WPyzpuKhjERwmvHqEyx5XYMvTg@mail.gmail.com>
	<CAMjpMgcykhmtoA32F+BDZ=8nRkT8z-oM_HX=6Z2kdmKdHvAjUQ@mail.gmail.com>
	<CANos97dHxj6B0H+br7-NKxJkAhZT-Bm525i0DqHwoeAR=Hjnkg@mail.gmail.com>
	<6714ef10-aee3-6720-023d-a4dbc9399b3c@owasp.org>
	<CAJq9yoRQ0G8x_AmdPVq_AWJvVJG+VdFDY2BnAja2YCD=yxHEyw@mail.gmail.com>
	<CANos97c1+LH=Fi3d-FfdOoCT3EaBkwd9avuzXCik208VGY6G9Q@mail.gmail.com>
	<f056014958204a36b0dc6307a217b51d@EX13D11UWB004.ant.amazon.com>
	<c358f250-eb5d-95d4-e95a-a747aa41400f@manicode.com>
	<dfeac335745a4c50b03e883d3e7bbd3a@EX13D11UWB004.ant.amazon.com>
Message-ID: <CAJq9yoQEaD6gbgSykP=Xa+aNm0SycVq6SbX_VF_cUTX7zsBwaA@mail.gmail.com>

Having used Github (GH) for multiple projects (my own and others), I'd
suggest a workflow that has worked for teams ranging from 3 to thousands
like the Docker code base -


   1. Each cheat-sheet author (subject matter does not matter) simply forks
   the Cheat Sheet repo into their own GH account.
   2. They make the changes they want there (either in the native GH web
   application or doing the traditional 'git clone ...' and using the editor
   of their choice)
   3. They create a pull-request (PR) and send it to the OWASP Cheat Sheet
   repo.
   4. The author and PL (project leader, right?) can discuss the changes as
   needed and merge the PR assuming no major issues arise.
   5. The Cheat Sheet in questions is updated.

It's also customary to have a "CONTRIBUTING,md" file in the repository to
explain how people should contribute - they can be short like the one
for Defect
Dojo
<https://github.com/DefectDojo/django-DefectDojo/blob/master/CONTRIBUTING.md>
or longer like the one for Moby
<https://github.com/moby/moby/blob/master/CONTRIBUTING.md> (Docker's open
source code base)

You can also do interesting things with GH PRs like templates - Defect Dojo
does this for PRs
<https://github.com/DefectDojo/django-DefectDojo/blob/master/PULL_REQUEST_TEMPLATE.md>
and Issues
<https://github.com/DefectDojo/django-DefectDojo/blob/master/ISSUE_TEMPLATE.md>
to make sure the submitter gets guidance on how to be successful with their
PR or issue.  I don't see these in the Cheat Sheet repo and would highly
suggest adding them.

>From a workflow perspective, this isn't much different (probably better)
than the wiki.  It's the same in that:

   - Anybody can suggest or make a change
   - Changes are tracked to specific versions
   - Changes can be reverted/reversed if needed
   - Changes can be made in a web app only if that's your preference

It's better in that

   - It's easier to get a Github account than a wiki account - lots of
   people already have a GH account
   - An issue tracker exists with GH and not with the wiki
   - Git is where developers and most open software lives these days, on
   the public Internet it is Github followed by GitLab in terms of popularity
   - As AppSec people, we should know git and, if you don't, learning git
   will only help your career
   - There's loads and loads of tutorials, videos, etc on doing things with
   Git & GitHub - much more then MediaWiki
   - Markdown has a significantly larger user base then MediaWiki markup

Matt's 2 cents :-)

--
-- Matt Tesauro
*OWASP Foundation*
Director of Community and Operations
matt.tesauro at owasp.org

Consider giving back, and supporting the open source community by becoming
a member <https://www.owasp.org/index.php/Membership> or making a donation
<https://www.owasp.org/index.php/Donate> today!


On Fri, Feb 8, 2019 at 3:42 PM Konakandla, Manideep <mkonakan at amazon.com>
wrote:

> I haven?t used public facing Github much in last year and I am not sure
> about that. You guys might want to see it if it?s possible with the type of
> account you may have and if not, may you might wanna think about
> considering alternatives (I think making people editors for full package
> and providing them instructions to just make sure that they touch only
> their cheat sheet is not a bad idea too).
>
>
>
> *From:* Jim Manico <jim at manicode.com>
> *Sent:* Friday, February 8, 2019 1:30 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>; Dominique Righetto <
> dominique.righetto at owasp.org>; Matt Tesauro <matt.tesauro at owasp.org>
> *Cc:* owasp-cheat-sheets at lists.owasp.org; Dave Wichers <
> dave.wichers at owasp.org>
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Will GitHub let us make you editor of the one cheatsheet you authored? If
> so I think that is ok.
>
> Aloha, Jim
>
> On 2/8/19 11:27 AM, Konakandla, Manideep wrote:
>
> I personally feel that Github is a nice move as well ?but? I think atleast
> 1 or 2 people should be given control over each cheat sheet along with the
> PLs. I agree PLs are great, knowledgable but I contributed a lot to CSRF
> cheat sheet recently and also have BUNCH of other things that I planned to
> add. I obviously would know more about this stuff than PLs (really, no
> offense, I am just saying that I know more about the stuff that I added).
> PLs can make sure the overall quality of the cheat sheets is being
> maintained and individual cheat sheet owners can make sure that their
> particular cheat sheet is in quality. I just feel that we are trying to
> convert a wide open Wikipedia (OWASP wikis) into closed controlled market.
> It?s fine doing it but atleast let the control be kept in few more deserved
> hands as well. What do you guys think about this? I would love to hear your
> side of the story.
>
>
>
> Hi Dave, Regarding
>
> a)     Feel free to go ahead and submit a PR for reflecting the clarity.
> I am fine with it, it?s not any technical change.
>
> b)    I provided the resources you requested in a separate email. Unless
> there is some technical reasoning that those techniques are not having any
> vulnerability out in market today, I am not comfortable moving them to
> primary defense.
>
>
>
> *P.S:* I tried putting up my views/opinions/answers as a friendly
> constructive conversation and would appreciate the same in return J
>
>
>
> *From:* owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org
> <owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org>
> <owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org> *On
> Behalf Of *Dominique Righetto
> *Sent:* Friday, February 8, 2019 11:27 AM
> *To:* Matt Tesauro <matt.tesauro at owasp.org> <matt.tesauro at owasp.org>
> *Cc:* owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Thanks you very much Matt for your supports and your feedback.
>
>
>
> Le ven. 8 f?vr. 2019 ? 19:18, Matt Tesauro <matt.tesauro at owasp.org> a
> ?crit :
>
> For what it's worth, I'd strongly support this move.  Putting the cheat
> sheets in Github in something like Markdown makes great sense both in terms
> of ease to transform that content to other formats with something like
> pandoc or Jekyll plus the ability to use Git, GH issues, PRs,  GH projects
> ("kanban-like board) to discuss and track changes to that content.
> Additionally, you could use GH Pages to provide nicely rendered version of
> the cheat sheets as well.
>
>
>
> I believe it would help increase contribution to this great project.
>
>
>
> Cheers!
>
>
> --
> -- Matt Tesauro
>
> *OWASP Foundation*
>
> Director of Community and Operations
>
> matt.tesauro at owasp.org
>
> Consider giving back, and supporting the open source community by becoming
> a member <https://www.owasp.org/index.php/Membership> or making a donation
> <https://www.owasp.org/index.php/Donate> today!
>
>
>
>
>
> On Fri, Feb 8, 2019 at 11:48 AM Jim Manico <jim.manico at owasp.org> wrote:
>
> We already as leaders made the call to move to the official OWASP GitHub.
> The Wiki is highly limited. We're close to deleting those pages and just
> reference Github. That way we have a comment system and a mature process
> for tracking requests.
>
> It's already a done deal at this point, I'm sorry Dave.
>
> Aloha, Jim
>
> On 2/8/19 6:40 AM, Dominique Righetto wrote:
>
> Section "Migration Pending" from
> https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series
>
>
>
> I understand that you don't follow our communication channel but we use it
> to communicate and it's the communication process choosen by the project
> and we have many good feedback about it. Slack members of the CS channel
> increase at a high speed.
>
>
>
> I respect your point of view but, as PL, the wiki mode allow uncontrolled
> process of edition/creation and Jim/Me are responsible/accountable for the
> quality/integrity of the CS/projects. Moreover the wiki do not allow
> integration into CI for create others format or automate control. GH allow
> also a fully open discution about any operation on CS.
>
>
>
> I respect also the fact that you do not like the gihub way but it's the
> new way followed by new owasp projects (masvs, mstg, asvs, proactive
> control and the top 10) and it faciliate the contribution even if you dont
> like it. It's more easy to create a GH account than an OWASP one.
>
>
>
> If you dont like this way at the point that it block your to contribute
> then i understand and respect your position but as PL Jim/Me has decided
> this way so we will continue the road wihtout you even if we thanks you
> very very much for your contribution.
>
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Fri, Feb 8, 2019 at 5:27 PM Dave Wichers <dave.wichers at owasp.org>
> wrote:
>
> Clearly indicated on the home page where?  And I don't follow OWASP on
> Slack or Twitter so I was completely unaware of this.  You say follow 'the
> process' but I can't find it anywhere.
>
>
>
> If you really don't want the cheat sheets to be edited, lock them, and put
> notes ON the cheat sheets themselves about what the process is/where to
> find them.
>
>
>
> I'm also concerned that this process will make it MUCH harder to
> contribute, reducing people's willingness to do so (like me).
>
>
>
> -Dave
>
>
>
>
>
> On Thu, Feb 7, 2019 at 11:54 PM Dominique Righetto <
> dominique.righetto at owasp.org> wrote:
>
> Hello all
>
>
>
> Since december wiki update of cs are deprecated. It is clearly indicated
> on the homepage and slack and Twitter and GitHub since 3 month.
>
>
>
> If you modify the wiki your update will simply be ignored and lost.
>
>
>
> Please follow the process.
>
>
>
> All modification and creation of cs is now controlled by Jim and me as PL
> along Continuous Integration process.
>
>
>
> Le ven. 8 f?vr. 2019 ? 00:43, Konakandla, Manideep <mkonakan at amazon.com>
> a ?crit :
>
> Hi Dave - Let?s continue our discussion here so that we have everything
> tracked in the cheat sheet email list (copying our 1:1 conversation below).
>
>
>
> I really appreciate your support in the changes. I have few comments below
>
>
>
> a)       Dominique and Jim decided to move cheat sheets to Github. So, all
> new changes should be on Github CSRF
> <https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md>
> page. I think they are also working on deprecating the old wiki pages on
> OWASP. I am fine with all your changes (as most of them are
> cosmetic/grammatical/structural) except [1]. If you don?t mind, can you do
> these changes on the Github? I am fine with you moving the reference
> example to a different page as well. I have plans to add some other content
> (not anytime in next month) during which I will also try to trim the
> content as much as possible.
>
> b)      ?If a developer forgets to add the token to any state changing
> operation, they are making the application vulnerable to CSRF." is flat out
> wrong.  If a dev forgets to add a token, then the server is simply going to
> reject the request. It's not going to be vulnerable.  If you agree, can you
> fix this?
>
> >> You are ?assuming? here that the server has a token verification system
> which is not true by default. By default, all applications are vulnerable
> to CSRF unless developers add tokens / the system has a token verification
> system.
>
> c)       I am removing the changes related to [1] for now as they are
> clearly contradicting what we have in other parts of the cheat sheet. If
> you disagree, I am open to discussion before we get them back to the
> cheatsheet again. I might be missing something and I would love to hear
> your side of the story.
>
>
>
> *1.* Earlier, I rejected both the techniques you mentioned in
> ?Stateless/Tokenless Defense Techniques? to be in primary because
>
> *1.1* X-Requested-With: XMLHttpRequest Header: For the same FLASH related
> reasons mentioned under this
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Use_of_Custom_Request_Headers>
> section. On a separate thread, I was working with Riyaz who authored this
> <https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b>
> blog and you wouldn?t believe how many old browser versions are still
> vulnerable to this FLASH based redirect CSRF vulnerability. He also gave
> link to a HTML wrapper which seems to make this attack work on newer Chrome
> versions as well. If you are interested, I can provide more details about
> these. Hence, I don?t want users to be vulnerable by using this as a
> primary defense.
>
> *1.2 *Not a Simple HTTP Request Verification: Again, this is a technique
> that I rejected in the later section
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Content-Type_Header_Validation>
> of the document along with the reasoning.
>
>
>
> I just made some changes, feel free to review.
>
>
>
> I also think this comment: "If a developer forgets to add the token to
> any state changing operation, they are making the application vulnerable to
> CSRF." is flat out wrong.  If a dev forgets to add a token, then the
> server is simply going to reject the request. It's not going to be
> vulnerable.  If you agree, can you fix this?
>
>
>
> The article is also REALLY LONG. If you can identify anything to trim out,
> that would be great. I just trimmed out a few things, but I think we can do
> a lot more. Cheat sheets are supposed to be SHORT, but I realize many are
> not.
>
>
>
> For example, maybe we can move the reference example to a completely
> different page? That would shorten this alot.
>
>
>
> -Dave
>
>
>
>
>
> On Wed, Feb 6, 2019 at 5:25 PM manideep konakandla <
> mani.konakandla at gmail.com> wrote:
>
> Yes. All those changes passed through review on email list but yes, please
> feel free to provide any more comments.
>
>
>
> On Wed, Feb 6, 2019, 1:21 PM Dave Wichers <dave.wichers at owasp.org wrote:
>
> Are you:  Manideepk <https://www.owasp.org/index.php/User:Manideepk> on
> the OWASP site?
>
>
>
> I have some questions/comments about your changes to the OWASP CSRF Cheat
> Sheet.
>
>
>
> The bulk of those changes are here:
> https://www.owasp.org/index.php?title=Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet&type=revision&diff=244184&oldid=242455
>
>
>
> If this is you, I'll provide more details, but wanted to make sure I'm in
> touch with the right person first.
>
>
>
> -Dave
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Sunday, December 23, 2018 4:13 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Thanksyou very much for your support ???
>
>
>
> Le sam. 22 d?c. 2018 ? 22:24, Konakandla, Manideep <mkonakan at amazon.com>
> a ?crit :
>
> Let me know once the migration is started. I will do it for the CSRF
> prevention cheatsheet page J
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Saturday, December 22, 2018 12:29 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hello Manideep,
>
>
>
> Thanks you for the update.
>
>
>
> For info we will migrate the entire project content (unless the homepage)
> to github so it is possible that you need to also made the update on the
> github repository.
>
>
>
> The migration work will start on January, i will take some rest until
> January, i really need it.
>
>
>
> Thanks you very much for your help on this project :)
>
>
>
> Happy holidays too
>
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Sat, Dec 22, 2018 at 3:40 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Hello all,
>
>
>
> I made a change to ?Double Submit Cookie? technique [1]. I added a variant
> to it which now mitigates well-known security issues with standard ?Double
> Submit Cookie? technique. So, people can use this technique without any
> issues. Please let me know if anyone finds any issues within it.
>
>
>
> Whenever I get some free time in next 1-2 months, I am planning to include
>
> a)       Details about popular 6-7 web frameworks and the CSRF
> mitigations implemented by them
>
> b)      Re-organize the page even more better by switching variant of
> double submit cookie to primary defense (under stateless section) etc.
>
>
>
> Happy holidays everyone J
>
>
>
> [1]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Double_Submit_Cookie
> (read the last para under this mitigation)
>
>
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Saturday, October 13, 2018 12:59 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Jim Manico <jim at manicode.com>; Pankaj Upadhyay <
> p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hi,
>
> CS publishing released and notification sent to the community via Twitter
> and Slack channel.
>
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com
>
> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>
> https://righettod.eu
> GPG: 323D19BA
>
>
>
>
>
> On Fri, Oct 12, 2018 at 3:47 AM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Yes, I am feeling way better now. Thank you J
>
>
>
> *@ALL: *Cheat sheet is updated with all the changes now
> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>.
> Please let me know if you have any issues by end of tomorrow. If there are
> no issues - I/we can start advertising the refactored cheat sheet in our
> networks J
>
>
>
> Thanks a ton *Dominique* and *Jim* for all your help till date. I really
> appreciate it!!! I will be actively maintaining this as well from today J
>
>
>
> Regards,
>
> Manideep Konakandla
>
> www.manideepk.com
>
> Security Engineer @ Amazon
>
> mkonakan at amazon.com
>
>
>
> *From:* Jim Manico <jim at manicode.com>
> *Sent:* Wednesday, October 10, 2018 10:39 PM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Pankaj Upadhyay <
> p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Go for it!!! I hope you?re feeling better!
>
> --
>
> Jim Manico
>
> @Manicode
>
>
>
>
> On Oct 10, 2018, at 10:18 PM, Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
> Sorry for late reply. I was on sick leave for last 2 days.
>
>
>
> I synced up with Dominique in a different email chain to clarify something
> in his previous email. He gave me a go ahead to update wiki with new
> re-factored cheat sheet. I am planning to do it sometime tomorrow. *@Jim*
> : Is it with fine with you as well? Please let me know if you have any
> concerns.
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Monday, October 8, 2018 1:47 AM
> *To:* Konakandla, Manideep <mkonakan at amazon.com>
> *Cc:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>; Jim Manico <
> jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Hello all,
>
>
>
> In order to move forward and deliver something in the project please
> update the wiki with content from the refactoring from Konakandla Manideep.
> If there missing points they will be added in another round it is the role
> of the wiki based usage.
>
>
>
> Thanks in advance for your understanding ?
>
>
>
> Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com> a
> ?crit :
>
> Hey Folks J
>
>
>
> Good conversation :) Can you guys review the new cheat sheet once? I am
> sure most of the discussion going on here is already answered in the new
> re-factored cheat sheet I wrote.
>
>
>
> @Pankaj ? Go through the respective sections in the new cheat sheet. If
> they are not clear / you are not convinced, we can discuss more. Below is
> the summary of my response to your questions (you will find the same gist
> going through the cheat sheet as well).
>
>
>
> Go through [2] to understand more detailed on how flash based bypass on
> CSRF custom mitigation defense works. You can see there that the origin
> headers are passed along with the custom headers and hence current wiki
> asks to do origin and/or referrer header check as defense-in-depth (it
> would help even if flash sometime in the future repeats same mistake and
> forwards custom headers without crossdomain.xml checks. Domain requesting
> the redirected request might be fooled with custom header bypass but not
> the origin header check). If both these checks are done, it is indeed a
> good defense but origin header is not always included etc. (just as Jim
> mentioned and also as new cheatsheet mentions).  I don?t think deprecating
> custom header check is a good idea. It is indeed a good solution for
> stateless services though they have to keep issues like I mentioned before
> in mind. Your statement of custom header itself doesn?t mitigate CSRF
> relies on the fact that ?Flash being vulnerable to same bug again in
> future?. We cannot rely on a future statement and deprecate a technique,
> instead providing defense in depth measure for it and also cautioning users
> about past issues might be good idea. Users can take their call. Please
> read custom headers and origin check sections I re-wrote for more
> in-details. It talks about the issues and people can select if they want to
> use it or not.
>
>
>
> Also, Login CSRF has nothing to do with custom header mitigation. Login
> forms are usually handled on <form> tags and custom header mitigation is
> only applicable on ajax calls because you cannot set custom headers on form
> tags. It can be applicable if you are doing logins on Ajax/XHR requests in
> which case my above response from custom header mitigation applies. I also
> proposed few methods for mitigating login CSRF which aligns with our
> primary defense on the new cheatsheet (tokens). Please review it as well.
>
>
>
> Also, CORS has nothing to do with CSRF. I infact added CORS as a technique
> that should not be used/even thought for CSRF in the new cheatsheet I
> wrote. Please check that and also read [1]
>
>
>
> [1]
> https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
>
> [2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/
>
>
>
> BTW - Here is the link to the new cheat sheet -
> https://tinyurl.com/y7k9fded
>
>
>
> Again,  I you are not convinced ? please let me know specific item and we
> can happily discuss further J Alternatively, you can send us your edits
> here for review and if it looks good for everyone ? you can edit it in the
> wiki.
>
>
>
> *From:* Dominique Righetto <dominique.righetto at owasp.org>
> *Sent:* Sunday, October 7, 2018 1:13 PM
> *To:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
> *Cc:* Jim Manico <jim at manicode.com>; Konakandla, Manideep <
> mkonakan at amazon.com>; owasp-cheat-sheets at lists.owasp.org
> *Subject:* Re: [OWASP-cheat-sheets]
> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>
>
>
> Sync your update with one from Konakandla Manideep please ?
>
>
>
> Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com> a
> ?crit :
>
> Aloha Jim!
>
> With XSS, even CSRF tokens can be stolen :).
>
> But I'll keep your tip in mind when editing the wiki. I'm planning to do
> that sometime this month.
>
> Please feel free to review it whenever you guys get a chance.
>
>
>
> Best,
>
> Pankaj
>
>
>
>
>
> On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com> wrote:
>
> I agree JWT's architectures *where cookies are not involved* are
> resistant to CSRF but those tokens are at the risk of being stolen over XSS!
>
> The Origin header does not go with all requests and FireFox does not fully
> support it yet. So careful!
>
> :)
>
>
>
> On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
>
> I agree and that's why I would like to propose deprecation of 'custom
> header approach' as a CSRF defense.
> Presently the mechanism that seems to work across applications is
> validating custom header as well as a forbidden header name (that cannot be
> set by a software or a program) e.g. Origin. If we want to give it a new
> name like 'Double Header Validation' or something else, I'm fine with that
> but custom header alone doesn't seem sufficient to mitigate CSRF issue.
>
>
>
> There are some other best practices that should also be considered. I
> think CORS is now mature enough to have a mention in the CSRF defense Also,
> applications utilizing JWT token in the header seem immune to CSRF.
>
>
>
> Please let me know what you guys think and if allowed, I can go ahead and
> make some of these edits for your perusal.
>
>
>
>
>
> On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <
> dominique.righetto at owasp.org> wrote:
>
> --
>
> Jim Manico
>
> Manicode Security
>
> https://www.manicode.com
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190208/d606bc23/attachment-0001.html>

From dominique.righetto at owasp.org  Sat Feb  9 05:12:30 2019
From: dominique.righetto at owasp.org (Dominique Righetto)
Date: Sat, 9 Feb 2019 06:12:30 +0100
Subject: [OWASP-cheat-sheets]
	https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
In-Reply-To: <CAJq9yoQEaD6gbgSykP=Xa+aNm0SycVq6SbX_VF_cUTX7zsBwaA@mail.gmail.com>
References: <1c203f1292c240e6bb11d55da09a0793@EX13D11UWB004.ant.amazon.com>
	<37df98b064aa4b39af8d0e585638b3c4@EX13D11UWB004.ant.amazon.com>
	<CANos97cXnfb_foCaPaYXQEGRnphTQu8P_KC7pXwkeb7_ak0m-A@mail.gmail.com>
	<2bf303591c134e949d52c3d8d5a155d0@EX13D11UWB004.ant.amazon.com>
	<CANos97c6xDAycEr=YY_LaDWaffohmq17Cy1o9iSDPSYBaUa4_A@mail.gmail.com>
	<92ffc47ab9d14f4f9723d1feca90e1ab@EX13D11UWB004.ant.amazon.com>
	<CANos97dTh0Tia6MftWq-_kWFzejWx7o0Uh=NyC8W_=jVpCUdOQ@mail.gmail.com>
	<e832f8afafc945e3b65cd5f17fe15c6b@EX13D11UWB004.ant.amazon.com>
	<CANos97ew=HjNnO+TSgUL55x8WPyzpuKhjERwmvHqEyx5XYMvTg@mail.gmail.com>
	<CAMjpMgcykhmtoA32F+BDZ=8nRkT8z-oM_HX=6Z2kdmKdHvAjUQ@mail.gmail.com>
	<CANos97dHxj6B0H+br7-NKxJkAhZT-Bm525i0DqHwoeAR=Hjnkg@mail.gmail.com>
	<6714ef10-aee3-6720-023d-a4dbc9399b3c@owasp.org>
	<CAJq9yoRQ0G8x_AmdPVq_AWJvVJG+VdFDY2BnAja2YCD=yxHEyw@mail.gmail.com>
	<CANos97c1+LH=Fi3d-FfdOoCT3EaBkwd9avuzXCik208VGY6G9Q@mail.gmail.com>
	<f056014958204a36b0dc6307a217b51d@EX13D11UWB004.ant.amazon.com>
	<c358f250-eb5d-95d4-e95a-a747aa41400f@manicode.com>
	<dfeac335745a4c50b03e883d3e7bbd3a@EX13D11UWB004.ant.amazon.com>
	<CAJq9yoQEaD6gbgSykP=Xa+aNm0SycVq6SbX_VF_cUTX7zsBwaA@mail.gmail.com>
Message-ID: <CANos97e-m845TVfR9NROBN+bevpQ1=4rMj7fjhP5fogxG0T3aQ@mail.gmail.com>

Dear all,

Take 2 seconds to read the README of the repo, all info is provided and
edition plus contribution is highly confortable. I have ton of good
feedback and you are the only to think that we will be a blocking point due
to GH.

Before to say that Jim and me will be a bottleneck let's see if it is the
case and then we will take action.

>From now let us finish the migration and if you want to contribute use PR.

No need to loose precious spare time to discuss endly on a problem for
which there no existing fact yet.

Thank you very much in advance for your understanding

I know that i am direct and highly pragmatic but i respect everyone and
work to make the project a new born.

My work is transparent and i respect contributor but for the moment it is
the time to work and not to discuss. As said let discuss when problem arise.

Me and Jim are PL  so we stay as only  admin and direct commiter. PR are
documented and  open.

If you have a big problem with my approach then raise a point to Mr.
Tesauro but for the moment i think i follow the OWASP spirit.




Le sam. 9 f?vr. 2019 ? 01:00, Matt Tesauro <matt.tesauro at owasp.org> a
?crit :

> Having used Github (GH) for multiple projects (my own and others), I'd
> suggest a workflow that has worked for teams ranging from 3 to thousands
> like the Docker code base -
>
>
>    1. Each cheat-sheet author (subject matter does not matter) simply
>    forks the Cheat Sheet repo into their own GH account.
>    2. They make the changes they want there (either in the native GH web
>    application or doing the traditional 'git clone ...' and using the editor
>    of their choice)
>    3. They create a pull-request (PR) and send it to the OWASP Cheat
>    Sheet repo.
>    4. The author and PL (project leader, right?) can discuss the changes
>    as needed and merge the PR assuming no major issues arise.
>    5. The Cheat Sheet in questions is updated.
>
> It's also customary to have a "CONTRIBUTING,md" file in the repository to
> explain how people should contribute - they can be short like the one for Defect
> Dojo
> <https://github.com/DefectDojo/django-DefectDojo/blob/master/CONTRIBUTING.md>
> or longer like the one for Moby
> <https://github.com/moby/moby/blob/master/CONTRIBUTING.md> (Docker's open
> source code base)
>
> You can also do interesting things with GH PRs like templates - Defect
> Dojo does this for PRs
> <https://github.com/DefectDojo/django-DefectDojo/blob/master/PULL_REQUEST_TEMPLATE.md>
> and Issues
> <https://github.com/DefectDojo/django-DefectDojo/blob/master/ISSUE_TEMPLATE.md>
> to make sure the submitter gets guidance on how to be successful with their
> PR or issue.  I don't see these in the Cheat Sheet repo and would highly
> suggest adding them.
>
> From a workflow perspective, this isn't much different (probably better)
> than the wiki.  It's the same in that:
>
>    - Anybody can suggest or make a change
>    - Changes are tracked to specific versions
>    - Changes can be reverted/reversed if needed
>    - Changes can be made in a web app only if that's your preference
>
> It's better in that
>
>    - It's easier to get a Github account than a wiki account - lots of
>    people already have a GH account
>    - An issue tracker exists with GH and not with the wiki
>    - Git is where developers and most open software lives these days, on
>    the public Internet it is Github followed by GitLab in terms of popularity
>    - As AppSec people, we should know git and, if you don't, learning git
>    will only help your career
>    - There's loads and loads of tutorials, videos, etc on doing things
>    with Git & GitHub - much more then MediaWiki
>    - Markdown has a significantly larger user base then MediaWiki markup
>
> Matt's 2 cents :-)
>
> --
> -- Matt Tesauro
> *OWASP Foundation*
> Director of Community and Operations
> matt.tesauro at owasp.org
>
> Consider giving back, and supporting the open source community by becoming
> a member <https://www.owasp.org/index.php/Membership> or making a donation
> <https://www.owasp.org/index.php/Donate> today!
>
>
> On Fri, Feb 8, 2019 at 3:42 PM Konakandla, Manideep <mkonakan at amazon.com>
> wrote:
>
>> I haven?t used public facing Github much in last year and I am not sure
>> about that. You guys might want to see it if it?s possible with the type of
>> account you may have and if not, may you might wanna think about
>> considering alternatives (I think making people editors for full package
>> and providing them instructions to just make sure that they touch only
>> their cheat sheet is not a bad idea too).
>>
>>
>>
>> *From:* Jim Manico <jim at manicode.com>
>> *Sent:* Friday, February 8, 2019 1:30 PM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com>; Dominique Righetto <
>> dominique.righetto at owasp.org>; Matt Tesauro <matt.tesauro at owasp.org>
>> *Cc:* owasp-cheat-sheets at lists.owasp.org; Dave Wichers <
>> dave.wichers at owasp.org>
>> *Subject:* Re: [OWASP-cheat-sheets]
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Will GitHub let us make you editor of the one cheatsheet you authored? If
>> so I think that is ok.
>>
>> Aloha, Jim
>>
>> On 2/8/19 11:27 AM, Konakandla, Manideep wrote:
>>
>> I personally feel that Github is a nice move as well ?but? I think
>> atleast 1 or 2 people should be given control over each cheat sheet along
>> with the PLs. I agree PLs are great, knowledgable but I contributed a lot
>> to CSRF cheat sheet recently and also have BUNCH of other things that I
>> planned to add. I obviously would know more about this stuff than PLs
>> (really, no offense, I am just saying that I know more about the stuff that
>> I added). PLs can make sure the overall quality of the cheat sheets is
>> being maintained and individual cheat sheet owners can make sure that their
>> particular cheat sheet is in quality. I just feel that we are trying to
>> convert a wide open Wikipedia (OWASP wikis) into closed controlled market.
>> It?s fine doing it but atleast let the control be kept in few more deserved
>> hands as well. What do you guys think about this? I would love to hear your
>> side of the story.
>>
>>
>>
>> Hi Dave, Regarding
>>
>> a)     Feel free to go ahead and submit a PR for reflecting the clarity.
>> I am fine with it, it?s not any technical change.
>>
>> b)    I provided the resources you requested in a separate email. Unless
>> there is some technical reasoning that those techniques are not having any
>> vulnerability out in market today, I am not comfortable moving them to
>> primary defense.
>>
>>
>>
>> *P.S:* I tried putting up my views/opinions/answers as a friendly
>> constructive conversation and would appreciate the same in return J
>>
>>
>>
>> *From:* owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org
>> <owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org>
>> <owasp-cheat-sheets-bounces+mkonakan=amazon.com at lists.owasp.org> *On
>> Behalf Of *Dominique Righetto
>> *Sent:* Friday, February 8, 2019 11:27 AM
>> *To:* Matt Tesauro <matt.tesauro at owasp.org> <matt.tesauro at owasp.org>
>> *Cc:* owasp-cheat-sheets at lists.owasp.org
>> *Subject:* Re: [OWASP-cheat-sheets]
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Thanks you very much Matt for your supports and your feedback.
>>
>>
>>
>> Le ven. 8 f?vr. 2019 ? 19:18, Matt Tesauro <matt.tesauro at owasp.org> a
>> ?crit :
>>
>> For what it's worth, I'd strongly support this move.  Putting the cheat
>> sheets in Github in something like Markdown makes great sense both in terms
>> of ease to transform that content to other formats with something like
>> pandoc or Jekyll plus the ability to use Git, GH issues, PRs,  GH projects
>> ("kanban-like board) to discuss and track changes to that content.
>> Additionally, you could use GH Pages to provide nicely rendered version of
>> the cheat sheets as well.
>>
>>
>>
>> I believe it would help increase contribution to this great project.
>>
>>
>>
>> Cheers!
>>
>>
>> --
>> -- Matt Tesauro
>>
>> *OWASP Foundation*
>>
>> Director of Community and Operations
>>
>> matt.tesauro at owasp.org
>>
>> Consider giving back, and supporting the open source community by
>> becoming a member <https://www.owasp.org/index.php/Membership> or making
>> a donation <https://www.owasp.org/index.php/Donate> today!
>>
>>
>>
>>
>>
>> On Fri, Feb 8, 2019 at 11:48 AM Jim Manico <jim.manico at owasp.org> wrote:
>>
>> We already as leaders made the call to move to the official OWASP GitHub.
>> The Wiki is highly limited. We're close to deleting those pages and just
>> reference Github. That way we have a comment system and a mature process
>> for tracking requests.
>>
>> It's already a done deal at this point, I'm sorry Dave.
>>
>> Aloha, Jim
>>
>> On 2/8/19 6:40 AM, Dominique Righetto wrote:
>>
>> Section "Migration Pending" from
>> https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series
>>
>>
>>
>> I understand that you don't follow our communication channel but we use
>> it to communicate and it's the communication process choosen by the project
>> and we have many good feedback about it. Slack members of the CS channel
>> increase at a high speed.
>>
>>
>>
>> I respect your point of view but, as PL, the wiki mode allow uncontrolled
>> process of edition/creation and Jim/Me are responsible/accountable for the
>> quality/integrity of the CS/projects. Moreover the wiki do not allow
>> integration into CI for create others format or automate control. GH allow
>> also a fully open discution about any operation on CS.
>>
>>
>>
>> I respect also the fact that you do not like the gihub way but it's the
>> new way followed by new owasp projects (masvs, mstg, asvs, proactive
>> control and the top 10) and it faciliate the contribution even if you dont
>> like it. It's more easy to create a GH account than an OWASP one.
>>
>>
>>
>> If you dont like this way at the point that it block your to contribute
>> then i understand and respect your position but as PL Jim/Me has decided
>> this way so we will continue the road wihtout you even if we thanks you
>> very very much for your contribution.
>>
>>
>> --
>> Cordialement, Best regards,
>> Dominique Righetto
>> dominique.righetto at gmail.com
>>
>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>
>> https://righettod.eu
>> GPG: 323D19BA
>>
>>
>>
>>
>>
>> On Fri, Feb 8, 2019 at 5:27 PM Dave Wichers <dave.wichers at owasp.org>
>> wrote:
>>
>> Clearly indicated on the home page where?  And I don't follow OWASP on
>> Slack or Twitter so I was completely unaware of this.  You say follow 'the
>> process' but I can't find it anywhere.
>>
>>
>>
>> If you really don't want the cheat sheets to be edited, lock them, and
>> put notes ON the cheat sheets themselves about what the process is/where to
>> find them.
>>
>>
>>
>> I'm also concerned that this process will make it MUCH harder to
>> contribute, reducing people's willingness to do so (like me).
>>
>>
>>
>> -Dave
>>
>>
>>
>>
>>
>> On Thu, Feb 7, 2019 at 11:54 PM Dominique Righetto <
>> dominique.righetto at owasp.org> wrote:
>>
>> Hello all
>>
>>
>>
>> Since december wiki update of cs are deprecated. It is clearly indicated
>> on the homepage and slack and Twitter and GitHub since 3 month.
>>
>>
>>
>> If you modify the wiki your update will simply be ignored and lost.
>>
>>
>>
>> Please follow the process.
>>
>>
>>
>> All modification and creation of cs is now controlled by Jim and me as PL
>> along Continuous Integration process.
>>
>>
>>
>> Le ven. 8 f?vr. 2019 ? 00:43, Konakandla, Manideep <mkonakan at amazon.com>
>> a ?crit :
>>
>> Hi Dave - Let?s continue our discussion here so that we have everything
>> tracked in the cheat sheet email list (copying our 1:1 conversation below).
>>
>>
>>
>> I really appreciate your support in the changes. I have few comments below
>>
>>
>>
>> a)       Dominique and Jim decided to move cheat sheets to Github. So,
>> all new changes should be on Github CSRF
>> <https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md>
>> page. I think they are also working on deprecating the old wiki pages on
>> OWASP. I am fine with all your changes (as most of them are
>> cosmetic/grammatical/structural) except [1]. If you don?t mind, can you do
>> these changes on the Github? I am fine with you moving the reference
>> example to a different page as well. I have plans to add some other content
>> (not anytime in next month) during which I will also try to trim the
>> content as much as possible.
>>
>> b)      ?If a developer forgets to add the token to any state changing
>> operation, they are making the application vulnerable to CSRF." is flat out
>> wrong.  If a dev forgets to add a token, then the server is simply going to
>> reject the request. It's not going to be vulnerable.  If you agree, can you
>> fix this?
>>
>> >> You are ?assuming? here that the server has a token verification
>> system which is not true by default. By default, all applications are
>> vulnerable to CSRF unless developers add tokens / the system has a token
>> verification system.
>>
>> c)       I am removing the changes related to [1] for now as they are
>> clearly contradicting what we have in other parts of the cheat sheet. If
>> you disagree, I am open to discussion before we get them back to the
>> cheatsheet again. I might be missing something and I would love to hear
>> your side of the story.
>>
>>
>>
>> *1.* Earlier, I rejected both the techniques you mentioned in
>> ?Stateless/Tokenless Defense Techniques? to be in primary because
>>
>> *1.1* X-Requested-With: XMLHttpRequest Header: For the same FLASH
>> related reasons mentioned under this
>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Use_of_Custom_Request_Headers>
>> section. On a separate thread, I was working with Riyaz who authored this
>> <https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b>
>> blog and you wouldn?t believe how many old browser versions are still
>> vulnerable to this FLASH based redirect CSRF vulnerability. He also gave
>> link to a HTML wrapper which seems to make this attack work on newer Chrome
>> versions as well. If you are interested, I can provide more details about
>> these. Hence, I don?t want users to be vulnerable by using this as a
>> primary defense.
>>
>> *1.2 *Not a Simple HTTP Request Verification: Again, this is a technique
>> that I rejected in the later section
>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Content-Type_Header_Validation>
>> of the document along with the reasoning.
>>
>>
>>
>> I just made some changes, feel free to review.
>>
>>
>>
>> I also think this comment: "If a developer forgets to add the token to
>> any state changing operation, they are making the application vulnerable to
>> CSRF." is flat out wrong.  If a dev forgets to add a token, then the
>> server is simply going to reject the request. It's not going to be
>> vulnerable.  If you agree, can you fix this?
>>
>>
>>
>> The article is also REALLY LONG. If you can identify anything to trim
>> out, that would be great. I just trimmed out a few things, but I think we
>> can do a lot more. Cheat sheets are supposed to be SHORT, but I realize
>> many are not.
>>
>>
>>
>> For example, maybe we can move the reference example to a completely
>> different page? That would shorten this alot.
>>
>>
>>
>> -Dave
>>
>>
>>
>>
>>
>> On Wed, Feb 6, 2019 at 5:25 PM manideep konakandla <
>> mani.konakandla at gmail.com> wrote:
>>
>> Yes. All those changes passed through review on email list but yes,
>> please feel free to provide any more comments.
>>
>>
>>
>> On Wed, Feb 6, 2019, 1:21 PM Dave Wichers <dave.wichers at owasp.org wrote:
>>
>> Are you:  Manideepk <https://www.owasp.org/index.php/User:Manideepk> on
>> the OWASP site?
>>
>>
>>
>> I have some questions/comments about your changes to the OWASP CSRF Cheat
>> Sheet.
>>
>>
>>
>> The bulk of those changes are here:
>> https://www.owasp.org/index.php?title=Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet&type=revision&diff=244184&oldid=242455
>>
>>
>>
>> If this is you, I'll provide more details, but wanted to make sure I'm in
>> touch with the right person first.
>>
>>
>>
>> -Dave
>>
>>
>>
>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>> *Sent:* Sunday, December 23, 2018 4:13 AM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>> *Cc:* Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
>> *Subject:* Re: [OWASP-cheat-sheets]
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Thanksyou very much for your support ???
>>
>>
>>
>> Le sam. 22 d?c. 2018 ? 22:24, Konakandla, Manideep <mkonakan at amazon.com>
>> a ?crit :
>>
>> Let me know once the migration is started. I will do it for the CSRF
>> prevention cheatsheet page J
>>
>>
>>
>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>> *Sent:* Saturday, December 22, 2018 12:29 AM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>> *Cc:* Jim Manico <jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
>> *Subject:* Re: [OWASP-cheat-sheets]
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Hello Manideep,
>>
>>
>>
>> Thanks you for the update.
>>
>>
>>
>> For info we will migrate the entire project content (unless the homepage)
>> to github so it is possible that you need to also made the update on the
>> github repository.
>>
>>
>>
>> The migration work will start on January, i will take some rest until
>> January, i really need it.
>>
>>
>>
>> Thanks you very much for your help on this project :)
>>
>>
>>
>> Happy holidays too
>>
>>
>> --
>> Cordialement, Best regards,
>> Dominique Righetto
>> dominique.righetto at gmail.com
>>
>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>
>> https://righettod.eu
>> GPG: 323D19BA
>>
>>
>>
>>
>>
>> On Sat, Dec 22, 2018 at 3:40 AM Konakandla, Manideep <mkonakan at amazon.com>
>> wrote:
>>
>> Hello all,
>>
>>
>>
>> I made a change to ?Double Submit Cookie? technique [1]. I added a
>> variant to it which now mitigates well-known security issues with standard
>> ?Double Submit Cookie? technique. So, people can use this technique without
>> any issues. Please let me know if anyone finds any issues within it.
>>
>>
>>
>> Whenever I get some free time in next 1-2 months, I am planning to include
>>
>> a)       Details about popular 6-7 web frameworks and the CSRF
>> mitigations implemented by them
>>
>> b)      Re-organize the page even more better by switching variant of
>> double submit cookie to primary defense (under stateless section) etc.
>>
>>
>>
>> Happy holidays everyone J
>>
>>
>>
>> [1]
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Double_Submit_Cookie
>> (read the last para under this mitigation)
>>
>>
>>
>>
>>
>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>> *Sent:* Saturday, October 13, 2018 12:59 AM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>> *Cc:* Jim Manico <jim at manicode.com>; Pankaj Upadhyay <
>> p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
>> *Subject:* Re: [OWASP-cheat-sheets]
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Hi,
>>
>> CS publishing released and notification sent to the community via Twitter
>> and Slack channel.
>>
>> --
>> Cordialement, Best regards,
>> Dominique Righetto
>> dominique.righetto at gmail.com
>>
>> dominique.righetto at owasp.org <dominique.righetto at gmail.com>
>>
>> https://righettod.eu
>> GPG: 323D19BA
>>
>>
>>
>>
>>
>> On Fri, Oct 12, 2018 at 3:47 AM Konakandla, Manideep <mkonakan at amazon.com>
>> wrote:
>>
>> Yes, I am feeling way better now. Thank you J
>>
>>
>>
>> *@ALL: *Cheat sheet is updated with all the changes now
>> <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet>.
>> Please let me know if you have any issues by end of tomorrow. If there are
>> no issues - I/we can start advertising the refactored cheat sheet in our
>> networks J
>>
>>
>>
>> Thanks a ton *Dominique* and *Jim* for all your help till date. I really
>> appreciate it!!! I will be actively maintaining this as well from today J
>>
>>
>>
>> Regards,
>>
>> Manideep Konakandla
>>
>> www.manideepk.com
>>
>> Security Engineer @ Amazon
>>
>> mkonakan at amazon.com
>>
>>
>>
>> *From:* Jim Manico <jim at manicode.com>
>> *Sent:* Wednesday, October 10, 2018 10:39 PM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>> *Cc:* Dominique Righetto <dominique.righetto at owasp.org>; Pankaj Upadhyay
>> <p.upadhyay9999 at gmail.com>; owasp-cheat-sheets at lists.owasp.org
>> *Subject:* Re: [OWASP-cheat-sheets]
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Go for it!!! I hope you?re feeling better!
>>
>> --
>>
>> Jim Manico
>>
>> @Manicode
>>
>>
>>
>>
>> On Oct 10, 2018, at 10:18 PM, Konakandla, Manideep <mkonakan at amazon.com>
>> wrote:
>>
>> Sorry for late reply. I was on sick leave for last 2 days.
>>
>>
>>
>> I synced up with Dominique in a different email chain to clarify
>> something in his previous email. He gave me a go ahead to update wiki with
>> new re-factored cheat sheet. I am planning to do it sometime tomorrow.
>> *@Jim* : Is it with fine with you as well? Please let me know if you
>> have any concerns.
>>
>>
>>
>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>> *Sent:* Monday, October 8, 2018 1:47 AM
>> *To:* Konakandla, Manideep <mkonakan at amazon.com>
>> *Cc:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>; Jim Manico <
>> jim at manicode.com>; owasp-cheat-sheets at lists.owasp.org
>> *Subject:* Re: [OWASP-cheat-sheets]
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Hello all,
>>
>>
>>
>> In order to move forward and deliver something in the project please
>> update the wiki with content from the refactoring from Konakandla Manideep.
>> If there missing points they will be added in another round it is the role
>> of the wiki based usage.
>>
>>
>>
>> Thanks in advance for your understanding ?
>>
>>
>>
>> Le lun. 8 oct. 2018 ? 10:11, Konakandla, Manideep <mkonakan at amazon.com>
>> a ?crit :
>>
>> Hey Folks J
>>
>>
>>
>> Good conversation :) Can you guys review the new cheat sheet once? I am
>> sure most of the discussion going on here is already answered in the new
>> re-factored cheat sheet I wrote.
>>
>>
>>
>> @Pankaj ? Go through the respective sections in the new cheat sheet. If
>> they are not clear / you are not convinced, we can discuss more. Below is
>> the summary of my response to your questions (you will find the same gist
>> going through the cheat sheet as well).
>>
>>
>>
>> Go through [2] to understand more detailed on how flash based bypass on
>> CSRF custom mitigation defense works. You can see there that the origin
>> headers are passed along with the custom headers and hence current wiki
>> asks to do origin and/or referrer header check as defense-in-depth (it
>> would help even if flash sometime in the future repeats same mistake and
>> forwards custom headers without crossdomain.xml checks. Domain requesting
>> the redirected request might be fooled with custom header bypass but not
>> the origin header check). If both these checks are done, it is indeed a
>> good defense but origin header is not always included etc. (just as Jim
>> mentioned and also as new cheatsheet mentions).  I don?t think deprecating
>> custom header check is a good idea. It is indeed a good solution for
>> stateless services though they have to keep issues like I mentioned before
>> in mind. Your statement of custom header itself doesn?t mitigate CSRF
>> relies on the fact that ?Flash being vulnerable to same bug again in
>> future?. We cannot rely on a future statement and deprecate a technique,
>> instead providing defense in depth measure for it and also cautioning users
>> about past issues might be good idea. Users can take their call. Please
>> read custom headers and origin check sections I re-wrote for more
>> in-details. It talks about the issues and people can select if they want to
>> use it or not.
>>
>>
>>
>> Also, Login CSRF has nothing to do with custom header mitigation. Login
>> forms are usually handled on <form> tags and custom header mitigation is
>> only applicable on ajax calls because you cannot set custom headers on form
>> tags. It can be applicable if you are doing logins on Ajax/XHR requests in
>> which case my above response from custom header mitigation applies. I also
>> proposed few methods for mitigating login CSRF which aligns with our
>> primary defense on the new cheatsheet (tokens). Please review it as well.
>>
>>
>>
>> Also, CORS has nothing to do with CSRF. I infact added CORS as a
>> technique that should not be used/even thought for CSRF in the new
>> cheatsheet I wrote. Please check that and also read [1]
>>
>>
>>
>> [1]
>> https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/september/common-csrf-prevention-misconceptions/
>>
>> [2] https://www.whitehatsec.com/blog/flash-307-redirect-game-over/
>>
>>
>>
>> BTW - Here is the link to the new cheat sheet -
>> https://tinyurl.com/y7k9fded
>>
>>
>>
>> Again,  I you are not convinced ? please let me know specific item and we
>> can happily discuss further J Alternatively, you can send us your edits
>> here for review and if it looks good for everyone ? you can edit it in the
>> wiki.
>>
>>
>>
>> *From:* Dominique Righetto <dominique.righetto at owasp.org>
>> *Sent:* Sunday, October 7, 2018 1:13 PM
>> *To:* Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>> *Cc:* Jim Manico <jim at manicode.com>; Konakandla, Manideep <
>> mkonakan at amazon.com>; owasp-cheat-sheets at lists.owasp.org
>> *Subject:* Re: [OWASP-cheat-sheets]
>> https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet
>>
>>
>>
>> Sync your update with one from Konakandla Manideep please ?
>>
>>
>>
>> Le dim. 7 oct. 2018 ? 21:54, Pankaj Upadhyay <p.upadhyay9999 at gmail.com>
>> a ?crit :
>>
>> Aloha Jim!
>>
>> With XSS, even CSRF tokens can be stolen :).
>>
>> But I'll keep your tip in mind when editing the wiki. I'm planning to do
>> that sometime this month.
>>
>> Please feel free to review it whenever you guys get a chance.
>>
>>
>>
>> Best,
>>
>> Pankaj
>>
>>
>>
>>
>>
>> On Sun, Oct 7, 2018 at 2:59 PM Jim Manico <jim at manicode.com> wrote:
>>
>> I agree JWT's architectures *where cookies are not involved* are
>> resistant to CSRF but those tokens are at the risk of being stolen over XSS!
>>
>> The Origin header does not go with all requests and FireFox does not
>> fully support it yet. So careful!
>>
>> :)
>>
>>
>>
>> On 10/7/18 9:48 AM, Pankaj Upadhyay wrote:
>>
>> I agree and that's why I would like to propose deprecation of 'custom
>> header approach' as a CSRF defense.
>> Presently the mechanism that seems to work across applications is
>> validating custom header as well as a forbidden header name (that cannot be
>> set by a software or a program) e.g. Origin. If we want to give it a new
>> name like 'Double Header Validation' or something else, I'm fine with that
>> but custom header alone doesn't seem sufficient to mitigate CSRF issue.
>>
>>
>>
>> There are some other best practices that should also be considered. I
>> think CORS is now mature enough to have a mention in the CSRF defense Also,
>> applications utilizing JWT token in the header seem immune to CSRF.
>>
>>
>>
>> Please let me know what you guys think and if allowed, I can go ahead and
>> make some of these edits for your perusal.
>>
>>
>>
>>
>>
>> On Sun, Oct 7, 2018 at 2:29 AM Dominique Righetto <
>> dominique.righetto at owasp.org> wrote:
>>
>> --
>>
>> Jim Manico
>>
>> Manicode Security
>>
>> https://www.manicode.com
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190209/12f326ef/attachment-0001.html>

From dominique.righetto at gmail.com  Sat Feb 23 08:09:42 2019
From: dominique.righetto at gmail.com (Dominique Righetto)
Date: Sat, 23 Feb 2019 09:09:42 +0100
Subject: [OWASP-cheat-sheets] V2 is out.
Message-ID: <CANos97emY4L-6fYVR9pVHnm4Hs+c6qQGJuv0Z3r6d8aODhrQ3Q@mail.gmail.com>

 Jim Manico and me are proud to announce that the V2.0 of the OWASP Cheat
Sheet Series project is in production.

Transparency, sharing, simplicity, quality and consistency are the keywords
at the heart of this version.

https://github.com/OWASP/CheatSheetSeries

--
Cordialement, Best regards,
Dominique Righetto
dominique.righetto at gmail.com
<dominique.righetto at gmail.com>dominique.righetto at owasp.org
<dominique.righetto at gmail.com>
https://righettod.eu
GPG: 323D19BA
<https://pgp.mit.edu/pks/lookup?op=get&search=0xC34A4565323D19BA>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190223/9cde15bc/attachment.html>

From taras.ivaschenko at owasp.org  Sun Feb 24 19:19:14 2019
From: taras.ivaschenko at owasp.org (Taras Ivaschenko)
Date: Sun, 24 Feb 2019 22:19:14 +0300
Subject: [OWASP-cheat-sheets] V2 is out.
In-Reply-To: <CANos97emY4L-6fYVR9pVHnm4Hs+c6qQGJuv0Z3r6d8aODhrQ3Q@mail.gmail.com>
References: <CANos97emY4L-6fYVR9pVHnm4Hs+c6qQGJuv0Z3r6d8aODhrQ3Q@mail.gmail.com>
Message-ID: <90c26eb2-0201-279c-860e-ad09a36b5382@owasp.org>

Congrats with this important release!

Do you plan to host HTML version on dedicated domain with GH pages? Or
the idea is to use render-feature for Markdown files of GH (like right now)?

23.02.2019 11:09, Dominique Righetto ?????:
> Jim Manico and me are proud to announce that the V2.0 of the OWASP Cheat
> Sheet Series project is in production.
> 
> Transparency, sharing, simplicity, quality and consistency are the
> keywords at the heart of this version.
> 
> https://github.com/OWASP/CheatSheetSeries
> 
> --
> Cordialement, Best regards,
> Dominique Righetto
> dominique.righetto at gmail.com <mailto:dominique.righetto at gmail.com>
> <mailto:dominique.righetto at gmail.com>dominique.righetto at owasp.org
> <mailto:dominique.righetto at gmail.com>
> https://righettod.eu
> GPG: 323D19BA
> <https://pgp.mit.edu/pks/lookup?op=get&search=0xC34A4565323D19BA>
> 
> _______________________________________________
> OWASP-cheat-sheets mailing list
> OWASP-cheat-sheets at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
> 

-- 
Taras Ivashchenko
https://www.owasp.org/index.php/Russia

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190224/0ce0703a/attachment.pgp>

From dominique.righetto at gmail.com  Sun Feb 24 19:25:59 2019
From: dominique.righetto at gmail.com (Dominique Righetto)
Date: Sun, 24 Feb 2019 20:25:59 +0100
Subject: [OWASP-cheat-sheets] V2 is out.
In-Reply-To: <90c26eb2-0201-279c-860e-ad09a36b5382@owasp.org>
References: <CANos97emY4L-6fYVR9pVHnm4Hs+c6qQGJuv0Z3r6d8aODhrQ3Q@mail.gmail.com>
	<90c26eb2-0201-279c-860e-ad09a36b5382@owasp.org>
Message-ID: <CANos97fO-2-3Y6fu1Rvu-tTEtBa=n99=PW_uyqA7ijK9XOoR8A@mail.gmail.com>

Thanks you very much for your kind words.

It is plan in order to propose an optimized view from the user of the
project.

Mr Tesauro, does owasp have a sub domain on which i can host the html
generated (night build) site or should i use cloud solution  ?

Thanks you very much in advance for your feedback.

Best regards.

Le dim. 24 f?vr. 2019 ? 20:19, Taras Ivaschenko <taras.ivaschenko at owasp.org>
a ?crit :

> Congrats with this important release!
>
> Do you plan to host HTML version on dedicated domain with GH pages? Or
> the idea is to use render-feature for Markdown files of GH (like right
> now)?
>
> 23.02.2019 11:09, Dominique Righetto ?????:
> > Jim Manico and me are proud to announce that the V2.0 of the OWASP Cheat
> > Sheet Series project is in production.
> >
> > Transparency, sharing, simplicity, quality and consistency are the
> > keywords at the heart of this version.
> >
> > https://github.com/OWASP/CheatSheetSeries
> >
> > --
> > Cordialement, Best regards,
> > Dominique Righetto
> > dominique.righetto at gmail.com <mailto:dominique.righetto at gmail.com>
> > <mailto:dominique.righetto at gmail.com>dominique.righetto at owasp.org
> > <mailto:dominique.righetto at gmail.com>
> > https://righettod.eu
> > GPG: 323D19BA
> > <https://pgp.mit.edu/pks/lookup?op=get&search=0xC34A4565323D19BA>
> >
> > _______________________________________________
> > OWASP-cheat-sheets mailing list
> > OWASP-cheat-sheets at lists.owasp.org
> > https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
> >
>
> --
> Taras Ivashchenko
> https://www.owasp.org/index.php/Russia
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190224/63c2ecc6/attachment.html>

From matt.tesauro at owaspfoundation.org  Mon Feb 25 18:15:44 2019
From: matt.tesauro at owaspfoundation.org (Matt Tesauro)
Date: Mon, 25 Feb 2019 12:15:44 -0600
Subject: [OWASP-cheat-sheets] V2 is out.
In-Reply-To: <CANos97fO-2-3Y6fu1Rvu-tTEtBa=n99=PW_uyqA7ijK9XOoR8A@mail.gmail.com>
References: <CANos97emY4L-6fYVR9pVHnm4Hs+c6qQGJuv0Z3r6d8aODhrQ3Q@mail.gmail.com>
	<90c26eb2-0201-279c-860e-ad09a36b5382@owasp.org>
	<CANos97fO-2-3Y6fu1Rvu-tTEtBa=n99=PW_uyqA7ijK9XOoR8A@mail.gmail.com>
Message-ID: <CAJq9yoQcNPua+RCdhTy4R4_mobYcCw6Er5ORaXcG8aVpzTE42A@mail.gmail.com>

For the time being, I'd use the default hostname that Github provides - so
you're repo would be available at https://owasp.github.io/[repo-name-here]/
where [repo-name-here] is the cheat sheet repo.

Doing so allows you to host https content with no 3rd party provider/cloud
solution needed.  There's  a couple of default themes available or you can
create your own. Get more info here
<https://help.github.com/en/articles/configuring-a-publishing-source-for-github-pages>
.

This is basically what we're doing to Global AppSec Tel Aviv with the
addition of a custom/OWASP owned domain name:
https://telaviv.appsecglobal.org/
 has it's content at
https://github.com/OWASP/AppSecTLV2019/tree/gh-pages

HTH

--
-- Matt Tesauro
*OWASP Foundation*
Director of Community and Operations
matt.tesauro at owaspfoundation.org

Consider giving back, and supporting the open source community by becoming
a member <https://www.owasp.org/index.php/Membership> or making a donation
<https://www.owasp.org/index.php/Donate> today!


On Sun, Feb 24, 2019 at 1:26 PM Dominique Righetto <
dominique.righetto at gmail.com> wrote:

> Thanks you very much for your kind words.
>
> It is plan in order to propose an optimized view from the user of the
> project.
>
> Mr Tesauro, does owasp have a sub domain on which i can host the html
> generated (night build) site or should i use cloud solution  ?
>
> Thanks you very much in advance for your feedback.
>
> Best regards.
>
> Le dim. 24 f?vr. 2019 ? 20:19, Taras Ivaschenko <
> taras.ivaschenko at owasp.org> a ?crit :
>
>> Congrats with this important release!
>>
>> Do you plan to host HTML version on dedicated domain with GH pages? Or
>> the idea is to use render-feature for Markdown files of GH (like right
>> now)?
>>
>> 23.02.2019 11:09, Dominique Righetto ?????:
>> > Jim Manico and me are proud to announce that the V2.0 of the OWASP Cheat
>> > Sheet Series project is in production.
>> >
>> > Transparency, sharing, simplicity, quality and consistency are the
>> > keywords at the heart of this version.
>> >
>> > https://github.com/OWASP/CheatSheetSeries
>> >
>> > --
>> > Cordialement, Best regards,
>> > Dominique Righetto
>> > dominique.righetto at gmail.com <mailto:dominique.righetto at gmail.com>
>> > <mailto:dominique.righetto at gmail.com>dominique.righetto at owasp.org
>> > <mailto:dominique.righetto at gmail.com>
>> > https://righettod.eu
>> > GPG: 323D19BA
>> > <https://pgp.mit.edu/pks/lookup?op=get&search=0xC34A4565323D19BA>
>> >
>> > _______________________________________________
>> > OWASP-cheat-sheets mailing list
>> > OWASP-cheat-sheets at lists.owasp.org
>> > https://lists.owasp.org/mailman/listinfo/owasp-cheat-sheets
>> >
>>
>> --
>> Taras Ivashchenko
>> https://www.owasp.org/index.php/Russia
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20190225/cf5cf260/attachment.html>

