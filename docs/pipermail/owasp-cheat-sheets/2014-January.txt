From torsten.gigler at owasp.org  Fri Jan 24 12:56:28 2014
From: torsten.gigler at owasp.org (Torsten Gigler)
Date: Fri, 24 Jan 2014 13:56:28 +0100
Subject: [Owasp-cheat-sheets] Query Parameterization Cheat Sheet / Java
	Hibernate
Message-ID: <CA+M5M1daqmCuex=jXvMDzMAueiUzD63zeCuAw1W3TjbhAeFMNQ@mail.gmail.com>

Hi Jim, hi Community,

we have a suggestion in our Project 'OWASP Top 10 fuer Entwickler' (Top 10
Developer Edition in German) for a different example for* 'Java Hibernate'*:

String userSuppliedParameter = request.getParameter("id"); // This should
REALLY be validated too
// perform input validation to detect attacks
* Inventory inv =*

* (Inventory)
session.createCriteria(Inventory.class).add(Restrictions.eq("productID",
      userSuppliedParameter)).uniqueResult();*

(see:
https://www.owasp.org/index.php/Germany/Projekte/Top_10_fuer_Entwickler/A1_Injection
)

Acually we provide both examples, preferring the new one.

Do you have any comments about the new example?

Thanks.Kind regards

Torsten
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140124/07b74158/attachment.html>

From jim.manico at owasp.org  Fri Jan 24 19:55:47 2014
From: jim.manico at owasp.org (Jim Manico)
Date: Fri, 24 Jan 2014 09:55:47 -1000
Subject: [Owasp-cheat-sheets] Query Parameterization Cheat Sheet / Java
	Hibernate
In-Reply-To: <CA+M5M1daqmCuex=jXvMDzMAueiUzD63zeCuAw1W3TjbhAeFMNQ@mail.gmail.com>
References: <CA+M5M1daqmCuex=jXvMDzMAueiUzD63zeCuAw1W3TjbhAeFMNQ@mail.gmail.com>
Message-ID: <-3641573642218109849@unknownmsgid>

What could an attacker do here if it was not validated? Or are you showing
that some things cannot be parameterized? Would casting the user input to
an int or long help?

Aloha Germany!
--
Jim Manico
@Manicode
(808) 652-3805

On Jan 24, 2014, at 2:56 AM, Torsten Gigler <torsten.gigler at owasp.org>
wrote:

Hi Jim, hi Community,

we have a suggestion in our Project 'OWASP Top 10 fuer Entwickler' (Top 10
Developer Edition in German) for a different example for* 'Java Hibernate'*:

String userSuppliedParameter = request.getParameter("id"); // This should
REALLY be validated too
// perform input validation to detect attacks
* Inventory inv =*

* (Inventory)
session.createCriteria(Inventory.class).add(Restrictions.eq("productID",
      userSuppliedParameter)).uniqueResult();*

(see:
https://www.owasp.org/index.php/Germany/Projekte/Top_10_fuer_Entwickler/A1_Injection
)

Acually we provide both examples, preferring the new one.

Do you have any comments about the new example?

Thanks.Kind regards

Torsten
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140124/b24c0ee9/attachment.html>

From jim.manico at owasp.org  Sat Jan 25 22:52:36 2014
From: jim.manico at owasp.org (Jim Manico)
Date: Sat, 25 Jan 2014 12:52:36 -1000
Subject: [Owasp-cheat-sheets] Query Parameterization Cheat Sheet / Java
	Hibernate
In-Reply-To: <CA+M5M1daqmCuex=jXvMDzMAueiUzD63zeCuAw1W3TjbhAeFMNQ@mail.gmail.com>
References: <CA+M5M1daqmCuex=jXvMDzMAueiUzD63zeCuAw1W3TjbhAeFMNQ@mail.gmail.com>
Message-ID: <9e68516f09e2c497d53da14f20c99d93@mail.gmail.com>

It looks like you are loading one Inventory object for one productId. I
would normally do something like this so I would not need any kind of
parameterization?.



String userSuppliedParameter = request.getParameter("id");

Long userSuppliedLong = new Long(userSuppliedParameter); //need to check
for errors here

*Inventory inv = (Inventory) = session.load(Inventory.class,
userSuppliedLong);*



*From:* Torsten Gigler [mailto:torsten.gigler at owasp.org]
*Sent:* Friday, January 24, 2014 2:56 AM
*To:* owasp-cheat-sheets at lists.owasp.org; Jim Manico
*Cc:* owasp_top_10_fuer_entwickler at lists.owasp.org
*Subject:* Query Parameterization Cheat Sheet / Java Hibernate



Hi Jim, hi Community,

we have a suggestion in our Project 'OWASP Top 10 fuer Entwickler' (Top 10
Developer Edition in German) for a different example for* 'Java Hibernate'*:

String userSuppliedParameter = request.getParameter("id"); // This should
REALLY be validated too
// perform input validation to detect attacks


*Inventory inv = (Inventory)
session.createCriteria(Inventory.class).add(Restrictions.eq("productID",
      userSuppliedParameter)).uniqueResult();*

(see:
https://www.owasp.org/index.php/Germany/Projekte/Top_10_fuer_Entwickler/A1_Injection
)

Acually we provide both examples, preferring the new one.

Do you have any comments about the new example?

Thanks.Kind regards

Torsten
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140125/c3f7f1e9/attachment.html>

From torsten.gigler at owasp.org  Mon Jan 27 17:40:56 2014
From: torsten.gigler at owasp.org (Torsten Gigler)
Date: Mon, 27 Jan 2014 18:40:56 +0100
Subject: [Owasp-cheat-sheets] Query Parameterization Cheat Sheet / Java
	Hibernate
In-Reply-To: <9e68516f09e2c497d53da14f20c99d93@mail.gmail.com>
References: <CA+M5M1daqmCuex=jXvMDzMAueiUzD63zeCuAw1W3TjbhAeFMNQ@mail.gmail.com>
	<9e68516f09e2c497d53da14f20c99d93@mail.gmail.com>
Message-ID: <CA+M5M1c2QKnwF9ZT3DWjR3nqjdaAG-Ls2MVd9+ERpdYS9M4EUg@mail.gmail.com>

Hi Jim,

Thank you for your fast answers.
We liked to add an example using a Hibernate Criteria Query.
This is to use more features of Hibernate, to get more independent from the
Database.
Additionally we should be automatically protected from SQL injection,
assuming that in this case Hibernate builds the underlying query like
parameterized Queries.

Is this OK? What do you think about it?

Kind Regards

Torsten



2014-01-25 Jim Manico <jim.manico at owasp.org>

> It looks like you are loading one Inventory object for one productId. I
> would normally do something like this so I would not need any kind of
> parameterization?.
>
>
>
> String userSuppliedParameter = request.getParameter("id");
>
> Long userSuppliedLong = new Long(userSuppliedParameter); //need to check
> for errors here
>
> *Inventory inv = (Inventory) = session.load(Inventory.class,
> userSuppliedLong);*
>
>
>
> *From:* Torsten Gigler [mailto:torsten.gigler at owasp.org]
> *Sent:* Friday, January 24, 2014 2:56 AM
> *To:* owasp-cheat-sheets at lists.owasp.org; Jim Manico
> *Cc:* owasp_top_10_fuer_entwickler at lists.owasp.org
> *Subject:* Query Parameterization Cheat Sheet / Java Hibernate
>
>
>
> Hi Jim, hi Community,
>
> we have a suggestion in our Project 'OWASP Top 10 fuer Entwickler' (Top 10
> Developer Edition in German) for a different example for* 'Java
> Hibernate'*:
>
> String userSuppliedParameter = request.getParameter("id"); // This should
> REALLY be validated too
> // perform input validation to detect attacks
>
>
> *Inventory inv = (Inventory)
> session.createCriteria(Inventory.class).add(Restrictions.eq("productID",
>       userSuppliedParameter)).uniqueResult();*
>
> (see:
> https://www.owasp.org/index.php/Germany/Projekte/Top_10_fuer_Entwickler/A1_Injection
> )
>
> Acually we provide both examples, preferring the new one.
>
> Do you have any comments about the new example?
>
> Thanks.Kind regards
>
> Torsten
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140127/c15e095c/attachment.html>

From jim.manico at owasp.org  Thu Jan 30 06:50:16 2014
From: jim.manico at owasp.org (Jim Manico)
Date: Wed, 29 Jan 2014 20:50:16 -1000
Subject: [Owasp-cheat-sheets] Query Parameterization Cheat Sheet / Java
	Hibernate
In-Reply-To: <CA+M5M1c2QKnwF9ZT3DWjR3nqjdaAG-Ls2MVd9+ERpdYS9M4EUg@mail.gmail.com>
References: <CA+M5M1daqmCuex=jXvMDzMAueiUzD63zeCuAw1W3TjbhAeFMNQ@mail.gmail.com>	<9e68516f09e2c497d53da14f20c99d93@mail.gmail.com>
	<CA+M5M1c2QKnwF9ZT3DWjR3nqjdaAG-Ls2MVd9+ERpdYS9M4EUg@mail.gmail.com>
Message-ID: <52E9F628.2090105@owasp.org>

 > Additionally we should be automatically protected from SQL injection, 
assuming that in this case Hibernate builds the underlying query like 
parameterized Queries.

TOTALLY. As long as you are using the Criteria API, you are completely 
safe from SQL injection. When you use un-parameterized HQL, you are 
vulnerable to HQL injection.

Cool?

PS: THERE IS BEER IN HAWAII! REALLY!
>
> Is this OK? What do you think about it?
>
> Kind Regards
>
> Torsten
>
>
>
> 2014-01-25 Jim Manico <jim.manico at owasp.org <mailto:jim.manico at owasp.org>>
>
>     It looks like you are loading one Inventory object for one
>     productId. I would normally do something like this so I would not
>     need any kind of parameterization?.
>
>     String userSuppliedParameter = request.getParameter("id");
>
>     Long userSuppliedLong = new Long(userSuppliedParameter); //need to
>     check for errors here
>
>     *Inventory inv = (Inventory) = session.load(Inventory.class,
>     userSuppliedLong);*
>
>     *From:*Torsten Gigler [mailto:torsten.gigler at owasp.org
>     <mailto:torsten.gigler at owasp.org>]
>     *Sent:* Friday, January 24, 2014 2:56 AM
>     *To:* owasp-cheat-sheets at lists.owasp.org
>     <mailto:owasp-cheat-sheets at lists.owasp.org>; Jim Manico
>     *Cc:* owasp_top_10_fuer_entwickler at lists.owasp.org
>     <mailto:owasp_top_10_fuer_entwickler at lists.owasp.org>
>     *Subject:* Query Parameterization Cheat Sheet / Java Hibernate
>
>     Hi Jim, hi Community,
>
>     we have a suggestion in our Project 'OWASP Top 10 fuer Entwickler'
>     (Top 10 Developer Edition in German) for a different example
>     for*'Java Hibernate'*:
>
>     String userSuppliedParameter = request.getParameter("id"); // This
>     should REALLY be validated too
>     // perform input validation to detect attacks
>     *Inventory inv = (Inventory)
>     session.createCriteria(Inventory.class).add(Restrictions.eq("productID",
>     userSuppliedParameter)).uniqueResult();*
>
>     (see:
>     https://www.owasp.org/index.php/Germany/Projekte/Top_10_fuer_Entwickler/A1_Injection)
>
>     Acually we provide both examples, preferring the new one.
>
>     Do you have any comments about the new example?
>
>     Thanks.Kind regards
>
>     Torsten
>
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140129/fd0ea424/attachment.html>

From torsten.gigler at owasp.org  Thu Jan 30 16:04:23 2014
From: torsten.gigler at owasp.org (Torsten Gigler)
Date: Thu, 30 Jan 2014 17:04:23 +0100
Subject: [Owasp-cheat-sheets] Query Parameterization Cheat Sheet / Java
	Hibernate
In-Reply-To: <52E9F628.2090105@owasp.org>
References: <CA+M5M1daqmCuex=jXvMDzMAueiUzD63zeCuAw1W3TjbhAeFMNQ@mail.gmail.com>
	<9e68516f09e2c497d53da14f20c99d93@mail.gmail.com>
	<CA+M5M1c2QKnwF9ZT3DWjR3nqjdaAG-Ls2MVd9+ERpdYS9M4EUg@mail.gmail.com>
	<52E9F628.2090105@owasp.org>
Message-ID: <CA+M5M1eH7CYTtCNLdGQd0+AJ73r=Lu6iE6HE6hjQC6Zq_1iuTw@mail.gmail.com>

Hi Jim,

thanks a lot.
We changed the query to get the *"productDescription" *not just the
*"productID".
*So we have a better example that justifies to use 'createCriteria' and not
simply use the 'session.load' (Thanks for this hint, too).

So we get a brand new example for Hybernate ;-)

String userSuppliedParameter = request.getParameter("id"); // This should
REALLY be validated too
// perform input validation to detect attacks
*Inventory inv = (Inventory)*
*
session.createCriteria(Inventory.class).add(Restrictions.eq("productDescription",*
*         userSuppliedParameter)).uniqueResult();*

If you like it, feel free to use it in the Cheet Sheets as second example
for Hybernate, too.

Thanks

Torsten

PS: We do have good Beer in BAVARIA ;-))


2014-01-30 Jim Manico <jim.manico at owasp.org>

>  > Additionally we should be automatically protected from SQL injection,
> assuming that in this case Hibernate builds the underlying query like
> parameterized Queries.
>
> TOTALLY. As long as you are using the Criteria API, you are completely
> safe from SQL injection. When you use un-parameterized HQL, you are
> vulnerable to HQL injection.
>
> Cool?
>
> PS: THERE IS BEER IN HAWAII! REALLY!
>
>
> Is this OK? What do you think about it?
>
> Kind Regards
>
> Torsten
>
>
>
> 2014-01-25 Jim Manico <jim.manico at owasp.org>
>
>>  It looks like you are loading one Inventory object for one productId. I
>> would normally do something like this so I would not need any kind of
>> parameterization....
>>
>>
>>
>> String userSuppliedParameter = request.getParameter("id");
>>
>> Long userSuppliedLong = new Long(userSuppliedParameter); //need to check
>> for errors here
>>
>> *Inventory inv = (Inventory) = session.load(Inventory.class,
>> userSuppliedLong);*
>>
>>
>>
>> *From:* Torsten Gigler [mailto:torsten.gigler at owasp.org]
>> *Sent:* Friday, January 24, 2014 2:56 AM
>> *To:* owasp-cheat-sheets at lists.owasp.org; Jim Manico
>> *Cc:* owasp_top_10_fuer_entwickler at lists.owasp.org
>> *Subject:* Query Parameterization Cheat Sheet / Java Hibernate
>>
>>
>>
>> Hi Jim, hi Community,
>>
>> we have a suggestion in our Project 'OWASP Top 10 fuer Entwickler' (Top
>> 10 Developer Edition in German) for a different example for* 'Java
>> Hibernate'*:
>>
>> String userSuppliedParameter = request.getParameter("id"); // This should
>> REALLY be validated too
>> // perform input validation to detect attacks
>>
>>
>> *Inventory inv = (Inventory)
>> session.createCriteria(Inventory.class).add(Restrictions.eq("productID",
>>       userSuppliedParameter)).uniqueResult();*
>>
>> (see:
>> https://www.owasp.org/index.php/Germany/Projekte/Top_10_fuer_Entwickler/A1_Injection
>> )
>>
>> Acually we provide both examples, preferring the new one.
>>
>> Do you have any comments about the new example?
>>
>> Thanks.Kind regards
>>
>> Torsten
>>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140130/ef4a1668/attachment.html>

From torsten.gigler at owasp.org  Thu Jan 30 16:29:33 2014
From: torsten.gigler at owasp.org (Torsten Gigler)
Date: Thu, 30 Jan 2014 17:29:33 +0100
Subject: [Owasp-cheat-sheets] Query Parameterization Cheat Sheet / Java
	Hibernate
In-Reply-To: <CA+M5M1eH7CYTtCNLdGQd0+AJ73r=Lu6iE6HE6hjQC6Zq_1iuTw@mail.gmail.com>
References: <CA+M5M1daqmCuex=jXvMDzMAueiUzD63zeCuAw1W3TjbhAeFMNQ@mail.gmail.com>
	<9e68516f09e2c497d53da14f20c99d93@mail.gmail.com>
	<CA+M5M1c2QKnwF9ZT3DWjR3nqjdaAG-Ls2MVd9+ERpdYS9M4EUg@mail.gmail.com>
	<52E9F628.2090105@owasp.org>
	<CA+M5M1eH7CYTtCNLdGQd0+AJ73r=Lu6iE6HE6hjQC6Zq_1iuTw@mail.gmail.com>
Message-ID: <CA+M5M1fJQkrDGntRCABNOszJAJVu18Vcj-XvD70Zkvp59GB11A@mail.gmail.com>

Hi Jim,

here, both examples, as I put it on
https://www.owasp.org/index.php/Germany/Projekte/Top_10_fuer_Entwickler-2013/A1-Injection

HQL:

 String userSuppliedParameter =
request.getParameter("Product-Description"); // This should REALLY be
validated too
// perform input validation to detect attacks
* Query safeHQLQuery = session.createQuery("from Inventory where
productDescription=:productdescription");*
*safeHQLQuery.setParameter("productdescription", userSuppliedParameter)*;


Hibernate Criteria Query:

String userSuppliedParameter = request.getParameter("Product-Description");
// This should REALLY be validated too
// perform input validation to detect attacks

* Inventory inv =*
 * (Inventory)
session.createCriteria(Inventory.class).add(Restrictions.eq("productDescription",
userSuppliedParameter)).uniqueResult();*


Thanks.


Cheers,

Torsten


2014-01-30 Torsten Gigler <torsten.gigler at owasp.org>

> Hi Jim,
>
> thanks a lot.
> We changed the query to get the *"productDescription" *not just the *"productID".
> *So we have a better example that justifies to use 'createCriteria' and
> not simply use the 'session.load' (Thanks for this hint, too).
>
> So we get a brand new example for Hybernate ;-)
>
> String userSuppliedParameter = request.getParameter("id"); // This should
> REALLY be validated too
> // perform input validation to detect attacks
> *Inventory inv = (Inventory)*
> *
> session.createCriteria(Inventory.class).add(Restrictions.eq("productDescription",*
> *         userSuppliedParameter)).uniqueResult();*
>
> If you like it, feel free to use it in the Cheet Sheets as second example
> for Hybernate, too.
>
> Thanks
>
> Torsten
>
> PS: We do have good Beer in BAVARIA ;-))
>
>
> 2014-01-30 Jim Manico <jim.manico at owasp.org>
>
>>  > Additionally we should be automatically protected from SQL injection,
>> assuming that in this case Hibernate builds the underlying query like
>> parameterized Queries.
>>
>> TOTALLY. As long as you are using the Criteria API, you are completely
>> safe from SQL injection. When you use un-parameterized HQL, you are
>> vulnerable to HQL injection.
>>
>> Cool?
>>
>> PS: THERE IS BEER IN HAWAII! REALLY!
>>
>>
>> Is this OK? What do you think about it?
>>
>> Kind Regards
>>
>> Torsten
>>
>>
>>
>> 2014-01-25 Jim Manico <jim.manico at owasp.org>
>>
>>>  It looks like you are loading one Inventory object for one productId.
>>> I would normally do something like this so I would not need any kind of
>>> parameterization....
>>>
>>>
>>>
>>> String userSuppliedParameter = request.getParameter("id");
>>>
>>> Long userSuppliedLong = new Long(userSuppliedParameter); //need to check
>>> for errors here
>>>
>>> *Inventory inv = (Inventory) = session.load(Inventory.class,
>>> userSuppliedLong);*
>>>
>>>
>>>
>>> *From:* Torsten Gigler [mailto:torsten.gigler at owasp.org]
>>> *Sent:* Friday, January 24, 2014 2:56 AM
>>> *To:* owasp-cheat-sheets at lists.owasp.org; Jim Manico
>>> *Cc:* owasp_top_10_fuer_entwickler at lists.owasp.org
>>> *Subject:* Query Parameterization Cheat Sheet / Java Hibernate
>>>
>>>
>>>
>>> Hi Jim, hi Community,
>>>
>>> we have a suggestion in our Project 'OWASP Top 10 fuer Entwickler' (Top
>>> 10 Developer Edition in German) for a different example for* 'Java
>>> Hibernate'*:
>>>
>>> String userSuppliedParameter = request.getParameter("id"); // This
>>> should REALLY be validated too
>>> // perform input validation to detect attacks
>>>
>>>
>>> *Inventory inv = (Inventory)
>>> session.createCriteria(Inventory.class).add(Restrictions.eq("productID",
>>>       userSuppliedParameter)).uniqueResult();*
>>>
>>> (see:
>>> https://www.owasp.org/index.php/Germany/Projekte/Top_10_fuer_Entwickler/A1_Injection
>>> )
>>>
>>> Acually we provide both examples, preferring the new one.
>>>
>>> Do you have any comments about the new example?
>>>
>>> Thanks.Kind regards
>>>
>>> Torsten
>>>
>>
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-cheat-sheets/attachments/20140130/28bad635/attachment-0001.html>

