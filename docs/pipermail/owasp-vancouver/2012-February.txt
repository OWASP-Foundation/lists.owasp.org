From ruiper at wavefrontcg.com  Wed Feb  1 17:41:11 2012
From: ruiper at wavefrontcg.com (Rui Pereira (WCG))
Date: Wed, 1 Feb 2012 09:41:11 -0800
Subject: [Owasp-vancouver] Secure Web Application Development and Testing -
	Hands-On Training (Vancouver, February 28-March 2, 2012)
References: <007b01cc5690$b14ee9c0$13ecbd40$@ca>
	<000001ccb2ce$1d8982a0$589c87e0$@ca>
	<SNT143-ds6B31839D20ABA8F1A11649EBA0@phx.gbl>
	<000e01ccc68f$0cc98c60$265ca520$@com>
	<001101ccd613$28926ff0$79b74fd0$@com>
	<001701ccdac4$44c8fe90$ce5afbb0$@com> 
Message-ID: <001701cce108$b3a53b40$1aefb1c0$@com>

FYI.

 

Hello

 

We have scheduled the next offering of this 4-day course for 

February 28 to March 2, 2012 (Tuesday-Friday) in Vancouver BC.

 

The course aims to provide Web application developers and testers 

(QA) with an understanding of application security issues and attack 

vectors, and the skills, tools and techniques needed to code 

defensively against web attacks. It also covers techniques and tools 

for testing web application security. Given the nature of the threats 

from hackers and cyber-criminals (Sony, anyone?), having web 

applications that can take the punishment is critical. And if your web 

applications collect personal, private, sensitive, medical, or financial 

information, you have legal and contractual reasons (such as privacy 

legislation, PCI DSS, etc.), to ensure that such information is 

collected and managed securely.

 

The course is aimed at developers; testers/QA staff; system, 

network, database and application architects; analysts; system, 

network and database administrators; auditors; and security and 

compliance staff.   

 

This is the seventh year we have run this course, and it has been 

well attended each time. The course is brought up-to-date each 

year.

 

A course outline is available at

 <http://www.wavefrontcg.com/IntroWebAppSec_2011.pdf>
http://www.wavefrontcg.com/IntroWebAppSec_2011.pdf

 

Our other training offerings are listed at

 <http://www.wavefrontcg.com/Training.html>
http://www.wavefrontcg.com/Training.html

 

If you no longer wish to receive e-mails of this type from us, please 

reply to this e-mail with the word REMOVE in the subject header.

 

Thank You 

Rui Pereira,B.Sc.(Hons),CIPS ISP,CISSP,CISA,CWNA/CWSP,CPTE/CPTC
Principal Consultant 

WaveFront Consulting Group 
Certified Information Systems Security Professionals

ruiper at wavefrontcg.com | www.wavefrontcg.com | 1 604 961-0701 

This email and any files transmitted with it are confidential and intended
solely for the use of the individual or entity to whom they are addressed.
Please notify the sender immediately by e-mail if you have received this
e-mail in error and delete this e-mail from your system. If you are not the
intended recipient you are notified that disclosing, copying, distributing
or taking any action in reliance on the contents of this information is
strictly prohibited.

 


From iduncan at xornot.com  Thu Feb  2 21:04:57 2012
From: iduncan at xornot.com (Iain Duncan)
Date: Thu, 2 Feb 2012 13:04:57 -0800
Subject: [Owasp-vancouver] logging question
Message-ID: <CADjmq0ii+z6MaKKze=CHWV79tj=AGw+VFLxaYhLbWD+A+6XjAg@mail.gmail.com>

Hey folks, I have a question, and am not clear whether this list is
supposed to be to talk about topics, or just about chapter events.
Apologies if this is the wrong place, and if so, could anyone recommend the
best place?

I'm implementing some fairly detailed logging for a client, for security
and for legal coverage ( non-repudiation of reading disclaimers, etc). The
records are being logged to a database, with the goal to convince the
client that this db should be moved to a separate server so that logs go to
a a remote machine for which the app has only insert privileges. One of the
logs is of each request for a pyramid view ( essentially any kind of
complete page, does not include requests for css/javascript/images ). I had
read that it's a good idea to just log the whole http request, but of
course that has the session token in it. I'm just wondering whether I
should be concerned about the fact that if a compromise allowed someone to
read the db, could they hijack an admin users session?

Which has me trying to figure out if that matters, given that if they can
read the db, they're pretty far in. I could redact the session token ( and
all cookies ) before logging, but would this have potential negatives for
forensics?

Thanks
Iain
XORNOT Studios

From yvanboily at gmail.com  Fri Feb  3 14:54:08 2012
From: yvanboily at gmail.com (Yvan Boily)
Date: Fri, 3 Feb 2012 06:54:08 -0800
Subject: [Owasp-vancouver] logging question
In-Reply-To: <CADjmq0ii+z6MaKKze=CHWV79tj=AGw+VFLxaYhLbWD+A+6XjAg@mail.gmail.com>
References: <CADjmq0ii+z6MaKKze=CHWV79tj=AGw+VFLxaYhLbWD+A+6XjAg@mail.gmail.com>
Message-ID: <CAD_ZbKzZJYcdR-p7xQ_bdsNQzrfLmGXbbRf4NH2kybnmosVaLg@mail.gmail.com>

On Thu, Feb 2, 2012 at 1:04 PM, Iain Duncan <iduncan at xornot.com> wrote:

> Hey folks, I have a question, and am not clear whether this list is
> supposed to be to talk about topics, or just about chapter events.
> Apologies if this is the wrong place, and if so, could anyone recommend the
> best place?
>

This is a great place to ask questions!


> I'm implementing some fairly detailed logging for a client, for security
> and for legal coverage ( non-repudiation of reading disclaimers, etc). The
> records are being logged to a database, with the goal to convince the
> client that this db should be moved to a separate server so that logs go to
> a a remote machine for which the app has only insert privileges.


Logging to a remote server is always a good start, but I am curious about
the decision to store logs in a database rather than a using a conventional
logging service (syslog or one of its variants, a flat file that gets
pushed or pulled periodically, etc).  Using a custom format or storing the
records within a database may make it more difficult to get the data into
an event processing engine that allows admins of your application to
correlate application logs against system and network events.

One of the logs is of each request for a pyramid view ( essentially any
> kind of
> complete page, does not include requests for css/javascript/images ). I had
> read that it's a good idea to just log the whole http request, but of
> course that has the session token in it.


In general, logging the entire HTTP request outside of a debug environment
is unsafe since you invariably end up storing user credentials, session
state data, and other sensitive data outside of the application and its
database.  Best case scenario, this is a violation of best practice, worst
case scenario it is a regulatory or compliance issue.  If you go that
route, make sure you are properly sanitizing the fields that contain
sensitive data before writing them to the database.


> I'm just wondering whether I should be concerned about the fact that if a
> compromise allowed someone to
> read the db, could they hijack an admin users session?
>

In general, yes.  Note that in this case, you should be extending beyond
the consideration of an external attacker and consider what a malicious
user might be able to accomplish.  If your authentication scheme is
designed properly, and you have proper separation of duties within your
environment, a system administrator or DBA should not be able to violate
the non-repudiation aspect of the design without resorting to collusion.


> Which has me trying to figure out if that matters, given that if they can
> read the db, they're pretty far in. I could redact the session token ( and
> all cookies ) before logging, but would this have potential negatives for
> forensics?
>

Generating a proper audit trail extends beyond capturing the content of an
HTTP request; it would be more effective to generate an audit record of
every privileged action a user performs (or, if necessary, of every action
performed).  Generating this type of an audit capability serves two
purposes:

First, it lets you meet any requirements you might have around executing
application level forensics of what happened.  Having discrete, clearly
documented, and granular audit capabilities make it clear which subject
performed with operation on which object, and the context in which that
operation performed, without having to sift through HTTP request blobs in
log files.

Second, it provides data that can be used to make an application attack
aware, which increases the likelihood of detecting and stopping an attack
or compromise.

You can read more about attack aware applications here:
 - https://www.owasp.org/index.php/OWASP_AppSensor_Project (especially the
detection points)
 - http://blog.mozilla.com/webappsec/2011/02/02/attack-aware-applications/
 - Mozilla's AMO uses CEF logging to implement attack awareness if you want
some examples of how to do this in python (although that is specific to our
use of Arcsight)

I don't know if these responses help to clarify the issue, but another
important part of understanding the best approach for logging is
understanding what the requirements might be; feel free to contact me
directly with any questions you might have about this stuff, or anything
you may not want to discuss or disclose on a public mailing list.

Thanks
> Iain
> XORNOT Studios
>
> _______________________________________________
> Owasp-vancouver mailing list
> Owasp-vancouver at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-vancouver
>
>

From iduncan at xornot.com  Fri Feb  3 18:24:30 2012
From: iduncan at xornot.com (Iain Duncan)
Date: Fri, 3 Feb 2012 10:24:30 -0800
Subject: [Owasp-vancouver] logging question
In-Reply-To: <CAD_ZbKzZJYcdR-p7xQ_bdsNQzrfLmGXbbRf4NH2kybnmosVaLg@mail.gmail.com>
References: <CADjmq0ii+z6MaKKze=CHWV79tj=AGw+VFLxaYhLbWD+A+6XjAg@mail.gmail.com>
	<CAD_ZbKzZJYcdR-p7xQ_bdsNQzrfLmGXbbRf4NH2kybnmosVaLg@mail.gmail.com>
Message-ID: <CADjmq0gdj5SoFrkozekTtq+45TD617zQsJY+8d4NO78VC4HL_w@mail.gmail.com>

Thanks so much for the detailed response Yvan. Some questions and answers
below

>
> I'm implementing some fairly detailed logging for a client, for security
>> and for legal coverage ( non-repudiation of reading disclaimers, etc). The
>> records are being logged to a database, with the goal to convince the
>> client that this db should be moved to a separate server so that logs go
>> to
>> a a remote machine for which the app has only insert privileges.
>
>
> Logging to a remote server is always a good start, but I am curious about
> the decision to store logs in a database rather than a using a conventional
> logging service (syslog or one of its variants, a flat file that gets
> pushed or pulled periodically, etc).  Using a custom format or storing the
> records within a database may make it more difficult to get the data into
> an event processing engine that allows admins of your application to
> correlate application logs against system and network events.
>

In our case, we're using Pyramid and SQLAlchemy, so the decision to use the
DB was because it make adding our our own event processing logic almost
trivial. It also allows us to have a relational schema for logging that
corresponds somewhat to the logic of the application, and we're logging
application specific details. We may push this layer into WSGI middleware,
not sure about that. Pyramid has some really nice facilities for hooking
into the life cycle of the request, if you make a custom request factory,
you can connect beginning and end of life cycle callbacks. Another design
pattern of Pyramid that is useful for this is the Zope 3 style
views-as-classes, which are multi-adapters of request and context and are
always instantiated, called, and destroyed once per request ( no shared
state between threads at all). A happy side effect of this is that it's
safe to store your intermediate results of what the view is doing as
attributes on the view. We do this, and we store the a ref to the view on
the request object itself. This means that the end of life callback can
introspect the view to figure out exactly what went on during this request.

The main driver for the logging is the non-repudiation, so by logging the
http request, we collect user id, time, ip, url, etc, but this gets
connected to entries that log file downloads, file uploads, reading the
disclaimers, editing the user accounts, and activating the user accounts.
Those all have their own schemas, but that is quite easy to implement on
the framework we're using. So by putting it the db, it's very easy for us
to provide the client ( and their legal counsel ) a record that shows they
did their due diligence in making sure that users read the terms and
conditions before uploading, etc. Hopefully that clarifies that design
decision.


> One of the logs is of each request for a pyramid view ( essentially any
>> kind of
>> complete page, does not include requests for css/javascript/images ). I
>> had
>> read that it's a good idea to just log the whole http request, but of
>> course that has the session token in it.
>
>
> In general, logging the entire HTTP request outside of a debug environment
> is unsafe since you invariably end up storing user credentials, session
> state data, and other sensitive data outside of the application and its
> database.  Best case scenario, this is a violation of best practice, worst
> case scenario it is a regulatory or compliance issue.  If you go that
> route, make sure you are properly sanitizing the fields that contain
> sensitive data before writing them to the database.
>

Is wiping out the cookies header and any password fields sufficient for
this?

I was thinking about attack awareness, and thought that monitoring POST
vars would be good, because then one can detect repeated attempts to fudge
them. But then we must be careful never to log any of the password
submission variables.


>
>> I'm just wondering whether I should be concerned about the fact that if a
>> compromise allowed someone to
>> read the db, could they hijack an admin users session?
>>
>
> In general, yes.  Note that in this case, you should be extending beyond
> the consideration of an external attacker and consider what a malicious
> user might be able to accomplish.  If your authentication scheme is
> designed properly, and you have proper separation of duties within your
> environment, a system administrator or DBA should not be able to violate
> the non-repudiation aspect of the design without resorting to collusion.
>

Great, thanks.


>
>
>
>> Which has me trying to figure out if that matters, given that if they can
>> read the db, they're pretty far in. I could redact the session token ( and
>> all cookies ) before logging, but would this have potential negatives for
>> forensics?
>>
>
> Generating a proper audit trail extends beyond capturing the content of an
> HTTP request; it would be more effective to generate an audit record of
> every privileged action a user performs (or, if necessary, of every action
> performed).  Generating this type of an audit capability serves two
> purposes:
>
> First, it lets you meet any requirements you might have around executing
> application level forensics of what happened.  Having discrete, clearly
> documented, and granular audit capabilities make it clear which subject
> performed with operation on which object, and the context in which that
> operation performed, without having to sift through HTTP request blobs in
> log files.
>
>
Right, that's what we're accomplishing through the related schema of http
requests to user actions.


> Second, it provides data that can be used to make an application attack
> aware, which increases the likelihood of detecting and stopping an attack
> or compromise.
>
> You can read more about attack aware applications here:
>  - https://www.owasp.org/index.php/OWASP_AppSensor_Project (especially
> the detection points)
>  - http://blog.mozilla.com/webappsec/2011/02/02/attack-aware-applications/
>  - Mozilla's AMO uses CEF logging to implement attack awareness if you
> want some examples of how to do this in python (although that is specific
> to our use of Arcsight)
>
>

I am planning on looking further into that, Python's WSGI system is ideal
for this as the middleware layer before the application can access the same
db, look at the log events, and make decisions on allowing/disallowing
incoming requests before any of the main application logic is even
called.  I will definitely take a look at those!

And thanks again for the detailed response.

Iain

From yvanboily at gmail.com  Sat Feb  4 06:26:53 2012
From: yvanboily at gmail.com (Yvan Boily)
Date: Fri, 3 Feb 2012 22:26:53 -0800
Subject: [Owasp-vancouver] logging question
In-Reply-To: <CADjmq0gdj5SoFrkozekTtq+45TD617zQsJY+8d4NO78VC4HL_w@mail.gmail.com>
References: <CADjmq0ii+z6MaKKze=CHWV79tj=AGw+VFLxaYhLbWD+A+6XjAg@mail.gmail.com>
	<CAD_ZbKzZJYcdR-p7xQ_bdsNQzrfLmGXbbRf4NH2kybnmosVaLg@mail.gmail.com>
	<CADjmq0gdj5SoFrkozekTtq+45TD617zQsJY+8d4NO78VC4HL_w@mail.gmail.com>
Message-ID: <CAD_ZbKyg87nOvR-_zLrWFu12H4Xmho-gSh7yPMkL2qb2OJONSA@mail.gmail.com>

On Fri, Feb 3, 2012 at 10:24 AM, Iain Duncan <iduncan at xornot.com> wrote:

> Thanks so much for the detailed response Yvan. Some questions and answers
> below
>
>>
>> I'm implementing some fairly detailed logging for a client, for security
>>> and for legal coverage ( non-repudiation of reading disclaimers, etc).
>>> The
>>> records are being logged to a database, with the goal to convince the
>>> client that this db should be moved to a separate server so that logs go
>>> to
>>> a a remote machine for which the app has only insert privileges.
>>
>>
>> Logging to a remote server is always a good start, but I am curious about
>> the decision to store logs in a database rather than a using a conventional
>> logging service (syslog or one of its variants, a flat file that gets
>> pushed or pulled periodically, etc).  Using a custom format or storing the
>> records within a database may make it more difficult to get the data into
>> an event processing engine that allows admins of your application to
>> correlate application logs against system and network events.
>>
>
> In our case, we're using Pyramid and SQLAlchemy, so the decision to use
> the DB was because it make adding our our own event processing logic almost
> trivial. It also allows us to have a relational schema for logging that
> corresponds somewhat to the logic of the application, and we're logging
> application specific details. We may push this layer into WSGI middleware,
> not sure about that. Pyramid has some really nice facilities for hooking
> into the life cycle of the request, if you make a custom request factory,
> you can connect beginning and end of life cycle callbacks. Another design
> pattern of Pyramid that is useful for this is the Zope 3 style
> views-as-classes, which are multi-adapters of request and context and are
> always instantiated, called, and destroyed once per request ( no shared
> state between threads at all). A happy side effect of this is that it's
> safe to store your intermediate results of what the view is doing as
> attributes on the view. We do this, and we store the a ref to the view on
> the request object itself. This means that the end of life callback can
> introspect the view to figure out exactly what went on during this request.
>
> The main driver for the logging is the non-repudiation, so by logging the
> http request, we collect user id, time, ip, url, etc, but this gets
> connected to entries that log file downloads, file uploads, reading the
> disclaimers, editing the user accounts, and activating the user accounts.
> Those all have their own schemas, but that is quite easy to implement on
> the framework we're using. So by putting it the db, it's very easy for us
> to provide the client ( and their legal counsel ) a record that shows they
> did their due diligence in making sure that users read the terms and
> conditions before uploading, etc. Hopefully that clarifies that design
> decision.
>

That makes sense; you may also want to consider having the application
servers generate an HMAC or signature for log messages if non-repudiation
is a goal; without that there is no evidence that a DBA didn't modify the
log entry (this is also a consideration for any logging format).  From an
ops perspective, you may want to have some scripts handy for conversion
into a more traditional logging format.


>
>
>> One of the logs is of each request for a pyramid view ( essentially any
>>> kind of
>>> complete page, does not include requests for css/javascript/images ). I
>>> had
>>> read that it's a good idea to just log the whole http request, but of
>>> course that has the session token in it.
>>
>>
>> In general, logging the entire HTTP request outside of a debug
>> environment is unsafe since you invariably end up storing user credentials,
>> session state data, and other sensitive data outside of the application and
>> its database.  Best case scenario, this is a violation of best practice,
>> worst case scenario it is a regulatory or compliance issue.  If you go that
>> route, make sure you are properly sanitizing the fields that contain
>> sensitive data before writing them to the database.
>>
>
> Is wiping out the cookies header and any password fields sufficient for
> this?
>

The cookie header, secret user credential components (passwords, auth
tokens, etc), but also consider CSRF or session tokens that may be embedded
in a request body as well.


> I was thinking about attack awareness, and thought that monitoring POST
> vars would be good, because then one can detect repeated attempts to fudge
> them. But then we must be careful never to log any of the password
> submission variables.
>
>
>>
>>> I'm just wondering whether I should be concerned about the fact that if
>>> a compromise allowed someone to
>>> read the db, could they hijack an admin users session?
>>>
>>
>> In general, yes.  Note that in this case, you should be extending beyond
>> the consideration of an external attacker and consider what a malicious
>> user might be able to accomplish.  If your authentication scheme is
>> designed properly, and you have proper separation of duties within your
>> environment, a system administrator or DBA should not be able to violate
>> the non-repudiation aspect of the design without resorting to collusion.
>>
>
> Great, thanks.
>
>
>>
>>
>>
>>> Which has me trying to figure out if that matters, given that if they can
>>> read the db, they're pretty far in. I could redact the session token (
>>> and
>>> all cookies ) before logging, but would this have potential negatives for
>>> forensics?
>>>
>>
>> Generating a proper audit trail extends beyond capturing the content of
>> an HTTP request; it would be more effective to generate an audit record of
>> every privileged action a user performs (or, if necessary, of every action
>> performed).  Generating this type of an audit capability serves two
>> purposes:
>>
>> First, it lets you meet any requirements you might have around executing
>> application level forensics of what happened.  Having discrete, clearly
>> documented, and granular audit capabilities make it clear which subject
>> performed with operation on which object, and the context in which that
>> operation performed, without having to sift through HTTP request blobs in
>> log files.
>>
>>
> Right, that's what we're accomplishing through the related schema of http
> requests to user actions.
>
>
>> Second, it provides data that can be used to make an application attack
>> aware, which increases the likelihood of detecting and stopping an attack
>> or compromise.
>>
>> You can read more about attack aware applications here:
>>  - https://www.owasp.org/index.php/OWASP_AppSensor_Project (especially
>> the detection points)
>>  -
>> http://blog.mozilla.com/webappsec/2011/02/02/attack-aware-applications/
>>  - Mozilla's AMO uses CEF logging to implement attack awareness if you
>> want some examples of how to do this in python (although that is specific
>> to our use of Arcsight)
>>
>>
>
> I am planning on looking further into that, Python's WSGI system is ideal
> for this as the middleware layer before the application can access the same
> db, look at the log events, and make decisions on allowing/disallowing
> incoming requests before any of the main application logic is even
> called.  I will definitely take a look at those!
>
>
I forgot the link to AMO:
https://github.com/mozilla/zamboni/

You can take a look at how CEF logging is implemented by looking at the
logging components there.


> And thanks again for the detailed response.
>
> Iain
>
>

From iduncan at xornot.com  Wed Feb  8 18:02:16 2012
From: iduncan at xornot.com (Iain Duncan)
Date: Wed, 8 Feb 2012 10:02:16 -0800
Subject: [Owasp-vancouver] logging question
In-Reply-To: <CAD_ZbKyg87nOvR-_zLrWFu12H4Xmho-gSh7yPMkL2qb2OJONSA@mail.gmail.com>
References: <CADjmq0ii+z6MaKKze=CHWV79tj=AGw+VFLxaYhLbWD+A+6XjAg@mail.gmail.com>
	<CAD_ZbKzZJYcdR-p7xQ_bdsNQzrfLmGXbbRf4NH2kybnmosVaLg@mail.gmail.com>
	<CADjmq0gdj5SoFrkozekTtq+45TD617zQsJY+8d4NO78VC4HL_w@mail.gmail.com>
	<CAD_ZbKyg87nOvR-_zLrWFu12H4Xmho-gSh7yPMkL2qb2OJONSA@mail.gmail.com>
Message-ID: <CADjmq0gyRVAPjms_7pfFTvYf58zv9ymBCgaDuopqkBVTOLNaew@mail.gmail.com>

Thanks again Yvan!  Very helpful.

Iain

On Fri, Feb 3, 2012 at 10:26 PM, Yvan Boily <yvanboily at gmail.com> wrote:

>
>
>
> On Fri, Feb 3, 2012 at 10:24 AM, Iain Duncan <iduncan at xornot.com> wrote:
>
>> Thanks so much for the detailed response Yvan. Some questions and answers
>> below
>>
>>>
>>> I'm implementing some fairly detailed logging for a client, for security
>>>> and for legal coverage ( non-repudiation of reading disclaimers, etc).
>>>> The
>>>> records are being logged to a database, with the goal to convince the
>>>> client that this db should be moved to a separate server so that logs
>>>> go to
>>>> a a remote machine for which the app has only insert privileges.
>>>
>>>
>>> Logging to a remote server is always a good start, but I am curious
>>> about the decision to store logs in a database rather than a using a
>>> conventional logging service (syslog or one of its variants, a flat file
>>> that gets pushed or pulled periodically, etc).  Using a custom format or
>>> storing the records within a database may make it more difficult to get the
>>> data into an event processing engine that allows admins of your application
>>> to correlate application logs against system and network events.
>>>
>>
>> In our case, we're using Pyramid and SQLAlchemy, so the decision to use
>> the DB was because it make adding our our own event processing logic almost
>> trivial. It also allows us to have a relational schema for logging that
>> corresponds somewhat to the logic of the application, and we're logging
>> application specific details. We may push this layer into WSGI middleware,
>> not sure about that. Pyramid has some really nice facilities for hooking
>> into the life cycle of the request, if you make a custom request factory,
>> you can connect beginning and end of life cycle callbacks. Another design
>> pattern of Pyramid that is useful for this is the Zope 3 style
>> views-as-classes, which are multi-adapters of request and context and are
>> always instantiated, called, and destroyed once per request ( no shared
>> state between threads at all). A happy side effect of this is that it's
>> safe to store your intermediate results of what the view is doing as
>> attributes on the view. We do this, and we store the a ref to the view on
>> the request object itself. This means that the end of life callback can
>> introspect the view to figure out exactly what went on during this request.
>>
>> The main driver for the logging is the non-repudiation, so by logging the
>> http request, we collect user id, time, ip, url, etc, but this gets
>> connected to entries that log file downloads, file uploads, reading the
>> disclaimers, editing the user accounts, and activating the user accounts.
>> Those all have their own schemas, but that is quite easy to implement on
>> the framework we're using. So by putting it the db, it's very easy for us
>> to provide the client ( and their legal counsel ) a record that shows they
>> did their due diligence in making sure that users read the terms and
>> conditions before uploading, etc. Hopefully that clarifies that design
>> decision.
>>
>
> That makes sense; you may also want to consider having the application
> servers generate an HMAC or signature for log messages if non-repudiation
> is a goal; without that there is no evidence that a DBA didn't modify the
> log entry (this is also a consideration for any logging format).  From an
> ops perspective, you may want to have some scripts handy for conversion
> into a more traditional logging format.
>
>
>>
>>
>>> One of the logs is of each request for a pyramid view ( essentially any
>>>> kind of
>>>> complete page, does not include requests for css/javascript/images ). I
>>>> had
>>>> read that it's a good idea to just log the whole http request, but of
>>>> course that has the session token in it.
>>>
>>>
>>> In general, logging the entire HTTP request outside of a debug
>>> environment is unsafe since you invariably end up storing user credentials,
>>> session state data, and other sensitive data outside of the application and
>>> its database.  Best case scenario, this is a violation of best practice,
>>> worst case scenario it is a regulatory or compliance issue.  If you go that
>>> route, make sure you are properly sanitizing the fields that contain
>>> sensitive data before writing them to the database.
>>>
>>
>> Is wiping out the cookies header and any password fields sufficient for
>> this?
>>
>
> The cookie header, secret user credential components (passwords, auth
> tokens, etc), but also consider CSRF or session tokens that may be embedded
> in a request body as well.
>
>
>> I was thinking about attack awareness, and thought that monitoring POST
>> vars would be good, because then one can detect repeated attempts to fudge
>> them. But then we must be careful never to log any of the password
>> submission variables.
>>
>>
>>>
>>>> I'm just wondering whether I should be concerned about the fact that if
>>>> a compromise allowed someone to
>>>> read the db, could they hijack an admin users session?
>>>>
>>>
>>> In general, yes.  Note that in this case, you should be extending beyond
>>> the consideration of an external attacker and consider what a malicious
>>> user might be able to accomplish.  If your authentication scheme is
>>> designed properly, and you have proper separation of duties within your
>>> environment, a system administrator or DBA should not be able to violate
>>> the non-repudiation aspect of the design without resorting to collusion.
>>>
>>
>> Great, thanks.
>>
>>
>>>
>>>
>>>
>>>> Which has me trying to figure out if that matters, given that if they
>>>> can
>>>> read the db, they're pretty far in. I could redact the session token (
>>>> and
>>>> all cookies ) before logging, but would this have potential negatives
>>>> for
>>>> forensics?
>>>>
>>>
>>> Generating a proper audit trail extends beyond capturing the content of
>>> an HTTP request; it would be more effective to generate an audit record of
>>> every privileged action a user performs (or, if necessary, of every action
>>> performed).  Generating this type of an audit capability serves two
>>> purposes:
>>>
>>> First, it lets you meet any requirements you might have around executing
>>> application level forensics of what happened.  Having discrete, clearly
>>> documented, and granular audit capabilities make it clear which subject
>>> performed with operation on which object, and the context in which that
>>> operation performed, without having to sift through HTTP request blobs in
>>> log files.
>>>
>>>
>> Right, that's what we're accomplishing through the related schema of http
>> requests to user actions.
>>
>>
>>> Second, it provides data that can be used to make an application attack
>>> aware, which increases the likelihood of detecting and stopping an attack
>>> or compromise.
>>>
>>> You can read more about attack aware applications here:
>>>  - https://www.owasp.org/index.php/OWASP_AppSensor_Project (especially
>>> the detection points)
>>>  -
>>> http://blog.mozilla.com/webappsec/2011/02/02/attack-aware-applications/
>>>  - Mozilla's AMO uses CEF logging to implement attack awareness if you
>>> want some examples of how to do this in python (although that is specific
>>> to our use of Arcsight)
>>>
>>>
>>
>> I am planning on looking further into that, Python's WSGI system is ideal
>> for this as the middleware layer before the application can access the same
>> db, look at the log events, and make decisions on allowing/disallowing
>> incoming requests before any of the main application logic is even
>> called.  I will definitely take a look at those!
>>
>>
> I forgot the link to AMO:
> https://github.com/mozilla/zamboni/
>
> You can take a look at how CEF logging is implemented by looking at the
> logging components there.
>
>
>> And thanks again for the detailed response.
>>
>> Iain
>>
>>
>

From yvanboily at gmail.com  Mon Feb 13 17:49:46 2012
From: yvanboily at gmail.com (Yvan Boily)
Date: Mon, 13 Feb 2012 09:49:46 -0800
Subject: [Owasp-vancouver] Meeting
Message-ID: <CAD_ZbKwQnGf3HFCCoYbHqdZ827_sCO_Bz5wjkdbVQhPAS-iq4w@mail.gmail.com>

*OWASP Chapter Meeting Announcement*

The next OWASP Vancouver meeting will be held on February 20th, and Ping
Identity be our host.

*How to own a BILLION identities in less time than it takes to boil an egg
*
*Speaker:* Rui Pereira, WaveFront Consulting Group

*Date & Time:* Monday, February 20th, 2012 @ 5:30pm
*
Abstract*
Unless you've been living under a rock over the last few years, you can't
help but notice that a lot of hacking seems to be going on - and personal
information like e-mail addresses, passwords and credit card numbers are
going out the door at several large organizations (Sony anyone?). This
presentation deals with a web application hacking technique called SQL
Injection (SQLi), and how it was used in various recent hacks such as
Epsilon, Heartland Payment Systems, Pirate Bay, eHarmony, Sony and HBGary.

We cover the how's of it: How it is done and how you can protect your
organization from being the next big (or little) name on an ever-growing
list. This presentation was also given at the IT4BC conference earlier this
year.
*
Registration:* Registration is strongly recommended since an invite will be
extended to other groups to try to improve participation in OWASP. If space
runs out, preference will be given to those who have registered!
*
Please register at:*
https://docs.google.com/spreadsheet/viewform?formkey=dHZSeTY1ZnFKTFo1elBRZ3BsenNvRnc6MQ(Registration
details are not retained after the meeting, however a sign-up
sheet will be available for those claiming CPEs).
*
Location:* Ping Identity, 200 - 788 Beatty St, Vancouver
*
About Ping Identity*
Ping Identity has generously offered their downtown office space, located
on the corner of Beatty and Robson, to host our chapters meetings moving
forward. The office is 6000sq/ft of a mostly open floor plan, so we should
be able to accommodate a large group.

From yvanboily at gmail.com  Tue Feb 14 04:54:39 2012
From: yvanboily at gmail.com (Yvan Boily)
Date: Mon, 13 Feb 2012 20:54:39 -0800
Subject: [Owasp-vancouver] Meeting
In-Reply-To: <CAD_ZbKwQnGf3HFCCoYbHqdZ827_sCO_Bz5wjkdbVQhPAS-iq4w@mail.gmail.com>
References: <CAD_ZbKwQnGf3HFCCoYbHqdZ827_sCO_Bz5wjkdbVQhPAS-iq4w@mail.gmail.com>
Message-ID: <CAD_ZbKw__3Nndzn-eKirUpd4R7UMQ6eg9=YtyWMU6GBmM=rcNA@mail.gmail.com>

Apparently the registration link was broken; try this one:

https://docs.google.com/spreadsheet/viewform?formkey=dHZSeTY1ZnFKTFo1elBRZ3BsenNvRnc6MQ#gid=0

On Mon, Feb 13, 2012 at 9:49 AM, Yvan Boily <yvanboily at gmail.com> wrote:

> *OWASP Chapter Meeting Announcement*
>
> The next OWASP Vancouver meeting will be held on February 20th, and Ping
> Identity be our host.
>
> *How to own a BILLION identities in less time than it takes to boil an egg
> *
> *Speaker:* Rui Pereira, WaveFront Consulting Group
>
> *Date & Time:* Monday, February 20th, 2012 @ 5:30pm
> *
> Abstract*
> Unless you've been living under a rock over the last few years, you can't
> help but notice that a lot of hacking seems to be going on - and personal
> information like e-mail addresses, passwords and credit card numbers are
> going out the door at several large organizations (Sony anyone?). This
> presentation deals with a web application hacking technique called SQL
> Injection (SQLi), and how it was used in various recent hacks such as
> Epsilon, Heartland Payment Systems, Pirate Bay, eHarmony, Sony and HBGary.
>
> We cover the how's of it: How it is done and how you can protect your
> organization from being the next big (or little) name on an ever-growing
> list. This presentation was also given at the IT4BC conference earlier this
> year.
> *
> Registration:* Registration is strongly recommended since an invite will
> be extended to other groups to try to improve participation in OWASP. If
> space runs out, preference will be given to those who have registered!
> *
> Please register at:*
> https://docs.google.com/spreadsheet/viewform?formkey=dHZSeTY1ZnFKTFo1elBRZ3BsenNvRnc6MQ(Registration details are not retained after the meeting, however a sign-up
> sheet will be available for those claiming CPEs).
> *
> Location:* Ping Identity, 200 - 788 Beatty St, Vancouver
> *
> About Ping Identity*
> Ping Identity has generously offered their downtown office space, located
> on the corner of Beatty and Robson, to host our chapters meetings moving
> forward. The office is 6000sq/ft of a mostly open floor plan, so we should
> be able to accommodate a large group.
>

