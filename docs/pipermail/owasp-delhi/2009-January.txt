From bkmitra72 at hotmail.com  Thu Jan  1 11:38:56 2009
From: bkmitra72 at hotmail.com (bijoy mitra)
Date: Thu, 1 Jan 2009 22:08:56 +0530
Subject: [Owasp-delhi] Wish you a Very Happy & Prosperous New Year 2009 !
In-Reply-To: <DA591A14047E4563AD952E473481A869@souravd>
References: <DA591A14047E4563AD952E473481A869@souravd>
Message-ID: <BLU105-W45009D6297F64BBFC70A54A0E50@phx.gbl>


Wish you a Very Happy & Prosperous New Year 2009 _BK Mitra

From: nitins at cybermedia.co.inTo: owasp-delhi at lists.owasp.orgDate: Wed, 31 Dec 2008 18:57:10 +0530Subject: [Owasp-delhi] Wish you a Very Happy & Prosperous New Year 2009 !
Dear Patron,
 
Trust that you are doing well!As an esteemed member of OWASP Delhi Chapter we wanted to wish you a Very Happy and Prosperous New Year 2009. 
 
Our strength has been growing on daily basis and as of date we have patronization of over 326 members who share there research, experiences and guidelines with there continuous regular postings on message boards. On the Last day of the year 2008 we would like to take this opportunity to thank all the members for the support that they have extended in making this year successful once again
 
Further more just to recap the activities and the new ventures which Delhi Chapter had entered into are shared for everyone's notice :
 
q       The year started with the launch of the First Application Security Conference in India by OWASP Delhi Chapter and was customized for the benefit of the Indian geography addressing critical pain points and issues which we deal with on day to day basis. The conference "OWASP AppSec India Conference 2008" was held in New Delhi on 19th and 20th August, 2008 at India Habitat Centre, and received an overwhelming response from all corners of India with attendance of almost 350 delegates and well over 150 companies involved in the business. The Star Speakers at the conference included even Dr. Kamlesh Bajaj who Heads DSCI which is a NASSCOM initiative, and the hands-on workshops included world acclaimed speakers and instructors Like Jason Li (OWASP Foundation), Shreeraj Shah (Blue Infy), Mano Paul (SecuRisk Solutions), Nishchal Bhalla (Security Compass), Gaurav Kumar (Microsoft) and others..The conference was also well sponsored and supported by HP Software, Paladion, SDGC Software, Armorise Technologies, Torrid Networks, Ostfold Software, ISC2, Biztech, Event Avenue.The photographs and details are available at https://www.owasp.org/index.php/OWASP_AppSec_India_Conference_2008#Official_Event_Supporters.2FPartners With this overwhelming success the Second Edition is being planned to be hosted in September, 2009 and the dates would be notified shortly to enable members in blocking there calendars. This time it will be even bigger conference with International Participation growing as OWASP Delhi Chapter will be bringing the OWASP Application Security Asia Conference 2009 which will be held in India. 
q       Delhi Chapter made its presence felt by the participation of our Director Dhruv Soi being invited to share his knowledge at the recently held Application Security Asia Conference 2008 held in Taiwan. All appreciated the efforts and with contributions coming in from all other Chapter Leaders based out in different countries. 
q       Continuing on the effort regular chapter meetings became a knowledge sharing point for all the members and 
?        The first chapter meeting was held on October 18th, 2008 at Noida and was hosted by Sopra Group under the Aegis of OWASP Delhi Chapter, the meeting was attended by well over 80 members and key topics discussed included Web Services Security, Browser Based Attacks, XSS & CSRF, etc.Click here to access the presentations and photographs from the meeting : http://www.owasp.org/index.php/OWASP_Delhi_Meeting_October_18th_2008  
?        The second Chapter Meeting was held on November 29th, 2008 at Noida and was hosted by Tata Consultancy Services under the Aegis of OWASP Delhi Chapter, the meeting again was attended by well over 70members and key topics in the discussion forum included ESAPI, Flash Vulnerabilities and Exploits, Authentication Attacks, etc.The Presentations and Photographs are available at : https://www.owasp.org/index.php/OWASP_Delhi_Meeting_November_29th_2008
q       Highlights of the year came when our Directors Puneet Mehta and Dhruv Soi were nominated in the OWASP Global Committees in October 2008, to share there knowledge and inputs in the various projects being undertaken. 
q       Delhi Chapter to further the initiatives in the coming New Year has formed its committees for Communications and Events and awaits to have responses from members who would like to take voluntary part in new committees which can be formed. 
 
It has indeed been an eventful year for OWASP Delhi Chapter with all the help from its members. We would like to have more and more meaningful interaction and take suggestions from your side to make the coming New Year 2009 even bigger. We would request you to revert to us on the various activities which we can together perform for the knowledge gain and benefit of all the members associated with the chapter by way of:
 

Suggestion on Topics which we should cover in our regular meetings 
Should we organize Half Yearly workshops / trainings for benefit of all 
Sharing your research with other members 
Your suggestions on which other activities we can perform benefit of all. 
Donating / Sponsoring the activities of Delhi Chapter. 
Your valued feedback will be precious for furthering our initiatives in the coming New Year and we await to hear from you on the above topics.
 
Once Again a Very Happy and Prosperous Year 2009!!
 
Best RegardsNitin Saxena
Lead Events Committee
OWASP Delhi Chapter
 
 
 
 
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090101/ecfe908d/attachment.html 

From ankit.gupta at torridnet.com  Thu Jan  1 11:58:53 2009
From: ankit.gupta at torridnet.com (Ankit Gupta)
Date: Thu, 1 Jan 2009 22:28:53 +0530
Subject: [Owasp-delhi] Happy New Year..!!
Message-ID: <cee29b640901010858g3440fd3chc5a873e702bd1159@mail.gmail.com>

Hello Everyone,


A book has been opened today. Its pages are blank. We are going to put words
on them ourselves. The book is called Opportunity and its first chapter is
New Year's Day.

Cheers to a new year and another chance for us to get it right.


-- 
Thanks & Regards,
Ankit Gupta
Threat Research Analyst
Torrid Networks Pvt. Ltd.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090101/13722643/attachment.html 

From pranav.joshi at kriss.in  Fri Jan  2 03:16:39 2009
From: pranav.joshi at kriss.in (Pranav Joshi)
Date: Fri, 2 Jan 2009 13:46:39 +0530 (IST)
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <cee29b640901010858g3440fd3chc5a873e702bd1159@mail.gmail.com>
References: <cee29b640901010858g3440fd3chc5a873e702bd1159@mail.gmail.com>
Message-ID: <43362.121.241.121.188.1230884199.squirrel@kriss.in>

Hello Everyone.

It's been quite a while since security issues with MD5 algorithm started
cropping up regarding reproducible hash collisions (a.k.a Birthday
Attack), this one ups the ante by driving the final nail in it's coffin.

Since, MD5 is also used in signing certificates the browsers will have no
way of telling the difference between a genuine and a rogue website unless
other hashing algorithms like SHA-1 are also used.

http://blogs.computerworld.com/md5_ca_hack_and_the_ps3

Warm Regards,
Pranav Joshi
Consultant - Information Security [CISA/GHTQ/GWAS/Security+]
Email: pranav.joshi at kriss.in
Phone: +91-9958967766


From nileshkumar83 at gmail.com  Tue Jan  6 00:41:10 2009
From: nileshkumar83 at gmail.com (nileshkumar83 at gmail.com)
Date: Tue, 6 Jan 2009 11:11:10 +0530
Subject: [Owasp-delhi] Songs.pk can be used to hack Indian Networks!
Message-ID: <ee7382370901052141l3ca2b280ka516999db69da117@mail.gmail.com>

Hi All!

   I just went through an article this morning that the hugely polpular song
site among Indians www.songs.pk can be used to make ypur PCs botnets or
zombies by the Pakistani hackers. So avoid the site for the time being at
least!

Just have a look at the article:

http://www.rediff.com/news/2009/jan/06mumterror-pakistan-india-hackers-internet-cyber-war.htm


-- 
Thanks & Regards,
Nilesh Kumar,
Security Specialist | Governance Risk Compliance
www.linkedin.com/in/nileshkumar83
Mobile- +91-9891524880
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090106/054cdeb2/attachment.html 

From muxical.geek at gmail.com  Tue Jan  6 02:04:15 2009
From: muxical.geek at gmail.com (Bipin Upadhyay)
Date: Tue, 06 Jan 2009 12:34:15 +0530
Subject: [Owasp-delhi] [Owasp-Mumbai] Songs.pk can be used to hack
	Indian Networks!
In-Reply-To: <ee7382370901052141l3ca2b280ka516999db69da117@mail.gmail.com>
References: <ee7382370901052141l3ca2b280ka516999db69da117@mail.gmail.com>
Message-ID: <4963026F.9060808@gmail.com>

Although I do/dare NOT deny the possibilities; the particular article, 
however, is a nice work of imagination of a news and sensation hungry 
news(???) portal, IMHO.

People fear what they don't understand; and the media, instead of 
playing it's role responsibly, uses the fact to "sell" news regularly. 
The thing that worries me more is that I do not wish another Germany[1] 
or Britain[2] to happen here.

--
Regards,
Bipin Upadhyay.
http//projectbee.org/

[1]. 
http://gizmodo.com/288500/germany-bans-hacker-tools-+-punishment-half-that-of-kiddie-porn
[2]. http://www.timesonline.co.uk/tol/news/politics/article5439604.ece

nileshkumar83 at gmail.com wrote:
> Hi All!
>  
>    I just went through an article this morning that the hugely 
> polpular song site among Indians www.songs.pk <http://www.songs.pk/> 
> can be used to make ypur PCs botnets or zombies by the Pakistani 
> hackers. So avoid the site for the time being at least!
>  
> Just have a look at the article:
>  
> http://www.rediff.com/news/2009/jan/06mumterror-pakistan-india-hackers-internet-cyber-war.htm
>
>
> -- 
> Thanks & Regards,
> Nilesh Kumar,
> Security Specialist | Governance Risk Compliance
> www.linkedin.com/in/nileshkumar83 
> <http://www.linkedin.com/in/nileshkumar83>
> Mobile- +91-9891524880
> ------------------------------------------------------------------------
>
> _______________________________________________
> OWASP-Mumbai mailing list
> OWASP-Mumbai at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-mumbai
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090106/c6e2d39f/attachment.html 

From nileshkumar83 at gmail.com  Wed Jan  7 01:07:08 2009
From: nileshkumar83 at gmail.com (nileshkumar83 at gmail.com)
Date: Wed, 7 Jan 2009 11:37:08 +0530
Subject: [Owasp-delhi] [Owasp-Mumbai] Songs.pk can be used to hack
	Indian Networks!
In-Reply-To: <7891b1dc0901061714h1887ba87wcdc4a95dca6a5243@mail.gmail.com>
References: <ee7382370901052141l3ca2b280ka516999db69da117@mail.gmail.com>
	<!&!AAAAAAAAAAAYAAAAAAAAAPadYVTWLldFnzaAxgxCoUXCgAAAEAAAAO5pftPL5l1PgsfyFEzmnRYBAAAAAA==@gmail.com>
	<7891b1dc0901061714h1887ba87wcdc4a95dca6a5243@mail.gmail.com>
Message-ID: <ee7382370901062207u402902cwf393caab53fef0@mail.gmail.com>

Hi Chintan, Yash,


     I share my views with Mr. Yogesh Badwe that it's not an issue of what
the Indian,Pakistani....or African media is saying and against whom. The
matter is if there is smoke...there 'might be' fire somewhere. And if not,
we as security professionals should remain updated of any fake/true news.
Any 'hoax bomb call' is also a matter of great concern.

This community is for sharing any fake/unfake news and we should not simply
put is as media overhype. I got the news and put here..just simple. At least
we can be careful and this kind of thing might occur in the current scenario
of Indo-Pak, at least they can intesify at the time being. This is not out
of the world thing.

Anyways, thanks to all learned people for an enlightening discussion.



On Wed, Jan 7, 2009 at 6:44 AM, chintan dave <davechintan at gmail.com> wrote:

> Hi,
> @ Nilesh - First of all I would like to thank you to take time off your
> busy schedule to share news with the group.
>
> I do not understand what is wrong with us? Why do we just keep on
> criticizing?
>
> I think everyone on the group is mature enough to identify the so called
> "Over hyped" news. If you think that the news is crap, fine, just ignore, no
> one needs your personal advice on what media should do and what not!
>
> I guess we all are here to share facts or may be opinions when explicitly
> solicited by other group members. Its always debatable whether what media
> reported is correct or not and the reader is "the" judge.
>
> I'd appreciate if we can stop this bullshit of critizing. If we can't
> admire people sharing things, lets not discourage them. If its not useful
> for you, ignore it.
>
>   On Tue, Jan 6, 2009 at 9:51 PM, Yash Kadakia <teccoder at gmail.com> wrote:
>
>>    Hi Nilesh,
>>
>>
>>
>> First off, I would not believe anything the Indian (or most International)
>> media have to say about Cyber Security, unless they are quoting a reliable
>> *named* source.
>>
>>
>>
>> Secondly, this is nothing more than the media taking a simple concept such
>> as a *possibly *infected web-site and turning it into a  indo-pak issue.
>>
>>
>>
>> As a fact I can tell you that in this last week, I have run across
>> web-sites from at least 7 different LARGE group of companies that had their
>> web-sites compromised and malicious JavaScript injected into it. The
>> malicious JavaScript was in-turn attempting drive-by-downloads and common IE
>> exploits to compromise users. This definitely doesn't mean that those
>> companies are targeting Indians, Pakistanis or anyone else. It is simply an
>> IT Incident that is most likely not connected to politics in any way.
>>
>>
>>
>> --
>>
>> Yash Kadakia
>>
>>
>>
>> *From:* owasp-mumbai-bounces at lists.owasp.org [mailto:
>> owasp-mumbai-bounces at lists.owasp.org] *On Behalf Of *
>> nileshkumar83 at gmail.com
>> *Sent:* Tuesday, January 06, 2009 11:11 AM
>> *To:* owasp-delhi at lists.owasp.org; owasp-mumbai at lists.owasp.org
>> *Subject:* [Owasp-Mumbai] Songs.pk can be used to hack Indian Networks!
>>
>>
>>
>> Hi All!
>>
>>
>>
>>    I just went through an article this morning that the hugely polpular
>> song site among Indians www.songs.pk can be used to make ypur PCs botnets
>> or zombies by the Pakistani hackers. So avoid the site for the time being at
>> least!
>>
>>
>>
>> Just have a look at the article:
>>
>>
>>
>>
>> http://www.rediff.com/news/2009/jan/06mumterror-pakistan-india-hackers-internet-cyber-war.htm
>>
>>
>>
>> --
>> Thanks & Regards,
>> Nilesh Kumar,
>> Security Specialist | Governance Risk Compliance
>> www.linkedin.com/in/nileshkumar83
>> Mobile- +91-9891524880
>>
>> _______________________________________________
>> OWASP-Mumbai mailing list
>> OWASP-Mumbai at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-mumbai
>>
>>
>
>
> --
> Regards,
> Chintan Dave,
> KPMG Singapore
> LinkedIn Profile: http://www.linkedin.com/in/chintandave
> Blog:http://davechintan.blogspot.com
>



-- 
Thanks & Regards,
Nilesh Kumar,
Security Specialist | Governance Risk Compliance
www.linkedin.com/in/nileshkumar83
Mobile- +91-9891524880
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090107/a50e1e89/attachment.html 

From saurabh.rai at torridnet.com  Wed Jan  7 01:50:28 2009
From: saurabh.rai at torridnet.com (Rai, Saurabh)
Date: Wed, 7 Jan 2009 12:20:28 +0530
Subject: [Owasp-delhi] OWASP Delhi Chapter January Meeting
Message-ID: <408696104321095430209@vikriya-907d762>

An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090107/d383425c/attachment.html 

From vaibhavaher at gmail.com  Wed Jan  7 07:44:05 2009
From: vaibhavaher at gmail.com (vaibhav aher)
Date: Wed, 7 Jan 2009 18:14:05 +0530
Subject: [Owasp-delhi] [Owasp-Mumbai] Songs.pk can be used to hack
	Indian Networks!
In-Reply-To: <ee7382370901062207u402902cwf393caab53fef0@mail.gmail.com>
References: <ee7382370901052141l3ca2b280ka516999db69da117@mail.gmail.com>
	<!&!AAAAAAAAAAAYAAAAAAAAAPadYVTWLldFnzaAxgxCoUXCgAAAEAAAAO5pftPL5l1PgsfyFEzmnRYBAAAAAA==@gmail.com>
	<7891b1dc0901061714h1887ba87wcdc4a95dca6a5243@mail.gmail.com>
	<ee7382370901062207u402902cwf393caab53fef0@mail.gmail.com>
Message-ID: <6060d75e0901070444g22730011s3f772528943c7be9@mail.gmail.com>

Hello Nilesh,I totally agree with you. There is a cyber war going on ... may
be most of them here dont go to ungerground.... where you will see the
actual  scenario.

Regards
Vaibhav Aher
Security Consultant


On Wed, Jan 7, 2009 at 11:37 AM, <nileshkumar83 at gmail.com> wrote:

> Hi Chintan, Yash,
>
>
>      I share my views with Mr. Yogesh Badwe that it's not an issue of what
> the Indian,Pakistani....or African media is saying and against whom. The
> matter is if there is smoke...there 'might be' fire somewhere. And if not,
> we as security professionals should remain updated of any fake/true news.
> Any 'hoax bomb call' is also a matter of great concern.
>
> This community is for sharing any fake/unfake news and we should not simply
> put is as media overhype. I got the news and put here..just simple. At least
> we can be careful and this kind of thing might occur in the current scenario
> of Indo-Pak, at least they can intesify at the time being. This is not out
> of the world thing.
>
> Anyways, thanks to all learned people for an enlightening discussion.
>
>
>
> On Wed, Jan 7, 2009 at 6:44 AM, chintan dave <davechintan at gmail.com>wrote:
>
>> Hi,
>> @ Nilesh - First of all I would like to thank you to take time off your
>> busy schedule to share news with the group.
>>
>> I do not understand what is wrong with us? Why do we just keep on
>> criticizing?
>>
>> I think everyone on the group is mature enough to identify the so called
>> "Over hyped" news. If you think that the news is crap, fine, just ignore, no
>> one needs your personal advice on what media should do and what not!
>>
>> I guess we all are here to share facts or may be opinions when explicitly
>> solicited by other group members. Its always debatable whether what media
>> reported is correct or not and the reader is "the" judge.
>>
>> I'd appreciate if we can stop this bullshit of critizing. If we can't
>> admire people sharing things, lets not discourage them. If its not useful
>> for you, ignore it.
>>
>>   On Tue, Jan 6, 2009 at 9:51 PM, Yash Kadakia <teccoder at gmail.com>wrote:
>>
>>>    Hi Nilesh,
>>>
>>>
>>>
>>> First off, I would not believe anything the Indian (or most
>>> International) media have to say about Cyber Security, unless they are
>>> quoting a reliable *named* source.
>>>
>>>
>>>
>>> Secondly, this is nothing more than the media taking a simple concept
>>> such as a *possibly *infected web-site and turning it into a  indo-pak
>>> issue.
>>>
>>>
>>>
>>> As a fact I can tell you that in this last week, I have run across
>>> web-sites from at least 7 different LARGE group of companies that had their
>>> web-sites compromised and malicious JavaScript injected into it. The
>>> malicious JavaScript was in-turn attempting drive-by-downloads and common IE
>>> exploits to compromise users. This definitely doesn't mean that those
>>> companies are targeting Indians, Pakistanis or anyone else. It is simply an
>>> IT Incident that is most likely not connected to politics in any way.
>>>
>>>
>>>
>>> --
>>>
>>> Yash Kadakia
>>>
>>>
>>>
>>> *From:* owasp-mumbai-bounces at lists.owasp.org [mailto:
>>> owasp-mumbai-bounces at lists.owasp.org] *On Behalf Of *
>>> nileshkumar83 at gmail.com
>>> *Sent:* Tuesday, January 06, 2009 11:11 AM
>>> *To:* owasp-delhi at lists.owasp.org; owasp-mumbai at lists.owasp.org
>>> *Subject:* [Owasp-Mumbai] Songs.pk can be used to hack Indian Networks!
>>>
>>>
>>>
>>> Hi All!
>>>
>>>
>>>
>>>    I just went through an article this morning that the hugely polpular
>>> song site among Indians www.songs.pk can be used to make ypur PCs
>>> botnets or zombies by the Pakistani hackers. So avoid the site for the time
>>> being at least!
>>>
>>>
>>>
>>> Just have a look at the article:
>>>
>>>
>>>
>>>
>>> http://www.rediff.com/news/2009/jan/06mumterror-pakistan-india-hackers-internet-cyber-war.htm
>>>
>>>
>>>
>>> --
>>> Thanks & Regards,
>>> Nilesh Kumar,
>>> Security Specialist | Governance Risk Compliance
>>> www.linkedin.com/in/nileshkumar83
>>> Mobile- +91-9891524880
>>>
>>> _______________________________________________
>>> OWASP-Mumbai mailing list
>>> OWASP-Mumbai at lists.owasp.org
>>> https://lists.owasp.org/mailman/listinfo/owasp-mumbai
>>>
>>>
>>
>>
>> --
>> Regards,
>> Chintan Dave,
>> KPMG Singapore
>> LinkedIn Profile: http://www.linkedin.com/in/chintandave
>> Blog:http://davechintan.blogspot.com
>>
>
>
>
> --
> Thanks & Regards,
> Nilesh Kumar,
> Security Specialist | Governance Risk Compliance
> www.linkedin.com/in/nileshkumar83
> Mobile- +91-9891524880
>
> _______________________________________________
> OWASP-Mumbai mailing list
> OWASP-Mumbai at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-mumbai
>
>


--
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090107/5ee9f863/attachment-0001.html 

From samrat.chatterji at tcs.com  Thu Jan  8 00:02:10 2009
From: samrat.chatterji at tcs.com (Samrat Chatterji)
Date: Thu, 8 Jan 2009 10:32:10 +0530
Subject: [Owasp-delhi] [Owasp-Mumbai] Songs.pk can be used to
 hack	Indian Networks!
In-Reply-To: <ee7382370901062207u402902cwf393caab53fef0@mail.gmail.com>
References: <ee7382370901052141l3ca2b280ka516999db69da117@mail.gmail.com>	<!&!AAAAAAAAAAAYAAAAAAAAAPadYVTWLldFnzaAxgxCoUXCgAAAEAAAAO5pftPL5l1PgsfyFEzmnRYBAAAAAA==@gmail.com>
	<7891b1dc0901061714h1887ba87wcdc4a95dca6a5243@mail.gmail.com>
	<ee7382370901062207u402902cwf393caab53fef0@mail.gmail.com>
Message-ID: <OFC9C6F63C.55961ED0-ON65257538.0019C8C6-65257538.001BB8C3@tcs.com>

Dear  OWASP LISTS,
Sincere apologies, if my view are a little offensive.
I suppose this group is for sharing core security related issues and 
concerns facing the Info-Sec world.But unfortunately this is turning into 
a simple friends group mailing list, where people discuss phoney issues, 
give abusive comments etc.
Senior Info-Sec people are on this list and members should respect there 
presence and follow a professional gesture, instead we see emotions,anger 
?? 

I propose that  we should restrain ourselves and think before we write a 
mail. I don't think that any of us would like to face a situation where 
you happen to meet your CEO/ CSO and he addresses you as " You are the 
person who abused a country in a global community's mailing list ?? "

Kindly think before we write. And also , be brief and concise to write 
only the relevant facts not beliefs/thoughts. For personal thoughts 
sharing we all have our personal e-mails, kindly use those. And yes .. If 
we are allowing abusive language on this list , i suppose we all should 
consider our motto as to , why are we on this list ???
Please contribute constructively to the list.
Kindly think about it... ALL MEMBERS !!!

Samrat Chatterji
Security Analyst
Tata Consultancy Services




nileshkumar83 at gmail.com 
Sent by: owasp-delhi-bounces at lists.owasp.org
01/07/2009 11:37 AM

To
"chintan dave" <davechintan at gmail.com>, "Yash Kadakia" 
<teccoder at gmail.com>, "Yogesh Badwe" <yogeshmb at gmail.com>
cc
owasp-delhi at lists.owasp.org, owasp-mumbai at lists.owasp.org
Subject
Re: [Owasp-delhi] [Owasp-Mumbai] Songs.pk can be used to hack   Indian 
Networks!






Hi Chintan, Yash,
 
 
     I share my views with Mr. Yogesh Badwe that it's not an issue of what 
the Indian,Pakistani....or African media is saying and against whom. The 
matter is if there is smoke...there 'might be' fire somewhere. And if not, 
we as security professionals should remain updated of any fake/true news. 
Any 'hoax bomb call' is also a matter of great concern.
 
This community is for sharing any fake/unfake news and we should not 
simply put is as media overhype. I got the news and put here..just simple. 
At least we can be careful and this kind of thing might occur in the 
current scenario of Indo-Pak, at least they can intesify at the time 
being. This is not out of the world thing.
 
Anyways, thanks to all learned people for an enlightening discussion.
 

 
On Wed, Jan 7, 2009 at 6:44 AM, chintan dave <davechintan at gmail.com> 
wrote:
Hi,
@ Nilesh - First of all I would like to thank you to take time off your 
busy schedule to share news with the group.

I do not understand what is wrong with us? Why do we just keep on 
criticizing? 

I think everyone on the group is mature enough to identify the so called 
"Over hyped" news. If you think that the news is crap, fine, just ignore, 
no one needs your personal advice on what media should do and what not! 

I guess we all are here to share facts or may be opinions when explicitly 
solicited by other group members. Its always debatable whether what media 
reported is correct or not and the reader is "the" judge.

I'd appreciate if we can stop this bullshit of critizing. If we can't 
admire people sharing things, lets not discourage them. If its not useful 
for you, ignore it.

On Tue, Jan 6, 2009 at 9:51 PM, Yash Kadakia <teccoder at gmail.com> wrote:
Hi Nilesh,
 
First off, I would not believe anything the Indian (or most International) 
media have to say about Cyber Security, unless they are quoting a reliable 
named source.
 
Secondly, this is nothing more than the media taking a simple concept such 
as a possibly infected web-site and turning it into a  indo-pak issue. 
 
As a fact I can tell you that in this last week, I have run across 
web-sites from at least 7 different LARGE group of companies that had 
their web-sites compromised and malicious JavaScript injected into it. The 
malicious JavaScript was in-turn attempting drive-by-downloads and common 
IE exploits to compromise users. This definitely doesn't mean that those 
companies are targeting Indians, Pakistanis or anyone else. It is simply 
an IT Incident that is most likely not connected to politics in any way.
 
--
Yash Kadakia
 
From: owasp-mumbai-bounces at lists.owasp.org [mailto:
owasp-mumbai-bounces at lists.owasp.org] On Behalf Of nileshkumar83 at gmail.com
Sent: Tuesday, January 06, 2009 11:11 AM
To: owasp-delhi at lists.owasp.org; owasp-mumbai at lists.owasp.org
Subject: [Owasp-Mumbai] Songs.pk can be used to hack Indian Networks!
 
Hi All!
 
   I just went through an article this morning that the hugely polpular 
song site among Indians www.songs.pk can be used to make ypur PCs botnets 
or zombies by the Pakistani hackers. So avoid the site for the time being 
at least!
 
Just have a look at the article:
 
http://www.rediff.com/news/2009/jan/06mumterror-pakistan-india-hackers-internet-cyber-war.htm


-- 
Thanks & Regards,
Nilesh Kumar,
Security Specialist | Governance Risk Compliance
www.linkedin.com/in/nileshkumar83
Mobile- +91-9891524880

_______________________________________________
OWASP-Mumbai mailing list
OWASP-Mumbai at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-mumbai




-- 
Regards,
Chintan Dave,
KPMG Singapore
LinkedIn Profile: http://www.linkedin.com/in/chintandave
Blog:http://davechintan.blogspot.com



-- 
Thanks & Regards,
Nilesh Kumar,
Security Specialist | Governance Risk Compliance
www.linkedin.com/in/nileshkumar83
Mobile- +91-9891524880_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-delhi

ForwardSourceID:NT0000553E 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you


-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090108/4a8f1d44/attachment-0001.html 

From muxical.geek at gmail.com  Thu Jan  8 04:59:07 2009
From: muxical.geek at gmail.com (Bipin Upadhyay)
Date: Thu, 08 Jan 2009 15:29:07 +0530
Subject: [Owasp-delhi] [Owasp-Mumbai] Songs.pk can be used to hack
	Indian Networks!
In-Reply-To: <19dbf6920901070508v7ef7c7b4xa097f7094d0d9069@mail.gmail.com>
References: <ee7382370901052141l3ca2b280ka516999db69da117@mail.gmail.com>	<!&!AAAAAAAAAAAYAAAAAAAAAPadYVTWLldFnzaAxgxCoUXCgAAAEAAAAO5pftPL5l1PgsfyFEzmnRYBAAAAAA==@gmail.com>	<7891b1dc0901061714h1887ba87wcdc4a95dca6a5243@mail.gmail.com>	<ee7382370901062207u402902cwf393caab53fef0@mail.gmail.com>	<6060d75e0901070444g22730011s3f772528943c7be9@mail.gmail.com>
	<19dbf6920901070508v7ef7c7b4xa097f7094d0d9069@mail.gmail.com>
Message-ID: <4965CE6B.70702@gmail.com>

Hello,
Akshay Mulkutkar wrote:
> Yes, we do have a lot of instances of Indian site being hacked by 
> pakistani nationals.
> Also, there's a lot of talk about how skilled the chinese hackers are.
>
> Indians are among the best brains in the industry.
> Isn't is time indian black hats launch a full-on aggressive against 
> the all pakistani establishments?
>
No, it's not! Not to mention that it's childish and stupid.
If you understand and appreciate Gandhiji's decision on on the 
Chauri-Chaura incident the you know what I mean. Violence (and offense 
in general) don't earn you anything in short term, apart from 
illusionary dominance. However, they affect both the parties/societies 
in long run, badly.

This analogy, IMHO, is true for cyber warfare too.

> Offence should be coupled with defence.
>
Yes! It has to be. But defense has a different definition altogether.

--
Regards,
Bipin Upadhyay.
http://projectbee.org/
> Regards,
> Akshay Mulkutkar
>
> On Wed, Jan 7, 2009 at 6:14 PM, vaibhav aher <vaibhavaher at gmail.com 
> <mailto:vaibhavaher at gmail.com>> wrote:
>
>     Hello Nilesh,
>     I totally agree with you. There is a cyber war going on ... may be
>     most of them here dont go to ungerground.... where you will see
>     the actual  scenario.
>
>     Regards
>     Vaibhav Aher
>     Security Consultant
>
>
>     On Wed, Jan 7, 2009 at 11:37 AM, <nileshkumar83 at gmail.com
>     <mailto:nileshkumar83 at gmail.com>> wrote:
>
>         Hi Chintan, Yash,
>          
>          
>              I share my views with Mr. Yogesh Badwe that it's not an
>         issue of what the Indian,Pakistani....or African media is
>         saying and against whom. The matter is if there is
>         smoke...there 'might be' fire somewhere. And if not, we as
>         security professionals should remain updated of any fake/true
>         news. Any 'hoax bomb call' is also a matter of great concern.
>          
>         This community is for sharing any fake/unfake news and we
>         should not simply put is as media overhype. I got the news and
>         put here..just simple. At least we can be careful and this
>         kind of thing might occur in the current scenario of Indo-Pak,
>         at least they can intesify at the time being. This is not out
>         of the world thing.
>          
>         Anyways, thanks to all learned people for an enlightening
>         discussion.
>          
>
>          
>         On Wed, Jan 7, 2009 at 6:44 AM, chintan dave
>         <davechintan at gmail.com <mailto:davechintan at gmail.com>> wrote:
>
>             Hi,
>             @ Nilesh - First of all I would like to thank you to take
>             time off your busy schedule to share news with the group.
>
>             I do not understand what is wrong with us? Why do we just
>             keep on criticizing?
>
>             I think everyone on the group is mature enough to identify
>             the so called "Over hyped" news. If you think that the
>             news is crap, fine, just ignore, no one needs your
>             personal advice on what media should do and what not!
>
>             I guess we all are here to share facts or may be opinions
>             when explicitly solicited by other group members. Its
>             always debatable whether what media reported is correct or
>             not and the reader is "the" judge.
>
>             I'd appreciate if we can stop this bullshit of critizing.
>             If we can't admire people sharing things, lets not
>             discourage them. If its not useful for you, ignore it.
>
>             On Tue, Jan 6, 2009 at 9:51 PM, Yash Kadakia
>             <teccoder at gmail.com <mailto:teccoder at gmail.com>> wrote:
>
>                 Hi Nilesh,
>
>                  
>
>                 First off, I would not believe anything the Indian (or
>                 most International) media have to say about Cyber
>                 Security, unless they are quoting a reliable _named_
>                 source.
>
>                  
>
>                 Secondly, this is nothing more than the media taking a
>                 simple concept such as a *possibly *infected web-site
>                 and turning it into a  indo-pak issue.
>
>                  
>
>                 As a fact I can tell you that in this last week, I
>                 have run across web-sites from at least 7 different
>                 LARGE group of companies that had their web-sites
>                 compromised and malicious JavaScript injected into it.
>                 The malicious JavaScript was in-turn attempting
>                 drive-by-downloads and common IE exploits to
>                 compromise users. This definitely doesn't mean that
>                 those companies are targeting Indians, Pakistanis or
>                 anyone else. It is simply an IT Incident that is most
>                 likely not connected to politics in any way.
>
>                  
>
>                 --
>
>                 Yash Kadakia
>
>                  
>
>                 *From:* owasp-mumbai-bounces at lists.owasp.org
>                 <mailto:owasp-mumbai-bounces at lists.owasp.org>
>                 [mailto:owasp-mumbai-bounces at lists.owasp.org
>                 <mailto:owasp-mumbai-bounces at lists.owasp.org>] *On
>                 Behalf Of *nileshkumar83 at gmail.com
>                 <mailto:nileshkumar83 at gmail.com>
>                 *Sent:* Tuesday, January 06, 2009 11:11 AM
>                 *To:* owasp-delhi at lists.owasp.org
>                 <mailto:owasp-delhi at lists.owasp.org>;
>                 owasp-mumbai at lists.owasp.org
>                 <mailto:owasp-mumbai at lists.owasp.org>
>                 *Subject:* [Owasp-Mumbai] Songs.pk can be used to hack
>                 Indian Networks!
>
>                  
>
>                 Hi All!
>
>                  
>
>                    I just went through an article this morning that
>                 the hugely polpular song site among Indians
>                 www.songs.pk <http://www.songs.pk/> can be used to
>                 make ypur PCs botnets or zombies by the Pakistani
>                 hackers. So avoid the site for the time being at least!
>
>                  
>
>                 Just have a look at the article:
>
>                  
>
>                 http://www.rediff.com/news/2009/jan/06mumterror-pakistan-india-hackers-internet-cyber-war.htm
>
>
>
>                 -- 
>                 Thanks & Regards,
>                 Nilesh Kumar,
>                 Security Specialist | Governance Risk Compliance
>                 www.linkedin.com/in/nileshkumar83
>                 <http://www.linkedin.com/in/nileshkumar83>
>                 Mobile- +91-9891524880
>
>
>                 _______________________________________________
>                 OWASP-Mumbai mailing list
>                 OWASP-Mumbai at lists.owasp.org
>                 <mailto:OWASP-Mumbai at lists.owasp.org>
>                 https://lists.owasp.org/mailman/listinfo/owasp-mumbai
>
>
>
>
>             -- 
>             Regards,
>             Chintan Dave,
>             KPMG Singapore
>             LinkedIn Profile: http://www.linkedin.com/in/chintandave
>             Blog:http://davechintan.blogspot.com
>             <http://davechintan.blogspot.com/>
>
>
>
>
>         -- 
>         Thanks & Regards,
>         Nilesh Kumar,
>         Security Specialist | Governance Risk Compliance
>         www.linkedin.com/in/nileshkumar83
>         <http://www.linkedin.com/in/nileshkumar83>
>         Mobile- +91-9891524880
>
>         _______________________________________________
>         OWASP-Mumbai mailing list
>         OWASP-Mumbai at lists.owasp.org <mailto:OWASP-Mumbai at lists.owasp.org>
>         https://lists.owasp.org/mailman/listinfo/owasp-mumbai
>
>
>
>
>     -- 
>
>
>
>     _______________________________________________
>     OWASP-Mumbai mailing list
>     OWASP-Mumbai at lists.owasp.org <mailto:OWASP-Mumbai at lists.owasp.org>
>     https://lists.owasp.org/mailman/listinfo/owasp-mumbai
>
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> OWASP-Mumbai mailing list
> OWASP-Mumbai at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-mumbai
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090108/3dc98352/attachment-0001.html 

From gunwant.s at gmail.com  Thu Jan  8 14:23:00 2009
From: gunwant.s at gmail.com (Gunwant Singh)
Date: Fri, 9 Jan 2009 00:53:00 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <43362.121.241.121.188.1230884199.squirrel@kriss.in>
References: <cee29b640901010858g3440fd3chc5a873e702bd1159@mail.gmail.com>
	<43362.121.241.121.188.1230884199.squirrel@kriss.in>
Message-ID: <44b2bd060901081123m745dacb2k655b1cd84035eec5@mail.gmail.com>

Hi,

Thanks for sharing the information. Just wanted to add some more to this.

As you said:
"Since, MD5 is also used in signing certificates the browsers will have no
way of telling the difference between a genuine and a rogue website unless
other hashing algorithms like SHA-1 are also used."

Fyi, even SHA-1 is susceptible to collision attacks. Practically even if MD5
or SHA-1 are broken, this vulnerability still can't be readily used to
exploit the certificate genuinity uptil 'Now'. Having said that I did not
mean that it can't be exploited at all thereby further exposing insecurity
on the internet. What I am saying is until some more research is done on how
to exploit this in relevance to the certificates, we can unwind and count on
atleast the certificates for now.

Some guys have come up with a PoC for the same, however not at a very
reasonable level.
May be you want to have a look at these:

http://www.cryptography.com/cnews/hash.html<https://houmail.halliburton.com/OWA/redir.aspx?C=52ed613179914f85a1b0ae5a68761f71&URL=http%3a%2f%2fwww.cryptography.com%2fcnews%2fhash.html>
http://www.securityfocus.com/columnists/488

IMHO I am sure this will be exploited with a solid rationale in the near
future.

Thanks,
-Gunwant Singh

On Fri, Jan 2, 2009 at 1:46 PM, Pranav Joshi <pranav.joshi at kriss.in> wrote:

> Hello Everyone.
>
> It's been quite a while since security issues with MD5 algorithm started
> cropping up regarding reproducible hash collisions (a.k.a Birthday
> Attack), this one ups the ante by driving the final nail in it's coffin.
>
> Since, MD5 is also used in signing certificates the browsers will have no
> way of telling the difference between a genuine and a rogue website unless
> other hashing algorithms like SHA-1 are also used.
>
> http://blogs.computerworld.com/md5_ca_hack_and_the_ps3
>
> Warm Regards,
> Pranav Joshi
> Consultant - Information Security [CISA/GHTQ/GWAS/Security+]
> Email: pranav.joshi at kriss.in
> Phone: +91-9958967766
>
> _______________________________________________
> Owasp-delhi mailing list
> Owasp-delhi at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-delhi
>



-- 
Gunwant Singh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090109/15832a4e/attachment.html 

From muxical.geek at gmail.com  Fri Jan  9 02:00:09 2009
From: muxical.geek at gmail.com (Bipin Upadhyay)
Date: Fri, 09 Jan 2009 12:30:09 +0530
Subject: [Owasp-delhi] [Owasp-Mumbai] Songs.pk can be used to hack
	Indian Networks!
In-Reply-To: <951df0580901082252q5987c967l6ad0a35346edaa87@mail.gmail.com>
References: <ee7382370901052141l3ca2b280ka516999db69da117@mail.gmail.com>	
	<!&!AAAAAAAAAAAYAAAAAAAAAPadYVTWLldFnzaAxgxCoUXCgAAAEAAAAO5pftPL5l1PgsfyFEzmnRYBAAAAAA==@gmail.com>	
	<7891b1dc0901061714h1887ba87wcdc4a95dca6a5243@mail.gmail.com>	
	<ee7382370901062207u402902cwf393caab53fef0@mail.gmail.com>	
	<6060d75e0901070444g22730011s3f772528943c7be9@mail.gmail.com>	
	<19dbf6920901070508v7ef7c7b4xa097f7094d0d9069@mail.gmail.com>	
	<4965CE6B.70702@gmail.com>
	<951df0580901082252q5987c967l6ad0a35346edaa87@mail.gmail.com>
Message-ID: <4966F5F9.1010806@gmail.com>

Dinesh,

My usage of "cyber warfare" was intended to be a sarcasm on media. I 
guess I could've been more clear, eh! :)

--Bipin.

dineshbareja at gmail.com wrote:
> folks we are all beating the cyber war drum so can anyone pl give me
> some info about this. I am totally clueless about technology and would
> like to see this too ! Where is the DDoS or Critical Infra attack
> happening. Where are multiple banks being looted.
> I mean in which state or city or village across India ?
>
> Guys if InfoSec professionals start believing that songs.pk has
> started a war we cannot blame the person who said thst Pak is
> currently waging war.
>
> It is common to have Pak comments and crap attempts to compromise
> Indian sites etc so if there is anything happening can someone share
> some authentic info and not just FUD statements.
>
> Take care
> Dinesh
>
> On 1/8/09, Bipin Upadhyay <muxical.geek at gmail.com> wrote:
>   
>> Hello,
>> Akshay Mulkutkar wrote:
>>     
>>> Yes, we do have a lot of instances of Indian site being hacked by
>>> pakistani nationals.
>>> Also, there's a lot of talk about how skilled the chinese hackers are.
>>>
>>> Indians are among the best brains in the industry.
>>> Isn't is time indian black hats launch a full-on aggressive against
>>> the all pakistani establishments?
>>>
>>>       
>> No, it's not! Not to mention that it's childish and stupid.
>> If you understand and appreciate Gandhiji's decision on on the
>> Chauri-Chaura incident the you know what I mean. Violence (and offense
>> in general) don't earn you anything in short term, apart from
>> illusionary dominance. However, they affect both the parties/societies
>> in long run, badly.
>>
>> This analogy, IMHO, is true for cyber warfare too.
>>
>>     
>>> Offence should be coupled with defence.
>>>
>>>       
>> Yes! It has to be. But defense has a different definition altogether.
>>
>> --
>> Regards,
>> Bipin Upadhyay.
>> http://projectbee.org/
>>     
>>> Regards,
>>> Akshay Mulkutkar
>>>
>>> On Wed, Jan 7, 2009 at 6:14 PM, vaibhav aher <vaibhavaher at gmail.com
>>> <mailto:vaibhavaher at gmail.com>> wrote:
>>>
>>>     Hello Nilesh,
>>>     I totally agree with you. There is a cyber war going on ... may be
>>>     most of them here dont go to ungerground.... where you will see
>>>     the actual  scenario.
>>>
>>>     Regards
>>>     Vaibhav Aher
>>>     Security Consultant
>>>
>>>
>>>     On Wed, Jan 7, 2009 at 11:37 AM, <nileshkumar83 at gmail.com
>>>     <mailto:nileshkumar83 at gmail.com>> wrote:
>>>
>>>         Hi Chintan, Yash,
>>>
>>>
>>>              I share my views with Mr. Yogesh Badwe that it's not an
>>>         issue of what the Indian,Pakistani....or African media is
>>>         saying and against whom. The matter is if there is
>>>         smoke...there 'might be' fire somewhere. And if not, we as
>>>         security professionals should remain updated of any fake/true
>>>         news. Any 'hoax bomb call' is also a matter of great concern.
>>>
>>>         This community is for sharing any fake/unfake news and we
>>>         should not simply put is as media overhype. I got the news and
>>>         put here..just simple. At least we can be careful and this
>>>         kind of thing might occur in the current scenario of Indo-Pak,
>>>         at least they can intesify at the time being. This is not out
>>>         of the world thing.
>>>
>>>         Anyways, thanks to all learned people for an enlightening
>>>         discussion.
>>>
>>>
>>>
>>>         On Wed, Jan 7, 2009 at 6:44 AM, chintan dave
>>>         <davechintan at gmail.com <mailto:davechintan at gmail.com>> wrote:
>>>
>>>             Hi,
>>>             @ Nilesh - First of all I would like to thank you to take
>>>             time off your busy schedule to share news with the group.
>>>
>>>             I do not understand what is wrong with us? Why do we just
>>>             keep on criticizing?
>>>
>>>             I think everyone on the group is mature enough to identify
>>>             the so called "Over hyped" news. If you think that the
>>>             news is crap, fine, just ignore, no one needs your
>>>             personal advice on what media should do and what not!
>>>
>>>             I guess we all are here to share facts or may be opinions
>>>             when explicitly solicited by other group members. Its
>>>             always debatable whether what media reported is correct or
>>>             not and the reader is "the" judge.
>>>
>>>             I'd appreciate if we can stop this bullshit of critizing.
>>>             If we can't admire people sharing things, lets not
>>>             discourage them. If its not useful for you, ignore it.
>>>
>>>             On Tue, Jan 6, 2009 at 9:51 PM, Yash Kadakia
>>>             <teccoder at gmail.com <mailto:teccoder at gmail.com>> wrote:
>>>
>>>                 Hi Nilesh,
>>>
>>>
>>>
>>>                 First off, I would not believe anything the Indian (or
>>>                 most International) media have to say about Cyber
>>>                 Security, unless they are quoting a reliable _named_
>>>                 source.
>>>
>>>
>>>
>>>                 Secondly, this is nothing more than the media taking a
>>>                 simple concept such as a *possibly *infected web-site
>>>                 and turning it into a  indo-pak issue.
>>>
>>>
>>>
>>>                 As a fact I can tell you that in this last week, I
>>>                 have run across web-sites from at least 7 different
>>>                 LARGE group of companies that had their web-sites
>>>                 compromised and malicious JavaScript injected into it.
>>>                 The malicious JavaScript was in-turn attempting
>>>                 drive-by-downloads and common IE exploits to
>>>                 compromise users. This definitely doesn't mean that
>>>                 those companies are targeting Indians, Pakistanis or
>>>                 anyone else. It is simply an IT Incident that is most
>>>                 likely not connected to politics in any way.
>>>
>>>
>>>
>>>                 --
>>>
>>>                 Yash Kadakia
>>>
>>>
>>>
>>>                 *From:* owasp-mumbai-bounces at lists.owasp.org
>>>                 <mailto:owasp-mumbai-bounces at lists.owasp.org>
>>>                 [mailto:owasp-mumbai-bounces at lists.owasp.org
>>>                 <mailto:owasp-mumbai-bounces at lists.owasp.org>] *On
>>>                 Behalf Of *nileshkumar83 at gmail.com
>>>                 <mailto:nileshkumar83 at gmail.com>
>>>                 *Sent:* Tuesday, January 06, 2009 11:11 AM
>>>                 *To:* owasp-delhi at lists.owasp.org
>>>                 <mailto:owasp-delhi at lists.owasp.org>;
>>>                 owasp-mumbai at lists.owasp.org
>>>                 <mailto:owasp-mumbai at lists.owasp.org>
>>>                 *Subject:* [Owasp-Mumbai] Songs.pk can be used to hack
>>>                 Indian Networks!
>>>
>>>
>>>
>>>                 Hi All!
>>>
>>>
>>>
>>>                    I just went through an article this morning that
>>>                 the hugely polpular song site among Indians
>>>                 www.songs.pk <http://www.songs.pk/> can be used to
>>>                 make ypur PCs botnets or zombies by the Pakistani
>>>                 hackers. So avoid the site for the time being at least!
>>>
>>>
>>>
>>>                 Just have a look at the article:
>>>
>>>
>>>
>>>
>>> http://www.rediff.com/news/2009/jan/06mumterror-pakistan-india-hackers-internet-cyber-war.htm
>>>
>>>
>>>
>>>                 --
>>>                 Thanks & Regards,
>>>                 Nilesh Kumar,
>>>                 Security Specialist | Governance Risk Compliance
>>>                 www.linkedin.com/in/nileshkumar83
>>>                 <http://www.linkedin.com/in/nileshkumar83>
>>>                 Mobile- +91-9891524880
>>>
>>>
>>>                 _______________________________________________
>>>                 OWASP-Mumbai mailing list
>>>                 OWASP-Mumbai at lists.owasp.org
>>>                 <mailto:OWASP-Mumbai at lists.owasp.org>
>>>                 https://lists.owasp.org/mailman/listinfo/owasp-mumbai
>>>
>>>
>>>
>>>
>>>             --
>>>             Regards,
>>>             Chintan Dave,
>>>             KPMG Singapore
>>>             LinkedIn Profile: http://www.linkedin.com/in/chintandave
>>>             Blog:http://davechintan.blogspot.com
>>>             <http://davechintan.blogspot.com/>
>>>
>>>
>>>
>>>
>>>         --
>>>         Thanks & Regards,
>>>         Nilesh Kumar,
>>>         Security Specialist | Governance Risk Compliance
>>>         www.linkedin.com/in/nileshkumar83
>>>         <http://www.linkedin.com/in/nileshkumar83>
>>>         Mobile- +91-9891524880
>>>
>>>         _______________________________________________
>>>         OWASP-Mumbai mailing list
>>>         OWASP-Mumbai at lists.owasp.org <mailto:OWASP-Mumbai at lists.owasp.org>
>>>         https://lists.owasp.org/mailman/listinfo/owasp-mumbai
>>>
>>>
>>>
>>>
>>>     --
>>>
>>>
>>>
>>>     _______________________________________________
>>>     OWASP-Mumbai mailing list
>>>     OWASP-Mumbai at lists.owasp.org <mailto:OWASP-Mumbai at lists.owasp.org>
>>>     https://lists.owasp.org/mailman/listinfo/owasp-mumbai
>>>
>>>
>>> ------------------------------------------------------------------------
>>>
>>> _______________________________________________
>>> OWASP-Mumbai mailing list
>>> OWASP-Mumbai at lists.owasp.org
>>> https://lists.owasp.org/mailman/listinfo/owasp-mumbai
>>>
>>>       
>>     


From pranav.joshi at kriss.in  Fri Jan  9 03:04:32 2009
From: pranav.joshi at kriss.in (Pranav Joshi)
Date: Fri, 9 Jan 2009 13:34:32 +0530 (IST)
Subject: [Owasp-delhi] SSL Broken..
Message-ID: <37698.121.241.121.185.1231488272.squirrel@kriss.in>

Hi Gunwant,

> Fyi, even SHA-1 is susceptible to collision attacks. Practically even if
MD5
> or SHA-1 are broken, this vulnerability still can't be readily used to
exploit the certificate genuinity uptil 'Now'

Absolutely, I completely agree with your point that SHA-1 is susceptible
to collisions.

The only difference between them is that colliding SHA-1 still a
mathematical probability of 2^63 computational cycles, So far nobody has
been able show a working collision for SHA-1.

> IMHO I am sure this will be exploited with a solid rationale in the near
future.

Absolutely.. It's just a matter of biding time till someone figures out a
way, IMHO, PS3's (Cell Based Systems) & GPUs are doing a remarkably
praiseworthy job of shrinking the computational time-line.

Having said that, the point I wanted to make regarding MD5 specifically
was that POCs and tools for attacking MD5 have been available for close to
3 years and these attacks have been a part of GHTQ curriculum. but nothing
was serious as this for MD5 uptil 'Now'... the metaphorical "final nail in
the coffin".

The best bet as of now is to rely on multiple hashing algorithms for
critical systems; so even if one collision is generated other hashes would
fail to match.

NOTE: I can't recollect the names of those tools mentioned here but if
someone is interested in knowing them lemme know, I'd be glad to re-lookup
the same.

Warm Regards,
Pranav Joshi
Consultant - Information Security [CISA/GHTQ/GWAS/Security+]
Email: pranav.joshi at kriss.in
Phone: +91-9958967766

> Hi,
>
> Thanks for sharing the information. Just wanted to add some more to
this.
>
> As you said:
> "Since, MD5 is also used in signing certificates the browsers will have
no
> way of telling the difference between a genuine and a rogue website
unless
> other hashing algorithms like SHA-1 are also used."
>
> Fyi, even SHA-1 is susceptible to collision attacks. Practically even if
MD5
> or SHA-1 are broken, this vulnerability still can't be readily used to
exploit the certificate genuinity uptil 'Now'. Having said that I did not
> mean that it can't be exploited at all thereby further exposing
insecurity
> on the internet. What I am saying is until some more research is done on
how
> to exploit this in relevance to the certificates, we can unwind and
count
> on
> atleast the certificates for now.
>
> Some guys have come up with a PoC for the same, however not at a very
reasonable level.
> May be you want to have a look at these:
>
> http://www.cryptography.com/cnews/hash.html<https://houmail.halliburton.com/OWA/redir.aspx?C=52ed613179914f85a1b0ae5a68761f71&URL=http%3a%2f%2fwww.cryptography.com%2fcnews%2fhash.html>
http://www.securityfocus.com/columnists/488
>
> IMHO I am sure this will be exploited with a solid rationale in the near
future.
>
> Thanks,
> -Gunwant Singh
>
> On Fri, Jan 2, 2009 at 1:46 PM, Pranav Joshi <pranav.joshi at kriss.in>
wrote:
>
>> Hello Everyone.
>> It's been quite a while since security issues with MD5 algorithm
started
>> cropping up regarding reproducible hash collisions (a.k.a Birthday
Attack), this one ups the ante by driving the final nail in it's
coffin.
>> Since, MD5 is also used in signing certificates the browsers will have
no
>> way of telling the difference between a genuine and a rogue website
unless
>> other hashing algorithms like SHA-1 are also used.
>> http://blogs.computerworld.com/md5_ca_hack_and_the_ps3
>> Warm Regards,
>> Pranav Joshi
>> Consultant - Information Security [CISA/GHTQ/GWAS/Security+]
>> Email: pranav.joshi at kriss.in
>> Phone: +91-9958967766
>> _______________________________________________
>> Owasp-delhi mailing list
>> Owasp-delhi at lists.owasp.org
>> https://lists.owasp.org/mailman/listinfo/owasp-delhi
>
>
>
> --
> Gunwant Singh
>















From gunwant.s at gmail.com  Mon Jan 12 11:41:11 2009
From: gunwant.s at gmail.com (Gunwant Singh)
Date: Mon, 12 Jan 2009 22:11:11 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <37698.121.241.121.185.1231488272.squirrel@kriss.in>
References: <37698.121.241.121.185.1231488272.squirrel@kriss.in>
Message-ID: <44b2bd060901120841q4426daeo607e7f7839dc5bb5@mail.gmail.com>

Pranav,

Thanks for the information. Would you mind sharing the name of the tools for
MD5 cracking? I'll be thankful.

All,

I was curious about a question on Sessions which I wanted to ask you all
since some time back but did not get any chance due to some reasons. I have
asked this question on some forums as well, so excuse me if you have already
heard of this.

As we all know salted MD5 hashing protects the authentication credentials
rightly from eavesdropping on the network. SSL does the same thing. However,
in some scenarios SSL might not be feasible. For example, causing heavy load
on the server or may be some applications don't support it, etc.

Apparently we need to protect 2 crucial things in the HTTP header from the
person sniffing the network traffic. "Authentication Credentials and Session
Credentials"

We can protect the authentication credentials using salted MD5 hashing or by
using SSL. In case SSL implementation is not feasible, salted MD5 will still
protect the authentication credentials but not the Session Credentials. In
order to protect the Session credentials (Session ID, tokens, cookies, etc)
on a non-SSL channel what measures can be taken?

Thoughts?

-Gunwant



On Fri, Jan 9, 2009 at 1:34 PM, Pranav Joshi <pranav.joshi at kriss.in> wrote:

> Hi Gunwant,
>
> > Fyi, even SHA-1 is susceptible to collision attacks. Practically even if
> MD5
> > or SHA-1 are broken, this vulnerability still can't be readily used to
> exploit the certificate genuinity uptil 'Now'
>
> Absolutely, I completely agree with your point that SHA-1 is susceptible
> to collisions.
>
> The only difference between them is that colliding SHA-1 still a
> mathematical probability of 2^63 computational cycles, So far nobody has
> been able show a working collision for SHA-1.
>
> > IMHO I am sure this will be exploited with a solid rationale in the near
> future.
>
> Absolutely.. It's just a matter of biding time till someone figures out a
> way, IMHO, PS3's (Cell Based Systems) & GPUs are doing a remarkably
> praiseworthy job of shrinking the computational time-line.
>
> Having said that, the point I wanted to make regarding MD5 specifically
> was that POCs and tools for attacking MD5 have been available for close to
> 3 years and these attacks have been a part of GHTQ curriculum. but nothing
> was serious as this for MD5 uptil 'Now'... the metaphorical "final nail in
> the coffin".
>
> The best bet as of now is to rely on multiple hashing algorithms for
> critical systems; so even if one collision is generated other hashes would
> fail to match.
>
> NOTE: I can't recollect the names of those tools mentioned here but if
> someone is interested in knowing them lemme know, I'd be glad to re-lookup
> the same.
>
> Warm Regards,
> Pranav Joshi
> Consultant - Information Security [CISA/GHTQ/GWAS/Security+]
> Email: pranav.joshi at kriss.in
> Phone: +91-9958967766
>
> > Hi,
> >
> > Thanks for sharing the information. Just wanted to add some more to
> this.
> >
> > As you said:
> > "Since, MD5 is also used in signing certificates the browsers will have
> no
> > way of telling the difference between a genuine and a rogue website
> unless
> > other hashing algorithms like SHA-1 are also used."
> >
> > Fyi, even SHA-1 is susceptible to collision attacks. Practically even if
> MD5
> > or SHA-1 are broken, this vulnerability still can't be readily used to
> exploit the certificate genuinity uptil 'Now'. Having said that I did not
> > mean that it can't be exploited at all thereby further exposing
> insecurity
> > on the internet. What I am saying is until some more research is done on
> how
> > to exploit this in relevance to the certificates, we can unwind and
> count
> > on
> > atleast the certificates for now.
> >
> > Some guys have come up with a PoC for the same, however not at a very
> reasonable level.
> > May be you want to have a look at these:
> >
> > http://www.cryptography.com/cnews/hash.html<
> https://houmail.halliburton.com/OWA/redir.aspx?C=52ed613179914f85a1b0ae5a68761f71&URL=http%3a%2f%2fwww.cryptography.com%2fcnews%2fhash.html
> >
> http://www.securityfocus.com/columnists/488
> >
> > IMHO I am sure this will be exploited with a solid rationale in the near
> future.
> >
> > Thanks,
> > -Gunwant Singh
> >
> > On Fri, Jan 2, 2009 at 1:46 PM, Pranav Joshi <pranav.joshi at kriss.in>
> wrote:
> >
> >> Hello Everyone.
> >> It's been quite a while since security issues with MD5 algorithm
> started
> >> cropping up regarding reproducible hash collisions (a.k.a Birthday
> Attack), this one ups the ante by driving the final nail in it's
> coffin.
> >> Since, MD5 is also used in signing certificates the browsers will have
> no
> >> way of telling the difference between a genuine and a rogue website
> unless
> >> other hashing algorithms like SHA-1 are also used.
> >> http://blogs.computerworld.com/md5_ca_hack_and_the_ps3
> >> Warm Regards,
> >> Pranav Joshi
> >> Consultant - Information Security [CISA/GHTQ/GWAS/Security+]
> >> Email: pranav.joshi at kriss.in
> >> Phone: +91-9958967766
> >> _______________________________________________
> >> Owasp-delhi mailing list
> >> Owasp-delhi at lists.owasp.org
> >> https://lists.owasp.org/mailman/listinfo/owasp-delhi
> >
> >
> >
> > --
> > Gunwant Singh
> >
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>


-- 
Gunwant Singh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090112/8ef732f0/attachment.html 

From dhruv.soi at owasp.org  Wed Jan 14 03:04:17 2009
From: dhruv.soi at owasp.org (Soi, Dhruv)
Date: Wed, 14 Jan 2009 13:34:17 +0530
Subject: [Owasp-delhi] January Meeting
Message-ID: <496d9c8b.02066e0a.6edf.ffffddb8@mx.google.com>

Hello All,

 

We are planning for OWASP Delhi January meeting on Saturday, 31st January
2009 starting at 1500hrs till 1800hrs and anticipate your active
participation into it. CFP (call for paper) is still open and you may feel
free to submit the abstract of your presentation to me or Puneet. New
members onto this list can refer to the presentations from archived events
available at http://www.owasp.org/index.php/Delhi 

 

Gunwant Singh from SAIC will be presenting on "Scrutinizing Session Based
Attacks". As usual, I am sure it would be yet another excellent presentation
from Gunwant. 

 

We have not yet started the registration process, as we are still looking
for sponsored venue. We would appreciate if you could check with your
company for sponsoring this meeting in terms of venue and high tea.

 

Suggestions Box is always OPEN for you to help us improving the OWASP
community in this part of the world.

 

Many Thanks,

Dhruv

OWASP Delhi Board

-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090114/710883ff/attachment.html 

From karthik.muthukrishnan at tcs.com  Wed Jan 14 05:20:28 2009
From: karthik.muthukrishnan at tcs.com (Karthik Muthukrishnan)
Date: Wed, 14 Jan 2009 15:50:28 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <44b2bd060901120841q4426daeo607e7f7839dc5bb5@mail.gmail.com>
Message-ID: <OF95B3F7AA.980A1F8B-ON4225753E.0036A731-4225753E.0038CAAA@tcs.com>

> salted MD5 hashing protects the authentication credentials rightly from 
eavesdropping on the network.
Salting is used to protect MD5 hashes from rainbow table attacks. 

> SSL does the same thing.
Yes, SSL is used to ensure confidentiality and trust in the network 
communiation. Confidentiality (or prevention of network eavesdropping) is 
ensured by encryption. Trust is accomplished by Server and/or client 
certificates.

> However, in some scenarios SSL might not be feasible. For example, 
causing heavy load on the server or may be some applications don't support 
it, etc.
In such cases SSL Accelerators are used. They are devices which can be fit 
into the architecture without changing the application or affecting the 
load on the application server.

> We can protect the authentication credentials using salted MD5 hashing 
or by using SSL.
To protect authentication credentials in HTTP, we have to rely on SSL. 
Hashes are a secure (aka not in clear text) way to store authentication 
credentials.

> In order to protect the Session credentials (Session ID, tokens, 
cookies, etc) on a non-SSL channel what measures can be taken?
To protect either auth or session credentials we have to ensure 
confidentiality of the communication channel. If we dont use HTTPS, then 
VPN might be another option. While authentication credentials can be 
protected by some challenge handshake mechanism (similar to CHAP), we 
would need to protect session creds by encrypting the channel. 

Karthik
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you


-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090114/24a923b4/attachment.html 

From gunwant.s at gmail.com  Wed Jan 14 11:13:21 2009
From: gunwant.s at gmail.com (Gunwant Singh)
Date: Wed, 14 Jan 2009 21:43:21 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <OF95B3F7AA.980A1F8B-ON4225753E.0036A731-4225753E.0038CAAA@tcs.com>
References: <44b2bd060901120841q4426daeo607e7f7839dc5bb5@mail.gmail.com>
	<OF95B3F7AA.980A1F8B-ON4225753E.0036A731-4225753E.0038CAAA@tcs.com>
Message-ID: <44b2bd060901140813x1b35979fn5aca01cec3c57a42@mail.gmail.com>

Hi,

Thanks for your reply but that did not answer my question. You are telling
me what I can use for protecting the credentials. I know what I can use, but
just out of curiousity I want to know if I don't use SSL/VPN or any other
network based protection, what else can be done on the application layer in
order to protect the credentials. Please see the answers below.

On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <
karthik.muthukrishnan at tcs.com> wrote:

>
> > salted MD5 hashing protects the authentication credentials rightly from
> eavesdropping on the network.
> Salting is used to protect MD5 hashes from rainbow table attacks.

Apparently Yes, although ultimately it protects authentication credentials
only. Facts say the highest risk is eavesdropping if the session is
unencrypted.

>
> > SSL does the same thing.
> Yes, SSL is used to ensure confidentiality and trust in the network
> communiation. Confidentiality (or prevention of network eavesdropping) is
> ensured by encryption. Trust is accomplished by Server and/or client
> certificates.

I know what SSL does, but my question is something else.

>
> > However, in some scenarios SSL might not be feasible. For example,
> causing heavy load on the server or may be some applications don't support
> it, etc.
> In such cases SSL Accelerators are used. They are devices which can be fit
> into the architecture without changing the application or affecting the load
> on the application server.


Again my question is something else. I know if SSL doesn't work,
accelerators help expedite the processing. What I want to know is, if I "Do
Not" want to use SSL what measures can be taken.

>
>
> > We can protect the authentication credentials using salted MD5 hashing
> or by using SSL.
> To protect authentication credentials in HTTP, we have to rely on SSL.
> Hashes are a secure (aka not in clear text) way to store authentication
> credentials.

So you are proclaiming that we *have to* rely  on SSL- no other alternative.

Hashes are also used in many applications for many different purposes
besides authenticity and integrity.

>
>
> > In order to protect the Session credentials (Session ID, tokens,
> cookies, etc) on a non-SSL channel what measures can be taken?
> To protect either auth or session credentials we have to ensure
> confidentiality of the communication channel. If we dont use HTTPS, then VPN
> might be another option. While authentication credentials can be protected
> by some challenge handshake mechanism (similar to CHAP), we would need to
> protect session creds by encrypting the channel.

I was asking that if we can provide some protection on the application level
rather than on the network level. Besides SSL/VPN there are many options
available for protecting the authentication credentials. I want to know
(just out of curiousity) that how can we secure the session credentials on
an unencrypted/non-SSL channel. I know this will take too much processing
cycles, time synchronization, quantization in milliseconds even nanoseconds,
affirmation of the key exchange, dynamic hashing key generation to mitigate
replay attacks, and even more.

I just want to know  if anyone has an idea on how it can be done if h/she is
willing to share that would be really appreciative. Please make sure you
understand what I am looking for.
No offence :)


>
> Karthik
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>


-- 
Gunwant Singh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090114/bd5c8a68/attachment-0001.html 

From plash.chowdhary at tcs.com  Wed Jan 14 17:16:07 2009
From: plash.chowdhary at tcs.com (Plash Chowdhary)
Date: Wed, 14 Jan 2009 16:16:07 -0600
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <44b2bd060901140813x1b35979fn5aca01cec3c57a42@mail.gmail.com>
Message-ID: <OFCE9650B5.82885D90-ON8625753E.0079B8DB-8625753E.007A619E@tcs.com>

verify user offline.. send an sms(or similar) with a validation code(long 
randomly genrated  string) to the user everytime he logs in to validate 
and use it everytime a transaction (high risk) is done or role is 
changed.. best way still will be to use it over SSL and use digital 
signatures

Regards
Plash





"Gunwant Singh" <gunwant.s at gmail.com> 
Sent by: owasp-delhi-bounces at lists.owasp.org
01/14/2009 10:13 AM

To
"Karthik Muthukrishnan" <karthik.muthukrishnan at tcs.com>
cc
owasp-delhi at lists.owasp.org
Subject
Re: [Owasp-delhi] SSL Broken..






Hi,

Thanks for your reply but that did not answer my question. You are telling 
me what I can use for protecting the credentials. I know what I can use, 
but just out of curiousity I want to know if I don't use SSL/VPN or any 
other network based protection, what else can be done on the application 
layer in order to protect the credentials. Please see the answers below.

On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <
karthik.muthukrishnan at tcs.com> wrote:

> salted MD5 hashing protects the authentication credentials rightly from 
eavesdropping on the network. 
Salting is used to protect MD5 hashes from rainbow table attacks. 
Apparently Yes, although ultimately it protects authentication credentials 
only. Facts say the highest risk is eavesdropping if the session is 
unencrypted. 

> SSL does the same thing. 
Yes, SSL is used to ensure confidentiality and trust in the network 
communiation. Confidentiality (or prevention of network eavesdropping) is 
ensured by encryption. Trust is accomplished by Server and/or client 
certificates.
I know what SSL does, but my question is something else. 

> However, in some scenarios SSL might not be feasible. For example, 
causing heavy load on the server or may be some applications don't support 
it, etc. 
In such cases SSL Accelerators are used. They are devices which can be fit 
into the architecture without changing the application or affecting the 
load on the application server. 

Again my question is something else. I know if SSL doesn't work, 
accelerators help expedite the processing. What I want to know is, if I 
"Do Not" want to use SSL what measures can be taken.


> We can protect the authentication credentials using salted MD5 hashing 
or by using SSL. 
To protect authentication credentials in HTTP, we have to rely on SSL. 
Hashes are a secure (aka not in clear text) way to store authentication 
credentials. 
So you are proclaiming that we *have to* rely  on SSL- no other 
alternative. 
Hashes are also used in many applications for many different purposes 
besides authenticity and integrity.


> In order to protect the Session credentials (Session ID, tokens, 
cookies, etc) on a non-SSL channel what measures can be taken? 
To protect either auth or session credentials we have to ensure 
confidentiality of the communication channel. If we dont use HTTPS, then 
VPN might be another option. While authentication credentials can be 
protected by some challenge handshake mechanism (similar to CHAP), we 
would need to protect session creds by encrypting the channel. 
I was asking that if we can provide some protection on the application 
level rather than on the network level. Besides SSL/VPN there are many 
options available for protecting the authentication credentials. I want to 
know (just out of curiousity) that how can we secure the session 
credentials on an unencrypted/non-SSL channel. I know this will take too 
much processing cycles, time synchronization, quantization in milliseconds 
even nanoseconds, affirmation of the key exchange, dynamic hashing key 
generation to mitigate replay attacks, and even more. 

I just want to know  if anyone has an idea on how it can be done if h/she 
is willing to share that would be really appreciative. Please make sure 
you understand what I am looking for.
No offence :)



Karthik
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh
_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-delhi

ForwardSourceID:NT00005236 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you


-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090114/fbf70c77/attachment-0001.html 

From plash.chowdhary at tcs.com  Wed Jan 14 17:40:28 2009
From: plash.chowdhary at tcs.com (Plash Chowdhary)
Date: Wed, 14 Jan 2009 16:40:28 -0600
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <OFCE9650B5.82885D90-ON8625753E.0079B8DB-8625753E.007A5DD3@LocalDomain>
Message-ID: <OF8B652403.98A61FE4-ON8625753E.007C54C1-8625753E.007C9C47@tcs.com>

read "verify user offline" as "verify user out of band" was notgetting the 
exact word earlier





Plash Chowdhary/DEL/TCS
01/14/2009 04:16 PM

To
"Gunwant Singh" <gunwant.s at gmail.com>
cc
"Karthik Muthukrishnan" <karthik.muthukrishnan at tcs.com>, 
owasp-delhi at lists.owasp.org, owasp-delhi-bounces at lists.owasp.org
Subject
Re: [Owasp-delhi] SSL Broken..





verify user offline.. send an sms(or similar) with a validation code(long 
randomly genrated  string) to the user everytime he logs in to validate 
and use it everytime a transaction (high risk) is done or role is 
changed.. best way still will be to use it over SSL and use digital 
signatures

Regards
Plash





"Gunwant Singh" <gunwant.s at gmail.com> 
Sent by: owasp-delhi-bounces at lists.owasp.org
01/14/2009 10:13 AM

To
"Karthik Muthukrishnan" <karthik.muthukrishnan at tcs.com>
cc
owasp-delhi at lists.owasp.org
Subject
Re: [Owasp-delhi] SSL Broken..






Hi,

Thanks for your reply but that did not answer my question. You are telling 
me what I can use for protecting the credentials. I know what I can use, 
but just out of curiousity I want to know if I don't use SSL/VPN or any 
other network based protection, what else can be done on the application 
layer in order to protect the credentials. Please see the answers below.

On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <
karthik.muthukrishnan at tcs.com> wrote:

> salted MD5 hashing protects the authentication credentials rightly from 
eavesdropping on the network. 
Salting is used to protect MD5 hashes from rainbow table attacks. 
Apparently Yes, although ultimately it protects authentication credentials 
only. Facts say the highest risk is eavesdropping if the session is 
unencrypted. 

> SSL does the same thing. 
Yes, SSL is used to ensure confidentiality and trust in the network 
communiation. Confidentiality (or prevention of network eavesdropping) is 
ensured by encryption. Trust is accomplished by Server and/or client 
certificates.
I know what SSL does, but my question is something else. 

> However, in some scenarios SSL might not be feasible. For example, 
causing heavy load on the server or may be some applications don't support 
it, etc. 
In such cases SSL Accelerators are used. They are devices which can be fit 
into the architecture without changing the application or affecting the 
load on the application server. 

Again my question is something else. I know if SSL doesn't work, 
accelerators help expedite the processing. What I want to know is, if I 
"Do Not" want to use SSL what measures can be taken.


> We can protect the authentication credentials using salted MD5 hashing 
or by using SSL. 
To protect authentication credentials in HTTP, we have to rely on SSL. 
Hashes are a secure (aka not in clear text) way to store authentication 
credentials. 
So you are proclaiming that we *have to* rely  on SSL- no other 
alternative. 
Hashes are also used in many applications for many different purposes 
besides authenticity and integrity.


> In order to protect the Session credentials (Session ID, tokens, 
cookies, etc) on a non-SSL channel what measures can be taken? 
To protect either auth or session credentials we have to ensure 
confidentiality of the communication channel. If we dont use HTTPS, then 
VPN might be another option. While authentication credentials can be 
protected by some challenge handshake mechanism (similar to CHAP), we 
would need to protect session creds by encrypting the channel. 
I was asking that if we can provide some protection on the application 
level rather than on the network level. Besides SSL/VPN there are many 
options available for protecting the authentication credentials. I want to 
know (just out of curiousity) that how can we secure the session 
credentials on an unencrypted/non-SSL channel. I know this will take too 
much processing cycles, time synchronization, quantization in milliseconds 
even nanoseconds, affirmation of the key exchange, dynamic hashing key 
generation to mitigate replay attacks, and even more. 

I just want to know  if anyone has an idea on how it can be done if h/she 
is willing to share that would be really appreciative. Please make sure 
you understand what I am looking for.
No offence :)



Karthik
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh
_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-delhi

ForwardSourceID:NT00005236 

ForwardSourceID:NT0000523E 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you


-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090114/58aab724/attachment-0001.html 

From karthik.muthukrishnan at tcs.com  Thu Jan 15 03:35:36 2009
From: karthik.muthukrishnan at tcs.com (Karthik Muthukrishnan)
Date: Thu, 15 Jan 2009 14:05:36 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <OFCE9650B5.82885D90-ON8625753E.0079B8DB-8625753E.007A619E@LocalDomain>
Message-ID: <OFA0847294.70836F34-ON4225753F.0028FB99-4225753F.002F2FEC@tcs.com>

Plash:
Out of band verification must be done for every request to the server, if 
the session credentials (typically a session ID cookie) is to be 
protected. Without it, the initial auth creds in the login request will be 
protected by out of band verification,  but not the session creds. 

Gunwant:
> I know what I can use, but just out of curiousity I want to know if I 
don't use SSL/VPN or any other network based protection, what else can be 
done on the application layer in order to protect the credentials.
Auth creds (login requests) of web applications can be protected by using 
either a challenge handshake mechanism or by using an out of band system. 
However both of these will only prevent clear-text auth creds from being 
transmitted across the network.  After logging in, session credentials 
will have to be protected too. I beleive we have two options for this. The 
first is to encrypt the channel, which is most commonly used in web 
applications. The other alternative is not to support sessions at all. But 
this means that authentication must happen for every request going to the 
server.

Guys, let me know if you can think of other options for Gunwant's 
question.

> > As we all know salted MD5 hashing protects the authentication 
credentials rightly from eavesdropping on the network.
> Apparently Yes, although ultimately it protects authentication 
credentials only.
No offense buddy, but you are using salted MD5 in a vulnerable way, for 
network apps. 

Salted hashes prevent attackers from obtaining the source text, so by 
sniffing the network and obtaining the hash, they cant have the original 
password. You are correct there. 
But when a web app uses a login request with a hashed password, any one 
with that hash can use that to login to the app -- without needing the 
original password. 

Ref: 
http://en.wikipedia.org/wiki/Salt_(cryptography)
http://msdn.microsoft.com/en-us/magazine/cc164107.aspx
http://en.wikipedia.org/wiki/Rainbow_table

Karthik

=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you


-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090115/2f030e6a/attachment.html 

From s.parmendra at gmail.com  Thu Jan 15 03:48:00 2009
From: s.parmendra at gmail.com (Parmendra Sharma)
Date: Thu, 15 Jan 2009 14:18:00 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <44b2bd060901120841q4426daeo607e7f7839dc5bb5@mail.gmail.com>
References: <37698.121.241.121.185.1231488272.squirrel@kriss.in>
	<44b2bd060901120841q4426daeo607e7f7839dc5bb5@mail.gmail.com>
Message-ID: <f162ba540901150048p47cef5eclc0f75b0804a6345c@mail.gmail.com>

Hello all,

Very thanks for discussing such kinds of fruitful discussions. Learning a
lot from u people. Once again thanks a lot.......

On Mon, Jan 12, 2009 at 10:11 PM, Gunwant Singh <gunwant.s at gmail.com> wrote:

> Pranav,
>
> Thanks for the information. Would you mind sharing the name of the tools
> for MD5 cracking? I'll be thankful.
>
> All,
>
> I was curious about a question on Sessions which I wanted to ask you all
> since some time back but did not get any chance due to some reasons. I have
> asked this question on some forums as well, so excuse me if you have already
> heard of this.
>
> As we all know salted MD5 hashing protects the authentication credentials
> rightly from eavesdropping on the network. SSL does the same thing. However,
> in some scenarios SSL might not be feasible. For example, causing heavy load
> on the server or may be some applications don't support it, etc.
>
> Apparently we need to protect 2 crucial things in the HTTP header from the
> person sniffing the network traffic. "Authentication Credentials and Session
> Credentials"
>
> We can protect the authentication credentials using salted MD5 hashing or
> by using SSL. In case SSL implementation is not feasible, salted MD5 will
> still protect the authentication credentials but not the Session
> Credentials. In order to protect the Session credentials (Session ID,
> tokens, cookies, etc) on a non-SSL channel what measures can be taken?
>
> Thoughts?
>
> -Gunwant
>
>
>
>
> On Fri, Jan 9, 2009 at 1:34 PM, Pranav Joshi <pranav.joshi at kriss.in>wrote:
>
>> Hi Gunwant,
>>
>> > Fyi, even SHA-1 is susceptible to collision attacks. Practically even if
>> MD5
>> > or SHA-1 are broken, this vulnerability still can't be readily used to
>> exploit the certificate genuinity uptil 'Now'
>>
>> Absolutely, I completely agree with your point that SHA-1 is susceptible
>> to collisions.
>>
>> The only difference between them is that colliding SHA-1 still a
>> mathematical probability of 2^63 computational cycles, So far nobody has
>> been able show a working collision for SHA-1.
>>
>> > IMHO I am sure this will be exploited with a solid rationale in the near
>> future.
>>
>> Absolutely.. It's just a matter of biding time till someone figures out a
>> way, IMHO, PS3's (Cell Based Systems) & GPUs are doing a remarkably
>> praiseworthy job of shrinking the computational time-line.
>>
>> Having said that, the point I wanted to make regarding MD5 specifically
>> was that POCs and tools for attacking MD5 have been available for close to
>> 3 years and these attacks have been a part of GHTQ curriculum. but nothing
>> was serious as this for MD5 uptil 'Now'... the metaphorical "final nail in
>> the coffin".
>>
>> The best bet as of now is to rely on multiple hashing algorithms for
>> critical systems; so even if one collision is generated other hashes would
>> fail to match.
>>
>> NOTE: I can't recollect the names of those tools mentioned here but if
>> someone is interested in knowing them lemme know, I'd be glad to re-lookup
>> the same.
>>
>> Warm Regards,
>> Pranav Joshi
>> Consultant - Information Security [CISA/GHTQ/GWAS/Security+]
>> Email: pranav.joshi at kriss.in
>> Phone: +91-9958967766
>>
>> > Hi,
>> >
>> > Thanks for sharing the information. Just wanted to add some more to
>> this.
>> >
>> > As you said:
>> > "Since, MD5 is also used in signing certificates the browsers will have
>> no
>> > way of telling the difference between a genuine and a rogue website
>> unless
>> > other hashing algorithms like SHA-1 are also used."
>> >
>> > Fyi, even SHA-1 is susceptible to collision attacks. Practically even if
>> MD5
>> > or SHA-1 are broken, this vulnerability still can't be readily used to
>> exploit the certificate genuinity uptil 'Now'. Having said that I did not
>> > mean that it can't be exploited at all thereby further exposing
>> insecurity
>> > on the internet. What I am saying is until some more research is done on
>> how
>> > to exploit this in relevance to the certificates, we can unwind and
>> count
>> > on
>> > atleast the certificates for now.
>> >
>> > Some guys have come up with a PoC for the same, however not at a very
>> reasonable level.
>> > May be you want to have a look at these:
>> >
>> > http://www.cryptography.com/cnews/hash.html<
>> https://houmail.halliburton.com/OWA/redir.aspx?C=52ed613179914f85a1b0ae5a68761f71&URL=http%3a%2f%2fwww.cryptography.com%2fcnews%2fhash.html
>> >
>>  http://www.securityfocus.com/columnists/488
>> >
>> > IMHO I am sure this will be exploited with a solid rationale in the near
>> future.
>> >
>> > Thanks,
>> > -Gunwant Singh
>> >
>> > On Fri, Jan 2, 2009 at 1:46 PM, Pranav Joshi <pranav.joshi at kriss.in>
>> wrote:
>> >
>> >> Hello Everyone.
>> >> It's been quite a while since security issues with MD5 algorithm
>> started
>> >> cropping up regarding reproducible hash collisions (a.k.a Birthday
>> Attack), this one ups the ante by driving the final nail in it's
>> coffin.
>> >> Since, MD5 is also used in signing certificates the browsers will have
>> no
>> >> way of telling the difference between a genuine and a rogue website
>> unless
>> >> other hashing algorithms like SHA-1 are also used.
>> >> http://blogs.computerworld.com/md5_ca_hack_and_the_ps3
>> >> Warm Regards,
>> >> Pranav Joshi
>> >> Consultant - Information Security [CISA/GHTQ/GWAS/Security+]
>> >> Email: pranav.joshi at kriss.in
>> >> Phone: +91-9958967766
>> >> _______________________________________________
>> >> Owasp-delhi mailing list
>> >> Owasp-delhi at lists.owasp.org
>> >> https://lists.owasp.org/mailman/listinfo/owasp-delhi
>> >
>> >
>> >
>> > --
>> > Gunwant Singh
>> >
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>
>
> --
> Gunwant Singh
>
>
> _______________________________________________
> Owasp-delhi mailing list
> Owasp-delhi at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-delhi
>
>


-- 
Thanks and Regards:

Parmendra Sharma
Indian Computer Emergency Response Team (CERT-In)
Ministry of Information Technology
Government of India
6 C.G.O Complex
Lodhi Road
New Delhi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090115/66bf8cb9/attachment.html 

From tarundua at gmail.com  Thu Jan 15 03:53:31 2009
From: tarundua at gmail.com (Tarun Dua)
Date: Thu, 15 Jan 2009 14:23:31 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <OF8B652403.98A61FE4-ON8625753E.007C54C1-8625753E.007C9C47@tcs.com>
References: <OFCE9650B5.82885D90-ON8625753E.0079B8DB-8625753E.007A5DD3@LocalDomain>
	<OF8B652403.98A61FE4-ON8625753E.007C54C1-8625753E.007C9C47@tcs.com>
Message-ID: <73e1ba30901150053q165d153fk338ffacc66ebf027@mail.gmail.com>

Use a token that is generated on the client side constantly changes
'randomly' everytime one logs in or in a short time duration(e.g. RSA
token key that most corporates seem to use), even if it gets sent in
plaintext the time to compromise an account is short.
-Tarun

On Thu, Jan 15, 2009 at 4:10 AM, Plash Chowdhary
<plash.chowdhary at tcs.com> wrote:
>
> read "verify user offline" as "verify user out of band" was notgetting the
> exact word earlier
>
>
>
>
> Plash Chowdhary/DEL/TCS
>
> 01/14/2009 04:16 PM
>
> To
> "Gunwant Singh" <gunwant.s at gmail.com>
> cc
> "Karthik Muthukrishnan" <karthik.muthukrishnan at tcs.com>,
> owasp-delhi at lists.owasp.org, owasp-delhi-bounces at lists.owasp.org
> Subject
> Re: [Owasp-delhi] SSL Broken..Link
>
>
>
> verify user offline.. send an sms(or similar) with a validation code(long
> randomly genrated  string) to the user everytime he logs in to validate and
> use it everytime a transaction (high risk) is done or role is  changed..
> best way still will be to use it over SSL and use digital signatures
>
> Regards
> Plash
>
>
>
>
> "Gunwant Singh" <gunwant.s at gmail.com>
> Sent by: owasp-delhi-bounces at lists.owasp.org
>
> 01/14/2009 10:13 AM
>
> To
> "Karthik Muthukrishnan" <karthik.muthukrishnan at tcs.com>
> cc
> owasp-delhi at lists.owasp.org
> Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
> Hi,
>
> Thanks for your reply but that did not answer my question. You are telling
> me what I can use for protecting the credentials. I know what I can use, but
> just out of curiousity I want to know if I don't use SSL/VPN or any other
> network based protection, what else can be done on the application layer in
> order to protect the credentials. Please see the answers below.
>
> On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan
> <karthik.muthukrishnan at tcs.com> wrote:
>
>> salted MD5 hashing protects the authentication credentials rightly from
>> eavesdropping on the network.
> Salting is used to protect MD5 hashes from rainbow table attacks.
> Apparently Yes, although ultimately it protects authentication credentials
> only. Facts say the highest risk is eavesdropping if the session is
> unencrypted.
>
>> SSL does the same thing.
> Yes, SSL is used to ensure confidentiality and trust in the network
> communiation. Confidentiality (or prevention of network eavesdropping) is
> ensured by encryption. Trust is accomplished by Server and/or client
> certificates.
> I know what SSL does, but my question is something else.
>
>> However, in some scenarios SSL might not be feasible. For example, causing
>> heavy load on the server or may be some applications don't support it, etc.
> In such cases SSL Accelerators are used. They are devices which can be fit
> into the architecture without changing the application or affecting the load
> on the application server.
>
> Again my question is something else. I know if SSL doesn't work,
> accelerators help expedite the processing. What I want to know is, if I "Do
> Not" want to use SSL what measures can be taken.
>
>
>> We can protect the authentication credentials using salted MD5 hashing or
>> by using SSL.
> To protect authentication credentials in HTTP, we have to rely on SSL.
> Hashes are a secure (aka not in clear text) way to store authentication
> credentials.
> So you are proclaiming that we *have to* rely  on SSL- no other alternative.
> Hashes are also used in many applications for many different purposes
> besides authenticity and integrity.
>
>
>> In order to protect the Session credentials (Session ID, tokens, cookies,
>> etc) on a non-SSL channel what measures can be taken?
> To protect either auth or session credentials we have to ensure
> confidentiality of the communication channel. If we dont use HTTPS, then VPN
> might be another option. While authentication credentials can be protected
> by some challenge handshake mechanism (similar to CHAP), we would need to
> protect session creds by encrypting the channel.
> I was asking that if we can provide some protection on the application level
> rather than on the network level. Besides SSL/VPN there are many options
> available for protecting the authentication credentials. I want to know
> (just out of curiousity) that how can we secure the session credentials on
> an unencrypted/non-SSL channel. I know this will take too much processing
> cycles, time synchronization, quantization in milliseconds even nanoseconds,
> affirmation of the key exchange, dynamic hashing key generation to mitigate
> replay attacks, and even more.
>
> I just want to know  if anyone has an idea on how it can be done if h/she is
> willing to share that would be really appreciative. Please make sure you
> understand what I am looking for.
> No offence :)
>
>
>
> Karthik
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
> _______________________________________________
> Owasp-delhi mailing list
> Owasp-delhi at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-delhi
>
> ForwardSourceID:NT00005236
>
> ForwardSourceID:NT0000523E
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
> _______________________________________________
> Owasp-delhi mailing list
> Owasp-delhi at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-delhi
>
>

From gunwant.s at gmail.com  Thu Jan 15 10:25:13 2009
From: gunwant.s at gmail.com (Gunwant Singh)
Date: Thu, 15 Jan 2009 20:55:13 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <OFCE9650B5.82885D90-ON8625753E.0079B8DB-8625753E.007A619E@tcs.com>
References: <44b2bd060901140813x1b35979fn5aca01cec3c57a42@mail.gmail.com>
	<OFCE9650B5.82885D90-ON8625753E.0079B8DB-8625753E.007A619E@tcs.com>
Message-ID: <44b2bd060901150725w11a6a5dbp148801af40c03060@mail.gmail.com>

That doesn't affirm protection against replay attack, dude!
In the transit, anyone can see your validation code...
Even if you hash/encrypt it, still it can used to replay the traffic...
this is vulnerable.. :)

On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary <plash.chowdhary at tcs.com>wrote:

>
> verify user offline.. send an sms(or similar) with a validation code(long
> randomly genrated  string) to the user everytime he logs in to validate and
> use it everytime a transaction (high risk) is done or role is  changed..
> best way still will be to use it over SSL and use digital signatures
>
> Regards
> Plash
>
>
>
>
>  *"Gunwant Singh" <gunwant.s at gmail.com>*
> Sent by: owasp-delhi-bounces at lists.owasp.org
>
> 01/14/2009 10:13 AM
>   To
> "Karthik Muthukrishnan" <karthik.muthukrishnan at tcs.com>
>  cc
> owasp-delhi at lists.owasp.org
>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
> Hi,
>
> Thanks for your reply but that did not answer my question. You are telling
> me what I can use for protecting the credentials. I know what I can use, but
> just out of curiousity I want to know if I don't use SSL/VPN or any other
> network based protection, what else can be done on the application layer in
> order to protect the credentials. Please see the answers below.
>
> On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <*
> karthik.muthukrishnan at tcs.com* <karthik.muthukrishnan at tcs.com>> wrote:
>
> > salted MD5 hashing protects the authentication credentials rightly from
> eavesdropping on the network.
> Salting is used to protect MD5 hashes from rainbow table attacks.
> Apparently Yes, although ultimately it protects authentication credentials
> only. Facts say the highest risk is eavesdropping if the session is
> unencrypted.
>
> > SSL does the same thing.
> Yes, SSL is used to ensure confidentiality and trust in the network
> communiation. Confidentiality (or prevention of network eavesdropping) is
> ensured by encryption. Trust is accomplished by Server and/or client
> certificates.
> I know what SSL does, but my question is something else.
>
> > However, in some scenarios SSL might not be feasible. For example,
> causing heavy load on the server or may be some applications don't support
> it, etc.
> In such cases SSL Accelerators are used. They are devices which can be fit
> into the architecture without changing the application or affecting the load
> on the application server.
>
> Again my question is something else. I know if SSL doesn't work,
> accelerators help expedite the processing. What I want to know is, if I "Do
> Not" want to use SSL what measures can be taken.
>
>
> > We can protect the authentication credentials using salted MD5 hashing
> or by using SSL.
> To protect authentication credentials in HTTP, we have to rely on SSL.
> Hashes are a secure (aka not in clear text) way to store authentication
> credentials.
> So you are proclaiming that we *have to* rely  on SSL- no other
> alternative.
> Hashes are also used in many applications for many different purposes
> besides authenticity and integrity.
>
>
> > In order to protect the Session credentials (Session ID, tokens,
> cookies, etc) on a non-SSL channel what measures can be taken?
> To protect either auth or session credentials we have to ensure
> confidentiality of the communication channel. If we dont use HTTPS, then VPN
> might be another option. While authentication credentials can be protected
> by some challenge handshake mechanism (similar to CHAP), we would need to
> protect session creds by encrypting the channel.
> I was asking that if we can provide some protection on the application
> level rather than on the network level. Besides SSL/VPN there are many
> options available for protecting the authentication credentials. I want to
> know (just out of curiousity) that how can we secure the session credentials
> on an unencrypted/non-SSL channel. I know this will take too much processing
> cycles, time synchronization, quantization in milliseconds even nanoseconds,
> affirmation of the key exchange, dynamic hashing key generation to mitigate
> replay attacks, and even more.
>
> I just want to know  if anyone has an idea on how it can be done if h/she
> is willing to share that would be really appreciative. Please make sure
> you understand what I am looking for.
> No offence :)
>
>
>
> Karthik
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
> _______________________________________________
> Owasp-delhi mailing list
> Owasp-delhi at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-delhi
>
> ForwardSourceID:NT00005236
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>


-- 
Gunwant Singh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090115/0d1ec864/attachment.html 

From plash.chowdhary at tcs.com  Thu Jan 15 10:30:44 2009
From: plash.chowdhary at tcs.com (Plash Chowdhary)
Date: Thu, 15 Jan 2009 21:00:44 +0530
Subject: [Owasp-delhi] SSL Broken..
Message-ID: <OF5489F9D7.B9EF4B60-ON6525753F.0055364B-6525753F.0055365A@tcs.com>

An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090115/b218501e/attachment-0001.html 

From gunwant.s at gmail.com  Thu Jan 15 10:35:36 2009
From: gunwant.s at gmail.com (Gunwant Singh)
Date: Thu, 15 Jan 2009 21:05:36 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <OFA0847294.70836F34-ON4225753F.0028FB99-4225753F.002F2FEC@tcs.com>
References: <OFCE9650B5.82885D90-ON8625753E.0079B8DB-8625753E.007A619E@LocalDomain>
	<OFA0847294.70836F34-ON4225753F.0028FB99-4225753F.002F2FEC@tcs.com>
Message-ID: <44b2bd060901150735k7e2584f9y3d68950acdcd8772@mail.gmail.com>

>Auth creds (login requests) of web applications can be protected by using
either a challenge handshake mechanism or by using an out of band system.

So can you explain how will you implement these actually.

>No offense buddy, but you are using salted MD5 in a vulnerable way, for
network apps.
Salted hashes prevent attackers from obtaining the source text, so by
sniffing the network and obtaining the hash, they cant have the original
password. You are correct there.
But when a web app uses a login request with a hashed password, any one with
that hash can use that to login to the app -- without needing the original
password.

ok, but if you know in salted md5 hashing, highly random salt is
concatenated to the password hash which is again hashed to randomize the
concatenation. Perhaps, how would that hash be same all the time while in
transit? You can't use it to replay. Can you explain how else is it
vulnerable? So I am not talking about just hashing but salted hashing
wherein random salt makes the hashing dynamic each time it is sent to the
server. If you are curious enough check out the salted md5 hashing code at
my blogspot (gunwantsingh.blogspot.com).

- Gunwant


On Thu, Jan 15, 2009 at 2:05 PM, Karthik Muthukrishnan <
karthik.muthukrishnan at tcs.com> wrote:

>
> Plash:
> Out of band verification must be done for every request to the server, if
> the session credentials (typically a session ID cookie) is to be protected.
> Without it, the initial auth creds in the login request will be protected by
> out of band verification,  but not the session creds.
>
> Gunwant:
> > I know what I can use, but just out of curiousity I want to know if I
> don't use SSL/VPN or any other network based protection, what else can be
> done on the application layer in order to protect the credentials.
> Auth creds (login requests) of web applications can be protected by using
> either a challenge handshake mechanism or by using an out of band system.
> However both of these will only prevent clear-text auth creds from being
> transmitted across the network.  After logging in, session credentials will
> have to be protected too. I beleive we have two options for this. The first
> is to encrypt the channel, which is most commonly used in web applications.
> The other alternative is not to support sessions at all. But this means that
> authentication must happen for every request going to the server.
>
> Guys, let me know if you can think of other options for Gunwant's question.
>
> > > As we all know salted MD5 hashing protects the authentication
> credentials rightly from eavesdropping on the network.
> > Apparently Yes, although ultimately it protects authentication
> credentials only.
> No offense buddy, but you are using salted MD5 in a vulnerable way, for
> network apps.
>
> Salted hashes prevent attackers from obtaining the source text, so by
> sniffing the network and obtaining the hash, they cant have the original
> password. You are correct there.
> But when a web app uses a login request with a hashed password, any one
> with that hash can use that to login to the app -- without needing the
> original password.
>
> Ref:
> http://en.wikipedia.org/wiki/Salt_(cryptography)<http://en.wikipedia.org/wiki/Salt_%28cryptography%29>
> http://msdn.microsoft.com/en-us/magazine/cc164107.aspx
> http://en.wikipedia.org/wiki/Rainbow_table
>
> Karthik
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>


-- 
Gunwant Singh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090115/2ec0c7c6/attachment-0001.html 

From plash.chowdhary at tcs.com  Thu Jan 15 11:11:04 2009
From: plash.chowdhary at tcs.com (Plash Chowdhary)
Date: Thu, 15 Jan 2009 10:11:04 -0600
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <44b2bd060901150725w11a6a5dbp148801af40c03060@mail.gmail.com>
Message-ID: <OF4CD49C44.E4AE40BA-ON8625753F.0058CC72-8625753F.0058F53C@tcs.com>

It does Gunwant, Use long one time off band validation....and keep a short 
TTL it will minimize the risk of relpay,....




"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 09:25 AM

To
"Plash Chowdhary" <plash.chowdhary at tcs.com>
cc
owasp-delhi at lists.owasp.org
Subject
Re: [Owasp-delhi] SSL Broken..






That doesn't affirm protection against replay attack, dude!
In the transit, anyone can see your validation code...
Even if you hash/encrypt it, still it can used to replay the traffic...
this is vulnerable.. :)

On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary <plash.chowdhary at tcs.com> 
wrote:

verify user offline.. send an sms(or similar) with a validation code(long 
randomly genrated  string) to the user everytime he logs in to validate 
and use it everytime a transaction (high risk) is done or role is 
changed.. best way still will be to use it over SSL and use digital 
signatures 

Regards 
Plash 




"Gunwant Singh" <gunwant.s at gmail.com> 
Sent by: owasp-delhi-bounces at lists.owasp.org 
01/14/2009 10:13 AM 


To
"Karthik Muthukrishnan" <karthik.muthukrishnan at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..








Hi,

Thanks for your reply but that did not answer my question. You are telling 
me what I can use for protecting the credentials. I know what I can use, 
but just out of curiousity I want to know if I don't use SSL/VPN or any 
other network based protection, what else can be done on the application 
layer in order to protect the credentials. Please see the answers below.

On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <
karthik.muthukrishnan at tcs.com> wrote: 

> salted MD5 hashing protects the authentication credentials rightly from 
eavesdropping on the network. 
Salting is used to protect MD5 hashes from rainbow table attacks. 
Apparently Yes, although ultimately it protects authentication credentials 
only. Facts say the highest risk is eavesdropping if the session is 
unencrypted. 

> SSL does the same thing. 
Yes, SSL is used to ensure confidentiality and trust in the network 
communiation. Confidentiality (or prevention of network eavesdropping) is 
ensured by encryption. Trust is accomplished by Server and/or client 
certificates. 
I know what SSL does, but my question is something else. 

> However, in some scenarios SSL might not be feasible. For example, 
causing heavy load on the server or may be some applications don't support 
it, etc. 
In such cases SSL Accelerators are used. They are devices which can be fit 
into the architecture without changing the application or affecting the 
load on the application server. 
Again my question is something else. I know if SSL doesn't work, 
accelerators help expedite the processing. What I want to know is, if I 
"Do Not" want to use SSL what measures can be taken. 


> We can protect the authentication credentials using salted MD5 hashing 
or by using SSL. 
To protect authentication credentials in HTTP, we have to rely on SSL. 
Hashes are a secure (aka not in clear text) way to store authentication 
credentials. 
So you are proclaiming that we *have to* rely  on SSL- no other 
alternative. 
Hashes are also used in many applications for many different purposes 
besides authenticity and integrity. 


> In order to protect the Session credentials (Session ID, tokens, 
cookies, etc) on a non-SSL channel what measures can be taken? 
To protect either auth or session credentials we have to ensure 
confidentiality of the communication channel. If we dont use HTTPS, then 
VPN might be another option. While authentication credentials can be 
protected by some challenge handshake mechanism (similar to CHAP), we 
would need to protect session creds by encrypting the channel. 
I was asking that if we can provide some protection on the application 
level rather than on the network level. Besides SSL/VPN there are many 
options available for protecting the authentication credentials. I want to 
know (just out of curiousity) that how can we secure the session 
credentials on an unencrypted/non-SSL channel. I know this will take too 
much processing cycles, time synchronization, quantization in milliseconds 
even nanoseconds, affirmation of the key exchange, dynamic hashing key 
generation to mitigate replay attacks, and even more. 

I just want to know  if anyone has an idea on how it can be done if h/she 
is willing to share that would be really appreciative. Please make sure 
you understand what I am looking for.
No offence :)



Karthik 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh
_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-delhi

ForwardSourceID:NT00005236     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT000052F2 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you


-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090115/c505d187/attachment.html 

From gunwant.s at gmail.com  Thu Jan 15 11:27:42 2009
From: gunwant.s at gmail.com (Gunwant Singh)
Date: Thu, 15 Jan 2009 21:57:42 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <OF4CD49C44.E4AE40BA-ON8625753F.0058CC72-8625753F.0058F53C@tcs.com>
References: <44b2bd060901150725w11a6a5dbp148801af40c03060@mail.gmail.com>
	<OF4CD49C44.E4AE40BA-ON8625753F.0058CC72-8625753F.0058F53C@tcs.com>
Message-ID: <44b2bd060901150827l6e767570p5be35c6e393b072c@mail.gmail.com>

I would happily accept what you say if you say how it protects.

Tell me **how** would a sniffer miss your validation code on an unencrypted
channel. We should talk about mitigating not minimizing.

Oh ! unless you are saying, a different off band validation code is sent for
**each** request - then it is possible but it is impractical even in high
risk applications.

On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary <plash.chowdhary at tcs.com>wrote:

>
> It does Gunwant, Use long one time off band validation....and keep a short
> TTL it will minimize the risk of relpay,....
>
>
>
>  *"Gunwant Singh" <gunwant.s at gmail.com>*
>
> 01/15/2009 09:25 AM
>   To
> "Plash Chowdhary" <plash.chowdhary at tcs.com>  cc
> owasp-delhi at lists.owasp.org  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
> That doesn't affirm protection against replay attack, dude!
> In the transit, anyone can see your validation code...
> Even if you hash/encrypt it, still it can used to replay the traffic...
> this is vulnerable.. :)
>
> On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary <*plash.chowdhary at tcs.com
> * <plash.chowdhary at tcs.com>> wrote:
>
> verify user offline.. send an sms(or similar) with a validation code(long
> randomly genrated  string) to the user everytime he logs in to validate and
> use it everytime a transaction (high risk) is done or role is  changed..
> best way still will be to use it over SSL and use digital signatures
>
> Regards
> Plash
>
>
>
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
> Sent by: *owasp-delhi-bounces at lists.owasp.org*<owasp-delhi-bounces at lists.owasp.org>
>
> 01/14/2009 10:13 AM
>
>   To
> "Karthik Muthukrishnan" <*karthik.muthukrishnan at tcs.com*<karthik.muthukrishnan at tcs.com>
> >  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
> Hi,
>
> Thanks for your reply but that did not answer my question. You are telling
> me what I can use for protecting the credentials. I know what I can use, but
> just out of curiousity I want to know if I don't use SSL/VPN or any other
> network based protection, what else can be done on the application layer in
> order to protect the credentials. Please see the answers below.
>
> On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <*
> karthik.muthukrishnan at tcs.com* <karthik.muthukrishnan at tcs.com>> wrote:
>
> > salted MD5 hashing protects the authentication credentials rightly from
> eavesdropping on the network.
> Salting is used to protect MD5 hashes from rainbow table attacks.
> Apparently Yes, although ultimately it protects authentication credentials
> only. Facts say the highest risk is eavesdropping if the session is
> unencrypted.
>
> > SSL does the same thing.
> Yes, SSL is used to ensure confidentiality and trust in the network
> communiation. Confidentiality (or prevention of network eavesdropping) is
> ensured by encryption. Trust is accomplished by Server and/or client
> certificates.
> I know what SSL does, but my question is something else.
>
> > However, in some scenarios SSL might not be feasible. For example,
> causing heavy load on the server or may be some applications don't support
> it, etc.
> In such cases SSL Accelerators are used. They are devices which can be fit
> into the architecture without changing the application or affecting the load
> on the application server.
>
> Again my question is something else. I know if SSL doesn't work,
> accelerators help expedite the processing. What I want to know is, if I "Do
> Not" want to use SSL what measures can be taken.
>
>
> > We can protect the authentication credentials using salted MD5 hashing
> or by using SSL.
> To protect authentication credentials in HTTP, we have to rely on SSL.
> Hashes are a secure (aka not in clear text) way to store authentication
> credentials.
> So you are proclaiming that we *have to* rely  on SSL- no other
> alternative.
> Hashes are also used in many applications for many different purposes
> besides authenticity and integrity.
>
>
> > In order to protect the Session credentials (Session ID, tokens,
> cookies, etc) on a non-SSL channel what measures can be taken?
> To protect either auth or session credentials we have to ensure
> confidentiality of the communication channel. If we dont use HTTPS, then VPN
> might be another option. While authentication credentials can be protected
> by some challenge handshake mechanism (similar to CHAP), we would need to
> protect session creds by encrypting the channel.
> I was asking that if we can provide some protection on the application
> level rather than on the network level. Besides SSL/VPN there are many
> options available for protecting the authentication credentials. I want to
> know (just out of curiousity) that how can we secure the session credentials
> on an unencrypted/non-SSL channel. I know this will take too much processing
> cycles, time synchronization, quantization in milliseconds even nanoseconds,
> affirmation of the key exchange, dynamic hashing key generation to mitigate
> replay attacks, and even more.
>
> I just want to know  if anyone has an idea on how it can be done if h/she
> is willing to share that would be really appreciative. Please make sure
> you understand what I am looking for.
> No offence :)
>
>
>
> Karthik
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
> _______________________________________________
> Owasp-delhi mailing list*
> **Owasp-delhi at lists.owasp.org* <Owasp-delhi at lists.owasp.org>*
> **https://lists.owasp.org/mailman/listinfo/owasp-delhi*<https://lists.owasp.org/mailman/listinfo/owasp-delhi>
>
> ForwardSourceID:NT00005236
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT000052F2
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>


-- 
Gunwant Singh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090115/1c6b5b20/attachment-0001.html 

From plash.chowdhary at tcs.com  Thu Jan 15 12:59:41 2009
From: plash.chowdhary at tcs.com (Plash Chowdhary)
Date: Thu, 15 Jan 2009 11:59:41 -0600
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <44b2bd060901150827l6e767570p5be35c6e393b072c@mail.gmail.com>
Message-ID: <OF99012330.FDAFFB74-ON8625753F.0061D1B2-8625753F.0062E764@tcs.com>

Gunwant,,

Yes impractical "Off band validation" for each request in the conditions 
you have set. Now either you come up with a solution or im implimenting 
SSL : )

Regards
Plash



"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 10:27 AM

To
"Plash Chowdhary" <plash.chowdhary at tcs.com>
cc
owasp-delhi at lists.owasp.org
Subject
Re: [Owasp-delhi] SSL Broken..






I would happily accept what you say if you say how it protects.

Tell me *how* would a sniffer miss your validation code on an unencrypted 
channel. We should talk about mitigating not minimizing.

Oh ! unless you are saying, a different off band validation code is sent 
for *each* request - then it is possible but it is impractical even in 
high risk applications.

On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary <plash.chowdhary at tcs.com> 
wrote:

It does Gunwant, Use long one time off band validation....and keep a short 
TTL it will minimize the risk of relpay,.... 



"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 09:25 AM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..








That doesn't affirm protection against replay attack, dude!
In the transit, anyone can see your validation code...
Even if you hash/encrypt it, still it can used to replay the traffic...
this is vulnerable.. :)

On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary <plash.chowdhary at tcs.com> 
wrote: 

verify user offline.. send an sms(or similar) with a validation code(long 
randomly genrated  string) to the user everytime he logs in to validate 
and use it everytime a transaction (high risk) is done or role is 
changed.. best way still will be to use it over SSL and use digital 
signatures 

Regards 
Plash 



"Gunwant Singh" <gunwant.s at gmail.com> 
Sent by: owasp-delhi-bounces at lists.owasp.org 
01/14/2009 10:13 AM 


To
"Karthik Muthukrishnan" <karthik.muthukrishnan at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..










Hi,

Thanks for your reply but that did not answer my question. You are telling 
me what I can use for protecting the credentials. I know what I can use, 
but just out of curiousity I want to know if I don't use SSL/VPN or any 
other network based protection, what else can be done on the application 
layer in order to protect the credentials. Please see the answers below.

On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <
karthik.muthukrishnan at tcs.com> wrote: 

> salted MD5 hashing protects the authentication credentials rightly from 
eavesdropping on the network. 
Salting is used to protect MD5 hashes from rainbow table attacks. 
Apparently Yes, although ultimately it protects authentication credentials 
only. Facts say the highest risk is eavesdropping if the session is 
unencrypted. 

> SSL does the same thing. 
Yes, SSL is used to ensure confidentiality and trust in the network 
communiation. Confidentiality (or prevention of network eavesdropping) is 
ensured by encryption. Trust is accomplished by Server and/or client 
certificates. 
I know what SSL does, but my question is something else. 

> However, in some scenarios SSL might not be feasible. For example, 
causing heavy load on the server or may be some applications don't support 
it, etc. 
In such cases SSL Accelerators are used. They are devices which can be fit 
into the architecture without changing the application or affecting the 
load on the application server. 
Again my question is something else. I know if SSL doesn't work, 
accelerators help expedite the processing. What I want to know is, if I 
"Do Not" want to use SSL what measures can be taken. 


> We can protect the authentication credentials using salted MD5 hashing 
or by using SSL. 
To protect authentication credentials in HTTP, we have to rely on SSL. 
Hashes are a secure (aka not in clear text) way to store authentication 
credentials. 
So you are proclaiming that we *have to* rely  on SSL- no other 
alternative. 
Hashes are also used in many applications for many different purposes 
besides authenticity and integrity. 


> In order to protect the Session credentials (Session ID, tokens, 
cookies, etc) on a non-SSL channel what measures can be taken? 
To protect either auth or session credentials we have to ensure 
confidentiality of the communication channel. If we dont use HTTPS, then 
VPN might be another option. While authentication credentials can be 
protected by some challenge handshake mechanism (similar to CHAP), we 
would need to protect session creds by encrypting the channel. 
I was asking that if we can provide some protection on the application 
level rather than on the network level. Besides SSL/VPN there are many 
options available for protecting the authentication credentials. I want to 
know (just out of curiousity) that how can we secure the session 
credentials on an unencrypted/non-SSL channel. I know this will take too 
much processing cycles, time synchronization, quantization in milliseconds 
even nanoseconds, affirmation of the key exchange, dynamic hashing key 
generation to mitigate replay attacks, and even more. 

I just want to know  if anyone has an idea on how it can be done if h/she 
is willing to share that would be really appreciative. Please make sure 
you understand what I am looking for.
No offence :)



Karthik 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh 
_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-delhi

ForwardSourceID:NT00005236     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT000052F2     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT0000530E 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you


-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090115/7247d605/attachment.html 

From gunwant.s at gmail.com  Thu Jan 15 13:30:45 2009
From: gunwant.s at gmail.com (Gunwant Singh)
Date: Fri, 16 Jan 2009 00:00:45 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <OF99012330.FDAFFB74-ON8625753F.0061D1B2-8625753F.0062E764@tcs.com>
References: <44b2bd060901150827l6e767570p5be35c6e393b072c@mail.gmail.com>
	<OF99012330.FDAFFB74-ON8625753F.0061D1B2-8625753F.0062E764@tcs.com>
Message-ID: <44b2bd060901151030g11954fcfm8ef1ad8236a39c95@mail.gmail.com>

Plash,

Thanks for the idea. Please don't take my talks as overstatements, I just
wanted to have some innovative ideas from you guys.

Many organizations implement session mechanisms without using SSL. As a
matter of fact these are not the conditions that I have set. There are many
scenarios where using SSL is unworkable and in order to provide protection,
there are solutions.

Also, it becomes more relevant when people are trying to prove the
weaknesses of SSL. Not to forget, facts say that most organizations who use
SSL, use self signed certificates rather than a CA sign it.

For sessions on non-SSL, there are many undocumented solutions which can be
put into practice but such solutions needs to be well-reviewed and
well-tested before they are implemented. I have come to know about one of
the methods implemented by one of the top e-commerce portal giants. This
solution is a bit tough to understand and subsequently implement it. Before
I discuss it on the mailing list, I need to make sure that I understand it
well. The only thing I can share at the moment is, it uses time-stamps.
Hopefully, I would be discussing this proposition in detail in the upcoming
Delhi Chapter meeting this month.

Sorry if my talks were exaggerated. I still seek more ideas on the same
question if someone is willing to share.

Many thanks.

On Thu, Jan 15, 2009 at 11:29 PM, Plash Chowdhary
<plash.chowdhary at tcs.com>wrote:

>
> Gunwant,,
>
> Yes impractical "Off band validation" for each request in the conditions
> you have set. Now either you come up with a solution or im implimenting SSL
> *: )*
>
> Regards
> Plash
>
>
>  *"Gunwant Singh" <gunwant.s at gmail.com>*
>
> 01/15/2009 10:27 AM
>   To
> "Plash Chowdhary" <plash.chowdhary at tcs.com>  cc
> owasp-delhi at lists.owasp.org  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
> I would happily accept what you say if you say how it protects.
>
> Tell me **how** would a sniffer miss your validation code on an
> unencrypted channel. We should talk about mitigating not minimizing.
>
> Oh ! unless you are saying, a different off band validation code is sent
> for **each** request - then it is possible but it is impractical even in
> high risk applications.
>
> On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary <*plash.chowdhary at tcs.com
> * <plash.chowdhary at tcs.com>> wrote:
>
> It does Gunwant, Use long one time off band validation....and keep a short
> TTL it will minimize the risk of relpay,....
>
>
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 09:25 AM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
> cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
> That doesn't affirm protection against replay attack, dude!
> In the transit, anyone can see your validation code...
> Even if you hash/encrypt it, still it can used to replay the traffic...
> this is vulnerable.. :)
>
> On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary <*plash.chowdhary at tcs.com
> * <plash.chowdhary at tcs.com>> wrote:
>
> verify user offline.. send an sms(or similar) with a validation code(long
> randomly genrated  string) to the user everytime he logs in to validate and
> use it everytime a transaction (high risk) is done or role is  changed..
> best way still will be to use it over SSL and use digital signatures
>
> Regards
> Plash
>
>
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
> Sent by: *owasp-delhi-bounces at lists.owasp.org*<owasp-delhi-bounces at lists.owasp.org>
>
> 01/14/2009 10:13 AM
>
>   To
> "Karthik Muthukrishnan" <*karthik.muthukrishnan at tcs.com*<karthik.muthukrishnan at tcs.com>
> >  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
> Hi,
>
> Thanks for your reply but that did not answer my question. You are telling
> me what I can use for protecting the credentials. I know what I can use, but
> just out of curiousity I want to know if I don't use SSL/VPN or any other
> network based protection, what else can be done on the application layer in
> order to protect the credentials. Please see the answers below.
>
> On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <*
> karthik.muthukrishnan at tcs.com* <karthik.muthukrishnan at tcs.com>> wrote:
>
> > salted MD5 hashing protects the authentication credentials rightly from
> eavesdropping on the network.
> Salting is used to protect MD5 hashes from rainbow table attacks.
> Apparently Yes, although ultimately it protects authentication credentials
> only. Facts say the highest risk is eavesdropping if the session is
> unencrypted.
>
> > SSL does the same thing.
> Yes, SSL is used to ensure confidentiality and trust in the network
> communiation. Confidentiality (or prevention of network eavesdropping) is
> ensured by encryption. Trust is accomplished by Server and/or client
> certificates.
> I know what SSL does, but my question is something else.
>
> > However, in some scenarios SSL might not be feasible. For example,
> causing heavy load on the server or may be some applications don't support
> it, etc.
> In such cases SSL Accelerators are used. They are devices which can be fit
> into the architecture without changing the application or affecting the load
> on the application server.
>
> Again my question is something else. I know if SSL doesn't work,
> accelerators help expedite the processing. What I want to know is, if I "Do
> Not" want to use SSL what measures can be taken.
>
>
> > We can protect the authentication credentials using salted MD5 hashing
> or by using SSL.
> To protect authentication credentials in HTTP, we have to rely on SSL.
> Hashes are a secure (aka not in clear text) way to store authentication
> credentials.
> So you are proclaiming that we *have to* rely  on SSL- no other
> alternative.
> Hashes are also used in many applications for many different purposes
> besides authenticity and integrity.
>
>
> > In order to protect the Session credentials (Session ID, tokens,
> cookies, etc) on a non-SSL channel what measures can be taken?
> To protect either auth or session credentials we have to ensure
> confidentiality of the communication channel. If we dont use HTTPS, then VPN
> might be another option. While authentication credentials can be protected
> by some challenge handshake mechanism (similar to CHAP), we would need to
> protect session creds by encrypting the channel.
> I was asking that if we can provide some protection on the application
> level rather than on the network level. Besides SSL/VPN there are many
> options available for protecting the authentication credentials. I want to
> know (just out of curiousity) that how can we secure the session credentials
> on an unencrypted/non-SSL channel. I know this will take too much processing
> cycles, time synchronization, quantization in milliseconds even nanoseconds,
> affirmation of the key exchange, dynamic hashing key generation to mitigate
> replay attacks, and even more.
>
> I just want to know  if anyone has an idea on how it can be done if h/she
> is willing to share that would be really appreciative. Please make sure
> you understand what I am looking for.
> No offence :)
>
>
>
> Karthik
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
> _______________________________________________
> Owasp-delhi mailing list*
> **Owasp-delhi at lists.owasp.org* <Owasp-delhi at lists.owasp.org>*
> **https://lists.owasp.org/mailman/listinfo/owasp-delhi*<https://lists.owasp.org/mailman/listinfo/owasp-delhi>
>
> ForwardSourceID:NT00005236
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT000052F2
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT0000530E
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>


-- 
Gunwant Singh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090116/10456797/attachment-0001.html 

From plash.chowdhary at tcs.com  Thu Jan 15 17:56:15 2009
From: plash.chowdhary at tcs.com (Plash Chowdhary)
Date: Thu, 15 Jan 2009 16:56:15 -0600
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <44b2bd060901151030g11954fcfm8ef1ad8236a39c95@mail.gmail.com>
Message-ID: <OFF182303A.BBD37293-ON8625753F.007D0F97-8625753F.007E0E06@tcs.com>

Gunwant,

I will be interested to know kind of soltutions are being used.
SInce you are talking about **Time stamp**(in clear text will be 
perdictable, specially if a client side algo is being used) <some random 
number in hidden field with every request,<unique captcha with every 
request (this will be interesting)  can be a case but they will be not as 
roboust  as out of band..
some how with Time stamps only thing that rings bell is CRYPTOGRAPHY : D 
(PKI??)

I will be really surprized if that organization is not using SSL from a 
Vendor. (as you said its an e commerce site)

and anyways i wont be using HTTPS on public content of my site and will 
switch to HTTPS session only when needed (IDEALLY)


lemme know your thoughts

Regards
Plash






"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 12:30 PM

To
"Plash Chowdhary" <plash.chowdhary at tcs.com>
cc
owasp-delhi at lists.owasp.org
Subject
Re: [Owasp-delhi] SSL Broken..






Plash, 

Thanks for the idea. Please don't take my talks as overstatements, I just 
wanted to have some innovative ideas from you guys.

Many organizations implement session mechanisms without using SSL. As a 
matter of fact these are not the conditions that I have set. There are 
many scenarios where using SSL is unworkable and in order to provide 
protection, there are solutions. 

Also, it becomes more relevant when people are trying to prove the 
weaknesses of SSL. Not to forget, facts say that most organizations who 
use SSL, use self signed certificates rather than a CA sign it. 

For sessions on non-SSL, there are many undocumented solutions which can 
be put into practice but such solutions needs to be well-reviewed and 
well-tested before they are implemented. I have come to know about one of 
the methods implemented by one of the top e-commerce portal giants. This 
solution is a bit tough to understand and subsequently implement it. 
Before I discuss it on the mailing list, I need to make sure that I 
understand it well. The only thing I can share at the moment is, it uses 
time-stamps. Hopefully, I would be discussing this proposition in detail 
in the upcoming Delhi Chapter meeting this month.

Sorry if my talks were exaggerated. I still seek more ideas on the same 
question if someone is willing to share. 

Many thanks. 

On Thu, Jan 15, 2009 at 11:29 PM, Plash Chowdhary <plash.chowdhary at tcs.com
> wrote:

Gunwant,, 

Yes impractical "Off band validation" for each request in the conditions 
you have set. Now either you come up with a solution or im implimenting 
SSL : ) 

Regards 
Plash 


"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 10:27 AM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..








I would happily accept what you say if you say how it protects.

Tell me *how* would a sniffer miss your validation code on an unencrypted 
channel. We should talk about mitigating not minimizing.

Oh ! unless you are saying, a different off band validation code is sent 
for *each* request - then it is possible but it is impractical even in 
high risk applications.

On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary <plash.chowdhary at tcs.com> 
wrote: 

It does Gunwant, Use long one time off band validation....and keep a short 
TTL it will minimize the risk of relpay,.... 


"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 09:25 AM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..










That doesn't affirm protection against replay attack, dude!
In the transit, anyone can see your validation code...
Even if you hash/encrypt it, still it can used to replay the traffic...
this is vulnerable.. :)

On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary <plash.chowdhary at tcs.com> 
wrote: 

verify user offline.. send an sms(or similar) with a validation code(long 
randomly genrated  string) to the user everytime he logs in to validate 
and use it everytime a transaction (high risk) is done or role is 
changed.. best way still will be to use it over SSL and use digital 
signatures 

Regards 
Plash 


"Gunwant Singh" <gunwant.s at gmail.com> 
Sent by: owasp-delhi-bounces at lists.owasp.org 
01/14/2009 10:13 AM 


To
"Karthik Muthukrishnan" <karthik.muthukrishnan at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..












Hi,

Thanks for your reply but that did not answer my question. You are telling 
me what I can use for protecting the credentials. I know what I can use, 
but just out of curiousity I want to know if I don't use SSL/VPN or any 
other network based protection, what else can be done on the application 
layer in order to protect the credentials. Please see the answers below.

On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <
karthik.muthukrishnan at tcs.com> wrote: 

> salted MD5 hashing protects the authentication credentials rightly from 
eavesdropping on the network. 
Salting is used to protect MD5 hashes from rainbow table attacks. 
Apparently Yes, although ultimately it protects authentication credentials 
only. Facts say the highest risk is eavesdropping if the session is 
unencrypted. 

> SSL does the same thing. 
Yes, SSL is used to ensure confidentiality and trust in the network 
communiation. Confidentiality (or prevention of network eavesdropping) is 
ensured by encryption. Trust is accomplished by Server and/or client 
certificates. 
I know what SSL does, but my question is something else. 

> However, in some scenarios SSL might not be feasible. For example, 
causing heavy load on the server or may be some applications don't support 
it, etc. 
In such cases SSL Accelerators are used. They are devices which can be fit 
into the architecture without changing the application or affecting the 
load on the application server. 
Again my question is something else. I know if SSL doesn't work, 
accelerators help expedite the processing. What I want to know is, if I 
"Do Not" want to use SSL what measures can be taken. 


> We can protect the authentication credentials using salted MD5 hashing 
or by using SSL. 
To protect authentication credentials in HTTP, we have to rely on SSL. 
Hashes are a secure (aka not in clear text) way to store authentication 
credentials. 
So you are proclaiming that we *have to* rely  on SSL- no other 
alternative. 
Hashes are also used in many applications for many different purposes 
besides authenticity and integrity. 


> In order to protect the Session credentials (Session ID, tokens, 
cookies, etc) on a non-SSL channel what measures can be taken? 
To protect either auth or session credentials we have to ensure 
confidentiality of the communication channel. If we dont use HTTPS, then 
VPN might be another option. While authentication credentials can be 
protected by some challenge handshake mechanism (similar to CHAP), we 
would need to protect session creds by encrypting the channel. 
I was asking that if we can provide some protection on the application 
level rather than on the network level. Besides SSL/VPN there are many 
options available for protecting the authentication credentials. I want to 
know (just out of curiousity) that how can we secure the session 
credentials on an unencrypted/non-SSL channel. I know this will take too 
much processing cycles, time synchronization, quantization in milliseconds 
even nanoseconds, affirmation of the key exchange, dynamic hashing key 
generation to mitigate replay attacks, and even more. 

I just want to know  if anyone has an idea on how it can be done if h/she 
is willing to share that would be really appreciative. Please make sure 
you understand what I am looking for.
No offence :)



Karthik 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh 
_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-delhi

ForwardSourceID:NT00005236     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT000052F2     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT0000530E     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT0000533A 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you


-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090115/cf9de053/attachment-0001.html 

From pranav.joshi at kriss.in  Fri Jan 16 06:59:58 2009
From: pranav.joshi at kriss.in (Pranav Joshi)
Date: Fri, 16 Jan 2009 17:29:58 +0530 (IST)
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <44b2bd060901120841q4426daeo607e7f7839dc5bb5@mail.gmail.com>
References: <37698.121.241.121.185.1231488272.squirrel@kriss.in>
	<44b2bd060901120841q4426daeo607e7f7839dc5bb5@mail.gmail.com>
Message-ID: <36091.121.241.121.188.1232107198.squirrel@kriss.in>

Hey Gunwant,

Apologies for the delay..

I had to sift through a lot of GHTQ material to gather em.

MD5Coll - http://www.stachliu.com/md5coll.c
StripWire - http://www.doxpara.com/stripwire-1.1.tar.gz
ConFoo.pl - http://www.doxpara.com/research/md5/confoo.pl
MD5 Deep - http://md5deep.sourceforge.net/


All,

Since I see many people here on the mailing list who seem deeply
interested in the topic I'm sharing some notes I've compiled.

-------------------------------------------------------------------------------------------

Around August of 2004 certain Researchers in China Published Research
documents that they could hash collisions within MD5.. This was not very
meaningful threat as they concentrated on creating two random blobs of
data with colliding hashes. The researchers did not publish the details of
their algorithm instead they published 'X' and 'Y' samples with colliding
MD5 hashes for proving their theory.

http://eprint.iacr.org/2004/199.pdf

In 2005 Dan Kaminsky created a tool called 'stripwire'which could create
certain perl scripts with colliding hashes,

In early 2006 some guys figured out that they could do the same to
PostScript documents.

Some time later, Dan Kaminsky came back with 'ConFoo' showing that he
could do it with web pages.

'MD5coll' is a tool you can use to create your very own 'X' and 'Y' with
colliding hashes.

Researchers have known for a very long time that if 'X' is not equal to
'Y' but share a hash collision then you can append 'Q' to both 'X' and 'Y'
and the hash collision will be preserved provided X and Y are increments
of 64 bytes in length.

If one uses this information very cleverly some very interesting things
can be made possible. Suppose we have evil code 'P' which opens up a
backdoor, here we take 'X' which has a collission with 'Y', We take SHA-1
of 'X' (this is not an attack against SHA-1 (we're using it simply to
shrink it down to be able to use it as a key) to use it as an AES key to
encrypt 'P' the evil code thus getting 'Q' (Which is the encrypted evil
code 'P', encrypted using a key derived from 'X' which happens to have a
hash collision with 'Y').

Now we take the encrypted evil code 'Q' and append it to 'X and 'Y'...

Dan Kaminsky calls the derived 'X'+'Q' and 'Y'+'Q' as 'Fire' and 'Ice'.
Ice is completely innocuous blob of bits followed by something which is
encrypted, which really cant fo anything.
Fire, however is evil..

To make fire work you need to do the following

1. Slice off the initial 'X' from 'X'+'Q'
2. Generate SHA-1 of 'X'.
3. Use the derived SHA-1 as the AES key to decrypt 'Q' and get 'P'
4. Execute 'P'.

This functionality is incorporated into StripWire and is called as 'Evil
Execution Harness'..
Problem: Fire has the potential to do something evil but Fire can't do
much without Ice as it is dependent on 'X'..

Research suggests that MD5 collisions can be preserved by pre-pending evil
data:
http://www.doxpara.com/research/md5/232-md5-considered-harmful-slides.pdf

If I could do pre-pending, then I could put the 'Evil execution Harness'
upfront which upon execution would start cryptographic function and
depending upon the result of the cryptographic function would start
branching execution either launching benign code or malicious one.

ConFoo can demonstrate this very nicely, it works by taking two separate
web pages, convolving them together, adding the appropriate 'X' and 'Y',
adding a javascript to implement the 'execution harness' and creating
pages t1 and t2 with MD5 collisions.

Bye,
Pranav

> Pranav,
>
> Thanks for the information. Would you mind sharing the name of the tools
> for
> MD5 cracking? I'll be thankful.
>
> All,
>
> I was curious about a question on Sessions which I wanted to ask you all
> since some time back but did not get any chance due to some reasons. I
> have
> asked this question on some forums as well, so excuse me if you have
> already
> heard of this.
>
> As we all know salted MD5 hashing protects the authentication credentials
> rightly from eavesdropping on the network. SSL does the same thing.
> However,
> in some scenarios SSL might not be feasible. For example, causing heavy
> load
> on the server or may be some applications don't support it, etc.
>
> Apparently we need to protect 2 crucial things in the HTTP header from the
> person sniffing the network traffic. "Authentication Credentials and
> Session
> Credentials"
>
> We can protect the authentication credentials using salted MD5 hashing or
> by
> using SSL. In case SSL implementation is not feasible, salted MD5 will
> still
> protect the authentication credentials but not the Session Credentials. In
> order to protect the Session credentials (Session ID, tokens, cookies,
> etc)
> on a non-SSL channel what measures can be taken?
>
> Thoughts?
>
> -Gunwant
>
>
>
> On Fri, Jan 9, 2009 at 1:34 PM, Pranav Joshi <pranav.joshi at kriss.in>
> wrote:
>
>> Hi Gunwant,
>>
>> > Fyi, even SHA-1 is susceptible to collision attacks. Practically even
>> if
>> MD5
>> > or SHA-1 are broken, this vulnerability still can't be readily used to
>> exploit the certificate genuinity uptil 'Now'
>>
>> Absolutely, I completely agree with your point that SHA-1 is susceptible
>> to collisions.
>>
>> The only difference between them is that colliding SHA-1 still a
>> mathematical probability of 2^63 computational cycles, So far nobody has
>> been able show a working collision for SHA-1.
>>
>> > IMHO I am sure this will be exploited with a solid rationale in the
>> near
>> future.
>>
>> Absolutely.. It's just a matter of biding time till someone figures out
>> a
>> way, IMHO, PS3's (Cell Based Systems) & GPUs are doing a remarkably
>> praiseworthy job of shrinking the computational time-line.
>>
>> Having said that, the point I wanted to make regarding MD5 specifically
>> was that POCs and tools for attacking MD5 have been available for close
>> to
>> 3 years and these attacks have been a part of GHTQ curriculum. but
>> nothing
>> was serious as this for MD5 uptil 'Now'... the metaphorical "final nail
>> in
>> the coffin".
>>
>> The best bet as of now is to rely on multiple hashing algorithms for
>> critical systems; so even if one collision is generated other hashes
>> would
>> fail to match.
>>
>> NOTE: I can't recollect the names of those tools mentioned here but if
>> someone is interested in knowing them lemme know, I'd be glad to
>> re-lookup
>> the same.
>>
>> Warm Regards,
>> Pranav Joshi
>> Consultant - Information Security [CISA/GHTQ/GWAS/Security+]
>> Email: pranav.joshi at kriss.in
>> Phone: +91-9958967766
>>
>> > Hi,
>> >
>> > Thanks for sharing the information. Just wanted to add some more to
>> this.
>> >
>> > As you said:
>> > "Since, MD5 is also used in signing certificates the browsers will
>> have
>> no
>> > way of telling the difference between a genuine and a rogue website
>> unless
>> > other hashing algorithms like SHA-1 are also used."
>> >
>> > Fyi, even SHA-1 is susceptible to collision attacks. Practically even
>> if
>> MD5
>> > or SHA-1 are broken, this vulnerability still can't be readily used to
>> exploit the certificate genuinity uptil 'Now'. Having said that I did
>> not
>> > mean that it can't be exploited at all thereby further exposing
>> insecurity
>> > on the internet. What I am saying is until some more research is done
>> on
>> how
>> > to exploit this in relevance to the certificates, we can unwind and
>> count
>> > on
>> > atleast the certificates for now.
>> >
>> > Some guys have come up with a PoC for the same, however not at a very
>> reasonable level.
>> > May be you want to have a look at these:
>> >
>> > http://www.cryptography.com/cnews/hash.html<
>> https://houmail.halliburton.com/OWA/redir.aspx?C=52ed613179914f85a1b0ae5a68761f71&URL=http%3a%2f%2fwww.cryptography.com%2fcnews%2fhash.html
>> >
>> http://www.securityfocus.com/columnists/488
>> >
>> > IMHO I am sure this will be exploited with a solid rationale in the
>> near
>> future.
>> >
>> > Thanks,
>> > -Gunwant Singh
>> >
>> > On Fri, Jan 2, 2009 at 1:46 PM, Pranav Joshi <pranav.joshi at kriss.in>
>> wrote:
>> >
>> >> Hello Everyone.
>> >> It's been quite a while since security issues with MD5 algorithm
>> started
>> >> cropping up regarding reproducible hash collisions (a.k.a Birthday
>> Attack), this one ups the ante by driving the final nail in it's
>> coffin.
>> >> Since, MD5 is also used in signing certificates the browsers will
>> have
>> no
>> >> way of telling the difference between a genuine and a rogue website
>> unless
>> >> other hashing algorithms like SHA-1 are also used.
>> >> http://blogs.computerworld.com/md5_ca_hack_and_the_ps3
>> >> Warm Regards,
>> >> Pranav Joshi
>> >> Consultant - Information Security [CISA/GHTQ/GWAS/Security+]
>> >> Email: pranav.joshi at kriss.in
>> >> Phone: +91-9958967766
>> >> _______________________________________________
>> >> Owasp-delhi mailing list
>> >> Owasp-delhi at lists.owasp.org
>> >> https://lists.owasp.org/mailman/listinfo/owasp-delhi
>> >
>> >
>> >
>> > --
>> > Gunwant Singh
>> >
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>
>
> --
> Gunwant Singh
>


From karthik.muthukrishnan at tcs.com  Fri Jan 16 09:39:15 2009
From: karthik.muthukrishnan at tcs.com (Karthik Muthukrishnan)
Date: Fri, 16 Jan 2009 20:09:15 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <44b2bd060901150827l6e767570p5be35c6e393b072c@mail.gmail.com>
Message-ID: <OF82FD5E4A.B9285C63-ON42257540.00501C79-42257540.00507811@tcs.com>

> Oh ! unless you are saying, a different off band validation code is sent 
for *each* request - then it is possible but it is impractical even in 
high risk applications.
Yes,  one time passcodes for each request. We have seen some banking 
applications use this approach for *each* high risk request.

Karthik

--
Karthik Muthukrishnan, CISSP - ISSAP,
Security Consultant




"Gunwant Singh" <gunwant.s at gmail.com> 
Sent by: owasp-delhi-bounces at lists.owasp.org
01/15/2009 06:27 PM

To
"Plash Chowdhary" <plash.chowdhary at tcs.com>
cc
owasp-delhi at lists.owasp.org
Subject
Re: [Owasp-delhi] SSL Broken..






I would happily accept what you say if you say how it protects.

Tell me *how* would a sniffer miss your validation code on an unencrypted 
channel. We should talk about mitigating not minimizing.

Oh ! unless you are saying, a different off band validation code is sent 
for *each* request - then it is possible but it is impractical even in 
high risk applications.

On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary <plash.chowdhary at tcs.com> 
wrote:

It does Gunwant, Use long one time off band validation....and keep a short 
TTL it will minimize the risk of relpay,.... 



"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 09:25 AM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..








That doesn't affirm protection against replay attack, dude!
In the transit, anyone can see your validation code...
Even if you hash/encrypt it, still it can used to replay the traffic...
this is vulnerable.. :)

On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary <plash.chowdhary at tcs.com> 
wrote: 

verify user offline.. send an sms(or similar) with a validation code(long 
randomly genrated  string) to the user everytime he logs in to validate 
and use it everytime a transaction (high risk) is done or role is 
changed.. best way still will be to use it over SSL and use digital 
signatures 

Regards 
Plash 



"Gunwant Singh" <gunwant.s at gmail.com> 
Sent by: owasp-delhi-bounces at lists.owasp.org 
01/14/2009 10:13 AM 


To
"Karthik Muthukrishnan" <karthik.muthukrishnan at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..










Hi,

Thanks for your reply but that did not answer my question. You are telling 
me what I can use for protecting the credentials. I know what I can use, 
but just out of curiousity I want to know if I don't use SSL/VPN or any 
other network based protection, what else can be done on the application 
layer in order to protect the credentials. Please see the answers below.

On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <
karthik.muthukrishnan at tcs.com> wrote: 

> salted MD5 hashing protects the authentication credentials rightly from 
eavesdropping on the network. 
Salting is used to protect MD5 hashes from rainbow table attacks. 
Apparently Yes, although ultimately it protects authentication credentials 
only. Facts say the highest risk is eavesdropping if the session is 
unencrypted. 

> SSL does the same thing. 
Yes, SSL is used to ensure confidentiality and trust in the network 
communiation. Confidentiality (or prevention of network eavesdropping) is 
ensured by encryption. Trust is accomplished by Server and/or client 
certificates. 
I know what SSL does, but my question is something else. 

> However, in some scenarios SSL might not be feasible. For example, 
causing heavy load on the server or may be some applications don't support 
it, etc. 
In such cases SSL Accelerators are used. They are devices which can be fit 
into the architecture without changing the application or affecting the 
load on the application server. 
Again my question is something else. I know if SSL doesn't work, 
accelerators help expedite the processing. What I want to know is, if I 
"Do Not" want to use SSL what measures can be taken. 


> We can protect the authentication credentials using salted MD5 hashing 
or by using SSL. 
To protect authentication credentials in HTTP, we have to rely on SSL. 
Hashes are a secure (aka not in clear text) way to store authentication 
credentials. 
So you are proclaiming that we *have to* rely  on SSL- no other 
alternative. 
Hashes are also used in many applications for many different purposes 
besides authenticity and integrity. 


> In order to protect the Session credentials (Session ID, tokens, 
cookies, etc) on a non-SSL channel what measures can be taken? 
To protect either auth or session credentials we have to ensure 
confidentiality of the communication channel. If we dont use HTTPS, then 
VPN might be another option. While authentication credentials can be 
protected by some challenge handshake mechanism (similar to CHAP), we 
would need to protect session creds by encrypting the channel. 
I was asking that if we can provide some protection on the application 
level rather than on the network level. Besides SSL/VPN there are many 
options available for protecting the authentication credentials. I want to 
know (just out of curiousity) that how can we secure the session 
credentials on an unencrypted/non-SSL channel. I know this will take too 
much processing cycles, time synchronization, quantization in milliseconds 
even nanoseconds, affirmation of the key exchange, dynamic hashing key 
generation to mitigate replay attacks, and even more. 

I just want to know  if anyone has an idea on how it can be done if h/she 
is willing to share that would be really appreciative. Please make sure 
you understand what I am looking for.
No offence :)



Karthik 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh 
_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-delhi

ForwardSourceID:NT00005236     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT000052F2     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh
_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-delhi

ForwardSourceID:NT00011A22 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you


-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090116/c50c8b31/attachment-0001.html 

From gunwant.s at gmail.com  Fri Jan 16 12:36:48 2009
From: gunwant.s at gmail.com (Gunwant Singh)
Date: Fri, 16 Jan 2009 23:06:48 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <44b2bd060901160927k62218046yc3c9beea05356c8a@mail.gmail.com>
References: <44b2bd060901151030g11954fcfm8ef1ad8236a39c95@mail.gmail.com>
	<OFF182303A.BBD37293-ON8625753F.007D0F97-8625753F.007E0E06@tcs.com>
	<44b2bd060901160927k62218046yc3c9beea05356c8a@mail.gmail.com>
Message-ID: <44b2bd060901160936q1ced8262m4c4ee91280d2100f@mail.gmail.com>

Hi,

Ok, let me elucidate the workings of the technique I was talking about.

But before that I just want to shed some light on a few things so no-one
comes again questioning to me about these and start some endless argument.

- The e-commerce site I was talking about, I never said that they are only
using the technique I am going to discuss. They might be using other
techniques for their protection. What I meant was I've not seen/heard anyone
else using this technique. That doesn't mean that they are only using this
technique for their protection. Every giant incorporates multi-tier security
for their resources.  I am not sure what exactly they are using besides this
technique as Nobody reveals that.  I questioned someone on a forum, he came
up with this technique, I studied, checked this on their documentation page,
discussed with some people, discussed with some more, argued with even more
and now I am here. I am looking for some feedback from you all. Just let me
know what ever you think is wrong with this. Anyhow the question is not that
whether they are using it or not but the question is 'How good is the
technique?'

- Please don't misinterpret my statement. I am not saying 'Don't use SSL'.
SSL is definitely a protection mechanism for "Now" if we use it
appropriately (CA signed certificate with a well-tested, well-reviewed
implementation). Use SSL till someone finds some exploit *practically* not
theoretically. This whole discussion is based on a research question so I/we
can get a *feasible* working solution for this (may-be-a-future) problem. If
you are not interested in discussing please do not comment. And please do
not envisage what I am not saying.

So here is how it works.

No SSL. All traffic in clear text.
Initially we need to communicate an OOB password/code/nonce (whatever you
call it) to the client - only *once* not each time.


1. The client initiates a connection request to the server. As a result,
server will initiate a handshake process to synchronize the time-stamps
between the client and itself. Then the server will analyze tolerance time
of packets leaving the client workstation till it reaches the server. The
tolerance time is configured so to manage slow hosts or slow traffic. In
plain words, server synchronizes date and time (in seconds, milliseconds or
even nanoseconds based on the criticality of the application) with the
client.

2. At the client side: the message, instantaneous time-stamp and the
password are concatenated and hashed via SHA-1/SHA-256, whatever one wishes.
This ensuing hash is combined with the username to form an authentication
header and sent to the server.

3. At the server side, the server sees the username and perceives which user
is trying to authenticate. Based on the tolerance configured initially at
the handshake time, it picks the time-stamp from its own clock and using the
password and the message it generates the hash in the same way as it was
done at the client side.

4. If the hash matches it generates a Session ID and maps it to the username
of the user. This Session ID will be sent from the client to the server
along with the computed hash (which is different for each request - see next
Step)

5. Now if the client sends another request, it appends and then hashes the
message, password and the time-stamp (which will be apparently because of
the different instantaneous time-stamp i.e. date and time). This resulting
string is sent to the server along with the Session ID assigned to the user
earlier. The resulting string contains a different hash as the time has
changed. This will be validated at the server the same way as in Step 3.

Now how can an adversary exploit this scenario? What I think of are two
ways:

1. Either he will capture one of the hashes and try to predict the next hash
by brute forcing different time-stamps.

- But this can not be possible. He doesn't have the password to generate the
hash.
2. What if he captures a series of requests and responses and replays them
back to the server at a later stage.

- This can't be possible either. In order to interact with the server, one
needs to handshake so to synchronize itself with the server's clock. The
attacker would not be able to synchronize because he would not be able to
synchronize the *past-timestamp* (in the captured traffic) with the server's
current time.

3. Lastly for the newbies, what if he captures the Session ID.
- But he would not be able to produce the matching Hash for the request, so
no luck.

A few things to contemplate:

1. This will be considerably be CPU intensive but can be acknowledged if
compared to the processing cycles SSL takes.

2. Time synchronization can be complex. I have no idea how to do that.
3. Please provide your
feedback/fury/antagonism/annoyance/appreciation/whatever. Hope I explained
this in a very straightforward way.

Thanks.

Gunwant




On Fri, Jan 16, 2009 at 4:26 AM, Plash Chowdhary <plash.chowdhary at tcs.com>wrote:

>
> Gunwant,
>
> I will be interested to know kind of soltutions are being used.
> SInce you are talking about **Time stamp**(in clear text will be
> perdictable, specially if a client side algo is being used) <some random
> number in hidden field with every request,<unique captcha with every request
> (this will be interesting)  can be a case but they will be not as roboust
>  as out of band..
> some how with Time stamps only thing that rings bell is CRYPTOGRAPHY *: D
> *(PKI??)
>
> I will be really surprized if that organization is not using SSL from a
> Vendor. (as you said its an e commerce site)
>
> and anyways i wont be using HTTPS on public content of my site and will
> switch to HTTPS session only when needed (IDEALLY)
>
>
> lemme know your thoughts
>
> Regards
> Plash
>
>
>
>
>
>  *"Gunwant Singh" <gunwant.s at gmail.com>*
>
> 01/15/2009 12:30 PM
>   To
> "Plash Chowdhary" <plash.chowdhary at tcs.com>  cc
> owasp-delhi at lists.owasp.org  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
> Plash,
>
> Thanks for the idea. Please don't take my talks as overstatements, I just
> wanted to have some innovative ideas from you guys.
>
> Many organizations implement session mechanisms without using SSL. As a
> matter of fact these are not the conditions that I have set. There are many
> scenarios where using SSL is unworkable and in order to provide protection,
> there are solutions.
>
> Also, it becomes more relevant when people are trying to prove the
> weaknesses of SSL. Not to forget, facts say that most organizations who use
> SSL, use self signed certificates rather than a CA sign it.
>
> For sessions on non-SSL, there are many undocumented solutions which can be
> put into practice but such solutions needs to be well-reviewed and
> well-tested before they are implemented. I have come to know about one of
> the methods implemented by one of the top e-commerce portal giants. This
> solution is a bit tough to understand and subsequently implement it. Before
> I discuss it on the mailing list, I need to make sure that I understand it
> well. The only thing I can share at the moment is, it uses time-stamps.
> Hopefully, I would be discussing this proposition in detail in the upcoming
> Delhi Chapter meeting this month.
>
> Sorry if my talks were exaggerated. I still seek more ideas on the same
> question if someone is willing to share.
>
> Many thanks.
>
> On Thu, Jan 15, 2009 at 11:29 PM, Plash Chowdhary <*
> plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
>
> Gunwant,,
>
> Yes impractical "Off band validation" for each request in the conditions
> you have set. Now either you come up with a solution or im implimenting SSL
> *: )*
>
> Regards
> Plash
>
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 10:27 AM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
> cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
> I would happily accept what you say if you say how it protects.
>
> Tell me **how** would a sniffer miss your validation code on an
> unencrypted channel. We should talk about mitigating not minimizing.
>
> Oh ! unless you are saying, a different off band validation code is sent
> for **each** request - then it is possible but it is impractical even in
> high risk applications.
>
> On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary <*plash.chowdhary at tcs.com
> * <plash.chowdhary at tcs.com>> wrote:
>
> It does Gunwant, Use long one time off band validation....and keep a short
> TTL it will minimize the risk of relpay,....
>
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 09:25 AM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
> cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
> That doesn't affirm protection against replay attack, dude!
> In the transit, anyone can see your validation code...
> Even if you hash/encrypt it, still it can used to replay the traffic...
> this is vulnerable.. :)
>
> On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary <*plash.chowdhary at tcs.com
> * <plash.chowdhary at tcs.com>> wrote:
>
> verify user offline.. send an sms(or similar) with a validation code(long
> randomly genrated  string) to the user everytime he logs in to validate and
> use it everytime a transaction (high risk) is done or role is  changed..
> best way still will be to use it over SSL and use digital signatures
>
> Regards
> Plash
>
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
> Sent by: *owasp-delhi-bounces at lists.owasp.org*<owasp-delhi-bounces at lists.owasp.org>
>
> 01/14/2009 10:13 AM
>
>   To
> "Karthik Muthukrishnan" <*karthik.muthukrishnan at tcs.com*<karthik.muthukrishnan at tcs.com>
> >  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
> Hi,
>
> Thanks for your reply but that did not answer my question. You are telling
> me what I can use for protecting the credentials. I know what I can use, but
> just out of curiousity I want to know if I don't use SSL/VPN or any other
> network based protection, what else can be done on the application layer in
> order to protect the credentials. Please see the answers below.
>
> On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <*
> karthik.muthukrishnan at tcs.com* <karthik.muthukrishnan at tcs.com>> wrote:
>
> > salted MD5 hashing protects the authentication credentials rightly from
> eavesdropping on the network.
> Salting is used to protect MD5 hashes from rainbow table attacks.
> Apparently Yes, although ultimately it protects authentication credentials
> only. Facts say the highest risk is eavesdropping if the session is
> unencrypted.
>
> > SSL does the same thing.
> Yes, SSL is used to ensure confidentiality and trust in the network
> communiation. Confidentiality (or prevention of network eavesdropping) is
> ensured by encryption. Trust is accomplished by Server and/or client
> certificates.
> I know what SSL does, but my question is something else.
>
> > However, in some scenarios SSL might not be feasible. For example,
> causing heavy load on the server or may be some applications don't support
> it, etc.
> In such cases SSL Accelerators are used. They are devices which can be fit
> into the architecture without changing the application or affecting the load
> on the application server.
>
> Again my question is something else. I know if SSL doesn't work,
> accelerators help expedite the processing. What I want to know is, if I "Do
> Not" want to use SSL what measures can be taken.
>
>
> > We can protect the authentication credentials using salted MD5 hashing
> or by using SSL.
> To protect authentication credentials in HTTP, we have to rely on SSL.
> Hashes are a secure (aka not in clear text) way to store authentication
> credentials.
> So you are proclaiming that we *have to* rely  on SSL- no other
> alternative.
> Hashes are also used in many applications for many different purposes
> besides authenticity and integrity.
>
>
> > In order to protect the Session credentials (Session ID, tokens,
> cookies, etc) on a non-SSL channel what measures can be taken?
> To protect either auth or session credentials we have to ensure
> confidentiality of the communication channel. If we dont use HTTPS, then VPN
> might be another option. While authentication credentials can be protected
> by some challenge handshake mechanism (similar to CHAP), we would need to
> protect session creds by encrypting the channel.
> I was asking that if we can provide some protection on the application
> level rather than on the network level. Besides SSL/VPN there are many
> options available for protecting the authentication credentials. I want to
> know (just out of curiousity) that how can we secure the session credentials
> on an unencrypted/non-SSL channel. I know this will take too much processing
> cycles, time synchronization, quantization in milliseconds even nanoseconds,
> affirmation of the key exchange, dynamic hashing key generation to mitigate
> replay attacks, and even more.
>
> I just want to know  if anyone has an idea on how it can be done if h/she
> is willing to share that would be really appreciative. Please make sure
> you understand what I am looking for.
> No offence :)
>
>
>
> Karthik
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
> _______________________________________________
> Owasp-delhi mailing list*
> **Owasp-delhi at lists.owasp.org* <Owasp-delhi at lists.owasp.org>*
> **https://lists.owasp.org/mailman/listinfo/owasp-delhi*<https://lists.owasp.org/mailman/listinfo/owasp-delhi>
>
> ForwardSourceID:NT00005236
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT000052F2
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT0000530E
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT0000533A
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>


-- 
Gunwant Singh




-- 
Gunwant Singh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090116/91c0598f/attachment-0001.html 

From gunwant.s at gmail.com  Fri Jan 16 13:08:31 2009
From: gunwant.s at gmail.com (Gunwant Singh)
Date: Fri, 16 Jan 2009 23:38:31 +0530
Subject: [Owasp-delhi] Thanks...
Message-ID: <44b2bd060901161008q61512a29me36f8d808c937457@mail.gmail.com>

Pranav,

Thank you very much for the wealth of information :)

Regards.

On Fri, Jan 16, 2009 at 5:29 PM, Pranav Joshi <pranav.joshi at kriss.in> wrote:
Hey Gunwant,

Apologies for the delay..

I had to sift through a lot of GHTQ material to gather em.

MD5Coll - http://www.stachliu.com/md5coll.c
StripWire - http://www.doxpara.com/stripwire-1.1.tar.gz
ConFoo.pl <http://www.doxpara.com/stripwire-1.1.tar.gzConFoo.pl> -
http://www.doxpara.com/research/md5/confoo.pl
MD5 Deep - http://md5deep.sourceforge.net/


All,

Since I see many people here on the mailing list who seem deeply
interested in the topic I'm sharing some notes I've compiled.

------------------------------
>
> -------------------------------------------------------------
>
> Around August of 2004 certain Researchers in China Published Research
> documents that they could hash collisions within MD5.. This was not very
> meaningful threat as they concentrated on creating two random blobs of
> data with colliding hashes. The researchers did not publish the details of
> their algorithm instead they published 'X' and 'Y' samples with colliding
> MD5 hashes for proving their theory.
>
> http://eprint.iacr.org/2004/199.pdf
>
> In 2005 Dan Kaminsky created a tool called 'stripwire'which could create
> certain perl scripts with colliding hashes,
>
> In early 2006 some guys figured out that they could do the same to
> PostScript documents.
>
> Some time later, Dan Kaminsky came back with 'ConFoo' showing that he
> could do it with web pages.
>
> 'MD5coll' is a tool you can use to create your very own 'X' and 'Y' with
> colliding hashes.
>
> Researchers have known for a very long time that if 'X' is not equal to
> 'Y' but share a hash collision then you can append 'Q' to both 'X' and 'Y'
> and the hash collision will be preserved provided X and Y are increments
> of 64 bytes in length.
>
> If one uses this information very cleverly some very interesting things
> can be made possible. Suppose we have evil code 'P' which opens up a
> backdoor, here we take 'X' which has a collission with 'Y', We take SHA-1
> of 'X' (this is not an attack against SHA-1 (we're using it simply to
> shrink it down to be able to use it as a key) to use it as an AES key to
> encrypt 'P' the evil code thus getting 'Q' (Which is the encrypted evil
> code 'P', encrypted using a key derived from 'X' which happens to have a
> hash collision with 'Y').
>
> Now we take the encrypted evil code 'Q' and append it to 'X and 'Y'...
>
> Dan Kaminsky calls the derived 'X'+'Q' and 'Y'+'Q' as 'Fire' and 'Ice'.
> Ice is completely innocuous blob of bits followed by something which is
> encrypted, which really cant fo anything.
> Fire, however is evil..
>
> To make fire work you need to do the following
>
> 1. Slice off the initial 'X' from 'X'+'Q'
> 2. Generate SHA-1 of 'X'.
> 3. Use the derived SHA-1 as the AES key to decrypt 'Q' and get 'P'
> 4. Execute 'P'.
>
> This functionality is incorporated into StripWire and is called as 'Evil
> Execution Harness'..
> Problem: Fire has the potential to do something evil but Fire can't do
> much without Ice as it is dependent on 'X'..
>
> Research suggests that MD5 collisions can be preserved by pre-pending evil
> data:
> http://www.doxpara.com/research/md5/232-md5-considered-harmful-slides.pdf
>
> If I could do pre-pending, then I could put the 'Evil execution Harness'
> upfront which upon execution would start cryptographic function and
> depending upon the result of the cryptographic function would start
> branching execution either launching benign code or malicious one.
>
> ConFoo can demonstrate this very nicely, it works by taking two separate
> web pages, convolving them together, adding the appropriate 'X' and 'Y',
> adding a javascript to implement the 'execution harness' and creating
> pages t1 and t2 with MD5 collisions.
>
> Bye,
> Pranav
>
> > Pranav,
> >
> > Thanks for the information. Would you mind sharing the name of the tools
> > for
> > MD5 cracking? I'll be thankful.
> >
> > All,
> >
> > I was curious about a question on Sessions which I wanted to ask you all
> > since some time back but did not get any chance due to some reasons. I
> > have
> > asked this question on some forums as well, so excuse me if you have
> > already
> > heard of this.
> >
> > As we all know salted MD5 hashing protects the authentication credentials
> > rightly from eavesdropping on the network. SSL does the same thing.
> > However,
> > in some scenarios SSL might not be feasible. For example, causing heavy
> > load
> > on the server or may be some applications don't support it, etc.
> >
> > Apparently we need to protect 2 crucial things in the HTTP header from
> the
> > person sniffing the network traffic. "Authentication Credentials and
> > Session
> > Credentials"
> >
> > We can protect the authentication credentials using salted MD5 hashing or
> > by
> > using SSL. In case SSL implementation is not feasible, salted MD5 will
> > still
> > protect the authentication credentials but not the Session Credentials.
> In
> > order to protect the Session credentials (Session ID, tokens, cookies,
> > etc)
> > on a non-SSL channel what measures can be taken?
> >
> > Thoughts?
> >
> > -Gunwant
> >
> >
> >
> > On Fri, Jan 9, 2009 at 1:34 PM, Pranav Joshi <pranav.joshi at kriss.in>
> > wrote:
> >
> >> Hi Gunwant,
> >>
> >> > Fyi, even SHA-1 is susceptible to collision attacks. Practically even
> >> if
> >> MD5
> >> > or SHA-1 are broken, this vulnerability still can't be readily used to
> >> exploit the certificate genuinity uptil 'Now'
> >>
> >> Absolutely, I completely agree with your point that SHA-1 is susceptible
> >> to collisions.
> >>
> >> The only difference between them is that colliding SHA-1 still a
> >> mathematical probability of 2^63 computational cycles, So far nobody has
> >> been able show a working collision for SHA-1.
> >>
> >> > IMHO I am sure this will be exploited with a solid rationale in the
> >> near
> >> future.
> >>
> >> Absolutely.. It's just a matter of biding time till someone figures out
> >> a
> >> way, IMHO, PS3's (Cell Based Systems) & GPUs are doing a remarkably
> >> praiseworthy job of shrinking the computational time-line.
> >>
> >> Having said that, the point I wanted to make regarding MD5 specifically
> >> was that POCs and tools for attacking MD5 have been available for close
> >> to
> >> 3 years and these attacks have been a part of GHTQ curriculum. but
> >> nothing
> >> was serious as this for MD5 uptil 'Now'... the metaphorical "final nail
> >> in
> >> the coffin".
> >>
> >> The best bet as of now is to rely on multiple hashing algorithms for
> >> critical systems; so even if one collision is generated other hashes
> >> would
> >> fail to match.
> >>
> >> NOTE: I can't recollect the names of those tools mentioned here but if
> >> someone is interested in knowing them lemme know, I'd be glad to
> >> re-lookup
> >> the same.
> >>
> >> Warm Regards,
> >> Pranav Joshi
> >> Consultant - Information Security [CISA/GHTQ/GWAS/Security+]
> >> Email: pranav.joshi at kriss.in
> >> Phone: +91-9958967766
> >>
> >> > Hi,
> >> >
> >> > Thanks for sharing the information. Just wanted to add some more to
> >> this.
> >> >
> >> > As you said:
> >> > "Since, MD5 is also used in signing certificates the browsers will
> >> have
> >> no
> >> > way of telling the difference between a genuine and a rogue website
> >> unless
> >> > other hashing algorithms like SHA-1 are also used."
> >> >
> >> > Fyi, even SHA-1 is susceptible to collision attacks. Practically even
> >> if
> >> MD5
> >> > or SHA-1 are broken, this vulnerability still can't be readily used to
> >> exploit the certificate genuinity uptil 'Now'. Having said that I did
> >> not
> >> > mean that it can't be exploited at all thereby further exposing
> >> insecurity
> >> > on the internet. What I am saying is until some more research is done
> >> on
> >> how
> >> > to exploit this in relevance to the certificates, we can unwind and
> >> count
> >> > on
> >> > atleast the certificates for now.
> >> >
> >> > Some guys have come up with a PoC for the same, however not at a very
> >> reasonable level.
> >> > May be you want to have a look at these:
> >> >
> >> > http://www.cryptography.com/cnews/hash.html<
> >>
> https://houmail.halliburton.com/OWA/redir.aspx?C=52ed613179914f85a1b0ae5a68761f71&URL=http%3a%2f%2fwww.cryptography.com%2fcnews%2fhash.html
> >> >
> >> http://www.securityfocus.com/columnists/488
> >> >
> >> > IMHO I am sure this will be exploited with a solid rationale in the
> >> near
> >> future.
> >> >
> >> > Thanks,
> >> > -Gunwant Singh
> >> >
> >> > On Fri, Jan 2, 2009 at 1:46 PM, Pranav Joshi <pranav.joshi at kriss.in>
> >> wrote:
> >> >
> >> >> Hello Everyone.
> >> >> It's been quite a while since security issues with MD5 algorithm
> >> started
> >> >> cropping up regarding reproducible hash collisions (a.k.a Birthday
> >> Attack), this one ups the ante by driving the final nail in it's
> >> coffin.
> >> >> Since, MD5 is also used in signing certificates the browsers will
> >> have
> >> no
> >> >> way of telling the difference between a genuine and a rogue website
> >> unless
> >> >> other hashing algorithms like SHA-1 are also used.
> >> >> http://blogs.computerworld.com/md5_ca_hack_and_the_ps3
> >> >> Warm Regards,
> >> >> Pranav Joshi
> >> >> Consultant - Information Security [CISA/GHTQ/GWAS/Security+]
> >> >> Email: pranav.joshi at kriss.in
> >> >> Phone: +91-9958967766
> >> >> _______________________________________________
> >> >> Owasp-delhi mailing list
> >> >> Owasp-delhi at lists.owasp.org
> >> >> https://lists.owasp.org/mailman/listinfo/owasp-delhi
> >> >
> >> >
> >> >
> >> > --
> >> > Gunwant Singh
> >> >
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >
> >
> > --
> > Gunwant Singh
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090116/81899248/attachment-0001.html 

From gunwant.s at gmail.com  Sat Jan 17 00:44:58 2009
From: gunwant.s at gmail.com (Gunwant Singh)
Date: Sat, 17 Jan 2009 11:14:58 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <OF580E8F64.2335ED0F-ON86257540.00660DCA-86257540.00673816@tcs.com>
References: <44b2bd060901160927k62218046yc3c9beea05356c8a@mail.gmail.com>
	<OF580E8F64.2335ED0F-ON86257540.00660DCA-86257540.00673816@tcs.com>
Message-ID: <44b2bd060901162144r1a61dce8heb34df076d8c1c5b@mail.gmail.com>

>rehashing everytime and time synch would take considerable cycles. This
organisation mite have git custom made hardware to expidiate the process
some thing like an ssl accelarater

--I am not going to care about how the organization is going to implement
this stuff. I am just curious how good this technique can be. But its
correct that this is going to be quite CPU intensive, the same way as SSL.

>But I feel like CA's it is also suceptable to collision attacks....lets say
they are using SHA-1, ans sha -1 becomes vulnerable.. bith CA and this
methodology goes down...

--Who says you can only use SHA-1/256? Changing your own implementation is
not an issue instead of changing something that everyone is using like SSL.

>when the client sends "combined has of message, password and the time-stamp"
its like sending a digital signature ...whish has to be verified
everytime....your comments....??

--Correct, the same way as we do validate Session ID each time in typical
web applications.

>One of my friend always said... if you are making code more and more
complex.. one thing is for sure you have not understood teh reuirements .
I think this falls in the same catagory instead of using simple ssl with ssl
accelarater they have complicate dthings .. what do you say?

--So the whole point is I am not comparing this with SSL in the first place.
I do not want to replace SSL with this at all. Come on, this is just a draft
proposition of a thing that may deduce something helpful or may be not. So
lets not involve what SSL can do and what this technique cannot. SSL has its
own place.

Thanks for your feedback.


On Sat, Jan 17, 2009 at 12:16 AM, Plash Chowdhary
<plash.chowdhary at tcs.com>wrote:

>
> Gunwant,
>
> rehashing everytime and time synch would take considerable cycles. This
> organisation mite have git custom made hardware to expidiate the process
> some thing like an ssl accelarater
>
>  i would say it is an innovative different approch .....
>
> But I feel like CA's it is also suceptable to collision attacks....lets say
> they are using SHA-1, ans sha -1 becomes vulnerable.. bith CA and this
> methodology goes down...
>
> (My assumption is CA keys will be as complex as combinatio of time,
> username , password and session)
>
> On second thoughs
> when the client sends "combined has of message, password and the
> time-stamp" its like sending a digital signature ...whish has to be
> verified everytime....your comments....??
>
> One of my friend always said... if you are making code more and more
> complex.. one thing is for sure you have not understood teh reuirements .
> I think this falls in the same catagory instead of using simple ssl with
> ssl accelarater they have complicate dthings .. what do you say?
>
>
> regards
> Plash
>
>
>
>  *"Gunwant Singh" <gunwant.s at gmail.com>*
>
> 01/16/2009 11:27 AM
>   To
> "Plash Chowdhary" <plash.chowdhary at tcs.com>  cc
>   Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
> Hi,
>
> Ok, let me elucidate the workings of the technique I was talking about.
>
> But before that I just want to shed some light on a few things so no-one
> comes again questioning to me about these and start some endless argument.
>
> - The e-commerce site I was talking about, I never said that they are only
> using the technique I am going to discuss. They might be using other
> techniques for their protection. What I meant was I've not seen/heard anyone
> else using this technique. That doesn't mean that they are only using this
> technique for their protection. Every giant incorporates multi-tier security
> for their resources.  I am not sure what exactly they are using besides this
> technique as Nobody reveals that.  I questioned someone on a forum, he came
> up with this technique, I studied, checked this on their documentation page,
> discussed with some people, discussed with some more, argued with even more
> and now I am here. I am looking for some feedback from you all. Just let me
> know what ever you think is wrong with this. Anyhow the question is not that
> whether they are using it or not but the question is 'How good is the
> technique?'
>
> - Please don't misinterpret my statement. I am not saying 'Don't use SSL'.
> SSL is definitely a protection mechanism for "Now" if we use it
> appropriately (CA signed certificate with a well-tested, well-reviewed
> implementation). Use SSL till someone finds some exploit *practically* not
> theoretically. This whole discussion is based on a research question so I/we
> can get a *feasible* working solution for this (may-be-a-future) problem. If
> you are not interested in discussing please do not comment. And please do
> not envisage what I am not saying.
>
> So here is how it works.
>
> No SSL. All traffic in clear text.
> Initially we need to communicate an OOB password/code/nonce (whatever you
> call it) to the client - only *once* not each time.
>
>
> 1. The client initiates a connection request to the server. As a result,
> server will initiate a handshake process to synchronize the time-stamps
> between the client and itself. Then the server will analyze tolerance time
> of packets leaving the client workstation till it reaches the server. The
> tolerance time is configured so to manage slow hosts or slow traffic. In
> plain words, server synchronizes date and time (in seconds, milliseconds or
> even nanoseconds based on the criticality of the application) with the
> client.
>
> 2. At the client side: the message, instantaneous time-stamp and the
> password are concatenated and hashed via SHA-1/SHA-256, whatever one wishes.
> This ensuing hash is combined with the username to form an authentication
> header and sent to the server.
>
> 3. At the server side, the server sees the username and perceives which
> user is trying to authenticate. Based on the tolerance configured initially
> at the handshake time, it picks the time-stamp from its own clock and using
> the password and the message it generates the hash in the same way as it was
> done at the client side.
>
> 4. If the hash matches it generates a Session ID and maps it to the
> username of the user. This Session ID will be sent from the client to the
> server along with the computed hash (which is different for each request -
> see next Step)
>
> 5. Now if the client sends another request, it appends and then hashes the
> message, password and the time-stamp (which will be apparently because of
> the different instantaneous time-stamp i.e. date and time). This resulting
> string is sent to the server along with the Session ID assigned to the user
> earlier. The resulting string contains a different hash as the time has
> changed. This will be validated at the server the same way as in Step 3.
>
> Now how can an adversary exploit this scenario? What I think of are two
> ways:
>
> 1. Either he will capture one of the hashes and try to predict the next
> hash by brute forcing different time-stamps.
>
> - But this can not be possible. He doesn't have the password to generate
> the hash.
>
> 2. What if he captures a series of requests and responses and replays them
> back to the server at a later stage.
>
> - This can't be possible either. In order to interact with the server, one
> needs to handshake so to synchronize itself with the server's clock. The
> attacker would not be able to synchronize because he would not be able to
> synchronize the *past-timestamp* (in the captured traffic) with the server's
> current time.
>
> 3. Lastly for the newbies, what if he captures the Session ID.
>
> - But he would not be able to produce the matching Hash for the request, so
> no luck.
>
> A few things to contemplate:
>
> 1. This will be considerably be CPU intensive but can be acknowledged if
> compared to the processing cycles SSL takes.
>
> 2. Time synchronization can be complex. I have no idea how to do that.
>
> 3. Please provide your
> feedback/fury/antagonism/annoyance/appreciation/whatever. Hope I explained
> this in a very straightforward way.
>
> Thanks.
>
>
>
>
>
> On Fri, Jan 16, 2009 at 4:26 AM, Plash Chowdhary <*plash.chowdhary at tcs.com
> * <plash.chowdhary at tcs.com>> wrote:
>
> Gunwant,
>
> I will be interested to know kind of soltutions are being used.
> SInce you are talking about **Time stamp**(in clear text will be
> perdictable, specially if a client side algo is being used) <some random
> number in hidden field with every request,<unique captcha with every request
> (this will be interesting)  can be a case but they will be not as roboust
>  as out of band..
> some how with Time stamps only thing that rings bell is CRYPTOGRAPHY *: D
> *(PKI??)
>
> I will be really surprized if that organization is not using SSL from a
> Vendor. (as you said its an e commerce site)
>
> and anyways i wont be using HTTPS on public content of my site and will
> switch to HTTPS session only when needed (IDEALLY)
>
>
> lemme know your thoughts
>
> Regards
> Plash
>
>
>
>
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 12:30 PM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
> cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
> Plash,
>
> Thanks for the idea. Please don't take my talks as overstatements, I just
> wanted to have some innovative ideas from you guys.
>
> Many organizations implement session mechanisms without using SSL. As a
> matter of fact these are not the conditions that I have set. There are many
> scenarios where using SSL is unworkable and in order to provide protection,
> there are solutions.
>
> Also, it becomes more relevant when people are trying to prove the
> weaknesses of SSL. Not to forget, facts say that most organizations who use
> SSL, use self signed certificates rather than a CA sign it.
>
> For sessions on non-SSL, there are many undocumented solutions which can be
> put into practice but such solutions needs to be well-reviewed and
> well-tested before they are implemented. I have come to know about one of
> the methods implemented by one of the top e-commerce portal giants. This
> solution is a bit tough to understand and subsequently implement it. Before
> I discuss it on the mailing list, I need to make sure that I understand it
> well. The only thing I can share at the moment is, it uses time-stamps.
> Hopefully, I would be discussing this proposition in detail in the upcoming
> Delhi Chapter meeting this month.
>
> Sorry if my talks were exaggerated. I still seek more ideas on the same
> question if someone is willing to share.
>
> Many thanks.
>
> On Thu, Jan 15, 2009 at 11:29 PM, Plash Chowdhary <*
> plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
>
> Gunwant,,
>
> Yes impractical "Off band validation" for each request in the conditions
> you have set. Now either you come up with a solution or im implimenting SSL
> *: )*
>
> Regards
> Plash
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 10:27 AM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
> cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
> I would happily accept what you say if you say how it protects.
>
> Tell me **how** would a sniffer miss your validation code on an
> unencrypted channel. We should talk about mitigating not minimizing.
>
> Oh ! unless you are saying, a different off band validation code is sent
> for **each** request - then it is possible but it is impractical even in
> high risk applications.
>
> On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary <*plash.chowdhary at tcs.com
> * <plash.chowdhary at tcs.com>> wrote:
>
> It does Gunwant, Use long one time off band validation....and keep a short
> TTL it will minimize the risk of relpay,....
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 09:25 AM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
> cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
> That doesn't affirm protection against replay attack, dude!
> In the transit, anyone can see your validation code...
> Even if you hash/encrypt it, still it can used to replay the traffic...
> this is vulnerable.. :)
>
> On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary <*plash.chowdhary at tcs.com
> * <plash.chowdhary at tcs.com>> wrote:
>
> verify user offline.. send an sms(or similar) with a validation code(long
> randomly genrated  string) to the user everytime he logs in to validate and
> use it everytime a transaction (high risk) is done or role is  changed..
> best way still will be to use it over SSL and use digital signatures
>
> Regards
> Plash
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
> Sent by: *owasp-delhi-bounces at lists.owasp.org*<owasp-delhi-bounces at lists.owasp.org>
>
> 01/14/2009 10:13 AM
>
>   To
> "Karthik Muthukrishnan" <*karthik.muthukrishnan at tcs.com*<karthik.muthukrishnan at tcs.com>
> >  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
>
>
> Hi,
>
> Thanks for your reply but that did not answer my question. You are telling
> me what I can use for protecting the credentials. I know what I can use, but
> just out of curiousity I want to know if I don't use SSL/VPN or any other
> network based protection, what else can be done on the application layer in
> order to protect the credentials. Please see the answers below.
>
> On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <*
> karthik.muthukrishnan at tcs.com* <karthik.muthukrishnan at tcs.com>> wrote:
>
> > salted MD5 hashing protects the authentication credentials rightly from
> eavesdropping on the network.
> Salting is used to protect MD5 hashes from rainbow table attacks.
> Apparently Yes, although ultimately it protects authentication credentials
> only. Facts say the highest risk is eavesdropping if the session is
> unencrypted.
>
> > SSL does the same thing.
> Yes, SSL is used to ensure confidentiality and trust in the network
> communiation. Confidentiality (or prevention of network eavesdropping) is
> ensured by encryption. Trust is accomplished by Server and/or client
> certificates.
> I know what SSL does, but my question is something else.
>
> > However, in some scenarios SSL might not be feasible. For example,
> causing heavy load on the server or may be some applications don't support
> it, etc.
> In such cases SSL Accelerators are used. They are devices which can be fit
> into the architecture without changing the application or affecting the load
> on the application server.
>
> Again my question is something else. I know if SSL doesn't work,
> accelerators help expedite the processing. What I want to know is, if I "Do
> Not" want to use SSL what measures can be taken.
>
>
> > We can protect the authentication credentials using salted MD5 hashing
> or by using SSL.
> To protect authentication credentials in HTTP, we have to rely on SSL.
> Hashes are a secure (aka not in clear text) way to store authentication
> credentials.
> So you are proclaiming that we *have to* rely  on SSL- no other
> alternative.
> Hashes are also used in many applications for many different purposes
> besides authenticity and integrity.
>
>
> > In order to protect the Session credentials (Session ID, tokens,
> cookies, etc) on a non-SSL channel what measures can be taken?
> To protect either auth or session credentials we have to ensure
> confidentiality of the communication channel. If we dont use HTTPS, then VPN
> might be another option. While authentication credentials can be protected
> by some challenge handshake mechanism (similar to CHAP), we would need to
> protect session creds by encrypting the channel.
> I was asking that if we can provide some protection on the application
> level rather than on the network level. Besides SSL/VPN there are many
> options available for protecting the authentication credentials. I want to
> know (just out of curiousity) that how can we secure the session credentials
> on an unencrypted/non-SSL channel. I know this will take too much processing
> cycles, time synchronization, quantization in milliseconds even nanoseconds,
> affirmation of the key exchange, dynamic hashing key generation to mitigate
> replay attacks, and even more.
>
> I just want to know  if anyone has an idea on how it can be done if h/she
> is willing to share that would be really appreciative. Please make sure
> you understand what I am looking for.
> No offence :)
>
>
>
> Karthik
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
> _______________________________________________
> Owasp-delhi mailing list*
> **Owasp-delhi at lists.owasp.org* <Owasp-delhi at lists.owasp.org>*
> **https://lists.owasp.org/mailman/listinfo/owasp-delhi*<https://lists.owasp.org/mailman/listinfo/owasp-delhi>
>
> ForwardSourceID:NT00005236
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT000052F2
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT0000530E
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT0000533A
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT00005482
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>


-- 
Gunwant Singh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090117/315afb93/attachment-0001.html 

From lavakumar.kuppan at rbs.com  Mon Jan 19 02:34:41 2009
From: lavakumar.kuppan at rbs.com (lavakumar.kuppan at rbs.com)
Date: Mon, 19 Jan 2009 13:04:41 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <44b2bd060901160936q1ced8262m4c4ee91280d2100f@mail.gmail.com>
Message-ID: <OF0D3EC0C2.EBE44A83-ON65257543.0026509F-E5257543.0029AC9E@abnamro.com>

Hi Gunwant,

Thanks for bringing up this topic, can see that it has tickled quite a few 
brains in the list already ;), prompting some really intelligent ideas and 
arguments.
I was on vacations and missed out on all the fun here, but its never too 
late so here is my humble opinion.

There are two very important factors that have to be considered here:

1) Why is a session ID required.
2) What is the possibilty of some one with sniffing capability to 
intercept and manipulate the traffic.


1) Why is a session ID required
 I believe sessiond IDs are used to avoid connecting to the DB each time 
and validating the user's password, they are used to improve efficiency.
Now in the solution that you have suggested, the server has to fetch the 
user's password for each request which defeats the whole purpose of 
maintaning session IDs.
Since we are anyway reffering to the password for each request, I would 
like to think that we can authenticate for each request with the 
salted-hash technique you suggested in your december OWASP talk, provided 
once a salt is used the server discards it and issues a new one.
Ironically you had already suggested a solution and then asked the 
question, wonder if you were just checking if everyone understood your 
talk properly ;)

2) What is the possibilty of some one with sniffing capability to 
intercept and manipulate the traffic.
As someone who has done quite a bit of sniffing on customer networks 
during pentests, I think that someone who is capable of sniffing would in 
all probability also be capable of intercepting and manipulating the 
traffic between the client and server. There might be exceptions but they 
would be uncommon.
Any techniquie which enforces some trust on the client-side logic now gets 
defeated.
For your salted-hashning technique or the new techique there is to be a 
lot of client side JS code which has to create the salted hash and send it 
to the server. The attacker would just intercept this message and replace 
your JS with another JS which does every thing like the original JS but in 
addition steals the user's clear text password and appends to the request 
which the attacker can now get by viewing your request.
Once this happens the entitre security system is defeated as its so 
closely attached to the user's password.
So in my opinion once someone is able to intercept a clear-text traffic he 
could directly or indirectly bypass most restictions enforced.

The thing that differentiates SSL from the suggested approach is the use 
of Server certificates which establishes authenticity, unless we can 
figure out a way to do that our confidentiality and integrity solutions 
might fail.

Dont cosider thick client approach like java applets as reverse 
engineering is a possibility.

PS: OK, I have not suggested any solution,  am a pentester what do you 
expect :P

Thanks and Regards,
Lavakumar K
Penetration Tester - Global ISA



"Gunwant Singh" <gunwant.s at gmail.com> 
Sent by: owasp-delhi-bounces at lists.owasp.org
01/16/2009 11:06 PM

To
owasp-delhi at lists.owasp.org
cc

Subject
Re: [Owasp-delhi] SSL Broken..






Hi,
Ok, let me elucidate the workings of the technique I was talking about.

But before that I just want to shed some light on a few things so no-one 
comes again questioning to me about these and start some endless argument.

- The e-commerce site I was talking about, I never said that they are only 
using the technique I am going to discuss. They might be using other 
techniques for their protection. What I meant was I've not seen/heard 
anyone else using this technique. That doesn't mean that they are only 
using this technique for their protection. Every giant incorporates 
multi-tier security for their resources.  I am not sure what exactly they 
are using besides this technique as Nobody reveals that.  I questioned 
someone on a forum, he came up with this technique, I studied, checked 
this on their documentation page, discussed with some people, discussed 
with some more, argued with even more and now I am here. I am looking for 
some feedback from you all. Just let me know what ever you think is wrong 
with this. Anyhow the question is not that whether they are using it or 
not but the question is 'How good is the technique?'

- Please don't misinterpret my statement. I am not saying 'Don't use SSL'. 
SSL is definitely a protection mechanism for "Now" if we use it 
appropriately (CA signed certificate with a well-tested, well-reviewed 
implementation). Use SSL till someone finds some exploit *practically* not 
theoretically. This whole discussion is based on a research question so 
I/we can get a *feasible* working solution for this (may-be-a-future) 
problem. If you are not interested in discussing please do not comment. 
And please do not envisage what I am not saying.

So here is how it works.

No SSL. All traffic in clear text.
Initially we need to communicate an OOB password/code/nonce (whatever you 
call it) to the client - only *once* not each time.

1. The client initiates a connection request to the server. As a result, 
server will initiate a handshake process to synchronize the time-stamps 
between the client and itself. Then the server will analyze tolerance time 
of packets leaving the client workstation till it reaches the server. The 
tolerance time is configured so to manage slow hosts or slow traffic. In 
plain words, server synchronizes date and time (in seconds, milliseconds 
or even nanoseconds based on the criticality of the application) with the 
client.
2. At the client side: the message, instantaneous time-stamp and the 
password are concatenated and hashed via SHA-1/SHA-256, whatever one 
wishes. This ensuing hash is combined with the username to form an 
authentication header and sent to the server. 
3. At the server side, the server sees the username and perceives which 
user is trying to authenticate. Based on the tolerance configured 
initially at the handshake time, it picks the time-stamp from its own 
clock and using the password and the message it generates the hash in the 
same way as it was done at the client side.
4. If the hash matches it generates a Session ID and maps it to the 
username of the user. This Session ID will be sent from the client to the 
server along with the computed hash (which is different for each request - 
see next Step) 
5. Now if the client sends another request, it appends and then hashes the 
message, password and the time-stamp (which will be apparently because of 
the different instantaneous time-stamp i.e. date and time). This resulting 
string is sent to the server along with the Session ID assigned to the 
user earlier. The resulting string contains a different hash as the time 
has changed. This will be validated at the server the same way as in Step 
3.
Now how can an adversary exploit this scenario? What I think of are two 
ways:
1. Either he will capture one of the hashes and try to predict the next 
hash by brute forcing different time-stamps.
- But this can not be possible. He doesn't have the password to generate 
the hash.
2. What if he captures a series of requests and responses and replays them 
back to the server at a later stage. 
- This can't be possible either. In order to interact with the server, one 
needs to handshake so to synchronize itself with the server's clock. The 
attacker would not be able to synchronize because he would not be able to 
synchronize the *past-timestamp* (in the captured traffic) with the 
server's current time. 
3. Lastly for the newbies, what if he captures the Session ID.
- But he would not be able to produce the matching Hash for the request, 
so no luck.

A few things to contemplate:
1. This will be considerably be CPU intensive but can be acknowledged if 
compared to the processing cycles SSL takes.
2. Time synchronization can be complex. I have no idea how to do that. 
3. Please provide your 
feedback/fury/antagonism/annoyance/appreciation/whatever. Hope I explained 
this in a very straightforward way.
Thanks.
Gunwant
 


On Fri, Jan 16, 2009 at 4:26 AM, Plash Chowdhary <plash.chowdhary at tcs.com> 
wrote:

Gunwant, 

I will be interested to know kind of soltutions are being used. 
SInce you are talking about **Time stamp**(in clear text will be 
perdictable, specially if a client side algo is being used) <some random 
number in hidden field with every request,<unique captcha with every 
request (this will be interesting)  can be a case but they will be not as 
roboust  as out of band.. 
some how with Time stamps only thing that rings bell is CRYPTOGRAPHY : D 
(PKI??) 

I will be really surprized if that organization is not using SSL from a 
Vendor. (as you said its an e commerce site) 

and anyways i wont be using HTTPS on public content of my site and will 
switch to HTTPS session only when needed (IDEALLY) 


lemme know your thoughts 

Regards 
Plash 





"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 12:30 PM


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..








Plash, 

Thanks for the idea. Please don't take my talks as overstatements, I just 
wanted to have some innovative ideas from you guys.

Many organizations implement session mechanisms without using SSL. As a 
matter of fact these are not the conditions that I have set. There are 
many scenarios where using SSL is unworkable and in order to provide 
protection, there are solutions. 

Also, it becomes more relevant when people are trying to prove the 
weaknesses of SSL. Not to forget, facts say that most organizations who 
use SSL, use self signed certificates rather than a CA sign it. 

For sessions on non-SSL, there are many undocumented solutions which can 
be put into practice but such solutions needs to be well-reviewed and 
well-tested before they are implemented. I have come to know about one of 
the methods implemented by one of the top e-commerce portal giants. This 
solution is a bit tough to understand and subsequently implement it. 
Before I discuss it on the mailing list, I need to make sure that I 
understand it well. The only thing I can share at the moment is, it uses 
time-stamps. Hopefully, I would be discussing this proposition in detail 
in the upcoming Delhi Chapter meeting this month.

Sorry if my talks were exaggerated. I still seek more ideas on the same 
question if someone is willing to share. 

Many thanks. 

On Thu, Jan 15, 2009 at 11:29 PM, Plash Chowdhary <plash.chowdhary at tcs.com
> wrote: 

Gunwant,, 

Yes impractical "Off band validation" for each request in the conditions 
you have set. Now either you come up with a solution or im implimenting 
SSL : ) 

Regards 
Plash 

"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 10:27 AM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..










I would happily accept what you say if you say how it protects.

Tell me *how* would a sniffer miss your validation code on an unencrypted 
channel. We should talk about mitigating not minimizing.

Oh ! unless you are saying, a different off band validation code is sent 
for *each* request - then it is possible but it is impractical even in 
high risk applications.

On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary <plash.chowdhary at tcs.com> 
wrote: 

It does Gunwant, Use long one time off band validation....and keep a short 
TTL it will minimize the risk of relpay,.... 

"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 09:25 AM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..












That doesn't affirm protection against replay attack, dude!
In the transit, anyone can see your validation code...
Even if you hash/encrypt it, still it can used to replay the traffic...
this is vulnerable.. :)

On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary <plash.chowdhary at tcs.com> 
wrote: 

verify user offline.. send an sms(or similar) with a validation code(long 
randomly genrated  string) to the user everytime he logs in to validate 
and use it everytime a transaction (high risk) is done or role is 
changed.. best way still will be to use it over SSL and use digital 
signatures 

Regards 
Plash 

"Gunwant Singh" <gunwant.s at gmail.com> 
Sent by: owasp-delhi-bounces at lists.owasp.org 
01/14/2009 10:13 AM 


To
"Karthik Muthukrishnan" <karthik.muthukrishnan at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..














Hi,

Thanks for your reply but that did not answer my question. You are telling 
me what I can use for protecting the credentials. I know what I can use, 
but just out of curiousity I want to know if I don't use SSL/VPN or any 
other network based protection, what else can be done on the application 
layer in order to protect the credentials. Please see the answers below.

On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <
karthik.muthukrishnan at tcs.com> wrote: 

> salted MD5 hashing protects the authentication credentials rightly from 
eavesdropping on the network. 
Salting is used to protect MD5 hashes from rainbow table attacks. 
Apparently Yes, although ultimately it protects authentication credentials 
only. Facts say the highest risk is eavesdropping if the session is 
unencrypted. 

> SSL does the same thing. 
Yes, SSL is used to ensure confidentiality and trust in the network 
communiation. Confidentiality (or prevention of network eavesdropping) is 
ensured by encryption. Trust is accomplished by Server and/or client 
certificates. 
I know what SSL does, but my question is something else. 

> However, in some scenarios SSL might not be feasible. For example, 
causing heavy load on the server or may be some applications don't support 
it, etc. 
In such cases SSL Accelerators are used. They are devices which can be fit 
into the architecture without changing the application or affecting the 
load on the application server. 
Again my question is something else. I know if SSL doesn't work, 
accelerators help expedite the processing. What I want to know is, if I 
"Do Not" want to use SSL what measures can be taken. 


> We can protect the authentication credentials using salted MD5 hashing 
or by using SSL. 
To protect authentication credentials in HTTP, we have to rely on SSL. 
Hashes are a secure (aka not in clear text) way to store authentication 
credentials. 
So you are proclaiming that we *have to* rely  on SSL- no other 
alternative. 
Hashes are also used in many applications for many different purposes 
besides authenticity and integrity. 


> In order to protect the Session credentials (Session ID, tokens, 
cookies, etc) on a non-SSL channel what measures can be taken? 
To protect either auth or session credentials we have to ensure 
confidentiality of the communication channel. If we dont use HTTPS, then 
VPN might be another option. While authentication credentials can be 
protected by some challenge handshake mechanism (similar to CHAP), we 
would need to protect session creds by encrypting the channel. 
I was asking that if we can provide some protection on the application 
level rather than on the network level. Besides SSL/VPN there are many 
options available for protecting the authentication credentials. I want to 
know (just out of curiousity) that how can we secure the session 
credentials on an unencrypted/non-SSL channel. I know this will take too 
much processing cycles, time synchronization, quantization in milliseconds 
even nanoseconds, affirmation of the key exchange, dynamic hashing key 
generation to mitigate replay attacks, and even more. 

I just want to know  if anyone has an idea on how it can be done if h/she 
is willing to share that would be really appreciative. Please make sure 
you understand what I am looking for.
No offence :)



Karthik 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh 
_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-delhi

ForwardSourceID:NT00005236     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT000052F2     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT0000530E     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT0000533A     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh




-- 
Gunwant Singh
_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-delhi



This message (including any attachments) is confidential and may be privileged. If you have received it by mistake please notify the sender by return e-mail and delete this message from your system. Any unauthorised use or dissemination of this message in whole or in part is strictly prohibited. Please note that e-mails are susceptible to change. ABN AMRO Central Enterprise Services Pvt Ltd, part of RBS Group plc , having its registered office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel (W), Mumbai - 400 013 , including its group companies, shall not be liable for the improper or incomplete transmission of the information contained in this communication nor for any delay in its receipt or damage to your system. ABN AMRO Central Enterprise Services Pvt Ltd (or its group companies) does not guarantee that the integrity of this communication has been maintained nor that this communication is free of viruses, interceptions or interference.

______________________________________________________________________
This email has been scanned by the MessageLabs Email Security System.
For more information please visit http://www.messagelabs.com/email 
______________________________________________________________________
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090119/81e89472/attachment-0001.html 

From gunwant.s at gmail.com  Mon Jan 19 12:55:39 2009
From: gunwant.s at gmail.com (Gunwant Singh)
Date: Mon, 19 Jan 2009 23:25:39 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <OF0D3EC0C2.EBE44A83-ON65257543.0026509F-E5257543.0029AC9E@abnamro.com>
References: <44b2bd060901160936q1ced8262m4c4ee91280d2100f@mail.gmail.com>
	<OF0D3EC0C2.EBE44A83-ON65257543.0026509F-E5257543.0029AC9E@abnamro.com>
Message-ID: <44b2bd060901190955j11774427j2cc832d1e782267a@mail.gmail.com>

Hi Lava,

Nice to see your reply. Please see my thoughts on your comments.

>Now in the solution that you have suggested, the server has to fetch the
user's password for each request which defeats the whole purpose of
maintaning session IDs.

Good point. My suggestion on this: Access the password only once and store
it in a temporary variable securely for further transactions and then delete
it as the session ends.

>Ironically you had already suggested a solution and then asked the
question, wonder if you were just checking if everyone understood your talk
properly ;)

If you would have read this mailing thread from the very scratch, you would
have known that this question ain't related to salted MD5. I was not
checking if people understood my talks properly. I could have done that
there and then only.

>For your salted-hashning technique or the new techique there is to be a lot
of client side JS code which has to create the salted hash and send it to
the server. The attacker would just intercept this message and replace your
JS with another JS which does every thing like the original JS but in
addition steals the user's clear text password and appends to the request
which the attacker can now get by viewing your request.

I would like to comment about the salted hashing part in a different e-mail
(if I get some time) as this topic is not what I am talking about here.
About the technique, in case if you can manipulate the generated hash
somehow by intercepting, and make up your own hash, can you still be a part
of the same session. I don't think so. Let me know if you can. Check out the
way I told about its workings.

Could you come up with some *PoC* to what you said? You said intercepting
and manipulating the traffic on the fly travelling from the server to the
client or the other way around? How would you do that sitting somewhere on
the network? I am curious to know.

I don't know why you guys keep involving SSL with this thing.

Thanks for your feedback.

-Gunwant

On Mon, Jan 19, 2009 at 1:04 PM, <lavakumar.kuppan at rbs.com> wrote:

>
> Hi Gunwant,
>
> Thanks for bringing up this topic, can see that it has tickled quite a few
> brains in the list already ;), prompting some really intelligent ideas and
> arguments.
> I was on vacations and missed out on all the fun here, but its never too
> late so here is my humble opinion.
>
> There are two very important factors that have to be considered here:
>
> 1) Why is a session ID required.
> 2) What is the possibilty of some one with sniffing capability to intercept
> and manipulate the traffic.
>
>
> 1) Why is a session ID required
>  I believe sessiond IDs are used to avoid connecting to the DB each time
> and validating the user's password, they are used to improve efficiency.
> Now in the solution that you have suggested, the server has to fetch the
> user's password for each request which defeats the whole purpose of
> maintaning session IDs.
> Since we are anyway reffering to the password for each request, I would
> like to think that we can authenticate for each request with the salted-hash
> technique you suggested in your december OWASP talk, provided once a salt is
> used the server discards it and issues a new one.
> Ironically you had already suggested a solution and then asked the
> question, wonder if you were just checking if everyone understood your talk
> properly ;)
>
> 2) What is the possibilty of some one with sniffing capability to intercept
> and manipulate the traffic.
> As someone who has done quite a bit of sniffing on customer networks during
> pentests, I think that someone who is capable of sniffing would in all
> probability also be capable of intercepting and manipulating the traffic
> between the client and server. There might be exceptions but they would be
> uncommon.
> Any techniquie which enforces some trust on the client-side logic now gets
> defeated.
> For your salted-hashning technique or the new techique there is to be a lot
> of client side JS code which has to create the salted hash and send it to
> the server. The attacker would just intercept this message and replace your
> JS with another JS which does every thing like the original JS but in
> addition steals the user's clear text password and appends to the request
> which the attacker can now get by viewing your request.
> Once this happens the entitre security system is defeated as its so closely
> attached to the user's password.
> So in my opinion once someone is able to intercept a clear-text traffic he
> could directly or indirectly bypass most restictions enforced.
>
> The thing that differentiates SSL from the suggested approach is the use of
> Server certificates which establishes authenticity, unless we can figure out
> a way to do that our confidentiality and integrity solutions might fail.
>
> Dont cosider thick client approach like java applets as reverse engineering
> is a possibility.
>
> PS: OK, I have not suggested any solution,  am a pentester what do you
> expect :P
>
> Thanks and Regards,
> Lavakumar K
> Penetration Tester - Global ISA
>
>
>  *"Gunwant Singh" <gunwant.s at gmail.com>*
> Sent by: owasp-delhi-bounces at lists.owasp.org
>
> 01/16/2009 11:06 PM
>   To
> owasp-delhi at lists.owasp.org
>  cc
>   Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
> Hi,
>
> Ok, let me elucidate the workings of the technique I was talking about.
>
>
> But before that I just want to shed some light on a few things so no-one
> comes again questioning to me about these and start some endless argument.
>
> - The e-commerce site I was talking about, I never said that they are only
> using the technique I am going to discuss. They might be using other
> techniques for their protection. What I meant was I've not seen/heard anyone
> else using this technique. That doesn't mean that they are only using this
> technique for their protection. Every giant incorporates multi-tier security
> for their resources.  I am not sure what exactly they are using besides this
> technique as Nobody reveals that.  I questioned someone on a forum, he came
> up with this technique, I studied, checked this on their documentation page,
> discussed with some people, discussed with some more, argued with even more
> and now I am here. I am looking for some feedback from you all. Just let me
> know what ever you think is wrong with this. Anyhow the question is not that
> whether they are using it or not but the question is 'How good is the
> technique?'
>
> - Please don't misinterpret my statement. I am not saying 'Don't use SSL'.
> SSL is definitely a protection mechanism for "Now" if we use it
> appropriately (CA signed certificate with a well-tested, well-reviewed
> implementation). Use SSL till someone finds some exploit *practically* not
> theoretically. This whole discussion is based on a research question so I/we
> can get a *feasible* working solution for this (may-be-a-future) problem. If
> you are not interested in discussing please do not comment. And please do
> not envisage what I am not saying.
>
> So here is how it works.
>
> No SSL. All traffic in clear text.
> Initially we need to communicate an OOB password/code/nonce (whatever you
> call it) to the client - only *once* not each time.
>
>
> 1. The client initiates a connection request to the server. As a result,
> server will initiate a handshake process to synchronize the time-stamps
> between the client and itself. Then the server will analyze tolerance time
> of packets leaving the client workstation till it reaches the server. The
> tolerance time is configured so to manage slow hosts or slow traffic. In
> plain words, server synchronizes date and time (in seconds, milliseconds or
> even nanoseconds based on the criticality of the application) with the
> client.
>
> 2. At the client side: the message, instantaneous time-stamp and the
> password are concatenated and hashed via SHA-1/SHA-256, whatever one wishes.
> This ensuing hash is combined with the username to form an authentication
> header and sent to the server.
>
> 3. At the server side, the server sees the username and perceives which
> user is trying to authenticate. Based on the tolerance configured initially
> at the handshake time, it picks the time-stamp from its own clock and using
> the password and the message it generates the hash in the same way as it was
> done at the client side.
>
> 4. If the hash matches it generates a Session ID and maps it to the
> username of the user. This Session ID will be sent from the client to the
> server along with the computed hash (which is different for each request -
> see next Step)
>
> 5. Now if the client sends another request, it appends and then hashes the
> message, password and the time-stamp (which will be apparently because of
> the different instantaneous time-stamp i.e. date and time). This resulting
> string is sent to the server along with the Session ID assigned to the user
> earlier. The resulting string contains a different hash as the time has
> changed. This will be validated at the server the same way as in Step 3.
>
> Now how can an adversary exploit this scenario? What I think of are two
> ways:
>
> 1. Either he will capture one of the hashes and try to predict the next
> hash by brute forcing different time-stamps.
>
> - But this can not be possible. He doesn't have the password to generate
> the hash.
>
> 2. What if he captures a series of requests and responses and replays them
> back to the server at a later stage.
>
> - This can't be possible either. In order to interact with the server, one
> needs to handshake so to synchronize itself with the server's clock. The
> attacker would not be able to synchronize because he would not be able to
> synchronize the *past-timestamp* (in the captured traffic) with the server's
> current time.
>
> 3. Lastly for the newbies, what if he captures the Session ID.
>
> - But he would not be able to produce the matching Hash for the request, so
> no luck.
>
> A few things to contemplate:
>
> 1. This will be considerably be CPU intensive but can be acknowledged if
> compared to the processing cycles SSL takes.
>
> 2. Time synchronization can be complex. I have no idea how to do that.
>
> 3. Please provide your
> feedback/fury/antagonism/annoyance/appreciation/whatever. Hope I explained
> this in a very straightforward way.
>
> Thanks.
>
> Gunwant
>
>
>
>
>
> On Fri, Jan 16, 2009 at 4:26 AM, Plash Chowdhary <*plash.chowdhary at tcs.com
> * <plash.chowdhary at tcs.com>> wrote:
>
> Gunwant,
>
> I will be interested to know kind of soltutions are being used.
> SInce you are talking about **Time stamp**(in clear text will be
> perdictable, specially if a client side algo is being used) <some random
> number in hidden field with every request,<unique captcha with every request
> (this will be interesting)  can be a case but they will be not as roboust
>  as out of band..
> some how with Time stamps only thing that rings bell is CRYPTOGRAPHY *: D
> *(PKI??)
>
> I will be really surprized if that organization is not using SSL from a
> Vendor. (as you said its an e commerce site)
>
> and anyways i wont be using HTTPS on public content of my site and will
> switch to HTTPS session only when needed (IDEALLY)
>
>
> lemme know your thoughts
>
> Regards
> Plash
>
>
>
>
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 12:30 PM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
> cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
> Plash,
>
> Thanks for the idea. Please don't take my talks as overstatements, I just
> wanted to have some innovative ideas from you guys.
>
> Many organizations implement session mechanisms without using SSL. As a
> matter of fact these are not the conditions that I have set. There are many
> scenarios where using SSL is unworkable and in order to provide protection,
> there are solutions.
>
> Also, it becomes more relevant when people are trying to prove the
> weaknesses of SSL. Not to forget, facts say that most organizations who use
> SSL, use self signed certificates rather than a CA sign it.
>
> For sessions on non-SSL, there are many undocumented solutions which can be
> put into practice but such solutions needs to be well-reviewed and
> well-tested before they are implemented. I have come to know about one of
> the methods implemented by one of the top e-commerce portal giants. This
> solution is a bit tough to understand and subsequently implement it. Before
> I discuss it on the mailing list, I need to make sure that I understand it
> well. The only thing I can share at the moment is, it uses time-stamps.
> Hopefully, I would be discussing this proposition in detail in the upcoming
> Delhi Chapter meeting this month.
>
> Sorry if my talks were exaggerated. I still seek more ideas on the same
> question if someone is willing to share.
>
> Many thanks.
>
> On Thu, Jan 15, 2009 at 11:29 PM, Plash Chowdhary <
> *plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
>
> Gunwant,,
>
> Yes impractical "Off band validation" for each request in the conditions
> you have set. Now either you come up with a solution or im implimenting SSL
> *: )*
>
>
> Regards
> Plash
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 10:27 AM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
>  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
> I would happily accept what you say if you say how it protects.
>
> Tell me **how** would a sniffer miss your validation code on an
> unencrypted channel. We should talk about mitigating not minimizing.
>
> Oh ! unless you are saying, a different off band validation code is sent
> for **each** request - then it is possible but it is impractical even in
> high risk applications.
>
> On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary <
> *plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
>
> It does Gunwant, Use long one time off band validation....and keep a short
> TTL it will minimize the risk of relpay,....
>
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 09:25 AM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
>  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
> That doesn't affirm protection against replay attack, dude!
> In the transit, anyone can see your validation code...
> Even if you hash/encrypt it, still it can used to replay the traffic...
> this is vulnerable.. :)
>
> On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary <
> *plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
>
> verify user offline.. send an sms(or similar) with a validation code(long
> randomly genrated  string) to the user everytime he logs in to validate and
> use it everytime a transaction (high risk) is done or role is  changed..
> best way still will be to use it over SSL and use digital signatures
>
>
> Regards
> Plash
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>
> *>*
> Sent by: *owasp-delhi-bounces at lists.owasp.org*<owasp-delhi-bounces at lists.owasp.org>
>
> 01/14/2009 10:13 AM
>
>   To
> "Karthik Muthukrishnan" <*karthik.muthukrishnan at tcs.com*<karthik.muthukrishnan at tcs.com>
> >
>  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
>
>
> Hi,
>
> Thanks for your reply but that did not answer my question. You are telling
> me what I can use for protecting the credentials. I know what I can use, but
> just out of curiousity I want to know if I don't use SSL/VPN or any other
> network based protection, what else can be done on the application layer in
> order to protect the credentials
> . Please see the answers below.
>
>
> On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <*
> karthik.muthukrishnan at tcs.com* <karthik.muthukrishnan at tcs.com>> wrote:
>
> > salted MD5 hashing protects the authentication credentials rightly from
> eavesdropping on the network.
> Salting is used to protect MD5 hashes from rainbow table attacks.
> Apparently Yes, although ultimately it protects authentication credentials
> only. Facts say the highest risk is eavesdropping if the session is
> unencrypted.
>
> > SSL does the same thing.
> Yes, SSL is used to ensure confidentiality and trust in the network
> communiation. Confidentiality (or prevention of network eavesdropping) is
> ensured by encryption. Trust is accomplished by Server and/or client
> certificates.
> I know what SSL does, but my question is something else.
>
> > However, in some scenarios SSL might not be feasible. For example,
> causing heavy load on the server or may be some applications don't support
> it, etc.
> In such cases SSL Accelerators are used. They are devices which can be fit
> into the architecture without changing the application or affecting the load
> on the application server.
>
> Again my question is something else. I know if SSL doesn't work,
> accelerators help expedite the processing. What I want to know is, if I "Do
> Not" want to use SSL what measures can be taken.
>
>
> > We can protect the authentication credentials using salted MD5 hashing
> or by using SSL.
> To protect authentication credentials in HTTP, we have to rely on SSL.
> Hashes are a secure (aka not in clear text) way to store authentication
> credentials.
> So you are proclaiming that we *have to* rely  on SSL- no other
> alternative.
> Hashes are also used in many applications for many different purposes
> besides authenticity and integrity.
>
>
> > In order to protect the Session credentials (Session ID, tokens,
> cookies, etc) on a non-SSL channel what measures can be taken?
> To protect either auth or session credentials we have to ensure
> confidentiality of the communication channel. If we dont use HTTPS, then VPN
> might be another option. While authentication credentials can be protected
> by some challenge handshake mechanism (similar to CHAP), we would need to
> protect session creds by encrypting the channel.
> I was asking that if we can provide some protection on the application
> level rather than on the network level. Besides SSL/VPN there are many
> options available for protecting the authentication credentials. I want to
> know (just out of curiousity) that how can we secure the session credentials
> on an unencrypted/non-SSL channel. I know this will take too much processing
> cycles, time synchronization, quantization in milliseconds even nanoseconds,
> affirmation of the key exchange, dynamic hashing key generation to mitigate
> replay attacks, and even more.
>
> I just want to know  if anyone has an idea on how it can be done if h/she
> is willing to share that would be really appreciative. Please make sure
> you understand what I am looking for.
> No offence :)
>
>
>
> Karthik
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
> _______________________________________________
> Owasp-delhi mailing list*
> **Owasp-delhi at lists.owasp.org* <Owasp-delhi at lists.owasp.org>*
> *
> *https://lists.owasp.org/mailman/listinfo/owasp-delhi*<https://lists.owasp.org/mailman/listinfo/owasp-delhi>
>
> ForwardSourceID:NT00005236
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT000052F2
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT0000530E
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT0000533A
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
>
>
>
> --
> Gunwant Singh
> _______________________________________________
> Owasp-delhi mailing list
> Owasp-delhi at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-delhi
>
>
> This message (including any attachments) is confidential and may be
> privileged. If you have received it by mistake please notify the sender by
> return e-mail and delete this message from your system. Any unauthorised use
> or dissemination of this message in whole or in part is strictly prohibited.
> Please note that e-mails are susceptible to change. ABN AMRO Central
> Enterprise Services Pvt Ltd, part of RBS Group plc , having its registered
> office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel (W), Mumbai -
> 400 013 , including its group companies, shall not be liable for the
> improper or incomplete transmission of the information contained in this
> communication nor for any delay in its receipt or damage to your system. ABN
> AMRO Central Enterprise Services Pvt Ltd (or its group companies) does not
> guarantee that the integrity of this communication has been maintained nor
> that this communication is free of viruses, interceptions or interference.
>
> ______________________________________________________________________
> This email has been scanned by the MessageLabs Email Security System.
> For more information please visit http://www.messagelabs.com/email
> ______________________________________________________________________
>



-- 
Gunwant Singh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090119/bd580bc5/attachment-0001.html 

From abhishekarora01 at gmail.com  Tue Jan 20 11:18:06 2009
From: abhishekarora01 at gmail.com (Abhishek Arora)
Date: Tue, 20 Jan 2009 21:48:06 +0530
Subject: [Owasp-delhi] Owasp-delhi Digest, Vol 18, Issue 18
In-Reply-To: <mailman.3300.1232464469.2284.owasp-delhi@lists.owasp.org>
References: <mailman.3300.1232464469.2284.owasp-delhi@lists.owasp.org>
Message-ID: <87b744420901200818g75eda468k130b83398fd3e5f0@mail.gmail.com>

I am a first year student at Delhi College of Engineering and have recently
been learning PHP. I was wondering if there is any way to implement an SQL
Injection even when we have addslashes included in the code.
I also came across the concept of Rainbow tables. Does this make MD5 hashing
of small (in length) values irrelevant?

I also wanted to know if I am eligible to attend OWASP meetings.

Thank You
Abhishek Arora

2009/1/20 <owasp-delhi-request at lists.owasp.org>

> Send Owasp-delhi mailing list submissions to
>        owasp-delhi at lists.owasp.org
>
> To subscribe or unsubscribe via the World Wide Web, visit
>        https://lists.owasp.org/mailman/listinfo/owasp-delhi
> or, via email, send a message with subject or body 'help' to
>        owasp-delhi-request at lists.owasp.org
>
> You can reach the person managing the list at
>        owasp-delhi-owner at lists.owasp.org
>
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of Owasp-delhi digest..."
>
>
> Today's Topics:
>
>   1. Re: SSL Broken.. (Gunwant Singh)
>
>
> ----------------------------------------------------------------------
>
> Message: 1
> Date: Mon, 19 Jan 2009 23:25:39 +0530
> From: "Gunwant Singh" <gunwant.s at gmail.com>
> Subject: Re: [Owasp-delhi] SSL Broken..
> To: lavakumar.kuppan at rbs.com
> Cc: owasp-delhi at lists.owasp.org
> Message-ID:
>        <44b2bd060901190955j11774427j2cc832d1e782267a at mail.gmail.com>
> Content-Type: text/plain; charset="iso-8859-1"
>
> Hi Lava,
>
> Nice to see your reply. Please see my thoughts on your comments.
>
> >Now in the solution that you have suggested, the server has to fetch the
> user's password for each request which defeats the whole purpose of
> maintaning session IDs.
>
> Good point. My suggestion on this: Access the password only once and store
> it in a temporary variable securely for further transactions and then
> delete
> it as the session ends.
>
> >Ironically you had already suggested a solution and then asked the
> question, wonder if you were just checking if everyone understood your talk
> properly ;)
>
> If you would have read this mailing thread from the very scratch, you would
> have known that this question ain't related to salted MD5. I was not
> checking if people understood my talks properly. I could have done that
> there and then only.
>
> >For your salted-hashning technique or the new techique there is to be a
> lot
> of client side JS code which has to create the salted hash and send it to
> the server. The attacker would just intercept this message and replace your
> JS with another JS which does every thing like the original JS but in
> addition steals the user's clear text password and appends to the request
> which the attacker can now get by viewing your request.
>
> I would like to comment about the salted hashing part in a different e-mail
> (if I get some time) as this topic is not what I am talking about here.
> About the technique, in case if you can manipulate the generated hash
> somehow by intercepting, and make up your own hash, can you still be a part
> of the same session. I don't think so. Let me know if you can. Check out
> the
> way I told about its workings.
>
> Could you come up with some *PoC* to what you said? You said intercepting
> and manipulating the traffic on the fly travelling from the server to the
> client or the other way around? How would you do that sitting somewhere on
> the network? I am curious to know.
>
> I don't know why you guys keep involving SSL with this thing.
>
> Thanks for your feedback.
>
> -Gunwant
>
> On Mon, Jan 19, 2009 at 1:04 PM, <lavakumar.kuppan at rbs.com> wrote:
>
> >
> > Hi Gunwant,
> >
> > Thanks for bringing up this topic, can see that it has tickled quite a
> few
> > brains in the list already ;), prompting some really intelligent ideas
> and
> > arguments.
> > I was on vacations and missed out on all the fun here, but its never too
> > late so here is my humble opinion.
> >
> > There are two very important factors that have to be considered here:
> >
> > 1) Why is a session ID required.
> > 2) What is the possibilty of some one with sniffing capability to
> intercept
> > and manipulate the traffic.
> >
> >
> > 1) Why is a session ID required
> >  I believe sessiond IDs are used to avoid connecting to the DB each time
> > and validating the user's password, they are used to improve efficiency.
> > Now in the solution that you have suggested, the server has to fetch the
> > user's password for each request which defeats the whole purpose of
> > maintaning session IDs.
> > Since we are anyway reffering to the password for each request, I would
> > like to think that we can authenticate for each request with the
> salted-hash
> > technique you suggested in your december OWASP talk, provided once a salt
> is
> > used the server discards it and issues a new one.
> > Ironically you had already suggested a solution and then asked the
> > question, wonder if you were just checking if everyone understood your
> talk
> > properly ;)
> >
> > 2) What is the possibilty of some one with sniffing capability to
> intercept
> > and manipulate the traffic.
> > As someone who has done quite a bit of sniffing on customer networks
> during
> > pentests, I think that someone who is capable of sniffing would in all
> > probability also be capable of intercepting and manipulating the traffic
> > between the client and server. There might be exceptions but they would
> be
> > uncommon.
> > Any techniquie which enforces some trust on the client-side logic now
> gets
> > defeated.
> > For your salted-hashning technique or the new techique there is to be a
> lot
> > of client side JS code which has to create the salted hash and send it to
> > the server. The attacker would just intercept this message and replace
> your
> > JS with another JS which does every thing like the original JS but in
> > addition steals the user's clear text password and appends to the request
> > which the attacker can now get by viewing your request.
> > Once this happens the entitre security system is defeated as its so
> closely
> > attached to the user's password.
> > So in my opinion once someone is able to intercept a clear-text traffic
> he
> > could directly or indirectly bypass most restictions enforced.
> >
> > The thing that differentiates SSL from the suggested approach is the use
> of
> > Server certificates which establishes authenticity, unless we can figure
> out
> > a way to do that our confidentiality and integrity solutions might fail.
> >
> > Dont cosider thick client approach like java applets as reverse
> engineering
> > is a possibility.
> >
> > PS: OK, I have not suggested any solution,  am a pentester what do you
> > expect :P
> >
> > Thanks and Regards,
> > Lavakumar K
> > Penetration Tester - Global ISA
> >
> >
> >  *"Gunwant Singh" <gunwant.s at gmail.com>*
> > Sent by: owasp-delhi-bounces at lists.owasp.org
> >
> > 01/16/2009 11:06 PM
> >   To
> > owasp-delhi at lists.owasp.org
> >  cc
> >   Subject
> > Re: [Owasp-delhi] SSL Broken..
> >
> >
> >
> >
> > Hi,
> >
> > Ok, let me elucidate the workings of the technique I was talking about.
> >
> >
> > But before that I just want to shed some light on a few things so no-one
> > comes again questioning to me about these and start some endless
> argument.
> >
> > - The e-commerce site I was talking about, I never said that they are
> only
> > using the technique I am going to discuss. They might be using other
> > techniques for their protection. What I meant was I've not seen/heard
> anyone
> > else using this technique. That doesn't mean that they are only using
> this
> > technique for their protection. Every giant incorporates multi-tier
> security
> > for their resources.  I am not sure what exactly they are using besides
> this
> > technique as Nobody reveals that.  I questioned someone on a forum, he
> came
> > up with this technique, I studied, checked this on their documentation
> page,
> > discussed with some people, discussed with some more, argued with even
> more
> > and now I am here. I am looking for some feedback from you all. Just let
> me
> > know what ever you think is wrong with this. Anyhow the question is not
> that
> > whether they are using it or not but the question is 'How good is the
> > technique?'
> >
> > - Please don't misinterpret my statement. I am not saying 'Don't use
> SSL'.
> > SSL is definitely a protection mechanism for "Now" if we use it
> > appropriately (CA signed certificate with a well-tested, well-reviewed
> > implementation). Use SSL till someone finds some exploit *practically*
> not
> > theoretically. This whole discussion is based on a research question so
> I/we
> > can get a *feasible* working solution for this (may-be-a-future) problem.
> If
> > you are not interested in discussing please do not comment. And please do
> > not envisage what I am not saying.
> >
> > So here is how it works.
> >
> > No SSL. All traffic in clear text.
> > Initially we need to communicate an OOB password/code/nonce (whatever you
> > call it) to the client - only *once* not each time.
> >
> >
> > 1. The client initiates a connection request to the server. As a result,
> > server will initiate a handshake process to synchronize the time-stamps
> > between the client and itself. Then the server will analyze tolerance
> time
> > of packets leaving the client workstation till it reaches the server. The
> > tolerance time is configured so to manage slow hosts or slow traffic. In
> > plain words, server synchronizes date and time (in seconds, milliseconds
> or
> > even nanoseconds based on the criticality of the application) with the
> > client.
> >
> > 2. At the client side: the message, instantaneous time-stamp and the
> > password are concatenated and hashed via SHA-1/SHA-256, whatever one
> wishes.
> > This ensuing hash is combined with the username to form an authentication
> > header and sent to the server.
> >
> > 3. At the server side, the server sees the username and perceives which
> > user is trying to authenticate. Based on the tolerance configured
> initially
> > at the handshake time, it picks the time-stamp from its own clock and
> using
> > the password and the message it generates the hash in the same way as it
> was
> > done at the client side.
> >
> > 4. If the hash matches it generates a Session ID and maps it to the
> > username of the user. This Session ID will be sent from the client to the
> > server along with the computed hash (which is different for each request
> -
> > see next Step)
> >
> > 5. Now if the client sends another request, it appends and then hashes
> the
> > message, password and the time-stamp (which will be apparently because of
> > the different instantaneous time-stamp i.e. date and time). This
> resulting
> > string is sent to the server along with the Session ID assigned to the
> user
> > earlier. The resulting string contains a different hash as the time has
> > changed. This will be validated at the server the same way as in Step 3.
> >
> > Now how can an adversary exploit this scenario? What I think of are two
> > ways:
> >
> > 1. Either he will capture one of the hashes and try to predict the next
> > hash by brute forcing different time-stamps.
> >
> > - But this can not be possible. He doesn't have the password to generate
> > the hash.
> >
> > 2. What if he captures a series of requests and responses and replays
> them
> > back to the server at a later stage.
> >
> > - This can't be possible either. In order to interact with the server,
> one
> > needs to handshake so to synchronize itself with the server's clock. The
> > attacker would not be able to synchronize because he would not be able to
> > synchronize the *past-timestamp* (in the captured traffic) with the
> server's
> > current time.
> >
> > 3. Lastly for the newbies, what if he captures the Session ID.
> >
> > - But he would not be able to produce the matching Hash for the request,
> so
> > no luck.
> >
> > A few things to contemplate:
> >
> > 1. This will be considerably be CPU intensive but can be acknowledged if
> > compared to the processing cycles SSL takes.
> >
> > 2. Time synchronization can be complex. I have no idea how to do that.
> >
> > 3. Please provide your
> > feedback/fury/antagonism/annoyance/appreciation/whatever. Hope I
> explained
> > this in a very straightforward way.
> >
> > Thanks.
> >
> > Gunwant
> >
> >
> >
> >
> >
> > On Fri, Jan 16, 2009 at 4:26 AM, Plash Chowdhary <*
> plash.chowdhary at tcs.com
> > * <plash.chowdhary at tcs.com>> wrote:
> >
> > Gunwant,
> >
> > I will be interested to know kind of soltutions are being used.
> > SInce you are talking about **Time stamp**(in clear text will be
> > perdictable, specially if a client side algo is being used) <some random
> > number in hidden field with every request,<unique captcha with every
> request
> > (this will be interesting)  can be a case but they will be not as roboust
> >  as out of band..
> > some how with Time stamps only thing that rings bell is CRYPTOGRAPHY *: D
> > *(PKI??)
> >
> > I will be really surprized if that organization is not using SSL from a
> > Vendor. (as you said its an e commerce site)
> >
> > and anyways i wont be using HTTPS on public content of my site and will
> > switch to HTTPS session only when needed (IDEALLY)
> >
> >
> > lemme know your thoughts
> >
> > Regards
> > Plash
> >
> >
> >
> >
> >   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
> >
> > 01/15/2009 12:30 PM
> >
> >   To
> > "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
> > cc
> > *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> > Re: [Owasp-delhi] SSL Broken..
> >
> >
> >
> >
> >
> >
> > Plash,
> >
> > Thanks for the idea. Please don't take my talks as overstatements, I just
> > wanted to have some innovative ideas from you guys.
> >
> > Many organizations implement session mechanisms without using SSL. As a
> > matter of fact these are not the conditions that I have set. There are
> many
> > scenarios where using SSL is unworkable and in order to provide
> protection,
> > there are solutions.
> >
> > Also, it becomes more relevant when people are trying to prove the
> > weaknesses of SSL. Not to forget, facts say that most organizations who
> use
> > SSL, use self signed certificates rather than a CA sign it.
> >
> > For sessions on non-SSL, there are many undocumented solutions which can
> be
> > put into practice but such solutions needs to be well-reviewed and
> > well-tested before they are implemented. I have come to know about one of
> > the methods implemented by one of the top e-commerce portal giants. This
> > solution is a bit tough to understand and subsequently implement it.
> Before
> > I discuss it on the mailing list, I need to make sure that I understand
> it
> > well. The only thing I can share at the moment is, it uses time-stamps.
> > Hopefully, I would be discussing this proposition in detail in the
> upcoming
> > Delhi Chapter meeting this month.
> >
> > Sorry if my talks were exaggerated. I still seek more ideas on the same
> > question if someone is willing to share.
> >
> > Many thanks.
> >
> > On Thu, Jan 15, 2009 at 11:29 PM, Plash Chowdhary <
> > *plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
> >
> > Gunwant,,
> >
> > Yes impractical "Off band validation" for each request in the conditions
> > you have set. Now either you come up with a solution or im implimenting
> SSL
> > *: )*
> >
> >
> > Regards
> > Plash
> >   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
> >
> > 01/15/2009 10:27 AM
> >
> >   To
> > "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
> >  cc
> > *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> > Re: [Owasp-delhi] SSL Broken..
> >
> >
> >
> >
> >
> >
> >
> >
> > I would happily accept what you say if you say how it protects.
> >
> > Tell me **how** would a sniffer miss your validation code on an
> > unencrypted channel. We should talk about mitigating not minimizing.
> >
> > Oh ! unless you are saying, a different off band validation code is sent
> > for **each** request - then it is possible but it is impractical even in
> > high risk applications.
> >
> > On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary <
> > *plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
> >
> > It does Gunwant, Use long one time off band validation....and keep a
> short
> > TTL it will minimize the risk of relpay,....
> >
> >   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
> >
> > 01/15/2009 09:25 AM
> >
> >   To
> > "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
> >  cc
> > *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> > Re: [Owasp-delhi] SSL Broken..
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> > That doesn't affirm protection against replay attack, dude!
> > In the transit, anyone can see your validation code...
> > Even if you hash/encrypt it, still it can used to replay the traffic...
> > this is vulnerable.. :)
> >
> > On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary <
> > *plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
> >
> > verify user offline.. send an sms(or similar) with a validation code(long
> > randomly genrated  string) to the user everytime he logs in to validate
> and
> > use it everytime a transaction (high risk) is done or role is  changed..
> > best way still will be to use it over SSL and use digital signatures
> >
> >
> > Regards
> > Plash
> >   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>
> > *>*
> > Sent by: *owasp-delhi-bounces at lists.owasp.org*<
> owasp-delhi-bounces at lists.owasp.org>
> >
> > 01/14/2009 10:13 AM
> >
> >   To
> > "Karthik Muthukrishnan" <*karthik.muthukrishnan at tcs.com*<
> karthik.muthukrishnan at tcs.com>
> > >
> >  cc
> > *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> > Re: [Owasp-delhi] SSL Broken..
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> > Hi,
> >
> > Thanks for your reply but that did not answer my question. You are
> telling
> > me what I can use for protecting the credentials. I know what I can use,
> but
> > just out of curiousity I want to know if I don't use SSL/VPN or any other
> > network based protection, what else can be done on the application layer
> in
> > order to protect the credentials
> > . Please see the answers below.
> >
> >
> > On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <*
> > karthik.muthukrishnan at tcs.com* <karthik.muthukrishnan at tcs.com>> wrote:
> >
> > > salted MD5 hashing protects the authentication credentials rightly from
> > eavesdropping on the network.
> > Salting is used to protect MD5 hashes from rainbow table attacks.
> > Apparently Yes, although ultimately it protects authentication
> credentials
> > only. Facts say the highest risk is eavesdropping if the session is
> > unencrypted.
> >
> > > SSL does the same thing.
> > Yes, SSL is used to ensure confidentiality and trust in the network
> > communiation. Confidentiality (or prevention of network eavesdropping) is
> > ensured by encryption. Trust is accomplished by Server and/or client
> > certificates.
> > I know what SSL does, but my question is something else.
> >
> > > However, in some scenarios SSL might not be feasible. For example,
> > causing heavy load on the server or may be some applications don't
> support
> > it, etc.
> > In such cases SSL Accelerators are used. They are devices which can be
> fit
> > into the architecture without changing the application or affecting the
> load
> > on the application server.
> >
> > Again my question is something else. I know if SSL doesn't work,
> > accelerators help expedite the processing. What I want to know is, if I
> "Do
> > Not" want to use SSL what measures can be taken.
> >
> >
> > > We can protect the authentication credentials using salted MD5 hashing
> > or by using SSL.
> > To protect authentication credentials in HTTP, we have to rely on SSL.
> > Hashes are a secure (aka not in clear text) way to store authentication
> > credentials.
> > So you are proclaiming that we *have to* rely  on SSL- no other
> > alternative.
> > Hashes are also used in many applications for many different purposes
> > besides authenticity and integrity.
> >
> >
> > > In order to protect the Session credentials (Session ID, tokens,
> > cookies, etc) on a non-SSL channel what measures can be taken?
> > To protect either auth or session credentials we have to ensure
> > confidentiality of the communication channel. If we dont use HTTPS, then
> VPN
> > might be another option. While authentication credentials can be
> protected
> > by some challenge handshake mechanism (similar to CHAP), we would need to
> > protect session creds by encrypting the channel.
> > I was asking that if we can provide some protection on the application
> > level rather than on the network level. Besides SSL/VPN there are many
> > options available for protecting the authentication credentials. I want
> to
> > know (just out of curiousity) that how can we secure the session
> credentials
> > on an unencrypted/non-SSL channel. I know this will take too much
> processing
> > cycles, time synchronization, quantization in milliseconds even
> nanoseconds,
> > affirmation of the key exchange, dynamic hashing key generation to
> mitigate
> > replay attacks, and even more.
> >
> > I just want to know  if anyone has an idea on how it can be done if h/she
> > is willing to share that would be really appreciative. Please make sure
> > you understand what I am looking for.
> > No offence :)
> >
> >
> >
> > Karthik
> > =====-----=====-----=====
> > Notice: The information contained in this e-mail
> > message and/or attachments to it may contain
> > confidential or privileged information. If you are
> > not the intended recipient, any dissemination, use,
> > review, distribution, printing or copying of the
> > information contained in this e-mail message
> > and/or attachments to it are strictly prohibited. If
> > you have received this communication in error,
> > please notify us by reply e-mail or telephone and
> > immediately and permanently delete the message
> > and any attachments. Thank you
> >
> >
> >
> >
> >
> >
> > --
> > Gunwant Singh
> > _______________________________________________
> > Owasp-delhi mailing list*
> > **Owasp-delhi at lists.owasp.org* <Owasp-delhi at lists.owasp.org>*
> > *
> > *https://lists.owasp.org/mailman/listinfo/owasp-delhi*<
> https://lists.owasp.org/mailman/listinfo/owasp-delhi>
> >
> > ForwardSourceID:NT00005236
> > =====-----=====-----=====
> > Notice: The information contained in this e-mail
> > message and/or attachments to it may contain
> > confidential or privileged information. If you are
> > not the intended recipient, any dissemination, use,
> > review, distribution, printing or copying of the
> > information contained in this e-mail message
> > and/or attachments to it are strictly prohibited. If
> > you have received this communication in error,
> > please notify us by reply e-mail or telephone and
> > immediately and permanently delete the message
> > and any attachments. Thank you
> >
> >
> >
> >
> >
> >
> > --
> > Gunwant Singh
> >
> > ForwardSourceID:NT000052F2
> >
> > =====-----=====-----=====
> > Notice: The information contained in this e-mail
> > message and/or attachments to it may contain
> > confidential or privileged information. If you are
> > not the intended recipient, any dissemination, use,
> > review, distribution, printing or copying of the
> > information contained in this e-mail message
> > and/or attachments to it are strictly prohibited. If
> > you have received this communication in error,
> > please notify us by reply e-mail or telephone and
> > immediately and permanently delete the message
> > and any attachments. Thank you
> >
> >
> >
> >
> >
> >
> > --
> > Gunwant Singh
> >
> > ForwardSourceID:NT0000530E
> >
> > =====-----=====-----=====
> > Notice: The information contained in this e-mail
> > message and/or attachments to it may contain
> > confidential or privileged information. If you are
> > not the intended recipient, any dissemination, use,
> > review, distribution, printing or copying of the
> > information contained in this e-mail message
> > and/or attachments to it are strictly prohibited. If
> > you have received this communication in error,
> > please notify us by reply e-mail or telephone and
> > immediately and permanently delete the message
> > and any attachments. Thank you
> >
> >
> >
> >
> >
> >
> > --
> > Gunwant Singh
> >
> > ForwardSourceID:NT0000533A
> > =====-----=====-----=====
> > Notice: The information contained in this e-mail
> > message and/or attachments to it may contain
> > confidential or privileged information. If you are
> > not the intended recipient, any dissemination, use,
> > review, distribution, printing or copying of the
> > information contained in this e-mail message
> > and/or attachments to it are strictly prohibited. If
> > you have received this communication in error,
> > please notify us by reply e-mail or telephone and
> > immediately and permanently delete the message
> > and any attachments. Thank you
> >
> >
> >
> >
> >
> >
> > --
> > Gunwant Singh
> >
> >
> >
> >
> > --
> > Gunwant Singh
> > _______________________________________________
> > Owasp-delhi mailing list
> > Owasp-delhi at lists.owasp.org
> > https://lists.owasp.org/mailman/listinfo/owasp-delhi
> >
> >
> > This message (including any attachments) is confidential and may be
> > privileged. If you have received it by mistake please notify the sender
> by
> > return e-mail and delete this message from your system. Any unauthorised
> use
> > or dissemination of this message in whole or in part is strictly
> prohibited.
> > Please note that e-mails are susceptible to change. ABN AMRO Central
> > Enterprise Services Pvt Ltd, part of RBS Group plc , having its
> registered
> > office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel (W),
> Mumbai -
> > 400 013 , including its group companies, shall not be liable for the
> > improper or incomplete transmission of the information contained in this
> > communication nor for any delay in its receipt or damage to your system.
> ABN
> > AMRO Central Enterprise Services Pvt Ltd (or its group companies) does
> not
> > guarantee that the integrity of this communication has been maintained
> nor
> > that this communication is free of viruses, interceptions or
> interference.
> >
> > ______________________________________________________________________
> > This email has been scanned by the MessageLabs Email Security System.
> > For more information please visit http://www.messagelabs.com/email
> > ______________________________________________________________________
> >
>
>
>
> --
> Gunwant Singh
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL:
> https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090119/bd580bc5/attachment.html
>
> ------------------------------
>
> _______________________________________________
> Owasp-delhi mailing list
> Owasp-delhi at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-delhi
>
>
> End of Owasp-delhi Digest, Vol 18, Issue 18
> *******************************************
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090120/4226c9c4/attachment-0001.html 

From dhruv.soi at owasp.org  Wed Jan 21 02:39:10 2009
From: dhruv.soi at owasp.org (Soi, Dhruv)
Date: Wed, 21 Jan 2009 13:09:10 +0530
Subject: [Owasp-delhi] FW: OWASP Conference - AU 2009
Message-ID: <4976d12c.19066e0a.39db.29fe@mx.google.com>

<> Forwarded invitation from Justin to OWASP Australia Conference in
February 2009: <>

 

If you are planning to visit Australia in coming weeks then don't miss this
upcoming OWASP event!

 

Many Thanks,

Dhruv

 

  _____  

From: jderry jderry [mailto:jderry at owasp.org] 
Sent: Wednesday, January 21, 2009 12:59 PM
To: robertosl robertosl; Abighanem, Jean-Marie (AU - Melbourne);
Chris at penetrationtester.com; tlaskowsky at siegeworksint.com; dbyim at nshc.net;
rip at owasp.org; Wayne Huang; Wayne Huang; bahaw bahaw; namn at bluemoon.com.vn;
onnchee at resolvo.com; dawuds at gmail.com; Tim Bass; deepu.joseph1 at gmail.com;
Myoosuf at cognizant.com; rohasnagpal at gmail.com; shreeraj.shah at gmail.com;
ahmeds at computer.org; dhruv.soi at owasp.org; dharmeshmm at mastek.com
Subject: OWASP Conference - AU 2009

 

Hi Everyone,

So could everyone in the region post the details out below and encourage for
members to get involved. Last year we ended up with about 30 people from
china/Thailand/japan/malaysai/indai etc and around the region. This year
everything is shaping up to be an awesome conference, we even have alot of
people from india and other regions joining us so far, but being the first
owasp conference for the year we want more diversity.

So lets spread the word.. Any which way you can please put the message out
on your local chapter lists, and also any other blogs that you may write on.

 

Hope to see everyone from the region here for 2009..

Regards

Justin (Conference Chair)

 

----------------------------------------------------------------------------
---------------------------------

 

Announcing the first OWASP conference for 2009 located on the beautiful Gold
Coast.

OWASP is holding their annual conference on the February 25,26,26th of 2009.
The

event received great reviews last year and was seen as the premier
Application 

security event in Asia Pacific.

 

This year we have multiple tutorials on application security, local and
international

speakers, as well as many networking opportunities to meet and discuss
security issues

with your peers.

 

The selected schedule, registration and details of the conference can all be
found on

the OWASP wiki at  <http://www.owasp.org/index.php/OWASP_AU_Conference_2009>
http://www.owasp.org/index.php/OWASP_AU_Conference_2009

Registrations start from as low as $400 USD to attend.

 

Come and join us for three days of informative sessions on application
security and 

learn more about the OWASP project.

 

Register online now at

http://guest.cvent.com/i.aspx?4W,M3,426274ef-3d51-4c8f-adc2-49e7d8fc735d

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090121/1f58fc61/attachment.html 

From lavakumar.kuppan at rbs.com  Wed Jan 21 01:09:55 2009
From: lavakumar.kuppan at rbs.com (lavakumar.kuppan at rbs.com)
Date: Wed, 21 Jan 2009 11:39:55 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <44b2bd060901190955j11774427j2cc832d1e782267a@mail.gmail.com>
Message-ID: <OFC75A078F.E81DBC5F-ON65257545.002179AA-65257545.0021EA30@abnamro.com>

Hi Gunwant,

You can check out ettercap, it has ARP poisoning capability and lets you 
manipulate the intercepted traffic on the fly with filters.
Play around with it a little :)

Thanks and Regards,
Lavakumar K
Penetration Tester - Global ISA




"Gunwant Singh" <gunwant.s at gmail.com> 
01/19/2009 11:25 PM

To
lavakumar.kuppan at rbs.com
cc
owasp-delhi at lists.owasp.org
Subject
Re: [Owasp-delhi] SSL Broken..






Hi Lava,

Nice to see your reply. Please see my thoughts on your comments.

>Now in the solution that you have suggested, the server has to fetch the 
user's password for each request which defeats the whole purpose of 
maintaning session IDs.

Good point. My suggestion on this: Access the password only once and store 
it in a temporary variable securely for further transactions and then 
delete it as the session ends.

>Ironically you had already suggested a solution and then asked the 
question, wonder if you were just checking if everyone understood your 
talk properly ;) 

If you would have read this mailing thread from the very scratch, you 
would have known that this question ain't related to salted MD5. I was not 
checking if people understood my talks properly. I could have done that 
there and then only.

>For your salted-hashning technique or the new techique there is to be a 
lot of client side JS code which has to create the salted hash and send it 
to the server. The attacker would just intercept this message and replace 
your JS with another JS which does every thing like the original JS but in 
addition steals the user's clear text password and appends to the request 
which the attacker can now get by viewing your request.

I would like to comment about the salted hashing part in a different 
e-mail (if I get some time) as this topic is not what I am talking about 
here. About the technique, in case if you can manipulate the generated 
hash somehow by intercepting, and make up your own hash, can you still be 
a part of the same session. I don't think so. Let me know if you can. 
Check out the way I told about its workings.

Could you come up with some *PoC* to what you said? You said intercepting 
and manipulating the traffic on the fly travelling from the server to the 
client or the other way around? How would you do that sitting somewhere on 
the network? I am curious to know.

I don't know why you guys keep involving SSL with this thing.

Thanks for your feedback.

-Gunwant 

On Mon, Jan 19, 2009 at 1:04 PM, <lavakumar.kuppan at rbs.com> wrote:

Hi Gunwant, 

Thanks for bringing up this topic, can see that it has tickled quite a few 
brains in the list already ;), prompting some really intelligent ideas and 
arguments. 
I was on vacations and missed out on all the fun here, but its never too 
late so here is my humble opinion. 

There are two very important factors that have to be considered here: 

1) Why is a session ID required. 
2) What is the possibilty of some one with sniffing capability to 
intercept and manipulate the traffic. 


1) Why is a session ID required 
 I believe sessiond IDs are used to avoid connecting to the DB each time 
and validating the user's password, they are used to improve efficiency. 
Now in the solution that you have suggested, the server has to fetch the 
user's password for each request which defeats the whole purpose of 
maintaning session IDs. 
Since we are anyway reffering to the password for each request, I would 
like to think that we can authenticate for each request with the 
salted-hash technique you suggested in your december OWASP talk, provided 
once a salt is used the server discards it and issues a new one. 
Ironically you had already suggested a solution and then asked the 
question, wonder if you were just checking if everyone understood your 
talk properly ;) 

2) What is the possibilty of some one with sniffing capability to 
intercept and manipulate the traffic. 
As someone who has done quite a bit of sniffing on customer networks 
during pentests, I think that someone who is capable of sniffing would in 
all probability also be capable of intercepting and manipulating the 
traffic between the client and server. There might be exceptions but they 
would be uncommon. 
Any techniquie which enforces some trust on the client-side logic now gets 
defeated. 
For your salted-hashning technique or the new techique there is to be a 
lot of client side JS code which has to create the salted hash and send it 
to the server. The attacker would just intercept this message and replace 
your JS with another JS which does every thing like the original JS but in 
addition steals the user's clear text password and appends to the request 
which the attacker can now get by viewing your request. 
Once this happens the entitre security system is defeated as its so 
closely attached to the user's password. 
So in my opinion once someone is able to intercept a clear-text traffic he 
could directly or indirectly bypass most restictions enforced. 

The thing that differentiates SSL from the suggested approach is the use 
of Server certificates which establishes authenticity, unless we can 
figure out a way to do that our confidentiality and integrity solutions 
might fail. 

Dont cosider thick client approach like java applets as reverse 
engineering is a possibility. 

PS: OK, I have not suggested any solution,  am a pentester what do you 
expect :P 

Thanks and Regards,
Lavakumar K
Penetration Tester - Global ISA 


"Gunwant Singh" <gunwant.s at gmail.com> 
Sent by: owasp-delhi-bounces at lists.owasp.org 
01/16/2009 11:06 PM 


To
owasp-delhi at lists.owasp.org 
cc

Subject
Re: [Owasp-delhi] SSL Broken..








Hi, 
Ok, let me elucidate the workings of the technique I was talking about.


But before that I just want to shed some light on a few things so no-one 
comes again questioning to me about these and start some endless argument.

- The e-commerce site I was talking about, I never said that they are only 
using the technique I am going to discuss. They might be using other 
techniques for their protection. What I meant was I've not seen/heard 
anyone else using this technique. That doesn't mean that they are only 
using this technique for their protection. Every giant incorporates 
multi-tier security for their resources.  I am not sure what exactly they 
are using besides this technique as Nobody reveals that.  I questioned 
someone on a forum, he came up with this technique, I studied, checked 
this on their documentation page, discussed with some people, discussed 
with some more, argued with even more and now I am here. I am looking for 
some feedback from you all. Just let me know what ever you think is wrong 
with this. Anyhow the question is not that whether they are using it or 
not but the question is 'How good is the technique?'

- Please don't misinterpret my statement. I am not saying 'Don't use SSL'. 
SSL is definitely a protection mechanism for "Now" if we use it 
appropriately (CA signed certificate with a well-tested, well-reviewed 
implementation). Use SSL till someone finds some exploit *practically* not 
theoretically. This whole discussion is based on a research question so 
I/we can get a *feasible* working solution for this (may-be-a-future) 
problem. If you are not interested in discussing please do not comment. 
And please do not envisage what I am not saying.

So here is how it works.

No SSL. All traffic in clear text.
Initially we need to communicate an OOB password/code/nonce (whatever you 
call it) to the client - only *once* not each time.

1. The client initiates a connection request to the server. As a result, 
server will initiate a handshake process to synchronize the time-stamps 
between the client and itself. Then the server will analyze tolerance time 
of packets leaving the client workstation till it reaches the server. The 
tolerance time is configured so to manage slow hosts or slow traffic. In 
plain words, server synchronizes date and time (in seconds, milliseconds 
or even nanoseconds based on the criticality of the application) with the 
client. 
2. At the client side: the message, instantaneous time-stamp and the 
password are concatenated and hashed via SHA-1/SHA-256, whatever one 
wishes. This ensuing hash is combined with the username to form an 
authentication header and sent to the server. 
3. At the server side, the server sees the username and perceives which 
user is trying to authenticate. Based on the tolerance configured 
initially at the handshake time, it picks the time-stamp from its own 
clock and using the password and the message it generates the hash in the 
same way as it was done at the client side. 
4. If the hash matches it generates a Session ID and maps it to the 
username of the user. This Session ID will be sent from the client to the 
server along with the computed hash (which is different for each request - 
see next Step) 
5. Now if the client sends another request, it appends and then hashes the 
message, password and the time-stamp (which will be apparently because of 
the different instantaneous time-stamp i.e. date and time). This resulting 
string is sent to the server along with the Session ID assigned to the 
user earlier. The resulting string contains a different hash as the time 
has changed. This will be validated at the server the same way as in Step 
3. 
Now how can an adversary exploit this scenario? What I think of are two 
ways: 
1. Either he will capture one of the hashes and try to predict the next 
hash by brute forcing different time-stamps. 
- But this can not be possible. He doesn't have the password to generate 
the hash. 
2. What if he captures a series of requests and responses and replays them 
back to the server at a later stage. 
- This can't be possible either. In order to interact with the server, one 
needs to handshake so to synchronize itself with the server's clock. The 
attacker would not be able to synchronize because he would not be able to 
synchronize the *past-timestamp* (in the captured traffic) with the 
server's current time. 
3. Lastly for the newbies, what if he captures the Session ID. 
- But he would not be able to produce the matching Hash for the request, 
so no luck.
A few things to contemplate: 
1. This will be considerably be CPU intensive but can be acknowledged if 
compared to the processing cycles SSL takes. 
2. Time synchronization can be complex. I have no idea how to do that. 
3. Please provide your 
feedback/fury/antagonism/annoyance/appreciation/whatever. Hope I explained 
this in a very straightforward way. 
Thanks. 
Gunwant 
 


On Fri, Jan 16, 2009 at 4:26 AM, Plash Chowdhary <plash.chowdhary at tcs.com> 
wrote: 

Gunwant, 

I will be interested to know kind of soltutions are being used. 
SInce you are talking about **Time stamp**(in clear text will be 
perdictable, specially if a client side algo is being used) <some random 
number in hidden field with every request,<unique captcha with every 
request (this will be interesting)  can be a case but they will be not as 
roboust  as out of band.. 
some how with Time stamps only thing that rings bell is CRYPTOGRAPHY : D 
(PKI??) 

I will be really surprized if that organization is not using SSL from a 
Vendor. (as you said its an e commerce site) 

and anyways i wont be using HTTPS on public content of my site and will 
switch to HTTPS session only when needed (IDEALLY) 


lemme know your thoughts 

Regards 
Plash 




"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 12:30 PM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..










Plash, 

Thanks for the idea. Please don't take my talks as overstatements, I just 
wanted to have some innovative ideas from you guys.

Many organizations implement session mechanisms without using SSL. As a 
matter of fact these are not the conditions that I have set. There are 
many scenarios where using SSL is unworkable and in order to provide 
protection, there are solutions. 

Also, it becomes more relevant when people are trying to prove the 
weaknesses of SSL. Not to forget, facts say that most organizations who 
use SSL, use self signed certificates rather than a CA sign it. 

For sessions on non-SSL, there are many undocumented solutions which can 
be put into practice but such solutions needs to be well-reviewed and 
well-tested before they are implemented. I have come to know about one of 
the methods implemented by one of the top e-commerce portal giants. This 
solution is a bit tough to understand and subsequently implement it. 
Before I discuss it on the mailing list, I need to make sure that I 
understand it well. The only thing I can share at the moment is, it uses 
time-stamps. Hopefully, I would be discussing this proposition in detail 
in the upcoming Delhi Chapter meeting this month.

Sorry if my talks were exaggerated. I still seek more ideas on the same 
question if someone is willing to share. 

Many thanks. 

On Thu, Jan 15, 2009 at 11:29 PM, Plash Chowdhary <
plash.chowdhary at tcs.com> wrote: 

Gunwant,, 

Yes impractical "Off band validation" for each request in the conditions 
you have set. Now either you come up with a solution or im implimenting 
SSL : )


Regards 
Plash 
"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 10:27 AM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..












I would happily accept what you say if you say how it protects.

Tell me *how* would a sniffer miss your validation code on an unencrypted 
channel. We should talk about mitigating not minimizing.

Oh ! unless you are saying, a different off band validation code is sent 
for *each* request - then it is possible but it is impractical even in 
high risk applications.

On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary <
plash.chowdhary at tcs.com> wrote: 

It does Gunwant, Use long one time off band validation....and keep a short 
TTL it will minimize the risk of relpay,....

"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 09:25 AM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..














That doesn't affirm protection against replay attack, dude!
In the transit, anyone can see your validation code...
Even if you hash/encrypt it, still it can used to replay the traffic...
this is vulnerable.. :)

On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary <
plash.chowdhary at tcs.com> wrote: 

verify user offline.. send an sms(or similar) with a validation code(long 
randomly genrated  string) to the user everytime he logs in to validate 
and use it everytime a transaction (high risk) is done or role is 
changed.. best way still will be to use it over SSL and use digital 
signatures


Regards 
Plash 
"Gunwant Singh" <gunwant.s at gmail.com
> 
Sent by: owasp-delhi-bounces at lists.owasp.org 
01/14/2009 10:13 AM 


To
"Karthik Muthukrishnan" <karthik.muthukrishnan at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..
















Hi,

Thanks for your reply but that did not answer my question. You are telling 
me what I can use for protecting the credentials. I know what I can use, 
but just out of curiousity I want to know if I don't use SSL/VPN or any 
other network based protection, what else can be done on the application 
layer in order to protect the credentials
. Please see the answers below.


On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <
karthik.muthukrishnan at tcs.com> wrote: 

> salted MD5 hashing protects the authentication credentials rightly from 
eavesdropping on the network. 
Salting is used to protect MD5 hashes from rainbow table attacks. 
Apparently Yes, although ultimately it protects authentication credentials 
only. Facts say the highest risk is eavesdropping if the session is 
unencrypted. 

> SSL does the same thing. 
Yes, SSL is used to ensure confidentiality and trust in the network 
communiation. Confidentiality (or prevention of network eavesdropping) is 
ensured by encryption. Trust is accomplished by Server and/or client 
certificates. 
I know what SSL does, but my question is something else. 

> However, in some scenarios SSL might not be feasible. For example, 
causing heavy load on the server or may be some applications don't support 
it, etc. 
In such cases SSL Accelerators are used. They are devices which can be fit 
into the architecture without changing the application or affecting the 
load on the application server. 
Again my question is something else. I know if SSL doesn't work, 
accelerators help expedite the processing. What I want to know is, if I 
"Do Not" want to use SSL what measures can be taken. 


> We can protect the authentication credentials using salted MD5 hashing 
or by using SSL. 
To protect authentication credentials in HTTP, we have to rely on SSL. 
Hashes are a secure (aka not in clear text) way to store authentication 
credentials. 
So you are proclaiming that we *have to* rely  on SSL- no other 
alternative. 
Hashes are also used in many applications for many different purposes 
besides authenticity and integrity. 


> In order to protect the Session credentials (Session ID, tokens, 
cookies, etc) on a non-SSL channel what measures can be taken? 
To protect either auth or session credentials we have to ensure 
confidentiality of the communication channel. If we dont use HTTPS, then 
VPN might be another option. While authentication credentials can be 
protected by some challenge handshake mechanism (similar to CHAP), we 
would need to protect session creds by encrypting the channel. 
I was asking that if we can provide some protection on the application 
level rather than on the network level. Besides SSL/VPN there are many 
options available for protecting the authentication credentials. I want to 
know (just out of curiousity) that how can we secure the session 
credentials on an unencrypted/non-SSL channel. I know this will take too 
much processing cycles, time synchronization, quantization in milliseconds 
even nanoseconds, affirmation of the key exchange, dynamic hashing key 
generation to mitigate replay attacks, and even more. 

I just want to know  if anyone has an idea on how it can be done if h/she 
is willing to share that would be really appreciative. Please make sure 
you understand what I am looking for.
No offence :)



Karthik 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh 
_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-delhi

ForwardSourceID:NT00005236     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT000052F2     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT0000530E     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT0000533A     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh




-- 
Gunwant Singh
_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-delhi


This message (including any attachments) is confidential and may be 
privileged. If you have received it by mistake please notify the sender by 
return e-mail and delete this message from your system. Any unauthorised 
use or dissemination of this message in whole or in part is strictly 
prohibited. Please note that e-mails are susceptible to change. ABN AMRO 
Central Enterprise Services Pvt Ltd, part of RBS Group plc , having its 
registered office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel 
(W), Mumbai - 400 013 , including its group companies, shall not be liable 
for the improper or incomplete transmission of the information contained 
in this communication nor for any delay in its receipt or damage to your 
system. ABN AMRO Central Enterprise Services Pvt Ltd (or its group 
companies) does not guarantee that the integrity of this communication has 
been maintained nor that this communication is free of viruses, 
interceptions or interference.

______________________________________________________________________
This email has been scanned by the MessageLabs Email Security System.
For more information please visit http://www.messagelabs.com/email 
______________________________________________________________________



-- 
Gunwant Singh



This message (including any attachments) is confidential and may be privileged. If you have received it by mistake please notify the sender by return e-mail and delete this message from your system. Any unauthorised use or dissemination of this message in whole or in part is strictly prohibited. Please note that e-mails are susceptible to change. ABN AMRO Central Enterprise Services Pvt Ltd, part of RBS Group plc , having its registered office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel (W), Mumbai - 400 013 , including its group companies, shall not be liable for the improper or incomplete transmission of the information contained in this communication nor for any delay in its receipt or damage to your system. ABN AMRO Central Enterprise Services Pvt Ltd (or its group companies) does not guarantee that the integrity of this communication has been maintained nor that this communication is free of viruses, interceptions or interference.

______________________________________________________________________
This email has been scanned by the MessageLabs Email Security System.
For more information please visit http://www.messagelabs.com/email 
______________________________________________________________________
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090121/87615583/attachment-0001.html 

From dhruv.soi at owasp.org  Wed Jan 21 08:03:42 2009
From: dhruv.soi at owasp.org (Soi, Dhruv)
Date: Wed, 21 Jan 2009 18:33:42 +0530
Subject: [Owasp-delhi] Owasp-delhi Digest, Vol 18, Issue 18
In-Reply-To: <87b744420901200818g75eda468k130b83398fd3e5f0@mail.gmail.com>
Message-ID: <49771d3e.160d6e0a.4733.0882@mx.google.com>

Hello Abhishek,

 

It is indeed highly encouraging to see your interest in application security
right from your academics. 

 

Regarding your below query on SQL injection, it is always recommended to use
prepared statements to mitigate the risk. You may go through few interesting
and original write-ups as mentioned below. These uncovers addslashes(),
mysql_real_escape_string(), addcslashes() and nevertheless prepared
statements:

 

http://shiflett.org/blog/2006/jan/addslashes-versus-mysql-real-escape-string

http://cognifty.com/blog.entry/id=6/addslashes_dont_call_it_a_comeback.html

http://ilia.ws/archives/103-mysql_real_escape_string-versus-Prepared-Stateme
nts.html 

 

I hope this gives you plenty information on the subject in question.

 

OWASP meetings are free and open to everyone without any eligibility
criteria. Hope to meet you soon!

 

Many Thanks,

Dhruv 

 

 

  _____  

From: owasp-delhi-bounces at lists.owasp.org
[mailto:owasp-delhi-bounces at lists.owasp.org] On Behalf Of Abhishek Arora
Sent: Tuesday, January 20, 2009 9:48 PM
To: owasp-delhi at lists.owasp.org
Subject: Re: [Owasp-delhi] Owasp-delhi Digest, Vol 18, Issue 18

 

I am a first year student at Delhi College of Engineering and have recently
been learning PHP. I was wondering if there is any way to implement an SQL
Injection even when we have addslashes included in the code.
I also came across the concept of Rainbow tables. Does this make MD5 hashing
of small (in length) values irrelevant?

I also wanted to know if I am eligible to attend OWASP meetings.

Thank You
Abhishek Arora

2009/1/20 <owasp-delhi-request at lists.owasp.org>

Send Owasp-delhi mailing list submissions to
       owasp-delhi at lists.owasp.org

To subscribe or unsubscribe via the World Wide Web, visit
       https://lists.owasp.org/mailman/listinfo/owasp-delhi
or, via email, send a message with subject or body 'help' to
       owasp-delhi-request at lists.owasp.org

You can reach the person managing the list at
       owasp-delhi-owner at lists.owasp.org

When replying, please edit your Subject line so it is more specific
than "Re: Contents of Owasp-delhi digest..."


Today's Topics:

  1. Re: SSL Broken.. (Gunwant Singh)


----------------------------------------------------------------------

Message: 1
Date: Mon, 19 Jan 2009 23:25:39 +0530
From: "Gunwant Singh" <gunwant.s at gmail.com>
Subject: Re: [Owasp-delhi] SSL Broken..
To: lavakumar.kuppan at rbs.com
Cc: owasp-delhi at lists.owasp.org
Message-ID:
       <44b2bd060901190955j11774427j2cc832d1e782267a at mail.gmail.com>
Content-Type: text/plain; charset="iso-8859-1"

Hi Lava,

Nice to see your reply. Please see my thoughts on your comments.

>Now in the solution that you have suggested, the server has to fetch the
user's password for each request which defeats the whole purpose of
maintaning session IDs.

Good point. My suggestion on this: Access the password only once and store
it in a temporary variable securely for further transactions and then delete
it as the session ends.

>Ironically you had already suggested a solution and then asked the
question, wonder if you were just checking if everyone understood your talk
properly ;)

If you would have read this mailing thread from the very scratch, you would
have known that this question ain't related to salted MD5. I was not
checking if people understood my talks properly. I could have done that
there and then only.

>For your salted-hashning technique or the new techique there is to be a lot
of client side JS code which has to create the salted hash and send it to
the server. The attacker would just intercept this message and replace your
JS with another JS which does every thing like the original JS but in
addition steals the user's clear text password and appends to the request
which the attacker can now get by viewing your request.

I would like to comment about the salted hashing part in a different e-mail
(if I get some time) as this topic is not what I am talking about here.
About the technique, in case if you can manipulate the generated hash
somehow by intercepting, and make up your own hash, can you still be a part
of the same session. I don't think so. Let me know if you can. Check out the
way I told about its workings.

Could you come up with some *PoC* to what you said? You said intercepting
and manipulating the traffic on the fly travelling from the server to the
client or the other way around? How would you do that sitting somewhere on
the network? I am curious to know.

I don't know why you guys keep involving SSL with this thing.

Thanks for your feedback.

-Gunwant

On Mon, Jan 19, 2009 at 1:04 PM, <lavakumar.kuppan at rbs.com> wrote:

>
> Hi Gunwant,
>
> Thanks for bringing up this topic, can see that it has tickled quite a few
> brains in the list already ;), prompting some really intelligent ideas and
> arguments.
> I was on vacations and missed out on all the fun here, but its never too
> late so here is my humble opinion.
>
> There are two very important factors that have to be considered here:
>
> 1) Why is a session ID required.
> 2) What is the possibilty of some one with sniffing capability to
intercept
> and manipulate the traffic.
>
>
> 1) Why is a session ID required
>  I believe sessiond IDs are used to avoid connecting to the DB each time
> and validating the user's password, they are used to improve efficiency.
> Now in the solution that you have suggested, the server has to fetch the
> user's password for each request which defeats the whole purpose of
> maintaning session IDs.
> Since we are anyway reffering to the password for each request, I would
> like to think that we can authenticate for each request with the
salted-hash
> technique you suggested in your december OWASP talk, provided once a salt
is
> used the server discards it and issues a new one.
> Ironically you had already suggested a solution and then asked the
> question, wonder if you were just checking if everyone understood your
talk
> properly ;)
>
> 2) What is the possibilty of some one with sniffing capability to
intercept
> and manipulate the traffic.
> As someone who has done quite a bit of sniffing on customer networks
during
> pentests, I think that someone who is capable of sniffing would in all
> probability also be capable of intercepting and manipulating the traffic
> between the client and server. There might be exceptions but they would be
> uncommon.
> Any techniquie which enforces some trust on the client-side logic now gets
> defeated.
> For your salted-hashning technique or the new techique there is to be a
lot
> of client side JS code which has to create the salted hash and send it to
> the server. The attacker would just intercept this message and replace
your
> JS with another JS which does every thing like the original JS but in
> addition steals the user's clear text password and appends to the request
> which the attacker can now get by viewing your request.
> Once this happens the entitre security system is defeated as its so
closely
> attached to the user's password.
> So in my opinion once someone is able to intercept a clear-text traffic he
> could directly or indirectly bypass most restictions enforced.
>
> The thing that differentiates SSL from the suggested approach is the use
of
> Server certificates which establishes authenticity, unless we can figure
out
> a way to do that our confidentiality and integrity solutions might fail.
>
> Dont cosider thick client approach like java applets as reverse
engineering
> is a possibility.
>
> PS: OK, I have not suggested any solution,  am a pentester what do you
> expect :P
>
> Thanks and Regards,
> Lavakumar K
> Penetration Tester - Global ISA
>
>
>  *"Gunwant Singh" <gunwant.s at gmail.com>*
> Sent by: owasp-delhi-bounces at lists.owasp.org
>
> 01/16/2009 11:06 PM
>   To
> owasp-delhi at lists.owasp.org
>  cc
>   Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
> Hi,
>
> Ok, let me elucidate the workings of the technique I was talking about.
>
>
> But before that I just want to shed some light on a few things so no-one
> comes again questioning to me about these and start some endless argument.
>
> - The e-commerce site I was talking about, I never said that they are only
> using the technique I am going to discuss. They might be using other
> techniques for their protection. What I meant was I've not seen/heard
anyone
> else using this technique. That doesn't mean that they are only using this
> technique for their protection. Every giant incorporates multi-tier
security
> for their resources.  I am not sure what exactly they are using besides
this
> technique as Nobody reveals that.  I questioned someone on a forum, he
came
> up with this technique, I studied, checked this on their documentation
page,
> discussed with some people, discussed with some more, argued with even
more
> and now I am here. I am looking for some feedback from you all. Just let
me
> know what ever you think is wrong with this. Anyhow the question is not
that
> whether they are using it or not but the question is 'How good is the
> technique?'
>
> - Please don't misinterpret my statement. I am not saying 'Don't use SSL'.
> SSL is definitely a protection mechanism for "Now" if we use it
> appropriately (CA signed certificate with a well-tested, well-reviewed
> implementation). Use SSL till someone finds some exploit *practically* not
> theoretically. This whole discussion is based on a research question so
I/we
> can get a *feasible* working solution for this (may-be-a-future) problem.
If
> you are not interested in discussing please do not comment. And please do
> not envisage what I am not saying.
>
> So here is how it works.
>
> No SSL. All traffic in clear text.
> Initially we need to communicate an OOB password/code/nonce (whatever you
> call it) to the client - only *once* not each time.
>
>
> 1. The client initiates a connection request to the server. As a result,
> server will initiate a handshake process to synchronize the time-stamps
> between the client and itself. Then the server will analyze tolerance time
> of packets leaving the client workstation till it reaches the server. The
> tolerance time is configured so to manage slow hosts or slow traffic. In
> plain words, server synchronizes date and time (in seconds, milliseconds
or
> even nanoseconds based on the criticality of the application) with the
> client.
>
> 2. At the client side: the message, instantaneous time-stamp and the
> password are concatenated and hashed via SHA-1/SHA-256, whatever one
wishes.
> This ensuing hash is combined with the username to form an authentication
> header and sent to the server.
>
> 3. At the server side, the server sees the username and perceives which
> user is trying to authenticate. Based on the tolerance configured
initially
> at the handshake time, it picks the time-stamp from its own clock and
using
> the password and the message it generates the hash in the same way as it
was
> done at the client side.
>
> 4. If the hash matches it generates a Session ID and maps it to the
> username of the user. This Session ID will be sent from the client to the
> server along with the computed hash (which is different for each request -
> see next Step)
>
> 5. Now if the client sends another request, it appends and then hashes the
> message, password and the time-stamp (which will be apparently because of
> the different instantaneous time-stamp i.e. date and time). This resulting
> string is sent to the server along with the Session ID assigned to the
user
> earlier. The resulting string contains a different hash as the time has
> changed. This will be validated at the server the same way as in Step 3.
>
> Now how can an adversary exploit this scenario? What I think of are two
> ways:
>
> 1. Either he will capture one of the hashes and try to predict the next
> hash by brute forcing different time-stamps.
>
> - But this can not be possible. He doesn't have the password to generate
> the hash.
>
> 2. What if he captures a series of requests and responses and replays them
> back to the server at a later stage.
>
> - This can't be possible either. In order to interact with the server, one
> needs to handshake so to synchronize itself with the server's clock. The
> attacker would not be able to synchronize because he would not be able to
> synchronize the *past-timestamp* (in the captured traffic) with the
server's
> current time.
>
> 3. Lastly for the newbies, what if he captures the Session ID.
>
> - But he would not be able to produce the matching Hash for the request,
so
> no luck.
>
> A few things to contemplate:
>
> 1. This will be considerably be CPU intensive but can be acknowledged if
> compared to the processing cycles SSL takes.
>
> 2. Time synchronization can be complex. I have no idea how to do that.
>
> 3. Please provide your
> feedback/fury/antagonism/annoyance/appreciation/whatever. Hope I explained
> this in a very straightforward way.
>
> Thanks.
>
> Gunwant
>
>
>
>
>
> On Fri, Jan 16, 2009 at 4:26 AM, Plash Chowdhary <*plash.chowdhary at tcs.com
> * <plash.chowdhary at tcs.com>> wrote:
>
> Gunwant,
>
> I will be interested to know kind of soltutions are being used.
> SInce you are talking about **Time stamp**(in clear text will be
> perdictable, specially if a client side algo is being used) <some random
> number in hidden field with every request,<unique captcha with every
request
> (this will be interesting)  can be a case but they will be not as roboust
>  as out of band..
> some how with Time stamps only thing that rings bell is CRYPTOGRAPHY *: D
> *(PKI??)
>
> I will be really surprized if that organization is not using SSL from a
> Vendor. (as you said its an e commerce site)
>
> and anyways i wont be using HTTPS on public content of my site and will
> switch to HTTPS session only when needed (IDEALLY)
>
>
> lemme know your thoughts
>
> Regards
> Plash
>
>
>
>
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 12:30 PM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
> cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
> Plash,
>
> Thanks for the idea. Please don't take my talks as overstatements, I just
> wanted to have some innovative ideas from you guys.
>
> Many organizations implement session mechanisms without using SSL. As a
> matter of fact these are not the conditions that I have set. There are
many
> scenarios where using SSL is unworkable and in order to provide
protection,
> there are solutions.
>
> Also, it becomes more relevant when people are trying to prove the
> weaknesses of SSL. Not to forget, facts say that most organizations who
use
> SSL, use self signed certificates rather than a CA sign it.
>
> For sessions on non-SSL, there are many undocumented solutions which can
be
> put into practice but such solutions needs to be well-reviewed and
> well-tested before they are implemented. I have come to know about one of
> the methods implemented by one of the top e-commerce portal giants. This
> solution is a bit tough to understand and subsequently implement it.
Before
> I discuss it on the mailing list, I need to make sure that I understand it
> well. The only thing I can share at the moment is, it uses time-stamps.
> Hopefully, I would be discussing this proposition in detail in the
upcoming
> Delhi Chapter meeting this month.
>
> Sorry if my talks were exaggerated. I still seek more ideas on the same
> question if someone is willing to share.
>
> Many thanks.
>
> On Thu, Jan 15, 2009 at 11:29 PM, Plash Chowdhary <
> *plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
>
> Gunwant,,
>
> Yes impractical "Off band validation" for each request in the conditions
> you have set. Now either you come up with a solution or im implimenting
SSL
> *: )*
>
>
> Regards
> Plash
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 10:27 AM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
>  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
> I would happily accept what you say if you say how it protects.
>
> Tell me **how** would a sniffer miss your validation code on an
> unencrypted channel. We should talk about mitigating not minimizing.
>
> Oh ! unless you are saying, a different off band validation code is sent
> for **each** request - then it is possible but it is impractical even in
> high risk applications.
>
> On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary <
> *plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
>
> It does Gunwant, Use long one time off band validation....and keep a short
> TTL it will minimize the risk of relpay,....
>
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 09:25 AM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
>  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
> That doesn't affirm protection against replay attack, dude!
> In the transit, anyone can see your validation code...
> Even if you hash/encrypt it, still it can used to replay the traffic...
> this is vulnerable.. :)
>
> On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary <
> *plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
>
> verify user offline.. send an sms(or similar) with a validation code(long
> randomly genrated  string) to the user everytime he logs in to validate
and
> use it everytime a transaction (high risk) is done or role is  changed..
> best way still will be to use it over SSL and use digital signatures
>
>
> Regards
> Plash
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>
> *>*
> Sent by:
*owasp-delhi-bounces at lists.owasp.org*<owasp-delhi-bounces at lists.owasp.org>
>
> 01/14/2009 10:13 AM
>
>   To
> "Karthik Muthukrishnan"
<*karthik.muthukrishnan at tcs.com*<karthik.muthukrishnan at tcs.com>
> >
>  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
>
>
> Hi,
>
> Thanks for your reply but that did not answer my question. You are telling
> me what I can use for protecting the credentials. I know what I can use,
but
> just out of curiousity I want to know if I don't use SSL/VPN or any other
> network based protection, what else can be done on the application layer
in
> order to protect the credentials
> . Please see the answers below.
>
>
> On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <*
> karthik.muthukrishnan at tcs.com* <karthik.muthukrishnan at tcs.com>> wrote:
>
> > salted MD5 hashing protects the authentication credentials rightly from
> eavesdropping on the network.
> Salting is used to protect MD5 hashes from rainbow table attacks.
> Apparently Yes, although ultimately it protects authentication credentials
> only. Facts say the highest risk is eavesdropping if the session is
> unencrypted.
>
> > SSL does the same thing.
> Yes, SSL is used to ensure confidentiality and trust in the network
> communiation. Confidentiality (or prevention of network eavesdropping) is
> ensured by encryption. Trust is accomplished by Server and/or client
> certificates.
> I know what SSL does, but my question is something else.
>
> > However, in some scenarios SSL might not be feasible. For example,
> causing heavy load on the server or may be some applications don't support
> it, etc.
> In such cases SSL Accelerators are used. They are devices which can be fit
> into the architecture without changing the application or affecting the
load
> on the application server.
>
> Again my question is something else. I know if SSL doesn't work,
> accelerators help expedite the processing. What I want to know is, if I
"Do
> Not" want to use SSL what measures can be taken.
>
>
> > We can protect the authentication credentials using salted MD5 hashing
> or by using SSL.
> To protect authentication credentials in HTTP, we have to rely on SSL.
> Hashes are a secure (aka not in clear text) way to store authentication
> credentials.
> So you are proclaiming that we *have to* rely  on SSL- no other
> alternative.
> Hashes are also used in many applications for many different purposes
> besides authenticity and integrity.
>
>
> > In order to protect the Session credentials (Session ID, tokens,
> cookies, etc) on a non-SSL channel what measures can be taken?
> To protect either auth or session credentials we have to ensure
> confidentiality of the communication channel. If we dont use HTTPS, then
VPN
> might be another option. While authentication credentials can be protected
> by some challenge handshake mechanism (similar to CHAP), we would need to
> protect session creds by encrypting the channel.
> I was asking that if we can provide some protection on the application
> level rather than on the network level. Besides SSL/VPN there are many
> options available for protecting the authentication credentials. I want to
> know (just out of curiousity) that how can we secure the session
credentials
> on an unencrypted/non-SSL channel. I know this will take too much
processing
> cycles, time synchronization, quantization in milliseconds even
nanoseconds,
> affirmation of the key exchange, dynamic hashing key generation to
mitigate
> replay attacks, and even more.
>
> I just want to know  if anyone has an idea on how it can be done if h/she
> is willing to share that would be really appreciative. Please make sure
> you understand what I am looking for.
> No offence :)
>
>
>
> Karthik
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
> _______________________________________________
> Owasp-delhi mailing list*
> **Owasp-delhi at lists.owasp.org* <Owasp-delhi at lists.owasp.org>*
> *
>
*https://lists.owasp.org/mailman/listinfo/owasp-delhi*<https://lists.owasp.o
rg/mailman/listinfo/owasp-delhi>
>
> ForwardSourceID:NT00005236
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT000052F2
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT0000530E
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT0000533A
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
>
>
>
> --
> Gunwant Singh
> _______________________________________________
> Owasp-delhi mailing list
> Owasp-delhi at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-delhi
>
>
> This message (including any attachments) is confidential and may be
> privileged. If you have received it by mistake please notify the sender by
> return e-mail and delete this message from your system. Any unauthorised
use
> or dissemination of this message in whole or in part is strictly
prohibited.
> Please note that e-mails are susceptible to change. ABN AMRO Central
> Enterprise Services Pvt Ltd, part of RBS Group plc , having its registered
> office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel (W), Mumbai
-
> 400 013 , including its group companies, shall not be liable for the
> improper or incomplete transmission of the information contained in this
> communication nor for any delay in its receipt or damage to your system.
ABN
> AMRO Central Enterprise Services Pvt Ltd (or its group companies) does not
> guarantee that the integrity of this communication has been maintained nor
> that this communication is free of viruses, interceptions or interference.
>
> ______________________________________________________________________
> This email has been scanned by the MessageLabs Email Security System.
> For more information please visit http://www.messagelabs.com/email
> ______________________________________________________________________
>



--
Gunwant Singh
-------------- next part --------------
An HTML attachment was scrubbed...
URL:
https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090119/bd580bc5/
attachment.html

------------------------------

_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-delhi


End of Owasp-delhi Digest, Vol 18, Issue 18
*******************************************

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090121/621da34e/attachment-0001.html 

From gunwant.s at gmail.com  Wed Jan 21 10:45:11 2009
From: gunwant.s at gmail.com (Gunwant Singh)
Date: Wed, 21 Jan 2009 21:15:11 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <OFC75A078F.E81DBC5F-ON65257545.002179AA-65257545.0021EA30@abnamro.com>
References: <44b2bd060901190955j11774427j2cc832d1e782267a@mail.gmail.com>
	<OFC75A078F.E81DBC5F-ON65257545.002179AA-65257545.0021EA30@abnamro.com>
Message-ID: <44b2bd060901210745x5797476eq8aa4df77e9339664@mail.gmail.com>

Hi Lava,

Come on! I know ARP poisoning, what I meant was how would you intercept and
manipulate the traffic in my specific case, especially when you have
time-stamps involved.

Thanks.
Gunwant

P.S: Is this mail delivery system error only coming to me or everyone else?

On Wed, Jan 21, 2009 at 11:39 AM, <lavakumar.kuppan at rbs.com> wrote:

>
> Hi Gunwant,
>
> You can check out ettercap, it has ARP poisoning capability and lets you
> manipulate the intercepted traffic on the fly with filters.
> Play around with it a little :)
>
> Thanks and Regards,
> Lavakumar K
> Penetration Tester - Global ISA
>
>
>
>  *"Gunwant Singh" <gunwant.s at gmail.com>*
>
> 01/19/2009 11:25 PM
>   To
> lavakumar.kuppan at rbs.com  cc
> owasp-delhi at lists.owasp.org
>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
> Hi Lava,
>
> Nice to see your reply. Please see my thoughts on your comments.
>
> >Now in the solution that you have suggested, the server has to fetch the
> user's password for each request which defeats the whole purpose of
> maintaning session IDs.
>
> Good point. My suggestion on this: Access the password only once and store
> it in a temporary variable securely for further transactions and then delete
> it as the session ends.
>
> >Ironically you had already suggested a solution and then asked the
> question, wonder if you were just checking if everyone understood your talk
> properly ;)
>
> If you would have read this mailing thread from the very scratch, you would
> have known that this question ain't related to salted MD5. I was not
> checking if people understood my talks properly. I could have done that
> there and then only.
>
> >For your salted-hashning technique or the new techique there is to be a
> lot of client side JS code which has to create the salted hash and send it
> to the server. The attacker would just intercept this message and replace
> your JS with another JS which does every thing like the original JS but in
> addition steals the user's clear text password and appends to the request
> which the attacker can now get by viewing your request.
>
> I would like to comment about the salted hashing part in a different e-mail
> (if I get some time) as this topic is not what I am talking about here.
> About the technique, in case if you can manipulate the generated hash
> somehow by intercepting, and make up your own hash, can you still be a part
> of the same session. I don't think so. Let me know if you can. Check out the
> way I told about its workings.
>
> Could you come up with some *PoC* to what you said? You said intercepting
> and manipulating the traffic on the fly travelling from the server to the
> client or the other way around? How would you do that sitting somewhere on
> the network? I am curious to know.
>
> I don't know why you guys keep involving SSL with this thing.
>
> Thanks for your feedback.
>
> -Gunwant
>
> On Mon, Jan 19, 2009 at 1:04 PM, <*lavakumar.kuppan at rbs.com*<lavakumar.kuppan at rbs.com>>
> wrote:
>
> Hi Gunwant,
>
> Thanks for bringing up this topic, can see that it has tickled quite a few
> brains in the list already ;), prompting some really intelligent ideas and
> arguments.
> I was on vacations and missed out on all the fun here, but its never too
> late so here is my humble opinion.
>
> There are two very important factors that have to be considered here:
>
> 1) Why is a session ID required.
> 2) What is the possibilty of some one with sniffing capability to intercept
> and manipulate the traffic.
>
>
> 1) Why is a session ID required
> I believe sessiond IDs are used to avoid connecting to the DB each time and
> validating the user's password, they are used to improve efficiency.
> Now in the solution that you have suggested, the server has to fetch the
> user's password for each request which defeats the whole purpose of
> maintaning session IDs.
> Since we are anyway reffering to the password for each request, I would
> like to think that we can authenticate for each request with the salted-hash
> technique you suggested in your december OWASP talk, provided once a salt is
> used the server discards it and issues a new one.
> Ironically you had already suggested a solution and then asked the
> question, wonder if you were just checking if everyone understood your talk
> properly ;)
>
> 2) What is the possibilty of some one with sniffing capability to intercept
> and manipulate the traffic.
> As someone who has done quite a bit of sniffing on customer networks during
> pentests, I think that someone who is capable of sniffing would in all
> probability also be capable of intercepting and manipulating the traffic
> between the client and server. There might be exceptions but they would be
> uncommon.
> Any techniquie which enforces some trust on the client-side logic now gets
> defeated.
> For your salted-hashning technique or the new techique there is to be a lot
> of client side JS code which has to create the salted hash and send it to
> the server. The attacker would just intercept this message and replace your
> JS with another JS which does every thing like the original JS but in
> addition steals the user's clear text password and appends to the request
> which the attacker can now get by viewing your request.
> Once this happens the entitre security system is defeated as its so closely
> attached to the user's password.
> So in my opinion once someone is able to intercept a clear-text traffic he
> could directly or indirectly bypass most restictions enforced.
>
> The thing that differentiates SSL from the suggested approach is the use of
> Server certificates which establishes authenticity, unless we can figure out
> a way to do that our confidentiality and integrity solutions might fail.
>
> Dont cosider thick client approach like java applets as reverse engineering
> is a possibility.
>
> PS: OK, I have not suggested any solution,  am a pentester what do you
> expect :P
>
> Thanks and Regards,
> Lavakumar K
> Penetration Tester - Global ISA
>
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
> Sent by: *owasp-delhi-bounces at lists.owasp.org*<owasp-delhi-bounces at lists.owasp.org>
>
> 01/16/2009 11:06 PM
>
>   To
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  cc
>   Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
> Hi,
>
> Ok, let me elucidate the workings of the technique I was talking about.
>
>
>
> But before that I just want to shed some light on a few things so no-one
> comes again questioning to me about these and start some endless argument.
>
> - The e-commerce site I was talking about, I never said that they are only
> using the technique I am going to discuss. They might be using other
> techniques for their protection. What I meant was I've not seen/heard anyone
> else using this technique. That doesn't mean that they are only using this
> technique for their protection. Every giant incorporates multi-tier security
> for their resources.  I am not sure what exactly they are using besides this
> technique as Nobody reveals that.  I questioned someone on a forum, he came
> up with this technique, I studied, checked this on their documentation page,
> discussed with some people, discussed with some more, argued with even more
> and now I am here. I am looking for some feedback from you all. Just let me
> know what ever you think is wrong with this. Anyhow the question is not that
> whether they are using it or not but the question is 'How good is the
> technique?'
>
> - Please don't misinterpret my statement. I am not saying 'Don't use SSL'.
> SSL is definitely a protection mechanism for "Now" if we use it
> appropriately (CA signed certificate with a well-tested, well-reviewed
> implementation). Use SSL till someone finds some exploit *practically* not
> theoretically. This whole discussion is based on a research question so I/we
> can get a *feasible* working solution for this (may-be-a-future) problem. If
> you are not interested in discussing please do not comment. And please do
> not envisage what I am not saying.
>
> So here is how it works.
>
> No SSL. All traffic in clear text.
> Initially we need to communicate an OOB password/code/nonce (whatever you
> call it) to the client - only *once* not each time.
>
>
> 1. The client initiates a connection request to the server. As a result,
> server will initiate a handshake process to synchronize the time-stamps
> between the client and itself. Then the server will analyze tolerance time
> of packets leaving the client workstation till it reaches the server. The
> tolerance time is configured so to manage slow hosts or slow traffic. In
> plain words, server synchronizes date and time (in seconds, milliseconds or
> even nanoseconds based on the criticality of the application) with the
> client.
>
> 2. At the client side: the message, instantaneous time-stamp and the
> password are concatenated and hashed via SHA-1/SHA-256, whatever one wishes.
> This ensuing hash is combined with the username to form an authentication
> header and sent to the server.
>
> 3. At the server side, the server sees the username and perceives which
> user is trying to authenticate. Based on the tolerance configured initially
> at the handshake time, it picks the time-stamp from its own clock and using
> the password and the message it generates the hash in the same way as it was
> done at the client side.
>
> 4. If the hash matches it generates a Session ID and maps it to the
> username of the user. This Session ID will be sent from the client to the
> server along with the computed hash (which is different for each request -
> see next Step)
>
> 5. Now if the client sends another request, it appends and then hashes the
> message, password and the time-stamp (which will be apparently because of
> the different instantaneous time-stamp i.e. date and time). This resulting
> string is sent to the server along with the Session ID assigned to the user
> earlier. The resulting string contains a different hash as the time has
> changed. This will be validated at the server the same way as in Step 3.
>
> Now how can an adversary exploit this scenario? What I think of are two
> ways:
>
> 1. Either he will capture one of the hashes and try to predict the next
> hash by brute forcing different time-stamps.
>
> - But this can not be possible. He doesn't have the password to generate
> the hash.
>
> 2. What if he captures a series of requests and responses and replays them
> back to the server at a later stage.
>
> - This can't be possible either. In order to interact with the server, one
> needs to handshake so to synchronize itself with the server's clock. The
> attacker would not be able to synchronize because he would not be able to
> synchronize the *past-timestamp* (in the captured traffic) with the server's
> current time.
>
> 3. Lastly for the newbies, what if he captures the Session ID.
>
> - But he would not be able to produce the matching Hash for the request, so
> no luck.
>
> A few things to contemplate:
>
> 1. This will be considerably be CPU intensive but can be acknowledged if
> compared to the processing cycles SSL takes.
>
> 2. Time synchronization can be complex. I have no idea how to do that.
>
> 3. Please provide your
> feedback/fury/antagonism/annoyance/appreciation/whatever. Hope I explained
> this in a very straightforward way.
>
> Thanks.
>
> Gunwant
>
>
>
>
>
> On Fri, Jan 16, 2009 at 4:26 AM, Plash Chowdhary <*plash.chowdhary at tcs.com
> * <plash.chowdhary at tcs.com>> wrote:
>
> Gunwant,
>
> I will be interested to know kind of soltutions are being used.
> SInce you are talking about **Time stamp**(in clear text will be
> perdictable, specially if a client side algo is being used) <some random
> number in hidden field with every request,<unique captcha with every request
> (this will be interesting)  can be a case but they will be not as roboust
>  as out of band..
> some how with Time stamps only thing that rings bell is CRYPTOGRAPHY *: D
> *(PKI??)
>
> I will be really surprized if that organization is not using SSL from a
> Vendor. (as you said its an e commerce site)
>
> and anyways i wont be using HTTPS on public content of my site and will
> switch to HTTPS session only when needed (IDEALLY)
>
>
> lemme know your thoughts
>
> Regards
> Plash
>
>
>
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 12:30 PM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
>  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>
>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
> Plash,
>
> Thanks for the idea. Please don't take my talks as overstatements, I just
> wanted to have some innovative ideas from you guys.
>
> Many organizations implement session mechanisms without using SSL. As a
> matter of fact these are not the conditions that I have set. There are many
> scenarios where using SSL is unworkable and in order to provide protection,
> there are solutions.
>
> Also, it becomes more relevant when people are trying to prove the
> weaknesses of SSL. Not to forget, facts say that most organizations who use
> SSL, use self signed certificates rather than a CA sign it.
>
> For sessions on non-SSL, there are many undocumented solutions which can be
> put into practice but such solutions needs to be well-reviewed and
> well-tested before they are implemented. I have come to know about one of
> the methods implemented by one of the top e-commerce portal giants. This
> solution is a bit tough to understand and subsequently implement it. Before
> I discuss it on the mailing list, I need to make sure that I understand it
> well. The only thing I can share at the moment is, it uses time-stamps.
> Hopefully, I would be discussing this proposition in detail in the upcoming
> Delhi Chapter meeting this month.
>
> Sorry if my talks were exaggerated. I still seek more ideas on the same
> question if someone is willing to share.
>
> Many thanks.
>
> On Thu, Jan 15, 2009 at 11:29 PM, Plash Chowdhary <
> *plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
>
> Gunwant,,
>
> Yes impractical "Off band validation" for each request in the conditions
> you have set. Now either you come up with a solution or im implimenting SSL
> *: )*
>
>
> Regards
> Plash
>  *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 10:27 AM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
>  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>
>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
> I would happily accept what you say if you say how it protects.
>
> Tell me **how** would a sniffer miss your validation code on an
> unencrypted channel. We should talk about mitigating not minimizing.
>
> Oh ! unless you are saying, a different off band validation code is sent
> for **each** request - then it is possible but it is impractical even in
> high risk applications.
>
> On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary <
> *plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
>
> It does Gunwant, Use long one time off band validation....and keep a short
> TTL it will minimize the risk of relpay,....
>  *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 09:25 AM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
>  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>
>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
>
>
> That doesn't affirm protection against replay attack, dude!
> In the transit, anyone can see your validation code...
> Even if you hash/encrypt it, still it can used to replay the traffic...
> this is vulnerable.. :)
>
> On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary <
> *plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
>
> verify user offline.. send an sms(or similar) with a validation code(long
> randomly genrated  string) to the user everytime he logs in to validate and
> use it everytime a transaction (high risk) is done or role is  changed..
> best way still will be to use it over SSL and use digital signatures
>
>
> Regards
> Plash
>  *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>
> *>*
> Sent by: *owasp-delhi-bounces at lists.owasp.org*<owasp-delhi-bounces at lists.owasp.org>
>
> 01/14/2009 10:13 AM
>
>   To
> "Karthik Muthukrishnan" <*karthik.muthukrishnan at tcs.com*<karthik.muthukrishnan at tcs.com>
> >
>  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>
>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
>
>
>
>
> Hi,
>
> Thanks for your reply but that did not answer my question. You are telling
> me what I can use for protecting the credentials. I know what I can use, but
> just out of curiousity I want to know if I don't use SSL/VPN or any other
> network based protection, what else can be done on the application layer in
> order to protect the credentials
> . Please see the answers below.
>
>
> On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <*
> karthik.muthukrishnan at tcs.com* <karthik.muthukrishnan at tcs.com>> wrote:
>
> > salted MD5 hashing protects the authentication credentials rightly from
> eavesdropping on the network.
> Salting is used to protect MD5 hashes from rainbow table attacks.
> Apparently Yes, although ultimately it protects authentication credentials
> only. Facts say the highest risk is eavesdropping if the session is
> unencrypted.
>
> > SSL does the same thing.
> Yes, SSL is used to ensure confidentiality and trust in the network
> communiation. Confidentiality (or prevention of network eavesdropping) is
> ensured by encryption. Trust is accomplished by Server and/or client
> certificates.
> I know what SSL does, but my question is something else.
>
> > However, in some scenarios SSL might not be feasible. For example,
> causing heavy load on the server or may be some applications don't support
> it, etc.
> In such cases SSL Accelerators are used. They are devices which can be fit
> into the architecture without changing the application or affecting the load
> on the application server.
>
> Again my question is something else. I know if SSL doesn't work,
> accelerators help expedite the processing. What I want to know is, if I "Do
> Not" want to use SSL what measures can be taken.
>
>
> > We can protect the authentication credentials using salted MD5 hashing
> or by using SSL.
> To protect authentication credentials in HTTP, we have to rely on SSL.
> Hashes are a secure (aka not in clear text) way to store authentication
> credentials.
> So you are proclaiming that we *have to* rely  on SSL- no other
> alternative.
> Hashes are also used in many applications for many different purposes
> besides authenticity and integrity.
>
>
> > In order to protect the Session credentials (Session ID, tokens,
> cookies, etc) on a non-SSL channel what measures can be taken?
> To protect either auth or session credentials we have to ensure
> confidentiality of the communication channel. If we dont use HTTPS, then VPN
> might be another option. While authentication credentials can be protected
> by some challenge handshake mechanism (similar to CHAP), we would need to
> protect session creds by encrypting the channel.
> I was asking that if we can provide some protection on the application
> level rather than on the network level. Besides SSL/VPN there are many
> options available for protecting the authentication credentials. I want to
> know (just out of curiousity) that how can we secure the session credentials
> on an unencrypted/non-SSL channel. I know this will take too much processing
> cycles, time synchronization, quantization in milliseconds even nanoseconds,
> affirmation of the key exchange, dynamic hashing key generation to mitigate
> replay attacks, and even more.
>
> I just want to know  if anyone has an idea on how it can be done if h/she
> is willing to share that would be really appreciative. Please make sure
> you understand what I am looking for.
> No offence :)
>
>
>
> Karthik
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
> _______________________________________________
> Owasp-delhi mailing list*
> **Owasp-delhi at lists.owasp.org* <Owasp-delhi at lists.owasp.org>
> *https://lists.owasp.org/mailman/listinfo/owasp-delhi*<https://lists.owasp.org/mailman/listinfo/owasp-delhi>
>
> ForwardSourceID:NT00005236
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT000052F2
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT0000530E
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT0000533A
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
>
>
>
> --
> Gunwant Singh
> _______________________________________________
> Owasp-delhi mailing list*
> **Owasp-delhi at lists.owasp.org* <Owasp-delhi at lists.owasp.org>*
> **https://lists.owasp.org/mailman/listinfo/owasp-delhi*<https://lists.owasp.org/mailman/listinfo/owasp-delhi>
>
>
> This message (including any attachments) is confidential and may be
> privileged. If you have received it by mistake please notify the sender by
> return e-mail and delete this message from your system. Any unauthorised use
> or dissemination of this message in whole or in part is strictly prohibited.
> Please note that e-mails are susceptible to change. ABN AMRO Central
> Enterprise Services Pvt Ltd, part of RBS Group plc , having its registered
> office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel (W), Mumbai -
> 400 013 , including its group companies, shall not be liable for the
> improper or incomplete transmission of the information contained in this
> communication nor for any delay in its receipt or damage to your system. ABN
> AMRO Central Enterprise Services Pvt Ltd (or its group companies) does not
> guarantee that the integrity of this communication has been maintained nor
> that this communication is free of viruses, interceptions or interference.
>
> ______________________________________________________________________
> This email has been scanned by the MessageLabs Email Security System.
> For more information please visit *http://www.messagelabs.com/email*<http://www.messagelabs.com/email>
> ______________________________________________________________________
>
>
>
> --
> Gunwant Singh
>
>
> This message (including any attachments) is confidential and may be
> privileged. If you have received it by mistake please notify the sender by
> return e-mail and delete this message from your system. Any unauthorised use
> or dissemination of this message in whole or in part is strictly prohibited.
> Please note that e-mails are susceptible to change. ABN AMRO Central
> Enterprise Services Pvt Ltd, part of RBS Group plc , having its registered
> office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel (W), Mumbai -
> 400 013 , including its group companies, shall not be liable for the
> improper or incomplete transmission of the information contained in this
> communication nor for any delay in its receipt or damage to your system. ABN
> AMRO Central Enterprise Services Pvt Ltd (or its group companies) does not
> guarantee that the integrity of this communication has been maintained nor
> that this communication is free of viruses, interceptions or interference.
>
> ______________________________________________________________________
> This email has been scanned by the MessageLabs Email Security System.
> For more information please visit http://www.messagelabs.com/email
> ______________________________________________________________________
>



-- 
Gunwant Singh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090121/4d7d0c3e/attachment-0001.html 

From lavakumar.kuppan at rbs.com  Thu Jan 22 04:19:43 2009
From: lavakumar.kuppan at rbs.com (lavakumar.kuppan at rbs.com)
Date: Thu, 22 Jan 2009 14:49:43 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <44b2bd060901210745x5797476eq8aa4df77e9339664@mail.gmail.com>
Message-ID: <OF84CE238F.E23D524E-ON65257546.002E4883-65257546.00334AB6@abnamro.com>

Hi Gunwant,

In addition to ARP poisoning this tool also lets you manipulate HTTP 
content on the fly.
However coming back to the timestamp technique, here is how it will 
happen:

STEP 1:
Client  -> GET /index.jsp -> Server
Server - > 200 OK <html>Secret_Msg="secret"<script 
src=timestamp.js></html> -> Attacker (notes down the secret message) -> 
Client (lets say timestamp.js contains the client-side logic for timestamp 
creation and hashing)

STEP 2:
Client -> GET /timestamp.js  -> Server
Server  -> [timestamp();hash()] -> Attacker - > [timestamp();hash(); 
(document.cookie = "password 
="+document.forms['login'].password.value+"time"=time())] -> Client
(The attacker who is sniffing with ARP poisoning is now manipulating the 
js file's content on the fly, he adds a couple of more lines of code to 
the actual js file which adds the user's password to the cookie under the 
name 'password' and the current time on the client under the name 'time'.)

STEP 3:
Client(user enters the password, the hash is created by the js and sent to 
the server, this request also contains the clear-text password and the 
current time in the cookie) -> Attacker (notes down the password and time 
and removes these fields from the cookie and sends to the server) -> 
Server(server happily authenticates the user)


At this point the attacker has all the three values needed for the hash 
creation - current time on the client side, secret message and the user's 
password. He also knows how the hash is created.
Now he can recreate the hash as many time as he wants with new timestamps.
If the server issues a new secret message then the attacker can get that 
as he is sniffing, same goes for any session ID that is issued.
It should be trivial to stay within the time-lag tolerance as for any site 
to not piss off its users the tolerance should atleast be in seconds.
If it was in milliseconds then even the actual sites users cant send valid 
requests.

If the attacker doesnt have a sense of adventure then he can stop once he 
gets the user's password ;)

Hope this makes things clear
.
It would have been intresting to discuss this with you in person during 
this month's meet but unfortunately am not in Gurgoan anymore.
Good luck with your presentation, am sure that everyone..developers esp 
would find it just as useful as the earlier two :)

Thanks and Regards,
Lavakumar K
Penetration Tester - Global ISA




Gunwant Singh <gunwant.s at gmail.com> 
01/21/2009 09:15 PM

To
lavakumar.kuppan at rbs.com
cc
owasp-delhi at lists.owasp.org
Subject
Re: [Owasp-delhi] SSL Broken..






Hi Lava,

Come on! I know ARP poisoning, what I meant was how would you intercept 
and manipulate the traffic in my specific case, especially when you have 
time-stamps involved.

Thanks.
Gunwant

P.S: Is this mail delivery system error only coming to me or everyone 
else?

On Wed, Jan 21, 2009 at 11:39 AM, <lavakumar.kuppan at rbs.com> wrote:

Hi Gunwant, 

You can check out ettercap, it has ARP poisoning capability and lets you 
manipulate the intercepted traffic on the fly with filters. 
Play around with it a little :) 

Thanks and Regards,
Lavakumar K
Penetration Tester - Global ISA



"Gunwant Singh" <gunwant.s at gmail.com> 
01/19/2009 11:25 PM 


To
lavakumar.kuppan at rbs.com 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..








Hi Lava,

Nice to see your reply. Please see my thoughts on your comments.

>Now in the solution that you have suggested, the server has to fetch the 
user's password for each request which defeats the whole purpose of 
maintaning session IDs.

Good point. My suggestion on this: Access the password only once and store 
it in a temporary variable securely for further transactions and then 
delete it as the session ends.

>Ironically you had already suggested a solution and then asked the 
question, wonder if you were just checking if everyone understood your 
talk properly ;) 

If you would have read this mailing thread from the very scratch, you 
would have known that this question ain't related to salted MD5. I was not 
checking if people understood my talks properly. I could have done that 
there and then only.

>For your salted-hashning technique or the new techique there is to be a 
lot of client side JS code which has to create the salted hash and send it 
to the server. The attacker would just intercept this message and replace 
your JS with another JS which does every thing like the original JS but in 
addition steals the user's clear text password and appends to the request 
which the attacker can now get by viewing your request.

I would like to comment about the salted hashing part in a different 
e-mail (if I get some time) as this topic is not what I am talking about 
here. About the technique, in case if you can manipulate the generated 
hash somehow by intercepting, and make up your own hash, can you still be 
a part of the same session. I don't think so. Let me know if you can. 
Check out the way I told about its workings.

Could you come up with some *PoC* to what you said? You said intercepting 
and manipulating the traffic on the fly travelling from the server to the 
client or the other way around? How would you do that sitting somewhere on 
the network? I am curious to know.

I don't know why you guys keep involving SSL with this thing.

Thanks for your feedback.

-Gunwant 

On Mon, Jan 19, 2009 at 1:04 PM, <lavakumar.kuppan at rbs.com> wrote: 

Hi Gunwant, 

Thanks for bringing up this topic, can see that it has tickled quite a few 
brains in the list already ;), prompting some really intelligent ideas and 
arguments. 
I was on vacations and missed out on all the fun here, but its never too 
late so here is my humble opinion. 

There are two very important factors that have to be considered here: 

1) Why is a session ID required. 
2) What is the possibilty of some one with sniffing capability to 
intercept and manipulate the traffic. 


1) Why is a session ID required 
I believe sessiond IDs are used to avoid connecting to the DB each time 
and validating the user's password, they are used to improve efficiency. 
Now in the solution that you have suggested, the server has to fetch the 
user's password for each request which defeats the whole purpose of 
maintaning session IDs. 
Since we are anyway reffering to the password for each request, I would 
like to think that we can authenticate for each request with the 
salted-hash technique you suggested in your december OWASP talk, provided 
once a salt is used the server discards it and issues a new one. 
Ironically you had already suggested a solution and then asked the 
question, wonder if you were just checking if everyone understood your 
talk properly ;) 

2) What is the possibilty of some one with sniffing capability to 
intercept and manipulate the traffic. 
As someone who has done quite a bit of sniffing on customer networks 
during pentests, I think that someone who is capable of sniffing would in 
all probability also be capable of intercepting and manipulating the 
traffic between the client and server. There might be exceptions but they 
would be uncommon. 
Any techniquie which enforces some trust on the client-side logic now gets 
defeated. 
For your salted-hashning technique or the new techique there is to be a 
lot of client side JS code which has to create the salted hash and send it 
to the server. The attacker would just intercept this message and replace 
your JS with another JS which does every thing like the original JS but in 
addition steals the user's clear text password and appends to the request 
which the attacker can now get by viewing your request. 
Once this happens the entitre security system is defeated as its so 
closely attached to the user's password. 
So in my opinion once someone is able to intercept a clear-text traffic he 
could directly or indirectly bypass most restictions enforced. 

The thing that differentiates SSL from the suggested approach is the use 
of Server certificates which establishes authenticity, unless we can 
figure out a way to do that our confidentiality and integrity solutions 
might fail. 

Dont cosider thick client approach like java applets as reverse 
engineering is a possibility. 

PS: OK, I have not suggested any solution,  am a pentester what do you 
expect :P 

Thanks and Regards,
Lavakumar K
Penetration Tester - Global ISA 

"Gunwant Singh" <gunwant.s at gmail.com> 
Sent by: owasp-delhi-bounces at lists.owasp.org 
01/16/2009 11:06 PM 


To
owasp-delhi at lists.owasp.org 
cc

Subject
Re: [Owasp-delhi] SSL Broken..










Hi, 
Ok, let me elucidate the workings of the technique I was talking about. 


But before that I just want to shed some light on a few things so no-one 
comes again questioning to me about these and start some endless argument.

- The e-commerce site I was talking about, I never said that they are only 
using the technique I am going to discuss. They might be using other 
techniques for their protection. What I meant was I've not seen/heard 
anyone else using this technique. That doesn't mean that they are only 
using this technique for their protection. Every giant incorporates 
multi-tier security for their resources.  I am not sure what exactly they 
are using besides this technique as Nobody reveals that.  I questioned 
someone on a forum, he came up with this technique, I studied, checked 
this on their documentation page, discussed with some people, discussed 
with some more, argued with even more and now I am here. I am looking for 
some feedback from you all. Just let me know what ever you think is wrong 
with this. Anyhow the question is not that whether they are using it or 
not but the question is 'How good is the technique?'

- Please don't misinterpret my statement. I am not saying 'Don't use SSL'. 
SSL is definitely a protection mechanism for "Now" if we use it 
appropriately (CA signed certificate with a well-tested, well-reviewed 
implementation). Use SSL till someone finds some exploit *practically* not 
theoretically. This whole discussion is based on a research question so 
I/we can get a *feasible* working solution for this (may-be-a-future) 
problem. If you are not interested in discussing please do not comment. 
And please do not envisage what I am not saying.

So here is how it works.

No SSL. All traffic in clear text.
Initially we need to communicate an OOB password/code/nonce (whatever you 
call it) to the client - only *once* not each time. 

1. The client initiates a connection request to the server. As a result, 
server will initiate a handshake process to synchronize the time-stamps 
between the client and itself. Then the server will analyze tolerance time 
of packets leaving the client workstation till it reaches the server. The 
tolerance time is configured so to manage slow hosts or slow traffic. In 
plain words, server synchronizes date and time (in seconds, milliseconds 
or even nanoseconds based on the criticality of the application) with the 
client. 
2. At the client side: the message, instantaneous time-stamp and the 
password are concatenated and hashed via SHA-1/SHA-256, whatever one 
wishes. This ensuing hash is combined with the username to form an 
authentication header and sent to the server. 
3. At the server side, the server sees the username and perceives which 
user is trying to authenticate. Based on the tolerance configured 
initially at the handshake time, it picks the time-stamp from its own 
clock and using the password and the message it generates the hash in the 
same way as it was done at the client side. 
4. If the hash matches it generates a Session ID and maps it to the 
username of the user. This Session ID will be sent from the client to the 
server along with the computed hash (which is different for each request - 
see next Step) 
5. Now if the client sends another request, it appends and then hashes the 
message, password and the time-stamp (which will be apparently because of 
the different instantaneous time-stamp i.e. date and time). This resulting 
string is sent to the server along with the Session ID assigned to the 
user earlier. The resulting string contains a different hash as the time 
has changed. This will be validated at the server the same way as in Step 
3. 
Now how can an adversary exploit this scenario? What I think of are two 
ways: 
1. Either he will capture one of the hashes and try to predict the next 
hash by brute forcing different time-stamps. 
- But this can not be possible. He doesn't have the password to generate 
the hash. 
2. What if he captures a series of requests and responses and replays them 
back to the server at a later stage. 
- This can't be possible either. In order to interact with the server, one 
needs to handshake so to synchronize itself with the server's clock. The 
attacker would not be able to synchronize because he would not be able to 
synchronize the *past-timestamp* (in the captured traffic) with the 
server's current time. 
3. Lastly for the newbies, what if he captures the Session ID. 
- But he would not be able to produce the matching Hash for the request, 
so no luck. 
A few things to contemplate: 
1. This will be considerably be CPU intensive but can be acknowledged if 
compared to the processing cycles SSL takes. 
2. Time synchronization can be complex. I have no idea how to do that. 
3. Please provide your 
feedback/fury/antagonism/annoyance/appreciation/whatever. Hope I explained 
this in a very straightforward way. 
Thanks. 
Gunwant 
 


On Fri, Jan 16, 2009 at 4:26 AM, Plash Chowdhary <plash.chowdhary at tcs.com> 
wrote: 

Gunwant, 

I will be interested to know kind of soltutions are being used. 
SInce you are talking about **Time stamp**(in clear text will be 
perdictable, specially if a client side algo is being used) <some random 
number in hidden field with every request,<unique captcha with every 
request (this will be interesting)  can be a case but they will be not as 
roboust  as out of band.. 
some how with Time stamps only thing that rings bell is CRYPTOGRAPHY : D 
(PKI??) 

I will be really surprized if that organization is not using SSL from a 
Vendor. (as you said its an e commerce site) 

and anyways i wont be using HTTPS on public content of my site and will 
switch to HTTPS session only when needed (IDEALLY) 


lemme know your thoughts 

Regards 
Plash 



"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 12:30 PM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..












Plash, 

Thanks for the idea. Please don't take my talks as overstatements, I just 
wanted to have some innovative ideas from you guys.

Many organizations implement session mechanisms without using SSL. As a 
matter of fact these are not the conditions that I have set. There are 
many scenarios where using SSL is unworkable and in order to provide 
protection, there are solutions. 

Also, it becomes more relevant when people are trying to prove the 
weaknesses of SSL. Not to forget, facts say that most organizations who 
use SSL, use self signed certificates rather than a CA sign it. 

For sessions on non-SSL, there are many undocumented solutions which can 
be put into practice but such solutions needs to be well-reviewed and 
well-tested before they are implemented. I have come to know about one of 
the methods implemented by one of the top e-commerce portal giants. This 
solution is a bit tough to understand and subsequently implement it. 
Before I discuss it on the mailing list, I need to make sure that I 
understand it well. The only thing I can share at the moment is, it uses 
time-stamps. Hopefully, I would be discussing this proposition in detail 
in the upcoming Delhi Chapter meeting this month.

Sorry if my talks were exaggerated. I still seek more ideas on the same 
question if someone is willing to share. 

Many thanks. 

On Thu, Jan 15, 2009 at 11:29 PM, Plash Chowdhary < 
plash.chowdhary at tcs.com> wrote: 

Gunwant,, 

Yes impractical "Off band validation" for each request in the conditions 
you have set. Now either you come up with a solution or im implimenting 
SSL : ) 


Regards 
Plash 
"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 10:27 AM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..














I would happily accept what you say if you say how it protects.

Tell me *how* would a sniffer miss your validation code on an unencrypted 
channel. We should talk about mitigating not minimizing.

Oh ! unless you are saying, a different off band validation code is sent 
for *each* request - then it is possible but it is impractical even in 
high risk applications.

On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary < 
plash.chowdhary at tcs.com> wrote: 

It does Gunwant, Use long one time off band validation....and keep a short 
TTL it will minimize the risk of relpay,.... 
"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 09:25 AM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..
















That doesn't affirm protection against replay attack, dude!
In the transit, anyone can see your validation code...
Even if you hash/encrypt it, still it can used to replay the traffic...
this is vulnerable.. :)

On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary < 
plash.chowdhary at tcs.com> wrote: 

verify user offline.. send an sms(or similar) with a validation code(long 
randomly genrated  string) to the user everytime he logs in to validate 
and use it everytime a transaction (high risk) is done or role is 
changed.. best way still will be to use it over SSL and use digital 
signatures 


Regards 
Plash 
"Gunwant Singh" <gunwant.s at gmail.com 
> 
Sent by: owasp-delhi-bounces at lists.owasp.org 
01/14/2009 10:13 AM 


To
"Karthik Muthukrishnan" <karthik.muthukrishnan at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..


















Hi,

Thanks for your reply but that did not answer my question. You are telling 
me what I can use for protecting the credentials. I know what I can use, 
but just out of curiousity I want to know if I don't use SSL/VPN or any 
other network based protection, what else can be done on the application 
layer in order to protect the credentials 
. Please see the answers below. 


On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <
karthik.muthukrishnan at tcs.com> wrote: 

> salted MD5 hashing protects the authentication credentials rightly from 
eavesdropping on the network. 
Salting is used to protect MD5 hashes from rainbow table attacks. 
Apparently Yes, although ultimately it protects authentication credentials 
only. Facts say the highest risk is eavesdropping if the session is 
unencrypted. 

> SSL does the same thing. 
Yes, SSL is used to ensure confidentiality and trust in the network 
communiation. Confidentiality (or prevention of network eavesdropping) is 
ensured by encryption. Trust is accomplished by Server and/or client 
certificates. 
I know what SSL does, but my question is something else. 

> However, in some scenarios SSL might not be feasible. For example, 
causing heavy load on the server or may be some applications don't support 
it, etc. 
In such cases SSL Accelerators are used. They are devices which can be fit 
into the architecture without changing the application or affecting the 
load on the application server. 
Again my question is something else. I know if SSL doesn't work, 
accelerators help expedite the processing. What I want to know is, if I 
"Do Not" want to use SSL what measures can be taken. 


> We can protect the authentication credentials using salted MD5 hashing 
or by using SSL. 
To protect authentication credentials in HTTP, we have to rely on SSL. 
Hashes are a secure (aka not in clear text) way to store authentication 
credentials. 
So you are proclaiming that we *have to* rely  on SSL- no other 
alternative. 
Hashes are also used in many applications for many different purposes 
besides authenticity and integrity. 


> In order to protect the Session credentials (Session ID, tokens, 
cookies, etc) on a non-SSL channel what measures can be taken? 
To protect either auth or session credentials we have to ensure 
confidentiality of the communication channel. If we dont use HTTPS, then 
VPN might be another option. While authentication credentials can be 
protected by some challenge handshake mechanism (similar to CHAP), we 
would need to protect session creds by encrypting the channel. 
I was asking that if we can provide some protection on the application 
level rather than on the network level. Besides SSL/VPN there are many 
options available for protecting the authentication credentials. I want to 
know (just out of curiousity) that how can we secure the session 
credentials on an unencrypted/non-SSL channel. I know this will take too 
much processing cycles, time synchronization, quantization in milliseconds 
even nanoseconds, affirmation of the key exchange, dynamic hashing key 
generation to mitigate replay attacks, and even more. 

I just want to know  if anyone has an idea on how it can be done if h/she 
is willing to share that would be really appreciative. Please make sure 
you understand what I am looking for.
No offence :)



Karthik 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh 
_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org 
https://lists.owasp.org/mailman/listinfo/owasp-delhi

ForwardSourceID:NT00005236     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT000052F2     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT0000530E     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT0000533A     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh




-- 
Gunwant Singh 
_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-delhi


This message (including any attachments) is confidential and may be 
privileged. If you have received it by mistake please notify the sender by 
return e-mail and delete this message from your system. Any unauthorised 
use or dissemination of this message in whole or in part is strictly 
prohibited. Please note that e-mails are susceptible to change. ABN AMRO 
Central Enterprise Services Pvt Ltd, part of RBS Group plc , having its 
registered office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel 
(W), Mumbai - 400 013 , including its group companies, shall not be liable 
for the improper or incomplete transmission of the information contained 
in this communication nor for any delay in its receipt or damage to your 
system. ABN AMRO Central Enterprise Services Pvt Ltd (or its group 
companies) does not guarantee that the integrity of this communication has 
been maintained nor that this communication is free of viruses, 
interceptions or interference.

______________________________________________________________________
This email has been scanned by the MessageLabs Email Security System.
For more information please visit http://www.messagelabs.com/email 
______________________________________________________________________ 



-- 
Gunwant Singh


This message (including any attachments) is confidential and may be 
privileged. If you have received it by mistake please notify the sender by 
return e-mail and delete this message from your system. Any unauthorised 
use or dissemination of this message in whole or in part is strictly 
prohibited. Please note that e-mails are susceptible to change. ABN AMRO 
Central Enterprise Services Pvt Ltd, part of RBS Group plc , having its 
registered office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel 
(W), Mumbai - 400 013 , including its group companies, shall not be liable 
for the improper or incomplete transmission of the information contained 
in this communication nor for any delay in its receipt or damage to your 
system. ABN AMRO Central Enterprise Services Pvt Ltd (or its group 
companies) does not guarantee that the integrity of this communication has 
been maintained nor that this communication is free of viruses, 
interceptions or interference.

______________________________________________________________________
This email has been scanned by the MessageLabs Email Security System.
For more information please visit http://www.messagelabs.com/email 
______________________________________________________________________



-- 
Gunwant Singh



This message (including any attachments) is confidential and may be privileged. If you have received it by mistake please notify the sender by return e-mail and delete this message from your system. Any unauthorised use or dissemination of this message in whole or in part is strictly prohibited. Please note that e-mails are susceptible to change. ABN AMRO Central Enterprise Services Pvt Ltd, part of RBS Group plc , having its registered office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel (W), Mumbai - 400 013 , including its group companies, shall not be liable for the improper or incomplete transmission of the information contained in this communication nor for any delay in its receipt or damage to your system. ABN AMRO Central Enterprise Services Pvt Ltd (or its group companies) does not guarantee that the integrity of this communication has been maintained nor that this communication is free of viruses, interceptions or interference.

______________________________________________________________________
This email has been scanned by the MessageLabs Email Security System.
For more information please visit http://www.messagelabs.com/email 
______________________________________________________________________
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090122/cbab8d60/attachment-0001.html 

From gunwant.s at gmail.com  Thu Jan 22 12:36:54 2009
From: gunwant.s at gmail.com (Gunwant Singh)
Date: Thu, 22 Jan 2009 23:06:54 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <OF84CE238F.E23D524E-ON65257546.002E4883-65257546.00334AB6@abnamro.com>
References: <44b2bd060901210745x5797476eq8aa4df77e9339664@mail.gmail.com>
	<OF84CE238F.E23D524E-ON65257546.002E4883-65257546.00334AB6@abnamro.com>
Message-ID: <44b2bd060901220936r1b67bd8fu15e9a4557699c914@mail.gmail.com>

Lava,

What do you think about the delay caused while intercepting and modifying
the traffic on the fly. As I pointed out earlier the time-stamp appended at
each end is validated at the other which is also based on the tolerace
calculated at the handshake time. This will compute the delay caused due to
manipulation of the traffic by MITM.

As I also said that based on the criticality factor the quantization can
vary in milliseconds even nanoseconds. Nonetheless the validation is
performed at both ends, so modifying traffic from either end to the other
will be detected and invalidated.

However, for me the question is how to code/implement the handshake process
which can be a bit complex. Infact, much complex.

-Gunwant.



On Thu, Jan 22, 2009 at 2:49 PM, <lavakumar.kuppan at rbs.com> wrote:

>
> Hi Gunwant,
>
> In addition to ARP poisoning this tool also lets you manipulate HTTP
> content on the fly.
> However coming back to the timestamp technique, here is how it will happen:
>
> STEP 1:
> Client  -> GET /index.jsp -> Server
> Server - > 200 OK <html>Secret_Msg="secret"<script src=timestamp.js></html>
> -> Attacker (notes down the secret message) -> Client (lets say timestamp.js
> contains the client-side logic for timestamp creation and hashing)
>
> STEP 2:
> Client -> GET /timestamp.js  -> Server
> Server  -> [timestamp();hash()] -> Attacker - > [timestamp();hash();
> (document.cookie = "password
> ="+document.forms['login'].password.value+"time"=time())] -> Client
> (The attacker who is sniffing with ARP poisoning is now manipulating the js
> file's content on the fly, he adds a couple of more lines of code to the
> actual js file which adds the user's password to the cookie under the name
> 'password' and the current time on the client under the name 'time'.)
>
> STEP 3:
> Client(user enters the password, the hash is created by the js and sent to
> the server, this request also contains the clear-text password and the
> current time in the cookie) -> Attacker (notes down the password and time
> and removes these fields from the cookie and sends to the server) ->
> Server(server happily authenticates the user)
>
>
> At this point the attacker has all the three values needed for the hash
> creation - current time on the client side, secret message and the user's
> password. He also knows how the hash is created.
> Now he can recreate the hash as many time as he wants with new timestamps.
> If the server issues a new secret message then the attacker can get that as
> he is sniffing, same goes for any session ID that is issued.
> It should be trivial to stay within the time-lag tolerance as for any site
> to not piss off its users the tolerance should atleast be in seconds.
> If it was in milliseconds then even the actual sites users cant send valid
> requests.
>
> If the attacker doesnt have a sense of adventure then he can stop once he
> gets the user's password ;)
>
> Hope this makes things clear
> .
> It would have been intresting to discuss this with you in person during
> this month's meet but unfortunately am not in Gurgoan anymore.
> Good luck with your presentation, am sure that everyone..developers esp
> would find it just as useful as the earlier two :)
>
> Thanks and Regards,
> Lavakumar K
> Penetration Tester - Global ISA
>
>
>
>  *Gunwant Singh <gunwant.s at gmail.com>*
>
> 01/21/2009 09:15 PM
>   To
> lavakumar.kuppan at rbs.com  cc
> owasp-delhi at lists.owasp.org  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
> Hi Lava,
>
> Come on! I know ARP poisoning, what I meant was how would you intercept and
> manipulate the traffic in my specific case, especially when you have
> time-stamps involved.
>
> Thanks.
> Gunwant
>
> P.S: Is this mail delivery system error only coming to me or everyone else?
>
> On Wed, Jan 21, 2009 at 11:39 AM, <*lavakumar.kuppan at rbs.com*<lavakumar.kuppan at rbs.com>>
> wrote:
>
> Hi Gunwant,
>
> You can check out ettercap, it has ARP poisoning capability and lets you
> manipulate the intercepted traffic on the fly with filters.
> Play around with it a little :)
>
> Thanks and Regards,
> Lavakumar K
> Penetration Tester - Global ISA
>
>
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/19/2009 11:25 PM
>
>   To
> *lavakumar.kuppan at rbs.com* <lavakumar.kuppan at rbs.com>  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
> Hi Lava,
>
> Nice to see your reply. Please see my thoughts on your comments.
>
> >Now in the solution that you have suggested, the server has to fetch the
> user's password for each request which defeats the whole purpose of
> maintaning session IDs.
>
> Good point. My suggestion on this: Access the password only once and store
> it in a temporary variable securely for further transactions and then delete
> it as the session ends.
>
> >Ironically you had already suggested a solution and then asked the
> question, wonder if you were just checking if everyone understood your talk
> properly ;)
>
> If you would have read this mailing thread from the very scratch, you would
> have known that this question ain't related to salted MD5. I was not
> checking if people understood my talks properly. I could have done that
> there and then only.
>
> >For your salted-hashning technique or the new techique there is to be a
> lot of client side JS code which has to create the salted hash and send it
> to the server. The attacker would just intercept this message and replace
> your JS with another JS which does every thing like the original JS but in
> addition steals the user's clear text password and appends to the request
> which the attacker can now get by viewing your request.
>
> I would like to comment about the salted hashing part in a different e-mail
> (if I get some time) as this topic is not what I am talking about here.
> About the technique, in case if you can manipulate the generated hash
> somehow by intercepting, and make up your own hash, can you still be a part
> of the same session. I don't think so. Let me know if you can. Check out the
> way I told about its workings.
>
> Could you come up with some *PoC* to what you said? You said intercepting
> and manipulating the traffic on the fly travelling from the server to the
> client or the other way around? How would you do that sitting somewhere on
> the network? I am curious to know.
>
> I don't know why you guys keep involving SSL with this thing.
>
> Thanks for your feedback.
>
> -Gunwant
>
> On Mon, Jan 19, 2009 at 1:04 PM, <*lavakumar.kuppan at rbs.com*<lavakumar.kuppan at rbs.com>>
> wrote:
>
> Hi Gunwant,
>
> Thanks for bringing up this topic, can see that it has tickled quite a few
> brains in the list already ;), prompting some really intelligent ideas and
> arguments.
> I was on vacations and missed out on all the fun here, but its never too
> late so here is my humble opinion.
>
> There are two very important factors that have to be considered here:
>
> 1) Why is a session ID required.
> 2) What is the possibilty of some one with sniffing capability to intercept
> and manipulate the traffic.
>
>
> 1) Why is a session ID required
> I believe sessiond IDs are used to avoid connecting to the DB each time and
> validating the user's password, they are used to improve efficiency.
> Now in the solution that you have suggested, the server has to fetch the
> user's password for each request which defeats the whole purpose of
> maintaning session IDs.
> Since we are anyway reffering to the password for each request, I would
> like to think that we can authenticate for each request with the salted-hash
> technique you suggested in your december OWASP talk, provided once a salt is
> used the server discards it and issues a new one.
> Ironically you had already suggested a solution and then asked the
> question, wonder if you were just checking if everyone understood your talk
> properly ;)
>
> 2) What is the possibilty of some one with sniffing capability to intercept
> and manipulate the traffic.
> As someone who has done quite a bit of sniffing on customer networks during
> pentests, I think that someone who is capable of sniffing would in all
> probability also be capable of intercepting and manipulating the traffic
> between the client and server. There might be exceptions but they would be
> uncommon.
> Any techniquie which enforces some trust on the client-side logic now gets
> defeated.
> For your salted-hashning technique or the new techique there is to be a lot
> of client side JS code which has to create the salted hash and send it to
> the server. The attacker would just intercept this message and replace your
> JS with another JS which does every thing like the original JS but in
> addition steals the user's clear text password and appends to the request
> which the attacker can now get by viewing your request.
> Once this happens the entitre security system is defeated as its so closely
> attached to the user's password.
> So in my opinion once someone is able to intercept a clear-text traffic he
> could directly or indirectly bypass most restictions enforced.
>
> The thing that differentiates SSL from the suggested approach is the use of
> Server certificates which establishes authenticity, unless we can figure out
> a way to do that our confidentiality and integrity solutions might fail.
>
> Dont cosider thick client approach like java applets as reverse engineering
> is a possibility.
>
> PS: OK, I have not suggested any solution,  am a pentester what do you
> expect :P
>
> Thanks and Regards,
> Lavakumar K
> Penetration Tester - Global ISA
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
> Sent by: *owasp-delhi-bounces at lists.owasp.org*<owasp-delhi-bounces at lists.owasp.org>
>
> 01/16/2009 11:06 PM
>
>   To
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  cc
>   Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
> Hi,
>
> Ok, let me elucidate the workings of the technique I was talking about.
>
>
>
> But before that I just want to shed some light on a few things so no-one
> comes again questioning to me about these and start some endless argument.
>
> - The e-commerce site I was talking about, I never said that they are only
> using the technique I am going to discuss. They might be using other
> techniques for their protection. What I meant was I've not seen/heard anyone
> else using this technique. That doesn't mean that they are only using this
> technique for their protection. Every giant incorporates multi-tier security
> for their resources.  I am not sure what exactly they are using besides this
> technique as Nobody reveals that.  I questioned someone on a forum, he came
> up with this technique, I studied, checked this on their documentation page,
> discussed with some people, discussed with some more, argued with even more
> and now I am here. I am looking for some feedback from you all. Just let me
> know what ever you think is wrong with this. Anyhow the question is not that
> whether they are using it or not but the question is 'How good is the
> technique?'
>
> - Please don't misinterpret my statement. I am not saying 'Don't use SSL'.
> SSL is definitely a protection mechanism for "Now" if we use it
> appropriately (CA signed certificate with a well-tested, well-reviewed
> implementation). Use SSL till someone finds some exploit *practically* not
> theoretically. This whole discussion is based on a research question so I/we
> can get a *feasible* working solution for this (may-be-a-future) problem. If
> you are not interested in discussing please do not comment. And please do
> not envisage what I am not saying.
>
> So here is how it works.
>
> No SSL. All traffic in clear text.
> Initially we need to communicate an OOB password/code/nonce (whatever you
> call it) to the client - only *once* not each time.
>
>
> 1. The client initiates a connection request to the server. As a result,
> server will initiate a handshake process to synchronize the time-stamps
> between the client and itself. Then the server will analyze tolerance time
> of packets leaving the client workstation till it reaches the server. The
> tolerance time is configured so to manage slow hosts or slow traffic. In
> plain words, server synchronizes date and time (in seconds, milliseconds or
> even nanoseconds based on the criticality of the application) with the
> client.
>
> 2. At the client side: the message, instantaneous time-stamp and the
> password are concatenated and hashed via SHA-1/SHA-256, whatever one wishes.
> This ensuing hash is combined with the username to form an authentication
> header and sent to the server.
>
> 3. At the server side, the server sees the username and perceives which
> user is trying to authenticate. Based on the tolerance configured initially
> at the handshake time, it picks the time-stamp from its own clock and using
> the password and the message it generates the hash in the same way as it was
> done at the client side.
>
> 4. If the hash matches it generates a Session ID and maps it to the
> username of the user. This Session ID will be sent from the client to the
> server along with the computed hash (which is different for each request -
> see next Step)
>
> 5. Now if the client sends another request, it appends and then hashes the
> message, password and the time-stamp (which will be apparently because of
> the different instantaneous time-stamp i.e. date and time). This resulting
> string is sent to the server along with the Session ID assigned to the user
> earlier. The resulting string contains a different hash as the time has
> changed. This will be validated at the server the same way as in Step 3.
>
> Now how can an adversary exploit this scenario? What I think of are two
> ways:
>
> 1. Either he will capture one of the hashes and try to predict the next
> hash by brute forcing different time-stamps.
>
> - But this can not be possible. He doesn't have the password to generate
> the hash.
>
> 2. What if he captures a series of requests and responses and replays them
> back to the server at a later stage.
>
> - This can't be possible either. In order to interact with the server, one
> needs to handshake so to synchronize itself with the server's clock. The
> attacker would not be able to synchronize because he would not be able to
> synchronize the *past-timestamp* (in the captured traffic) with the server's
> current time.
>
> 3. Lastly for the newbies, what if he captures the Session ID.
>
> - But he would not be able to produce the matching Hash for the request, so
> no luck.
>
> A few things to contemplate:
>
> 1. This will be considerably be CPU intensive but can be acknowledged if
> compared to the processing cycles SSL takes.
>
> 2. Time synchronization can be complex. I have no idea how to do that.
>
> 3. Please provide your
> feedback/fury/antagonism/annoyance/appreciation/whatever. Hope I explained
> this in a very straightforward way.
>
> Thanks.
>
> Gunwant
>
>
>
>
>
> On Fri, Jan 16, 2009 at 4:26 AM, Plash Chowdhary <*plash.chowdhary at tcs.com
> * <plash.chowdhary at tcs.com>> wrote:
>
> Gunwant,
>
> I will be interested to know kind of soltutions are being used.
> SInce you are talking about **Time stamp**(in clear text will be
> perdictable, specially if a client side algo is being used) <some random
> number in hidden field with every request,<unique captcha with every request
> (this will be interesting)  can be a case but they will be not as roboust
>  as out of band..
> some how with Time stamps only thing that rings bell is CRYPTOGRAPHY *: D
> *(PKI??)
>
> I will be really surprized if that organization is not using SSL from a
> Vendor. (as you said its an e commerce site)
>
> and anyways i wont be using HTTPS on public content of my site and will
> switch to HTTPS session only when needed (IDEALLY)
>
>
> lemme know your thoughts
>
> Regards
> Plash
>
>
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 12:30 PM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
> cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
> Plash,
>
> Thanks for the idea. Please don't take my talks as overstatements, I just
> wanted to have some innovative ideas from you guys.
>
> Many organizations implement session mechanisms without using SSL. As a
> matter of fact these are not the conditions that I have set. There are many
> scenarios where using SSL is unworkable and in order to provide protection,
> there are solutions.
>
> Also, it becomes more relevant when people are trying to prove the
> weaknesses of SSL. Not to forget, facts say that most organizations who use
> SSL, use self signed certificates rather than a CA sign it.
>
> For sessions on non-SSL, there are many undocumented solutions which can be
> put into practice but such solutions needs to be well-reviewed and
> well-tested before they are implemented. I have come to know about one of
> the methods implemented by one of the top e-commerce portal giants. This
> solution is a bit tough to understand and subsequently implement it. Before
> I discuss it on the mailing list, I need to make sure that I understand it
> well. The only thing I can share at the moment is, it uses time-stamps.
> Hopefully, I would be discussing this proposition in detail in the upcoming
> Delhi Chapter meeting this month.
>
> Sorry if my talks were exaggerated. I still seek more ideas on the same
> question if someone is willing to share.
>
> Many thanks.
>
> On Thu, Jan 15, 2009 at 11:29 PM, Plash Chowdhary <
> *plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
>
> Gunwant,,
>
> Yes impractical "Off band validation" for each request in the conditions
> you have set. Now either you come up with a solution or im implimenting SSL
> *: )*
>
>
> Regards
> Plash  *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 10:27 AM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
> cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
>
>
> I would happily accept what you say if you say how it protects.
>
> Tell me **how** would a sniffer miss your validation code on an
> unencrypted channel. We should talk about mitigating not minimizing.
>
> Oh ! unless you are saying, a different off band validation code is sent
> for **each** request - then it is possible but it is impractical even in
> high risk applications.
>
> On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary <
> *plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
>
> It does Gunwant, Use long one time off band validation....and keep a short
> TTL it will minimize the risk of relpay,....  *"Gunwant Singh" <**
> gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 09:25 AM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
> cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
>
>
>
>
> That doesn't affirm protection against replay attack, dude!
> In the transit, anyone can see your validation code...
> Even if you hash/encrypt it, still it can used to replay the traffic...
> this is vulnerable.. :)
>
> On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary <
> *plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
>
> verify user offline.. send an sms(or similar) with a validation code(long
> randomly genrated  string) to the user everytime he logs in to validate and
> use it everytime a transaction (high risk) is done or role is  changed..
> best way still will be to use it over SSL and use digital signatures
>
>
> Regards
> Plash  *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>
> *>*
> Sent by: *owasp-delhi-bounces at lists.owasp.org*<owasp-delhi-bounces at lists.owasp.org>
>
> 01/14/2009 10:13 AM
>
>   To
> "Karthik Muthukrishnan" <*karthik.muthukrishnan at tcs.com*<karthik.muthukrishnan at tcs.com>
> >  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
> Hi,
>
> Thanks for your reply but that did not answer my question. You are telling
> me what I can use for protecting the credentials. I know what I can use, but
> just out of curiousity I want to know if I don't use SSL/VPN or any other
> network based protection, what else can be done on the application layer in
> order to protect the credentials
> . Please see the answers below.
>
>
> On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <*
> karthik.muthukrishnan at tcs.com* <karthik.muthukrishnan at tcs.com>> wrote:
>
> > salted MD5 hashing protects the authentication credentials rightly from
> eavesdropping on the network.
> Salting is used to protect MD5 hashes from rainbow table attacks.
> Apparently Yes, although ultimately it protects authentication credentials
> only. Facts say the highest risk is eavesdropping if the session is
> unencrypted.
>
> > SSL does the same thing.
> Yes, SSL is used to ensure confidentiality and trust in the network
> communiation. Confidentiality (or prevention of network eavesdropping) is
> ensured by encryption. Trust is accomplished by Server and/or client
> certificates.
> I know what SSL does, but my question is something else.
>
> > However, in some scenarios SSL might not be feasible. For example,
> causing heavy load on the server or may be some applications don't support
> it, etc.
> In such cases SSL Accelerators are used. They are devices which can be fit
> into the architecture without changing the application or affecting the load
> on the application server.
>
> Again my question is something else. I know if SSL doesn't work,
> accelerators help expedite the processing. What I want to know is, if I "Do
> Not" want to use SSL what measures can be taken.
>
>
> > We can protect the authentication credentials using salted MD5 hashing
> or by using SSL.
> To protect authentication credentials in HTTP, we have to rely on SSL.
> Hashes are a secure (aka not in clear text) way to store authentication
> credentials.
> So you are proclaiming that we *have to* rely  on SSL- no other
> alternative.
> Hashes are also used in many applications for many different purposes
> besides authenticity and integrity.
>
>
> > In order to protect the Session credentials (Session ID, tokens,
> cookies, etc) on a non-SSL channel what measures can be taken?
> To protect either auth or session credentials we have to ensure
> confidentiality of the communication channel. If we dont use HTTPS, then VPN
> might be another option. While authentication credentials can be protected
> by some challenge handshake mechanism (similar to CHAP), we would need to
> protect session creds by encrypting the channel.
> I was asking that if we can provide some protection on the application
> level rather than on the network level. Besides SSL/VPN there are many
> options available for protecting the authentication credentials. I want to
> know (just out of curiousity) that how can we secure the session credentials
> on an unencrypted/non-SSL channel. I know this will take too much processing
> cycles, time synchronization, quantization in milliseconds even nanoseconds,
> affirmation of the key exchange, dynamic hashing key generation to mitigate
> replay attacks, and even more.
>
> I just want to know  if anyone has an idea on how it can be done if h/she
> is willing to share that would be really appreciative. Please make sure
> you understand what I am looking for.
> No offence :)
>
>
>
> Karthik
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
> _______________________________________________
> Owasp-delhi mailing list*
> **Owasp-delhi at lists.owasp.org* <Owasp-delhi at lists.owasp.org>
> *https://lists.owasp.org/mailman/listinfo/owasp-delhi*<https://lists.owasp.org/mailman/listinfo/owasp-delhi>
>
> ForwardSourceID:NT00005236
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT000052F2
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT0000530E
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT0000533A
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
>
>
>
> --
> Gunwant Singh
> _______________________________________________
> Owasp-delhi mailing list*
> **Owasp-delhi at lists.owasp.org* <Owasp-delhi at lists.owasp.org>*
> **https://lists.owasp.org/mailman/listinfo/owasp-delhi*<https://lists.owasp.org/mailman/listinfo/owasp-delhi>
>
>
> This message (including any attachments) is confidential and may be
> privileged. If you have received it by mistake please notify the sender by
> return e-mail and delete this message from your system. Any unauthorised use
> or dissemination of this message in whole or in part is strictly prohibited.
> Please note that e-mails are susceptible to change. ABN AMRO Central
> Enterprise Services Pvt Ltd, part of RBS Group plc , having its registered
> office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel (W), Mumbai -
> 400 013 , including its group companies, shall not be liable for the
> improper or incomplete transmission of the information contained in this
> communication nor for any delay in its receipt or damage to your system. ABN
> AMRO Central Enterprise Services Pvt Ltd (or its group companies) does not
> guarantee that the integrity of this communication has been maintained nor
> that this communication is free of viruses, interceptions or interference.
>
> ______________________________________________________________________
> This email has been scanned by the MessageLabs Email Security System.
> For more information please visit *http://www.messagelabs.com/email*<http://www.messagelabs.com/email>
> ______________________________________________________________________
>
>
>
> --
> Gunwant Singh
>
>
> This message (including any attachments) is confidential and may be
> privileged. If you have received it by mistake please notify the sender by
> return e-mail and delete this message from your system. Any unauthorised use
> or dissemination of this message in whole or in part is strictly prohibited.
> Please note that e-mails are susceptible to change. ABN AMRO Central
> Enterprise Services Pvt Ltd, part of RBS Group plc , having its registered
> office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel (W), Mumbai -
> 400 013 , including its group companies, shall not be liable for the
> improper or incomplete transmission of the information contained in this
> communication nor for any delay in its receipt or damage to your system. ABN
> AMRO Central Enterprise Services Pvt Ltd (or its group companies) does not
> guarantee that the integrity of this communication has been maintained nor
> that this communication is free of viruses, interceptions or interference.
>
> ______________________________________________________________________
> This email has been scanned by the MessageLabs Email Security System.
> For more information please visit *http://www.messagelabs.com/email*<http://www.messagelabs.com/email>
> ______________________________________________________________________
>
>
>
>
> --
> Gunwant Singh
>
>
> ______________________________________________________________________
> This email has been scanned by the MessageLabs Email Security System.
> For more information please visit http://www.messagelabs.com/email
> ______________________________________________________________________
>



-- 
Gunwant Singh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090122/b60bef66/attachment-0001.html 

From lavakumar.kuppan at rbs.com  Fri Jan 23 06:47:36 2009
From: lavakumar.kuppan at rbs.com (lavakumar.kuppan at rbs.com)
Date: Fri, 23 Jan 2009 17:17:36 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <44b2bd060901220936r1b67bd8fu15e9a4557699c914@mail.gmail.com>
Message-ID: <OF68B4565F.17993F5F-ON65257547.0040A591-65257547.0040D505@abnamro.com>

Gunwant you are missing the point, once I have the user's password I dont 
even have to bother with a MITM.

Thanks and Regards,
Lavakumar K
Penetration Tester - Global ISA
+919833320286(M)||+91-044-43976738 | 047-6738|lavakumar.kuppan at rbs.com



Gunwant Singh <gunwant.s at gmail.com> 
01/22/2009 11:06 PM

To
lavakumar.kuppan at rbs.com
cc
owasp-delhi at lists.owasp.org
Subject
Re: [Owasp-delhi] SSL Broken..






Lava,

What do you think about the delay caused while intercepting and modifying 
the traffic on the fly. As I pointed out earlier the time-stamp appended 
at each end is validated at the other which is also based on the tolerace 
calculated at the handshake time. This will compute the delay caused due 
to manipulation of the traffic by MITM. 

As I also said that based on the criticality factor the quantization can 
vary in milliseconds even nanoseconds. Nonetheless the validation is 
performed at both ends, so modifying traffic from either end to the other 
will be detected and invalidated.

However, for me the question is how to code/implement the handshake 
process which can be a bit complex. Infact, much complex.

-Gunwant.



On Thu, Jan 22, 2009 at 2:49 PM, <lavakumar.kuppan at rbs.com> wrote:

Hi Gunwant, 

In addition to ARP poisoning this tool also lets you manipulate HTTP 
content on the fly. 
However coming back to the timestamp technique, here is how it will 
happen: 

STEP 1: 
Client  -> GET /index.jsp -> Server 
Server - > 200 OK <html>Secret_Msg="secret"<script 
src=timestamp.js></html> -> Attacker (notes down the secret message) -> 
Client (lets say timestamp.js contains the client-side logic for timestamp 
creation and hashing) 

STEP 2: 
Client -> GET /timestamp.js  -> Server 
Server  -> [timestamp();hash()] -> Attacker - > [timestamp();hash(); 
(document.cookie = "password 
="+document.forms['login'].password.value+"time"=time())] -> Client 
(The attacker who is sniffing with ARP poisoning is now manipulating the 
js file's content on the fly, he adds a couple of more lines of code to 
the actual js file which adds the user's password to the cookie under the 
name 'password' and the current time on the client under the name 'time'.) 


STEP 3: 
Client(user enters the password, the hash is created by the js and sent to 
the server, this request also contains the clear-text password and the 
current time in the cookie) -> Attacker (notes down the password and time 
and removes these fields from the cookie and sends to the server) -> 
Server(server happily authenticates the user) 


At this point the attacker has all the three values needed for the hash 
creation - current time on the client side, secret message and the user's 
password. He also knows how the hash is created. 
Now he can recreate the hash as many time as he wants with new timestamps. 

If the server issues a new secret message then the attacker can get that 
as he is sniffing, same goes for any session ID that is issued. 
It should be trivial to stay within the time-lag tolerance as for any site 
to not piss off its users the tolerance should atleast be in seconds. 
If it was in milliseconds then even the actual sites users cant send valid 
requests. 

If the attacker doesnt have a sense of adventure then he can stop once he 
gets the user's password ;) 

Hope this makes things clear 
. 
It would have been intresting to discuss this with you in person during 
this month's meet but unfortunately am not in Gurgoan anymore. 
Good luck with your presentation, am sure that everyone..developers esp 
would find it just as useful as the earlier two :) 

Thanks and Regards,
Lavakumar K
Penetration Tester - Global ISA



Gunwant Singh <gunwant.s at gmail.com> 
01/21/2009 09:15 PM


To
lavakumar.kuppan at rbs.com 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..








Hi Lava,

Come on! I know ARP poisoning, what I meant was how would you intercept 
and manipulate the traffic in my specific case, especially when you have 
time-stamps involved.

Thanks.
Gunwant

P.S: Is this mail delivery system error only coming to me or everyone 
else?

On Wed, Jan 21, 2009 at 11:39 AM, <lavakumar.kuppan at rbs.com> wrote: 

Hi Gunwant, 

You can check out ettercap, it has ARP poisoning capability and lets you 
manipulate the intercepted traffic on the fly with filters. 
Play around with it a little :) 

Thanks and Regards,
Lavakumar K
Penetration Tester - Global ISA


"Gunwant Singh" <gunwant.s at gmail.com> 
01/19/2009 11:25 PM 


To
lavakumar.kuppan at rbs.com 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..










Hi Lava,

Nice to see your reply. Please see my thoughts on your comments.

>Now in the solution that you have suggested, the server has to fetch the 
user's password for each request which defeats the whole purpose of 
maintaning session IDs.

Good point. My suggestion on this: Access the password only once and store 
it in a temporary variable securely for further transactions and then 
delete it as the session ends.

>Ironically you had already suggested a solution and then asked the 
question, wonder if you were just checking if everyone understood your 
talk properly ;) 

If you would have read this mailing thread from the very scratch, you 
would have known that this question ain't related to salted MD5. I was not 
checking if people understood my talks properly. I could have done that 
there and then only.

>For your salted-hashning technique or the new techique there is to be a 
lot of client side JS code which has to create the salted hash and send it 
to the server. The attacker would just intercept this message and replace 
your JS with another JS which does every thing like the original JS but in 
addition steals the user's clear text password and appends to the request 
which the attacker can now get by viewing your request.

I would like to comment about the salted hashing part in a different 
e-mail (if I get some time) as this topic is not what I am talking about 
here. About the technique, in case if you can manipulate the generated 
hash somehow by intercepting, and make up your own hash, can you still be 
a part of the same session. I don't think so. Let me know if you can. 
Check out the way I told about its workings.

Could you come up with some *PoC* to what you said? You said intercepting 
and manipulating the traffic on the fly travelling from the server to the 
client or the other way around? How would you do that sitting somewhere on 
the network? I am curious to know.

I don't know why you guys keep involving SSL with this thing.

Thanks for your feedback.

-Gunwant 

On Mon, Jan 19, 2009 at 1:04 PM, <lavakumar.kuppan at rbs.com> wrote: 

Hi Gunwant, 

Thanks for bringing up this topic, can see that it has tickled quite a few 
brains in the list already ;), prompting some really intelligent ideas and 
arguments. 
I was on vacations and missed out on all the fun here, but its never too 
late so here is my humble opinion. 

There are two very important factors that have to be considered here: 

1) Why is a session ID required. 
2) What is the possibilty of some one with sniffing capability to 
intercept and manipulate the traffic. 


1) Why is a session ID required 
I believe sessiond IDs are used to avoid connecting to the DB each time 
and validating the user's password, they are used to improve efficiency. 
Now in the solution that you have suggested, the server has to fetch the 
user's password for each request which defeats the whole purpose of 
maintaning session IDs. 
Since we are anyway reffering to the password for each request, I would 
like to think that we can authenticate for each request with the 
salted-hash technique you suggested in your december OWASP talk, provided 
once a salt is used the server discards it and issues a new one. 
Ironically you had already suggested a solution and then asked the 
question, wonder if you were just checking if everyone understood your 
talk properly ;) 

2) What is the possibilty of some one with sniffing capability to 
intercept and manipulate the traffic. 
As someone who has done quite a bit of sniffing on customer networks 
during pentests, I think that someone who is capable of sniffing would in 
all probability also be capable of intercepting and manipulating the 
traffic between the client and server. There might be exceptions but they 
would be uncommon. 
Any techniquie which enforces some trust on the client-side logic now gets 
defeated. 
For your salted-hashning technique or the new techique there is to be a 
lot of client side JS code which has to create the salted hash and send it 
to the server. The attacker would just intercept this message and replace 
your JS with another JS which does every thing like the original JS but in 
addition steals the user's clear text password and appends to the request 
which the attacker can now get by viewing your request. 
Once this happens the entitre security system is defeated as its so 
closely attached to the user's password. 
So in my opinion once someone is able to intercept a clear-text traffic he 
could directly or indirectly bypass most restictions enforced. 

The thing that differentiates SSL from the suggested approach is the use 
of Server certificates which establishes authenticity, unless we can 
figure out a way to do that our confidentiality and integrity solutions 
might fail. 

Dont cosider thick client approach like java applets as reverse 
engineering is a possibility. 

PS: OK, I have not suggested any solution,  am a pentester what do you 
expect :P 

Thanks and Regards,
Lavakumar K
Penetration Tester - Global ISA 
"Gunwant Singh" <gunwant.s at gmail.com> 
Sent by: owasp-delhi-bounces at lists.owasp.org 
01/16/2009 11:06 PM 


To
owasp-delhi at lists.owasp.org 
cc

Subject
Re: [Owasp-delhi] SSL Broken..












Hi, 
Ok, let me elucidate the workings of the technique I was talking about. 


But before that I just want to shed some light on a few things so no-one 
comes again questioning to me about these and start some endless argument.

- The e-commerce site I was talking about, I never said that they are only 
using the technique I am going to discuss. They might be using other 
techniques for their protection. What I meant was I've not seen/heard 
anyone else using this technique. That doesn't mean that they are only 
using this technique for their protection. Every giant incorporates 
multi-tier security for their resources.  I am not sure what exactly they 
are using besides this technique as Nobody reveals that.  I questioned 
someone on a forum, he came up with this technique, I studied, checked 
this on their documentation page, discussed with some people, discussed 
with some more, argued with even more and now I am here. I am looking for 
some feedback from you all. Just let me know what ever you think is wrong 
with this. Anyhow the question is not that whether they are using it or 
not but the question is 'How good is the technique?'

- Please don't misinterpret my statement. I am not saying 'Don't use SSL'. 
SSL is definitely a protection mechanism for "Now" if we use it 
appropriately (CA signed certificate with a well-tested, well-reviewed 
implementation). Use SSL till someone finds some exploit *practically* not 
theoretically. This whole discussion is based on a research question so 
I/we can get a *feasible* working solution for this (may-be-a-future) 
problem. If you are not interested in discussing please do not comment. 
And please do not envisage what I am not saying.

So here is how it works.

No SSL. All traffic in clear text.
Initially we need to communicate an OOB password/code/nonce (whatever you 
call it) to the client - only *once* not each time. 

1. The client initiates a connection request to the server. As a result, 
server will initiate a handshake process to synchronize the time-stamps 
between the client and itself. Then the server will analyze tolerance time 
of packets leaving the client workstation till it reaches the server. The 
tolerance time is configured so to manage slow hosts or slow traffic. In 
plain words, server synchronizes date and time (in seconds, milliseconds 
or even nanoseconds based on the criticality of the application) with the 
client. 
2. At the client side: the message, instantaneous time-stamp and the 
password are concatenated and hashed via SHA-1/SHA-256, whatever one 
wishes. This ensuing hash is combined with the username to form an 
authentication header and sent to the server. 
3. At the server side, the server sees the username and perceives which 
user is trying to authenticate. Based on the tolerance configured 
initially at the handshake time, it picks the time-stamp from its own 
clock and using the password and the message it generates the hash in the 
same way as it was done at the client side. 
4. If the hash matches it generates a Session ID and maps it to the 
username of the user. This Session ID will be sent from the client to the 
server along with the computed hash (which is different for each request - 
see next Step) 
5. Now if the client sends another request, it appends and then hashes the 
message, password and the time-stamp (which will be apparently because of 
the different instantaneous time-stamp i.e. date and time). This resulting 
string is sent to the server along with the Session ID assigned to the 
user earlier. The resulting string contains a different hash as the time 
has changed. This will be validated at the server the same way as in Step 
3. 
Now how can an adversary exploit this scenario? What I think of are two 
ways: 
1. Either he will capture one of the hashes and try to predict the next 
hash by brute forcing different time-stamps. 
- But this can not be possible. He doesn't have the password to generate 
the hash. 
2. What if he captures a series of requests and responses and replays them 
back to the server at a later stage. 
- This can't be possible either. In order to interact with the server, one 
needs to handshake so to synchronize itself with the server's clock. The 
attacker would not be able to synchronize because he would not be able to 
synchronize the *past-timestamp* (in the captured traffic) with the 
server's current time. 
3. Lastly for the newbies, what if he captures the Session ID. 
- But he would not be able to produce the matching Hash for the request, 
so no luck. 
A few things to contemplate: 
1. This will be considerably be CPU intensive but can be acknowledged if 
compared to the processing cycles SSL takes. 
2. Time synchronization can be complex. I have no idea how to do that. 
3. Please provide your 
feedback/fury/antagonism/annoyance/appreciation/whatever. Hope I explained 
this in a very straightforward way. 
Thanks. 
Gunwant 
 


On Fri, Jan 16, 2009 at 4:26 AM, Plash Chowdhary <plash.chowdhary at tcs.com> 
wrote: 

Gunwant, 

I will be interested to know kind of soltutions are being used. 
SInce you are talking about **Time stamp**(in clear text will be 
perdictable, specially if a client side algo is being used) <some random 
number in hidden field with every request,<unique captcha with every 
request (this will be interesting)  can be a case but they will be not as 
roboust  as out of band.. 
some how with Time stamps only thing that rings bell is CRYPTOGRAPHY : D 
(PKI??) 

I will be really surprized if that organization is not using SSL from a 
Vendor. (as you said its an e commerce site) 

and anyways i wont be using HTTPS on public content of my site and will 
switch to HTTPS session only when needed (IDEALLY) 


lemme know your thoughts 

Regards 
Plash 



"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 12:30 PM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..














Plash, 

Thanks for the idea. Please don't take my talks as overstatements, I just 
wanted to have some innovative ideas from you guys.

Many organizations implement session mechanisms without using SSL. As a 
matter of fact these are not the conditions that I have set. There are 
many scenarios where using SSL is unworkable and in order to provide 
protection, there are solutions. 

Also, it becomes more relevant when people are trying to prove the 
weaknesses of SSL. Not to forget, facts say that most organizations who 
use SSL, use self signed certificates rather than a CA sign it. 

For sessions on non-SSL, there are many undocumented solutions which can 
be put into practice but such solutions needs to be well-reviewed and 
well-tested before they are implemented. I have come to know about one of 
the methods implemented by one of the top e-commerce portal giants. This 
solution is a bit tough to understand and subsequently implement it. 
Before I discuss it on the mailing list, I need to make sure that I 
understand it well. The only thing I can share at the moment is, it uses 
time-stamps. Hopefully, I would be discussing this proposition in detail 
in the upcoming Delhi Chapter meeting this month.

Sorry if my talks were exaggerated. I still seek more ideas on the same 
question if someone is willing to share. 

Many thanks. 

On Thu, Jan 15, 2009 at 11:29 PM, Plash Chowdhary < 
plash.chowdhary at tcs.com> wrote: 

Gunwant,, 

Yes impractical "Off band validation" for each request in the conditions 
you have set. Now either you come up with a solution or im implimenting 
SSL : ) 


Regards 
Plash 
"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 10:27 AM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..
















I would happily accept what you say if you say how it protects.

Tell me *how* would a sniffer miss your validation code on an unencrypted 
channel. We should talk about mitigating not minimizing.

Oh ! unless you are saying, a different off band validation code is sent 
for *each* request - then it is possible but it is impractical even in 
high risk applications.

On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary < 
plash.chowdhary at tcs.com> wrote: 

It does Gunwant, Use long one time off band validation....and keep a short 
TTL it will minimize the risk of relpay,.... 
"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 09:25 AM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..


















That doesn't affirm protection against replay attack, dude!
In the transit, anyone can see your validation code...
Even if you hash/encrypt it, still it can used to replay the traffic...
this is vulnerable.. :)

On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary < 
plash.chowdhary at tcs.com> wrote: 

verify user offline.. send an sms(or similar) with a validation code(long 
randomly genrated  string) to the user everytime he logs in to validate 
and use it everytime a transaction (high risk) is done or role is 
changed.. best way still will be to use it over SSL and use digital 
signatures 


Regards 
Plash 
"Gunwant Singh" <gunwant.s at gmail.com 
> 
Sent by: owasp-delhi-bounces at lists.owasp.org 
01/14/2009 10:13 AM 


To
"Karthik Muthukrishnan" <karthik.muthukrishnan at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..




















Hi,

Thanks for your reply but that did not answer my question. You are telling 
me what I can use for protecting the credentials. I know what I can use, 
but just out of curiousity I want to know if I don't use SSL/VPN or any 
other network based protection, what else can be done on the application 
layer in order to protect the credentials 
. Please see the answers below. 


On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <
karthik.muthukrishnan at tcs.com> wrote: 

> salted MD5 hashing protects the authentication credentials rightly from 
eavesdropping on the network. 
Salting is used to protect MD5 hashes from rainbow table attacks. 
Apparently Yes, although ultimately it protects authentication credentials 
only. Facts say the highest risk is eavesdropping if the session is 
unencrypted. 

> SSL does the same thing. 
Yes, SSL is used to ensure confidentiality and trust in the network 
communiation. Confidentiality (or prevention of network eavesdropping) is 
ensured by encryption. Trust is accomplished by Server and/or client 
certificates. 
I know what SSL does, but my question is something else. 

> However, in some scenarios SSL might not be feasible. For example, 
causing heavy load on the server or may be some applications don't support 
it, etc. 
In such cases SSL Accelerators are used. They are devices which can be fit 
into the architecture without changing the application or affecting the 
load on the application server. 
Again my question is something else. I know if SSL doesn't work, 
accelerators help expedite the processing. What I want to know is, if I 
"Do Not" want to use SSL what measures can be taken. 


> We can protect the authentication credentials using salted MD5 hashing 
or by using SSL. 
To protect authentication credentials in HTTP, we have to rely on SSL. 
Hashes are a secure (aka not in clear text) way to store authentication 
credentials. 
So you are proclaiming that we *have to* rely  on SSL- no other 
alternative. 
Hashes are also used in many applications for many different purposes 
besides authenticity and integrity. 


> In order to protect the Session credentials (Session ID, tokens, 
cookies, etc) on a non-SSL channel what measures can be taken? 
To protect either auth or session credentials we have to ensure 
confidentiality of the communication channel. If we dont use HTTPS, then 
VPN might be another option. While authentication credentials can be 
protected by some challenge handshake mechanism (similar to CHAP), we 
would need to protect session creds by encrypting the channel. 
I was asking that if we can provide some protection on the application 
level rather than on the network level. Besides SSL/VPN there are many 
options available for protecting the authentication credentials. I want to 
know (just out of curiousity) that how can we secure the session 
credentials on an unencrypted/non-SSL channel. I know this will take too 
much processing cycles, time synchronization, quantization in milliseconds 
even nanoseconds, affirmation of the key exchange, dynamic hashing key 
generation to mitigate replay attacks, and even more. 

I just want to know  if anyone has an idea on how it can be done if h/she 
is willing to share that would be really appreciative. Please make sure 
you understand what I am looking for.
No offence :)



Karthik 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh 
_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org 
https://lists.owasp.org/mailman/listinfo/owasp-delhi

ForwardSourceID:NT00005236     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT000052F2     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT0000530E     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT0000533A     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh




-- 
Gunwant Singh 
_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-delhi


This message (including any attachments) is confidential and may be 
privileged. If you have received it by mistake please notify the sender by 
return e-mail and delete this message from your system. Any unauthorised 
use or dissemination of this message in whole or in part is strictly 
prohibited. Please note that e-mails are susceptible to change. ABN AMRO 
Central Enterprise Services Pvt Ltd, part of RBS Group plc , having its 
registered office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel 
(W), Mumbai - 400 013 , including its group companies, shall not be liable 
for the improper or incomplete transmission of the information contained 
in this communication nor for any delay in its receipt or damage to your 
system. ABN AMRO Central Enterprise Services Pvt Ltd (or its group 
companies) does not guarantee that the integrity of this communication has 
been maintained nor that this communication is free of viruses, 
interceptions or interference.

______________________________________________________________________
This email has been scanned by the MessageLabs Email Security System.
For more information please visit http://www.messagelabs.com/email 
______________________________________________________________________ 



-- 
Gunwant Singh


This message (including any attachments) is confidential and may be 
privileged. If you have received it by mistake please notify the sender by 
return e-mail and delete this message from your system. Any unauthorised 
use or dissemination of this message in whole or in part is strictly 
prohibited. Please note that e-mails are susceptible to change. ABN AMRO 
Central Enterprise Services Pvt Ltd, part of RBS Group plc , having its 
registered office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel 
(W), Mumbai - 400 013 , including its group companies, shall not be liable 
for the improper or incomplete transmission of the information contained 
in this communication nor for any delay in its receipt or damage to your 
system. ABN AMRO Central Enterprise Services Pvt Ltd (or its group 
companies) does not guarantee that the integrity of this communication has 
been maintained nor that this communication is free of viruses, 
interceptions or interference.

______________________________________________________________________
This email has been scanned by the MessageLabs Email Security System.
For more information please visit http://www.messagelabs.com/email 
______________________________________________________________________ 



-- 
Gunwant Singh

______________________________________________________________________
This email has been scanned by the MessageLabs Email Security System.
For more information please visit http://www.messagelabs.com/email 
______________________________________________________________________



-- 
Gunwant Singh



This message (including any attachments) is confidential and may be privileged. If you have received it by mistake please notify the sender by return e-mail and delete this message from your system. Any unauthorised use or dissemination of this message in whole or in part is strictly prohibited. Please note that e-mails are susceptible to change. ABN AMRO Central Enterprise Services Pvt Ltd, part of RBS Group plc , having its registered office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel (W), Mumbai - 400 013 , including its group companies, shall not be liable for the improper or incomplete transmission of the information contained in this communication nor for any delay in its receipt or damage to your system. ABN AMRO Central Enterprise Services Pvt Ltd (or its group companies) does not guarantee that the integrity of this communication has been maintained nor that this communication is free of viruses, interceptions or interference.

______________________________________________________________________
This email has been scanned by the MessageLabs Email Security System.
For more information please visit http://www.messagelabs.com/email 
______________________________________________________________________
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090123/61e002c4/attachment-0001.html 

From lavakumar.kuppan at rbs.com  Fri Jan 23 06:54:11 2009
From: lavakumar.kuppan at rbs.com (lavakumar.kuppan at rbs.com)
Date: Fri, 23 Jan 2009 17:24:11 +0530
Subject: [Owasp-delhi] Anyone want to be a part of a 0-day?
Message-ID: <OFD49362B0.BCAAB8EE-ON65257547.0040CA7C-65257547.00416F28@abnamro.com>

Hi Everyone,

There is a possible 0-day that I would like to test on Web Application 
Firewalls.

I currently dont have access to one so its still a theory.

If someone has an ASP.NET application running behind any Web Application 
Firewall in your environment or else where then kindly let me know.

I can promise you it would be really intresting and completely safe ;)

Send me a private message if you would like to keep it under wraps.


Thanks and Regards,
Lavakumar K


This message (including any attachments) is confidential and may be privileged. If you have received it by mistake please notify the sender by return e-mail and delete this message from your system. Any unauthorised use or dissemination of this message in whole or in part is strictly prohibited. Please note that e-mails are susceptible to change. ABN AMRO Central Enterprise Services Pvt Ltd, part of RBS Group plc , having its registered office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel (W), Mumbai - 400 013 , including its group companies, shall not be liable for the improper or incomplete transmission of the information contained in this communication nor for any delay in its receipt or damage to your system. ABN AMRO Central Enterprise Services Pvt Ltd (or its group companies) does not guarantee that the integrity of this communication has been maintained nor that this communication is free of viruses, interceptions or interference.

______________________________________________________________________
This email has been scanned by the MessageLabs Email Security System.
For more information please visit http://www.messagelabs.com/email 
______________________________________________________________________
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090123/a616089f/attachment.html 

From dhruv.soi at owasp.org  Fri Jan 23 08:20:24 2009
From: dhruv.soi at owasp.org (Soi, Dhruv)
Date: Fri, 23 Jan 2009 18:50:24 +0530
Subject: [Owasp-delhi] Anyone want to be a part of a 0-day?
In-Reply-To: <OFD49362B0.BCAAB8EE-ON65257547.0040CA7C-65257547.00416F28@abnamro.com>
Message-ID: <4979c421.1e078e0a.7c8c.ffff8039@mx.google.com>

Great Idea, I think we can approach different WAF companies to provide us
with this opportunity of testing their product and then releasing a detailed
comparison chart for the industry. We may call it some OWASP project for
which we can take approval from the global board. But it is again a theory
to support yours ;-) I know a couple of WAF companies who I think would be
interested to participate. But it would break your 0-day mission :-)

 

Many Thanks,

Dhruv

 

  _____  

From: owasp-delhi-bounces at lists.owasp.org
[mailto:owasp-delhi-bounces at lists.owasp.org] On Behalf Of
lavakumar.kuppan at rbs.com
Sent: Friday, January 23, 2009 5:24 PM
To: owasp-delhi at lists.owasp.org
Subject: [Owasp-delhi] Anyone want to be a part of a 0-day?

 


Hi Everyone, 

There is a possible 0-day that I would like to test on Web Application
Firewalls. 

I currently dont have access to one so its still a theory. 

If someone has an ASP.NET application running behind any Web Application
Firewall in your environment or else where then kindly let me know. 

I can promise you it would be really intresting and completely safe ;) 

Send me a private message if you would like to keep it under wraps. 


Thanks and Regards,
Lavakumar K

This message (including any attachments) is confidential and may be
privileged. If you have received it by mistake please notify the sender by
return e-mail and delete this message from your system. Any unauthorised use
or dissemination of this message in whole or in part is strictly prohibited.
Please note that e-mails are susceptible to change. ABN AMRO Central
Enterprise Services Pvt Ltd, part of RBS Group plc , having its registered
office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel (W), Mumbai -
400 013 , including its group companies, shall not be liable for the
improper or incomplete transmission of the information contained in this
communication nor for any delay in its receipt or damage to your system. ABN
AMRO Central Enterprise Services Pvt Ltd (or its group companies) does not
guarantee that the integrity of this communication has been maintained nor
that this communication is free of viruses, interceptions or interference.

______________________________________________________________________
This email has been scanned by the MessageLabs Email Security System.
For more information please visit http://www.messagelabs.com/email 
______________________________________________________________________

-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090123/946a3cb7/attachment.html 

From dhruv.soi at owasp.org  Fri Jan 23 09:29:20 2009
From: dhruv.soi at owasp.org (Soi, Dhruv)
Date: Fri, 23 Jan 2009 19:59:20 +0530
Subject: [Owasp-delhi] Registrations Open: OWASP Delhi Meeting January 2009
Message-ID: <4979d448.20038e0a.7d57.ffff9f36@mx.google.com>

Hello All,

 

As planned, our next chapter meeting is scheduled for 31st January 2009
[Saturday] from 1500hrs till 1815hrs at Birlasoft, D-195, Sector-63, Noida -
201301. We are highly thankful to Birlasoft for sponsoring this meeting.
Here are meeting topics for your quick reference:

 

1.	Scrutinizing Session Based Attacks - Gunwant Singh
2.	Scrutinizing International Security Standards To Mitigate the
Vulnerabilities arising through SQL Injection Attacks - Supriya Madan
3.	Securing WCF services - Birlasoft
4.	Technology Compliance Index (TCI) for Application Security Framework
- Birlasoft

 

Meeting agenda has been posted at
https://www.owasp.org/index.php/OWASP_Delhi_January_Meeting_2009 to grab
further details. Registrations are open for this event and you may register
for the meeting from the same page by clicking on the registration link in
"Meeting Registration" section towards the bottom of the page. 

 

I hope everyone will have a wonderful session. See you at the meeting!

 

Many Thanks,

Dhruv

-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090123/72e2fa83/attachment-0001.html 

From gunwant.s at gmail.com  Fri Jan 23 10:52:55 2009
From: gunwant.s at gmail.com (Gunwant Singh)
Date: Fri, 23 Jan 2009 21:22:55 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <OF68B4565F.17993F5F-ON65257547.0040A591-65257547.0040D505@abnamro.com>
References: <44b2bd060901220936r1b67bd8fu15e9a4557699c914@mail.gmail.com>
	<OF68B4565F.17993F5F-ON65257547.0040A591-65257547.0040D505@abnamro.com>
Message-ID: <44b2bd060901230752q1ea2a4ecj2a9bb4806978083f@mail.gmail.com>

Lava,

Initially the user's password is sent OOB, then in the transit it is hashed
via. one-way hashing algorithm. You can't get the password, you only get the
hash which is indeed useless to an attacker. I think you have not understood
what I was trying to say earlier.

Regards.

On Fri, Jan 23, 2009 at 5:17 PM, <lavakumar.kuppan at rbs.com> wrote:

>
> Gunwant you are missing the point, once I have the user's password I dont
> even have to bother with a MITM.
>
> Thanks and Regards,
> Lavakumar K
> Penetration Tester - Global ISA
> +919833320286(M)||+91-044-43976738 | 047-6738|lavakumar.kuppan at rbs.com
>
>
>  *Gunwant Singh <gunwant.s at gmail.com>*
>
> 01/22/2009 11:06 PM
>   To
> lavakumar.kuppan at rbs.com  cc
> owasp-delhi at lists.owasp.org  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
> Lava,
>
> What do you think about the delay caused while intercepting and modifying
> the traffic on the fly. As I pointed out earlier the time-stamp appended at
> each end is validated at the other which is also based on the tolerace
> calculated at the handshake time. This will compute the delay caused due to
> manipulation of the traffic by MITM.
>
> As I also said that based on the criticality factor the quantization can
> vary in milliseconds even nanoseconds. Nonetheless the validation is
> performed at both ends, so modifying traffic from either end to the other
> will be detected and invalidated.
>
> However, for me the question is how to code/implement the handshake process
> which can be a bit complex. Infact, much complex.
>
> -Gunwant.
>
>
>
> On Thu, Jan 22, 2009 at 2:49 PM, <*lavakumar.kuppan at rbs.com*<lavakumar.kuppan at rbs.com>>
> wrote:
>
> Hi Gunwant,
>
> In addition to ARP poisoning this tool also lets you manipulate HTTP
> content on the fly.
> However coming back to the timestamp technique, here is how it will happen:
>
> STEP 1:
> Client  -> GET /index.jsp -> Server
> Server - > 200 OK <html>Secret_Msg="secret"<script src=timestamp.js></html>
> -> Attacker (notes down the secret message) -> Client (lets say timestamp.js
> contains the client-side logic for timestamp creation and hashing)
>
> STEP 2:
> Client -> GET /timestamp.js  -> Server
> Server  -> [timestamp();hash()] -> Attacker - > [timestamp();hash();
> (document.cookie = "password
> ="+document.forms['login'].password.value+"time"=time())] -> Client
> (The attacker who is sniffing with ARP poisoning is now manipulating the js
> file's content on the fly, he adds a couple of more lines of code to the
> actual js file which adds the user's password to the cookie under the name
> 'password' and the current time on the client under the name 'time'.)
>
> STEP 3:
> Client(user enters the password, the hash is created by the js and sent to
> the server, this request also contains the clear-text password and the
> current time in the cookie) -> Attacker (notes down the password and time
> and removes these fields from the cookie and sends to the server) ->
> Server(server happily authenticates the user)
>
>
> At this point the attacker has all the three values needed for the hash
> creation - current time on the client side, secret message and the user's
> password. He also knows how the hash is created.
> Now he can recreate the hash as many time as he wants with new timestamps.
> If the server issues a new secret message then the attacker can get that as
> he is sniffing, same goes for any session ID that is issued.
> It should be trivial to stay within the time-lag tolerance as for any site
> to not piss off its users the tolerance should atleast be in seconds.
> If it was in milliseconds then even the actual sites users cant send valid
> requests.
>
> If the attacker doesnt have a sense of adventure then he can stop once he
> gets the user's password ;)
>
> Hope this makes things clear
> .
> It would have been intresting to discuss this with you in person during
> this month's meet but unfortunately am not in Gurgoan anymore.
> Good luck with your presentation, am sure that everyone..developers esp
> would find it just as useful as the earlier two :)
>
> Thanks and Regards,
> Lavakumar K
> Penetration Tester - Global ISA
>
>
>   *Gunwant Singh <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/21/2009 09:15 PM
>
>   To
> *lavakumar.kuppan at rbs.com* <lavakumar.kuppan at rbs.com>  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
> Hi Lava,
>
> Come on! I know ARP poisoning, what I meant was how would you intercept and
> manipulate the traffic in my specific case, especially when you have
> time-stamps involved.
>
> Thanks.
> Gunwant
>
> P.S: Is this mail delivery system error only coming to me or everyone else?
>
> On Wed, Jan 21, 2009 at 11:39 AM, <*lavakumar.kuppan at rbs.com*<lavakumar.kuppan at rbs.com>>
> wrote:
>
> Hi Gunwant,
>
> You can check out ettercap, it has ARP poisoning capability and lets you
> manipulate the intercepted traffic on the fly with filters.
> Play around with it a little :)
>
> Thanks and Regards,
> Lavakumar K
> Penetration Tester - Global ISA
>
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/19/2009 11:25 PM
>
>   To
> *lavakumar.kuppan at rbs.com* <lavakumar.kuppan at rbs.com>  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
> Hi Lava,
>
> Nice to see your reply. Please see my thoughts on your comments.
>
> >Now in the solution that you have suggested, the server has to fetch the
> user's password for each request which defeats the whole purpose of
> maintaning session IDs.
>
> Good point. My suggestion on this: Access the password only once and store
> it in a temporary variable securely for further transactions and then delete
> it as the session ends.
>
> >Ironically you had already suggested a solution and then asked the
> question, wonder if you were just checking if everyone understood your talk
> properly ;)
>
> If you would have read this mailing thread from the very scratch, you would
> have known that this question ain't related to salted MD5. I was not
> checking if people understood my talks properly. I could have done that
> there and then only.
>
> >For your salted-hashning technique or the new techique there is to be a
> lot of client side JS code which has to create the salted hash and send it
> to the server. The attacker would just intercept this message and replace
> your JS with another JS which does every thing like the original JS but in
> addition steals the user's clear text password and appends to the request
> which the attacker can now get by viewing your request.
>
>
> I would like to comment about the salted hashing part in a different e-mail
> (if I get some time) as this topic is not what I am talking about here.
> About the technique, in case if you can manipulate the generated hash
> somehow by intercepting, and make up your own hash, can you still be a part
> of the same session. I don't think so. Let me know if you can. Check out the
> way I told about its workings.
>
> Could you come up with some *PoC* to what you said? You said intercepting
> and manipulating the traffic on the fly travelling from the server to the
> client or the other way around? How would you do that sitting somewhere on
> the network? I am curious to know.
>
> I don't know why you guys keep involving SSL with this thing.
>
> Thanks for your feedback.
>
> -Gunwant
>
> On Mon, Jan 19, 2009 at 1:04 PM, <
> *lavakumar.kuppan at rbs.com* <lavakumar.kuppan at rbs.com>> wrote:
>
> Hi Gunwant,
>
> Thanks for bringing up this topic, can see that it has tickled quite a few
> brains in the list already ;), prompting some really intelligent ideas and
> arguments.
>
> I was on vacations and missed out on all the fun here, but its never too
> late so here is my humble opinion.
>
>
> There are two very important factors that have to be considered here:
>
>
> 1) Why is a session ID required.
>
> 2) What is the possibilty of some one with sniffing capability to intercept
> and manipulate the traffic.
>
>
>
> 1) Why is a session ID required
>
> I believe sessiond IDs are used to avoid connecting to the DB each time and
> validating the user's password, they are used to improve efficiency.
>
> Now in the solution that you have suggested, the server has to fetch the
> user's password for each request which defeats the whole purpose of
> maintaning session IDs.
>
> Since we are anyway reffering to the password for each request, I would
> like to think that we can authenticate for each request with the salted-hash
> technique you suggested in your december OWASP talk, provided once a salt is
> used the server discards it and issues a new one.
>
> Ironically you had already suggested a solution and then asked the
> question, wonder if you were just checking if everyone understood your talk
> properly ;)
>
>
> 2) What is the possibilty of some one with sniffing capability to intercept
> and manipulate the traffic.
>
> As someone who has done quite a bit of sniffing on customer networks during
> pentests, I think that someone who is capable of sniffing would in all
> probability also be capable of intercepting and manipulating the traffic
> between the client and server. There might be exceptions but they would be
> uncommon.
>
> Any techniquie which enforces some trust on the client-side logic now gets
> defeated.
>
> For your salted-hashning technique or the new techique there is to be a lot
> of client side JS code which has to create the salted hash and send it to
> the server. The attacker would just intercept this message and replace your
> JS with another JS which does every thing like the original JS but in
> addition steals the user's clear text password and appends to the request
> which the attacker can now get by viewing your request.
>
> Once this happens the entitre security system is defeated as its so closely
> attached to the user's password.
>
> So in my opinion once someone is able to intercept a clear-text traffic he
> could directly or indirectly bypass most restictions enforced.
>
>
> The thing that differentiates SSL from the suggested approach is the use of
> Server certificates which establishes authenticity, unless we can figure out
> a way to do that our confidentiality and integrity solutions might fail.
>
>
> Dont cosider thick client approach like java applets as reverse engineering
> is a possibility.
>
>
> PS: OK, I have not suggested any solution,  am a pentester what do you
> expect :P
>
>
> Thanks and Regards,
> Lavakumar K
> Penetration Tester - Global ISA
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>
> *>*
> Sent by: *owasp-delhi-bounces at lists.owasp.org*<owasp-delhi-bounces at lists.owasp.org>
>
> 01/16/2009 11:06 PM
>
>   To
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>
>  cc
>   Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
> Hi,
>
> Ok, let me elucidate the workings of the technique I was talking about.
>
>
>
> But before that I just want to shed some light on a few things so no-one
> comes again questioning to me about these and start some endless argument.
>
> - The e-commerce site I was talking about, I never said that they are only
> using the technique I am going to discuss. They might be using other
> techniques for their protection. What I meant was I've not seen/heard anyone
> else using this technique. That doesn't mean that they are only using this
> technique for their protection. Every giant incorporates multi-tier security
> for their resources.  I am not sure what exactly they are using besides this
> technique as Nobody reveals that.  I questioned someone on a forum, he came
> up with this technique, I studied, checked this on their documentation page,
> discussed with some people, discussed with some more, argued with even more
> and now I am here. I am looking for some feedback from you all. Just let me
> know what ever you think is wrong with this. Anyhow the question is not that
> whether they are using it or not but the question is 'How good is the
> technique?'
>
> - Please don't misinterpret my statement. I am not saying 'Don't use SSL'.
> SSL is definitely a protection mechanism for "Now" if we use it
> appropriately (CA signed certificate with a well-tested, well-reviewed
> implementation). Use SSL till someone finds some exploit *practically* not
> theoretically. This whole discussion is based on a research question so I/we
> can get a *feasible* working solution for this (may-be-a-future) problem. If
> you are not interested in discussing please do not comment. And please do
> not envisage what I am not saying.
>
> So here is how it works.
>
> No SSL. All traffic in clear text.
> Initially we need to communicate an OOB password/code/nonce (whatever you
> call it) to the client - only *once* not each time.
>
>
> 1. The client initiates a connection request to the server. As a result,
> server will initiate a handshake process to synchronize the time-stamps
> between the client and itself. Then the server will analyze tolerance time
> of packets leaving the client workstation till it reaches the server. The
> tolerance time is configured so to manage slow hosts or slow traffic. In
> plain words, server synchronizes date and time (in seconds, milliseconds or
> even nanoseconds based on the criticality of the application) with the
> client.
>
> 2. At the client side: the message, instantaneous time-stamp and the
> password are concatenated and hashed via SHA-1/SHA-256, whatever one wishes.
> This ensuing hash is combined with the username to form an authentication
> header and sent to the server.
>
> 3. At the server side, the server sees the username and perceives which
> user is trying to authenticate. Based on the tolerance configured initially
> at the handshake time, it picks the time-stamp from its own clock and using
> the password and the message it generates the hash in the same way as it was
> done at the client side.
>
> 4. If the hash matches it generates a Session ID and maps it to the
> username of the user. This Session ID will be sent from the client to the
> server along with the computed hash (which is different for each request -
> see next Step)
>
> 5. Now if the client sends another request, it appends and then hashes the
> message, password and the time-stamp (which will be apparently because of
> the different instantaneous time-stamp i.e. date and time). This resulting
> string is sent to the server along with the Session ID assigned to the user
> earlier. The resulting string contains a different hash as the time has
> changed. This will be validated at the server the same way as in Step 3.
>
> Now how can an adversary exploit this scenario? What I think of are two
> ways:
>
> 1. Either he will capture one of the hashes and try to predict the next
> hash by brute forcing different time-stamps.
>
> - But this can not be possible. He doesn't have the password to generate
> the hash.
>
> 2. What if he captures a series of requests and responses and replays them
> back to the server at a later stage.
>
> - This can't be possible either. In order to interact with the server, one
> needs to handshake so to synchronize itself with the server's clock. The
> attacker would not be able to synchronize because he would not be able to
> synchronize the *past-timestamp* (in the captured traffic) with the server's
> current time.
>
> 3. Lastly for the newbies, what if he captures the Session ID.
>
> - But he would not be able to produce the matching Hash for the request, so
> no luck.
>
> A few things to contemplate:
>
> 1. This will be considerably be CPU intensive but can be acknowledged if
> compared to the processing cycles SSL takes.
>
> 2. Time synchronization can be complex. I have no idea how to do that.
>
> 3. Please provide your
> feedback/fury/antagonism/annoyance/appreciation/whatever. Hope I explained
> this in a very straightforward way.
>
> Thanks.
>
> Gunwant
>
>
>
>
>
> On Fri, Jan 16, 2009 at 4:26 AM, Plash Chowdhary <*plash.chowdhary at tcs.com
> * <plash.chowdhary at tcs.com>> wrote:
>
> Gunwant,
>
> I will be interested to know kind of soltutions are being used.
> SInce you are talking about **Time stamp**(in clear text will be
> perdictable, specially if a client side algo is being used) <some random
> number in hidden field with every request,<unique captcha with every request
> (this will be interesting)  can be a case but they will be not as roboust
>  as out of band..
> some how with Time stamps only thing that rings bell is CRYPTOGRAPHY *: D
> *(PKI??)
>
> I will be really surprized if that organization is not using SSL from a
> Vendor. (as you said its an e commerce site)
>
> and anyways i wont be using HTTPS on public content of my site and will
> switch to HTTPS session only when needed (IDEALLY)
>
>
> lemme know your thoughts
>
> Regards
> Plash
>
>   *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 12:30 PM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
>  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
>
>
> Plash,
>
> Thanks for the idea. Please don't take my talks as overstatements, I just
> wanted to have some innovative ideas from you guys.
>
> Many organizations implement session mechanisms without using SSL. As a
> matter of fact these are not the conditions that I have set. There are many
> scenarios where using SSL is unworkable and in order to provide protection,
> there are solutions.
>
> Also, it becomes more relevant when people are trying to prove the
> weaknesses of SSL. Not to forget, facts say that most organizations who use
> SSL, use self signed certificates rather than a CA sign it.
>
> For sessions on non-SSL, there are many undocumented solutions which can be
> put into practice but such solutions needs to be well-reviewed and
> well-tested before they are implemented. I have come to know about one of
> the methods implemented by one of the top e-commerce portal giants. This
> solution is a bit tough to understand and subsequently implement it. Before
> I discuss it on the mailing list, I need to make sure that I understand it
> well. The only thing I can share at the moment is, it uses time-stamps.
> Hopefully, I would be discussing this proposition in detail in the upcoming
> Delhi Chapter meeting this month.
>
> Sorry if my talks were exaggerated. I still seek more ideas on the same
> question if someone is willing to share.
>
> Many thanks.
>
> On Thu, Jan 15, 2009 at 11:29 PM, Plash Chowdhary <
> *
> **plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
>
> Gunwant,,
>
> Yes impractical "Off band validation" for each request in the conditions
> you have set. Now either you come up with a solution or im implimenting SSL
> *: )*
>
>
> Regards
> Plash
>  *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 10:27 AM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
>  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
>
>
>
>
> I would happily accept what you say if you say how it protects.
>
> Tell me **how** would a sniffer miss your validation code on an
> unencrypted channel. We should talk about mitigating not minimizing.
>
> Oh ! unless you are saying, a different off band validation code is sent
> for **each** request - then it is possible but it is impractical even in
> high risk applications.
>
> On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary <
> *
> **plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
>
> It does Gunwant, Use long one time off band validation....and keep a short
> TTL it will minimize the risk of relpay,....
>  *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>*>*
>
> 01/15/2009 09:25 AM
>
>   To
> "Plash Chowdhary" <*plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>>
>  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
> That doesn't affirm protection against replay attack, dude!
> In the transit, anyone can see your validation code...
> Even if you hash/encrypt it, still it can used to replay the traffic...
> this is vulnerable.. :)
>
> On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary <
> *
> **plash.chowdhary at tcs.com* <plash.chowdhary at tcs.com>> wrote:
>
> verify user offline.. send an sms(or similar) with a validation code(long
> randomly genrated  string) to the user everytime he logs in to validate and
> use it everytime a transaction (high risk) is done or role is  changed..
> best way still will be to use it over SSL and use digital signatures
>
>
> Regards
> Plash
>  *"Gunwant Singh" <**gunwant.s at gmail.com* <gunwant.s at gmail.com>
> *
> >*
> Sent by: *owasp-delhi-bounces at lists.owasp.org*<owasp-delhi-bounces at lists.owasp.org>
>
> 01/14/2009 10:13 AM
>
>   To
> "Karthik Muthukrishnan" <*karthik.muthukrishnan at tcs.com*<karthik.muthukrishnan at tcs.com>
> >
>  cc
> *owasp-delhi at lists.owasp.org* <owasp-delhi at lists.owasp.org>  Subject
> Re: [Owasp-delhi] SSL Broken..
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
> Hi,
>
> Thanks for your reply but that did not answer my question. You are telling
> me what I can use for protecting the credentials. I know what I can use, but
> just out of curiousity I want to know if I don't use SSL/VPN or any other
> network based protection, what else can be done on the application layer in
> order to protect the credentials
>
> . Please see the answers below.
>
>
> On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <
> *karthik.muthukrishnan at tcs.com* <karthik.muthukrishnan at tcs.com>> wrote:
>
> > salted MD5 hashing protects the authentication credentials rightly from
> eavesdropping on the network.
> Salting is used to protect MD5 hashes from rainbow table attacks.
>
> Apparently Yes, although ultimately it protects authentication credentials
> only. Facts say the highest risk is eavesdropping if the session is
> unencrypted.
>
>
> > SSL does the same thing.
> Yes, SSL is used to ensure confidentiality and trust in the network
> communiation. Confidentiality (or prevention of network eavesdropping) is
> ensured by encryption. Trust is accomplished by Server and/or client
> certificates.
>
> I know what SSL does, but my question is something else.
>
>
> > However, in some scenarios SSL might not be feasible. For example,
> causing heavy load on the server or may be some applications don't support
> it, etc.
> In such cases SSL Accelerators are used. They are devices which can be fit
> into the architecture without changing the application or affecting the load
> on the application server.
>
> Again my question is something else. I know if SSL doesn't work,
> accelerators help expedite the processing. What I want to know is, if I "Do
> Not" want to use SSL what measures can be taken.
>
>
> > We can protect the authentication credentials using salted MD5 hashing
> or by using SSL.
> To protect authentication credentials in HTTP, we have to rely on SSL.
> Hashes are a secure (aka not in clear text) way to store authentication
> credentials.
> So you are proclaiming that we *have to* rely  on SSL- no other
> alternative.
> Hashes are also used in many applications for many different purposes
> besides authenticity and integrity.
>
>
> > In order to protect the Session credentials (Session ID, tokens,
> cookies, etc) on a non-SSL channel what measures can be taken?
> To protect either auth or session credentials we have to ensure
> confidentiality of the communication channel. If we dont use HTTPS, then VPN
> might be another option. While authentication credentials can be protected
> by some challenge handshake mechanism (similar to CHAP), we would need to
> protect session creds by encrypting the channel.
> I was asking that if we can provide some protection on the application
> level rather than on the network level. Besides SSL/VPN there are many
> options available for protecting the authentication credentials. I want to
> know (just out of curiousity) that how can we secure the session credentials
> on an unencrypted/non-SSL channel. I know this will take too much processing
> cycles, time synchronization, quantization in milliseconds even nanoseconds,
> affirmation of the key exchange, dynamic hashing key generation to mitigate
> replay attacks, and even more.
>
> I just want to know  if anyone has an idea on how it can be done if h/she
> is willing to share that would be really appreciative. Please make sure
> you understand what I am looking for.
> No offence :)
>
>
>
> Karthik
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
> _______________________________________________
> Owasp-delhi mailing list*
> **Owasp-delhi at lists.owasp.org* <Owasp-delhi at lists.owasp.org> *
> *
> *https://lists.owasp.org/mailman/listinfo/owasp-delhi*<https://lists.owasp.org/mailman/listinfo/owasp-delhi>
>
> ForwardSourceID:NT00005236
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT000052F2
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT0000530E
>
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
> ForwardSourceID:NT0000533A
> =====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>
>
>
> --
> Gunwant Singh
>
>
>
>
> --
> Gunwant Singh
> _______________________________________________
> Owasp-delhi mailing list*
> **Owasp-delhi at lists.owasp.org* <Owasp-delhi at lists.owasp.org>*
> *
> *https://lists.owasp.org/mailman/listinfo/owasp-delhi*<https://lists.owasp.org/mailman/listinfo/owasp-delhi>
>
>
> This message (including any attachments) is confidential and may be
> privileged. If you have received it by mistake please notify the sender by
> return e-mail and delete this message from your system. Any unauthorised use
> or dissemination of this message in whole or in part is strictly prohibited.
> Please note that e-mails are susceptible to change. ABN AMRO Central
> Enterprise Services Pvt Ltd, part of RBS Group plc , having its registered
> office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel (W), Mumbai -
> 400 013 , including its group companies, shall not be liable for the
> improper or incomplete transmission of the information contained in this
> communication nor for any delay in its receipt or damage to your system. ABN
> AMRO Central Enterprise Services Pvt Ltd (or its group companies) does not
> guarantee that the integrity of this communication has been maintained nor
> that this communication is free of viruses, interceptions or interference.
>
> ______________________________________________________________________
> This email has been scanned by the MessageLabs Email Security System.
> For more information please visit *http://www.messagelabs.com/email*<http://www.messagelabs.com/email>
>
> ______________________________________________________________________
>
>
>
> --
> Gunwant Singh
>
>
> This message (including any attachments) is confidential and may be
> privileged. If you have received it by mistake please notify the sender by
> return e-mail and delete this message from your system. Any unauthorised use
> or dissemination of this message in whole or in part is strictly prohibited.
> Please note that e-mails are susceptible to change. ABN AMRO Central
> Enterprise Services Pvt Ltd, part of RBS Group plc , having its registered
> office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel (W), Mumbai -
> 400 013 , including its group companies, shall not be liable for the
> improper or incomplete transmission of the information contained in this
> communication nor for any delay in its receipt or damage to your system. ABN
> AMRO Central Enterprise Services Pvt Ltd (or its group companies) does not
> guarantee that the integrity of this communication has been maintained nor
> that this communication is free of viruses, interceptions or interference.
>
> ______________________________________________________________________
> This email has been scanned by the MessageLabs Email Security System.
> For more information please visit *http://www.messagelabs.com/email*<http://www.messagelabs.com/email>
> ______________________________________________________________________
>
>
>
>
> --
> Gunwant Singh
>
>
> ______________________________________________________________________
> This email has been scanned by the MessageLabs Email Security System.
> For more information please visit *http://www.messagelabs.com/email*<http://www.messagelabs.com/email>
> ______________________________________________________________________
>
>
>
>
> --
> Gunwant Singh
>
>
> ______________________________________________________________________
> This email has been scanned by the MessageLabs Email Security System.
> For more information please visit http://www.messagelabs.com/email
> ______________________________________________________________________
>



-- 
Gunwant Singh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090123/0ebb62d5/attachment-0001.html 

From lavakumar.kuppan at rbs.com  Tue Jan 27 04:26:28 2009
From: lavakumar.kuppan at rbs.com (lavakumar.kuppan at rbs.com)
Date: Tue, 27 Jan 2009 14:56:28 +0530
Subject: [Owasp-delhi] SSL Broken..
In-Reply-To: <44b2bd060901230752q1ea2a4ecj2a9bb4806978083f@mail.gmail.com>
Message-ID: <OF45C6D65C.A65FB37D-ON6525754B.0033948A-6525754B.0033EA56@abnamro.com>

Gunwant, in my earlier mail I have explained how the password would be 
stolen even when you use hashing.
Guess we have argued on this long enough, since either party is hard to 
convice lets just bury this thread ;)

Thanks and Regards,
Lavakumar K





Gunwant Singh <gunwant.s at gmail.com> 
01/23/2009 09:22 PM

To
lavakumar.kuppan at rbs.com
cc
owasp-delhi at lists.owasp.org
Subject
Re: [Owasp-delhi] SSL Broken..






Lava,

Initially the user's password is sent OOB, then in the transit it is 
hashed via. one-way hashing algorithm. You can't get the password, you 
only get the hash which is indeed useless to an attacker. I think you have 
not understood what I was trying to say earlier.

Regards.

On Fri, Jan 23, 2009 at 5:17 PM, <lavakumar.kuppan at rbs.com> wrote:

Gunwant you are missing the point, once I have the user's password I dont 
even have to bother with a MITM. 

Thanks and Regards,
Lavakumar K
Penetration Tester - Global ISA
+919833320286(M)||+91-044-43976738 | 047-6738|lavakumar.kuppan at rbs.com 


Gunwant Singh <gunwant.s at gmail.com> 
01/22/2009 11:06 PM 


To
lavakumar.kuppan at rbs.com 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..








Lava,

What do you think about the delay caused while intercepting and modifying 
the traffic on the fly. As I pointed out earlier the time-stamp appended 
at each end is validated at the other which is also based on the tolerace 
calculated at the handshake time. This will compute the delay caused due 
to manipulation of the traffic by MITM. 

As I also said that based on the criticality factor the quantization can 
vary in milliseconds even nanoseconds. Nonetheless the validation is 
performed at both ends, so modifying traffic from either end to the other 
will be detected and invalidated.

However, for me the question is how to code/implement the handshake 
process which can be a bit complex. Infact, much complex.

-Gunwant.



On Thu, Jan 22, 2009 at 2:49 PM, <lavakumar.kuppan at rbs.com> wrote: 

Hi Gunwant, 

In addition to ARP poisoning this tool also lets you manipulate HTTP 
content on the fly. 
However coming back to the timestamp technique, here is how it will 
happen: 

STEP 1: 
Client  -> GET /index.jsp -> Server 
Server - > 200 OK <html>Secret_Msg="secret"<script 
src=timestamp.js></html> -> Attacker (notes down the secret message) -> 
Client (lets say timestamp.js contains the client-side logic for timestamp 
creation and hashing) 

STEP 2: 
Client -> GET /timestamp.js  -> Server 
Server  -> [timestamp();hash()] -> Attacker - > [timestamp();hash(); 
(document.cookie = "password 
="+document.forms['login'].password.value+"time"=time())] -> Client 
(The attacker who is sniffing with ARP poisoning is now manipulating the 
js file's content on the fly, he adds a couple of more lines of code to 
the actual js file which adds the user's password to the cookie under the 
name 'password' and the current time on the client under the name 'time'.) 


STEP 3: 
Client(user enters the password, the hash is created by the js and sent to 
the server, this request also contains the clear-text password and the 
current time in the cookie) -> Attacker (notes down the password and time 
and removes these fields from the cookie and sends to the server) -> 
Server(server happily authenticates the user) 


At this point the attacker has all the three values needed for the hash 
creation - current time on the client side, secret message and the user's 
password. He also knows how the hash is created. 
Now he can recreate the hash as many time as he wants with new timestamps. 

If the server issues a new secret message then the attacker can get that 
as he is sniffing, same goes for any session ID that is issued. 
It should be trivial to stay within the time-lag tolerance as for any site 
to not piss off its users the tolerance should atleast be in seconds. 
If it was in milliseconds then even the actual sites users cant send valid 
requests. 

If the attacker doesnt have a sense of adventure then he can stop once he 
gets the user's password ;) 

Hope this makes things clear 
. 
It would have been intresting to discuss this with you in person during 
this month's meet but unfortunately am not in Gurgoan anymore. 
Good luck with your presentation, am sure that everyone..developers esp 
would find it just as useful as the earlier two :) 

Thanks and Regards,
Lavakumar K
Penetration Tester - Global ISA


Gunwant Singh <gunwant.s at gmail.com> 
01/21/2009 09:15 PM


To
lavakumar.kuppan at rbs.com 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..










Hi Lava,

Come on! I know ARP poisoning, what I meant was how would you intercept 
and manipulate the traffic in my specific case, especially when you have 
time-stamps involved.

Thanks.
Gunwant

P.S: Is this mail delivery system error only coming to me or everyone 
else?

On Wed, Jan 21, 2009 at 11:39 AM, <lavakumar.kuppan at rbs.com> wrote: 

Hi Gunwant, 

You can check out ettercap, it has ARP poisoning capability and lets you 
manipulate the intercepted traffic on the fly with filters. 
Play around with it a little :) 

Thanks and Regards,
Lavakumar K
Penetration Tester - Global ISA

"Gunwant Singh" <gunwant.s at gmail.com> 
01/19/2009 11:25 PM 


To
lavakumar.kuppan at rbs.com 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..












Hi Lava,

Nice to see your reply. Please see my thoughts on your comments.

>Now in the solution that you have suggested, the server has to fetch the 
user's password for each request which defeats the whole purpose of 
maintaning session IDs.

Good point. My suggestion on this: Access the password only once and store 
it in a temporary variable securely for further transactions and then 
delete it as the session ends.

>Ironically you had already suggested a solution and then asked the 
question, wonder if you were just checking if everyone understood your 
talk properly ;) 

If you would have read this mailing thread from the very scratch, you 
would have known that this question ain't related to salted MD5. I was not 
checking if people understood my talks properly. I could have done that 
there and then only.

>For your salted-hashning technique or the new techique there is to be a 
lot of client side JS code which has to create the salted hash and send it 
to the server. The attacker would just intercept this message and replace 
your JS with another JS which does every thing like the original JS but in 
addition steals the user's clear text password and appends to the request 
which the attacker can now get by viewing your request.


I would like to comment about the salted hashing part in a different 
e-mail (if I get some time) as this topic is not what I am talking about 
here. About the technique, in case if you can manipulate the generated 
hash somehow by intercepting, and make up your own hash, can you still be 
a part of the same session. I don't think so. Let me know if you can. 
Check out the way I told about its workings.

Could you come up with some *PoC* to what you said? You said intercepting 
and manipulating the traffic on the fly travelling from the server to the 
client or the other way around? How would you do that sitting somewhere on 
the network? I am curious to know.

I don't know why you guys keep involving SSL with this thing.

Thanks for your feedback.

-Gunwant 

On Mon, Jan 19, 2009 at 1:04 PM, <
lavakumar.kuppan at rbs.com> wrote: 

Hi Gunwant, 

Thanks for bringing up this topic, can see that it has tickled quite a few 
brains in the list already ;), prompting some really intelligent ideas and 
arguments.

I was on vacations and missed out on all the fun here, but its never too 
late so here is my humble opinion.


There are two very important factors that have to be considered here:


1) Why is a session ID required.

2) What is the possibilty of some one with sniffing capability to 
intercept and manipulate the traffic.



1) Why is a session ID required

I believe sessiond IDs are used to avoid connecting to the DB each time 
and validating the user's password, they are used to improve efficiency.

Now in the solution that you have suggested, the server has to fetch the 
user's password for each request which defeats the whole purpose of 
maintaning session IDs.

Since we are anyway reffering to the password for each request, I would 
like to think that we can authenticate for each request with the 
salted-hash technique you suggested in your december OWASP talk, provided 
once a salt is used the server discards it and issues a new one.

Ironically you had already suggested a solution and then asked the 
question, wonder if you were just checking if everyone understood your 
talk properly ;)


2) What is the possibilty of some one with sniffing capability to 
intercept and manipulate the traffic.

As someone who has done quite a bit of sniffing on customer networks 
during pentests, I think that someone who is capable of sniffing would in 
all probability also be capable of intercepting and manipulating the 
traffic between the client and server. There might be exceptions but they 
would be uncommon.

Any techniquie which enforces some trust on the client-side logic now gets 
defeated.

For your salted-hashning technique or the new techique there is to be a 
lot of client side JS code which has to create the salted hash and send it 
to the server. The attacker would just intercept this message and replace 
your JS with another JS which does every thing like the original JS but in 
addition steals the user's clear text password and appends to the request 
which the attacker can now get by viewing your request.

Once this happens the entitre security system is defeated as its so 
closely attached to the user's password.

So in my opinion once someone is able to intercept a clear-text traffic he 
could directly or indirectly bypass most restictions enforced.


The thing that differentiates SSL from the suggested approach is the use 
of Server certificates which establishes authenticity, unless we can 
figure out a way to do that our confidentiality and integrity solutions 
might fail.


Dont cosider thick client approach like java applets as reverse 
engineering is a possibility.


PS: OK, I have not suggested any solution,  am a pentester what do you 
expect :P


Thanks and Regards,
Lavakumar K
Penetration Tester - Global ISA
"Gunwant Singh" <gunwant.s at gmail.com
> 
Sent by: owasp-delhi-bounces at lists.owasp.org 
01/16/2009 11:06 PM 


To
owasp-delhi at lists.owasp.org 
cc

Subject
Re: [Owasp-delhi] SSL Broken..














Hi, 
Ok, let me elucidate the workings of the technique I was talking about. 


But before that I just want to shed some light on a few things so no-one 
comes again questioning to me about these and start some endless argument.

- The e-commerce site I was talking about, I never said that they are only 
using the technique I am going to discuss. They might be using other 
techniques for their protection. What I meant was I've not seen/heard 
anyone else using this technique. That doesn't mean that they are only 
using this technique for their protection. Every giant incorporates 
multi-tier security for their resources.  I am not sure what exactly they 
are using besides this technique as Nobody reveals that.  I questioned 
someone on a forum, he came up with this technique, I studied, checked 
this on their documentation page, discussed with some people, discussed 
with some more, argued with even more and now I am here. I am looking for 
some feedback from you all. Just let me know what ever you think is wrong 
with this. Anyhow the question is not that whether they are using it or 
not but the question is 'How good is the technique?'

- Please don't misinterpret my statement. I am not saying 'Don't use SSL'. 
SSL is definitely a protection mechanism for "Now" if we use it 
appropriately (CA signed certificate with a well-tested, well-reviewed 
implementation). Use SSL till someone finds some exploit *practically* not 
theoretically. This whole discussion is based on a research question so 
I/we can get a *feasible* working solution for this (may-be-a-future) 
problem. If you are not interested in discussing please do not comment. 
And please do not envisage what I am not saying.

So here is how it works.

No SSL. All traffic in clear text.
Initially we need to communicate an OOB password/code/nonce (whatever you 
call it) to the client - only *once* not each time. 

1. The client initiates a connection request to the server. As a result, 
server will initiate a handshake process to synchronize the time-stamps 
between the client and itself. Then the server will analyze tolerance time 
of packets leaving the client workstation till it reaches the server. The 
tolerance time is configured so to manage slow hosts or slow traffic. In 
plain words, server synchronizes date and time (in seconds, milliseconds 
or even nanoseconds based on the criticality of the application) with the 
client. 
2. At the client side: the message, instantaneous time-stamp and the 
password are concatenated and hashed via SHA-1/SHA-256, whatever one 
wishes. This ensuing hash is combined with the username to form an 
authentication header and sent to the server. 
3. At the server side, the server sees the username and perceives which 
user is trying to authenticate. Based on the tolerance configured 
initially at the handshake time, it picks the time-stamp from its own 
clock and using the password and the message it generates the hash in the 
same way as it was done at the client side. 
4. If the hash matches it generates a Session ID and maps it to the 
username of the user. This Session ID will be sent from the client to the 
server along with the computed hash (which is different for each request - 
see next Step) 
5. Now if the client sends another request, it appends and then hashes the 
message, password and the time-stamp (which will be apparently because of 
the different instantaneous time-stamp i.e. date and time). This resulting 
string is sent to the server along with the Session ID assigned to the 
user earlier. The resulting string contains a different hash as the time 
has changed. This will be validated at the server the same way as in Step 
3. 
Now how can an adversary exploit this scenario? What I think of are two 
ways: 
1. Either he will capture one of the hashes and try to predict the next 
hash by brute forcing different time-stamps. 
- But this can not be possible. He doesn't have the password to generate 
the hash. 
2. What if he captures a series of requests and responses and replays them 
back to the server at a later stage. 
- This can't be possible either. In order to interact with the server, one 
needs to handshake so to synchronize itself with the server's clock. The 
attacker would not be able to synchronize because he would not be able to 
synchronize the *past-timestamp* (in the captured traffic) with the 
server's current time. 
3. Lastly for the newbies, what if he captures the Session ID. 
- But he would not be able to produce the matching Hash for the request, 
so no luck. 
A few things to contemplate: 
1. This will be considerably be CPU intensive but can be acknowledged if 
compared to the processing cycles SSL takes. 
2. Time synchronization can be complex. I have no idea how to do that. 
3. Please provide your 
feedback/fury/antagonism/annoyance/appreciation/whatever. Hope I explained 
this in a very straightforward way. 
Thanks. 
Gunwant 
 


On Fri, Jan 16, 2009 at 4:26 AM, Plash Chowdhary <plash.chowdhary at tcs.com> 
wrote: 

Gunwant, 

I will be interested to know kind of soltutions are being used. 
SInce you are talking about **Time stamp**(in clear text will be 
perdictable, specially if a client side algo is being used) <some random 
number in hidden field with every request,<unique captcha with every 
request (this will be interesting)  can be a case but they will be not as 
roboust  as out of band.. 
some how with Time stamps only thing that rings bell is CRYPTOGRAPHY : D 
(PKI??) 

I will be really surprized if that organization is not using SSL from a 
Vendor. (as you said its an e commerce site) 

and anyways i wont be using HTTPS on public content of my site and will 
switch to HTTPS session only when needed (IDEALLY) 


lemme know your thoughts 

Regards 
Plash 


"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 12:30 PM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..
















Plash, 

Thanks for the idea. Please don't take my talks as overstatements, I just 
wanted to have some innovative ideas from you guys.

Many organizations implement session mechanisms without using SSL. As a 
matter of fact these are not the conditions that I have set. There are 
many scenarios where using SSL is unworkable and in order to provide 
protection, there are solutions. 

Also, it becomes more relevant when people are trying to prove the 
weaknesses of SSL. Not to forget, facts say that most organizations who 
use SSL, use self signed certificates rather than a CA sign it. 

For sessions on non-SSL, there are many undocumented solutions which can 
be put into practice but such solutions needs to be well-reviewed and 
well-tested before they are implemented. I have come to know about one of 
the methods implemented by one of the top e-commerce portal giants. This 
solution is a bit tough to understand and subsequently implement it. 
Before I discuss it on the mailing list, I need to make sure that I 
understand it well. The only thing I can share at the moment is, it uses 
time-stamps. Hopefully, I would be discussing this proposition in detail 
in the upcoming Delhi Chapter meeting this month.

Sorry if my talks were exaggerated. I still seek more ideas on the same 
question if someone is willing to share. 

Many thanks. 

On Thu, Jan 15, 2009 at 11:29 PM, Plash Chowdhary < 

plash.chowdhary at tcs.com> wrote: 

Gunwant,, 

Yes impractical "Off band validation" for each request in the conditions 
you have set. Now either you come up with a solution or im implimenting 
SSL : ) 


Regards 
Plash 
"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 10:27 AM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..


















I would happily accept what you say if you say how it protects.

Tell me *how* would a sniffer miss your validation code on an unencrypted 
channel. We should talk about mitigating not minimizing.

Oh ! unless you are saying, a different off band validation code is sent 
for *each* request - then it is possible but it is impractical even in 
high risk applications.

On Thu, Jan 15, 2009 at 9:41 PM, Plash Chowdhary < 

plash.chowdhary at tcs.com> wrote: 

It does Gunwant, Use long one time off band validation....and keep a short 
TTL it will minimize the risk of relpay,.... 
"Gunwant Singh" <gunwant.s at gmail.com> 
01/15/2009 09:25 AM 


To
"Plash Chowdhary" <plash.chowdhary at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..




















That doesn't affirm protection against replay attack, dude!
In the transit, anyone can see your validation code...
Even if you hash/encrypt it, still it can used to replay the traffic...
this is vulnerable.. :)

On Thu, Jan 15, 2009 at 3:46 AM, Plash Chowdhary < 

plash.chowdhary at tcs.com> wrote: 

verify user offline.. send an sms(or similar) with a validation code(long 
randomly genrated  string) to the user everytime he logs in to validate 
and use it everytime a transaction (high risk) is done or role is 
changed.. best way still will be to use it over SSL and use digital 
signatures 


Regards 
Plash 
"Gunwant Singh" <gunwant.s at gmail.com 

> 
Sent by: owasp-delhi-bounces at lists.owasp.org 
01/14/2009 10:13 AM 


To
"Karthik Muthukrishnan" <karthik.muthukrishnan at tcs.com> 
cc
owasp-delhi at lists.owasp.org 
Subject
Re: [Owasp-delhi] SSL Broken..






















Hi,

Thanks for your reply but that did not answer my question. You are telling 
me what I can use for protecting the credentials. I know what I can use, 
but just out of curiousity I want to know if I don't use SSL/VPN or any 
other network based protection, what else can be done on the application 
layer in order to protect the credentials

. Please see the answers below. 


On Wed, Jan 14, 2009 at 3:50 PM, Karthik Muthukrishnan <
karthik.muthukrishnan at tcs.com> wrote: 

> salted MD5 hashing protects the authentication credentials rightly from 
eavesdropping on the network. 
Salting is used to protect MD5 hashes from rainbow table attacks. 

Apparently Yes, although ultimately it protects authentication credentials 
only. Facts say the highest risk is eavesdropping if the session is 
unencrypted.


> SSL does the same thing. 
Yes, SSL is used to ensure confidentiality and trust in the network 
communiation. Confidentiality (or prevention of network eavesdropping) is 
ensured by encryption. Trust is accomplished by Server and/or client 
certificates.

I know what SSL does, but my question is something else.


> However, in some scenarios SSL might not be feasible. For example, 
causing heavy load on the server or may be some applications don't support 
it, etc. 
In such cases SSL Accelerators are used. They are devices which can be fit 
into the architecture without changing the application or affecting the 
load on the application server.
Again my question is something else. I know if SSL doesn't work, 
accelerators help expedite the processing. What I want to know is, if I 
"Do Not" want to use SSL what measures can be taken. 


> We can protect the authentication credentials using salted MD5 hashing 
or by using SSL. 
To protect authentication credentials in HTTP, we have to rely on SSL. 
Hashes are a secure (aka not in clear text) way to store authentication 
credentials. 
So you are proclaiming that we *have to* rely  on SSL- no other 
alternative. 
Hashes are also used in many applications for many different purposes 
besides authenticity and integrity. 


> In order to protect the Session credentials (Session ID, tokens, 
cookies, etc) on a non-SSL channel what measures can be taken? 
To protect either auth or session credentials we have to ensure 
confidentiality of the communication channel. If we dont use HTTPS, then 
VPN might be another option. While authentication credentials can be 
protected by some challenge handshake mechanism (similar to CHAP), we 
would need to protect session creds by encrypting the channel. 
I was asking that if we can provide some protection on the application 
level rather than on the network level. Besides SSL/VPN there are many 
options available for protecting the authentication credentials. I want to 
know (just out of curiousity) that how can we secure the session 
credentials on an unencrypted/non-SSL channel. I know this will take too 
much processing cycles, time synchronization, quantization in milliseconds 
even nanoseconds, affirmation of the key exchange, dynamic hashing key 
generation to mitigate replay attacks, and even more. 

I just want to know  if anyone has an idea on how it can be done if h/she 
is willing to share that would be really appreciative. Please make sure 
you understand what I am looking for.
No offence :)



Karthik 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh 
_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org 
https://lists.owasp.org/mailman/listinfo/owasp-delhi

ForwardSourceID:NT00005236     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT000052F2     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT0000530E     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh

ForwardSourceID:NT0000533A     
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you






-- 
Gunwant Singh




-- 
Gunwant Singh 
_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-delhi


This message (including any attachments) is confidential and may be 
privileged. If you have received it by mistake please notify the sender by 
return e-mail and delete this message from your system. Any unauthorised 
use or dissemination of this message in whole or in part is strictly 
prohibited. Please note that e-mails are susceptible to change. ABN AMRO 
Central Enterprise Services Pvt Ltd, part of RBS Group plc , having its 
registered office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel 
(W), Mumbai - 400 013 , including its group companies, shall not be liable 
for the improper or incomplete transmission of the information contained 
in this communication nor for any delay in its receipt or damage to your 
system. ABN AMRO Central Enterprise Services Pvt Ltd (or its group 
companies) does not guarantee that the integrity of this communication has 
been maintained nor that this communication is free of viruses, 
interceptions or interference.

______________________________________________________________________
This email has been scanned by the MessageLabs Email Security System.
For more information please visit http://www.messagelabs.com/email

______________________________________________________________________ 



-- 
Gunwant Singh


This message (including any attachments) is confidential and may be 
privileged. If you have received it by mistake please notify the sender by 
return e-mail and delete this message from your system. Any unauthorised 
use or dissemination of this message in whole or in part is strictly 
prohibited. Please note that e-mails are susceptible to change. ABN AMRO 
Central Enterprise Services Pvt Ltd, part of RBS Group plc , having its 
registered office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel 
(W), Mumbai - 400 013 , including its group companies, shall not be liable 
for the improper or incomplete transmission of the information contained 
in this communication nor for any delay in its receipt or damage to your 
system. ABN AMRO Central Enterprise Services Pvt Ltd (or its group 
companies) does not guarantee that the integrity of this communication has 
been maintained nor that this communication is free of viruses, 
interceptions or interference.

______________________________________________________________________
This email has been scanned by the MessageLabs Email Security System.
For more information please visit http://www.messagelabs.com/email 
______________________________________________________________________ 



-- 
Gunwant Singh 

______________________________________________________________________
This email has been scanned by the MessageLabs Email Security System.
For more information please visit http://www.messagelabs.com/email 
______________________________________________________________________ 



-- 
Gunwant Singh

______________________________________________________________________
This email has been scanned by the MessageLabs Email Security System.
For more information please visit http://www.messagelabs.com/email 
______________________________________________________________________



-- 
Gunwant Singh



This message (including any attachments) is confidential and may be privileged. If you have received it by mistake please notify the sender by return e-mail and delete this message from your system. Any unauthorised use or dissemination of this message in whole or in part is strictly prohibited. Please note that e-mails are susceptible to change. ABN AMRO Central Enterprise Services Pvt Ltd, part of RBS Group plc , having its registered office at Empire Complex, 414 Senapati Bapat Marg, Lower Parel (W), Mumbai - 400 013 , including its group companies, shall not be liable for the improper or incomplete transmission of the information contained in this communication nor for any delay in its receipt or damage to your system. ABN AMRO Central Enterprise Services Pvt Ltd (or its group companies) does not guarantee that the integrity of this communication has been maintained nor that this communication is free of viruses, interceptions or interference.

______________________________________________________________________
This email has been scanned by the MessageLabs Email Security System.
For more information please visit http://www.messagelabs.com/email 
______________________________________________________________________
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090127/8d8fca52/attachment-0001.html 

From nitins at cybermedia.co.in  Tue Jan 27 05:58:25 2009
From: nitins at cybermedia.co.in (Nitin Saxena)
Date: Tue, 27 Jan 2009 16:28:25 +0530
Subject: [Owasp-delhi] Registrations Open: OWASP Delhi Meeting January 2009
References: <4979d448.20038e0a.7d57.ffff9f36@mx.google.com>
Message-ID: <4A752DF6F00F4474B6A5D3E05E70944B@Nitins>

Dear All,

Registrations are on in a full swing !!

Incase you may have missed out on the mail due to the long weekend and have not registered do log onto the below mentioned link for registering for this month's meeting on January 31st, 2009.

https://www.owasp.org/index.php/OWASP_Delhi_January_Meeting_2009  

Regards
Nitin Saxena


  ----- Original Message ----- 
  From: Soi, Dhruv 
  To: owasp-delhi at lists.owasp.org 
  Sent: Friday, January 23, 2009 7:59 PM
  Subject: [Owasp-delhi] Registrations Open: OWASP Delhi Meeting January 2009


  Hello All,

   

  As planned, our next chapter meeting is scheduled for 31st January 2009 [Saturday] from 1500hrs till 1815hrs at Birlasoft, D-195, Sector-63, Noida - 201301. We are highly thankful to Birlasoft for sponsoring this meeting. Here are meeting topics for your quick reference:

   

    1.. Scrutinizing Session Based Attacks - Gunwant Singh 
    2.. Scrutinizing International Security Standards To Mitigate the Vulnerabilities arising through SQL Injection Attacks - Supriya Madan 
    3.. Securing WCF services - Birlasoft 
    4.. Technology Compliance Index (TCI) for Application Security Framework - Birlasoft 
   

  Meeting agenda has been posted at https://www.owasp.org/index.php/OWASP_Delhi_January_Meeting_2009 to grab further details. Registrations are open for this event and you may register for the meeting from the same page by clicking on the registration link in "Meeting Registration" section towards the bottom of the page. 

   

  I hope everyone will have a wonderful session. See you at the meeting!

   

  Many Thanks,

  Dhruv



------------------------------------------------------------------------------


  _______________________________________________
  Owasp-delhi mailing list
  Owasp-delhi at lists.owasp.org
  https://lists.owasp.org/mailman/listinfo/owasp-delhi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090127/e9bd33f2/attachment.html 

From dhruv.soi at owasp.org  Thu Jan 29 04:57:29 2009
From: dhruv.soi at owasp.org (Soi, Dhruv)
Date: Thu, 29 Jan 2009 15:27:29 +0530
Subject: [Owasp-delhi] Registrations Open: OWASP Delhi Meeting January
	2009
In-Reply-To: <4A752DF6F00F4474B6A5D3E05E70944B@Nitins>
Message-ID: <49817d92.16078e0a.1de7.ffffbeb3@mx.google.com>

Hello All,

 

This is the final call to register for upcoming OWASP meeting to be held on
coming Saturday in Birlasoft, Noida. If you have not registered already,
then please do it now! Please follow below instructions to register yourself
for this meeting.

 

Please ignore this reminder email if already registered.

 

Many Thanks,

Dhruv

 

  _____  

From: owasp-delhi-bounces at lists.owasp.org
[mailto:owasp-delhi-bounces at lists.owasp.org] On Behalf Of Nitin Saxena
Sent: Tuesday, January 27, 2009 4:28 PM
To: owasp-delhi at lists.owasp.org
Subject: [Owasp-delhi] Registrations Open: OWASP Delhi Meeting January 2009

 

Dear All,

 

Registrations are on in a full swing !!

 

Incase you may have missed out on the mail due to the long weekend and have
not registered do log onto the below mentioned link for registering for this
month's meeting on January 31st, 2009.

 

 <https://www.owasp.org/index.php/OWASP_Delhi_January_Meeting_2009>
https://www.owasp.org/index.php/OWASP_Delhi_January_Meeting_2009  

 

Regards

Nitin Saxena

 

 

----- Original Message ----- 

From: Soi, Dhruv <mailto:dhruv.soi at owasp.org>  

To: owasp-delhi at lists.owasp.org 

Sent: Friday, January 23, 2009 7:59 PM

Subject: [Owasp-delhi] Registrations Open: OWASP Delhi Meeting January 2009

 

Hello All,

 

As planned, our next chapter meeting is scheduled for 31st January 2009
[Saturday] from 1500hrs till 1815hrs at Birlasoft, D-195, Sector-63, Noida -
201301. We are highly thankful to Birlasoft for sponsoring this meeting.
Here are meeting topics for your quick reference:

 

1.	Scrutinizing Session Based Attacks - Gunwant Singh 
2.	Scrutinizing International Security Standards To Mitigate the
Vulnerabilities arising through SQL Injection Attacks - Supriya Madan 
3.	Securing WCF services - Birlasoft 
4.	Technology Compliance Index (TCI) for Application Security Framework
- Birlasoft 

 

Meeting agenda has been posted at
https://www.owasp.org/index.php/OWASP_Delhi_January_Meeting_2009 to grab
further details. Registrations are open for this event and you may register
for the meeting from the same page by clicking on the registration link in
"Meeting Registration" section towards the bottom of the page. 

 

I hope everyone will have a wonderful session. See you at the meeting!

 

Many Thanks,

Dhruv


  _____  


_______________________________________________
Owasp-delhi mailing list
Owasp-delhi at lists.owasp.org
https://lists.owasp.org/mailman/listinfo/owasp-delhi

-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-delhi/attachments/20090129/0faa68e3/attachment.html 

