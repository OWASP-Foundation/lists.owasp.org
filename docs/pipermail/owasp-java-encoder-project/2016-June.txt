From mayo.merly at gmail.com  Tue Jun 28 00:31:35 2016
From: mayo.merly at gmail.com (Merly Knox)
Date: Mon, 27 Jun 2016 19:31:35 -0500
Subject: [Owasp-java-encoder-project] Java Encoder for URL help needed
Message-ID: <38BEB96A-9463-4DC5-8FF6-8E017A83F98B@gmail.com>

Hello,

I am using the Java Encoder library in order to protect an application against XSS and I have a specific question since I have a payload that gets executed in the URL. I?ve tried all different ways to encode but still have the problem:

The user enters an URL in a field and these are the 2 cases I am testing:

URL 1: https://www.google.com <https://www.google.com/> ?> I would like to redirect to this page by using <a> html element
URL 2: javascript:alert(?hi?)//www.google.com <http://www.google.com/> ?> I would like this alert popup not to execute in the browser.

so I tried  in the servlet:

Printer out = response.getWritter();
out.println (?<html><body>?);
String web = request .getParameter(?site?);  // this is where I have the URL value entered by user



I tried:
out.println(?Site : <a href=\?? + Encode.forHtmlAttribute(web) + ?\?>? + web +  ?</a>?);
?> the output works fine for URL 1 because it redirects to google site but it does not work for URL 2 because the popup gets executed.


I tried: 
out.println(?Site : <a href=\?? + Encode.forUriComponent(web) + ?\?>? + Encode.forHtml(web) +  ?</a>?);
?> the output does not work for URL 1 because it gives 404 resource not found for https://www.google.com <https://www.google.com/> when I click on the link ( it redirects to https%3A%2F%2Fwww.google.com <http://2fwww.google.com/> ) but it works fine for URL 2 because the alert popup does not execute.


I tried:  
out.println(?Site : <a href=\?? + Encode.forHtmlAttribute(web) + ?\?>? + Encode.forUri(web) +  ?</a>?);
?> the output works fine for URL 1 because it redirects to google site, but it does not work for URL 2 because the alert popup gets executed. ( I also tried Encode.forUriComponent() instead of Encode.forUri() and got same result )


Please, How could I protect the URL so the javascript popup does not execute for URL 2 and it redirects for URL1? Any help, will be greatly appreciated .


Thank you very much for your guidance and opinions.

Merly Knox 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-java-encoder-project/attachments/20160627/8162ad8a/attachment.html>

From jim.manico at owasp.org  Tue Jun 28 01:18:19 2016
From: jim.manico at owasp.org (Jim Manico)
Date: Tue, 28 Jun 2016 03:18:19 +0200
Subject: [Owasp-java-encoder-project] Java Encoder for URL help needed
In-Reply-To: <38BEB96A-9463-4DC5-8FF6-8E017A83F98B@gmail.com>
References: <38BEB96A-9463-4DC5-8FF6-8E017A83F98B@gmail.com>
Message-ID: <b91aa3e3-eccf-7d76-c84c-f286e1c86a1c@owasp.org>

To safely render untrusted URL's you need a combination of validation
(to remove evil schemes like javascript:) and escaping.


1) First validate to ensure unsafe schemes and other nonsense is
rejected. Here is some code to get you started here.

public static String validateURL(String rawURI)
throws ValidationException {

// throws URISyntaxException if invalid URI
URI uri = new URI(rawURI);

// don't allow relative uris
if (!uri.isAbsolute()) throw new ValidationException("not an absolute uri");

// don't allows javascript urls, etc?
if ((!"http".equals(uri.getScheme()) &&
(!"https".equals(uri.getScheme())) throw new ValidationException("http
or https urls are only accepted";

// who legitimately uses user-infos in their urls?!?
if (uri.getUserInfo() != null)
   throw new ValidationException("this can only be trouble");

// normalize to get rid of '.' and '..' path components
uri = uri.normalize();

// check: uri.getHost() against whitelist/blacklist?
// check: uri.getPort() for shenanigans?
return uri.toASCIIString();
}


2) Next escape that URL based on the content of use.

This looks good to me.

out.println(?Site : <a href=\?? + Encode.forHtmlAttribute(web) + ?\?>? +
web +  ?</a>?);

Aloha, Jim

On 6/28/16 2:31 AM, Merly Knox wrote:
> Hello,
>
> I am using the Java Encoder library in order to protect an application
> against XSS and I have a specific question since I have a payload that
> gets executed in the URL. I?ve tried all different ways to encode but
> still have the problem:
>
> The user enters an URL in a field and these are the 2 cases I am testing:
>
> URL 1: https://www.google.com <https://www.google.com/> ?> I would
> like to redirect to this page by using <a> html element
> URL 2: javascript:alert(?hi?)//www.google.com
> <http://www.google.com/> ?> I would like this alert popup not to
> execute in the browser.
>
> so I tried  in the servlet:
>
> Printer out = response.getWritter();
> out.println (?<html><body>?);
> String web = request .getParameter(?site?);  // this is where I have
> the URL value entered by user
>
>
>
> I tried:
> out.println(?Site : <a href=\?? + Encode.forHtmlAttribute(web) + ?\?>?
> + web +  ?</a>?);
> ?> the output works fine for URL 1 because it redirects to google site
> but it does not work for URL 2 because the popup gets executed.
>
>
> I tried: 
> out.println(?Site : <a href=\?? + Encode.forUriComponent(web) + ?\?>?
> + Encode.forHtml(web) +  ?</a>?);
> ?> the output does not work for URL 1 because it gives 404 resource
> not found for https://www.google.com <https://www.google.com/> when I
> click on the link ( it redirects to https%3A%2F%2Fwww.google.com
> <http://2fwww.google.com/> ) but it works fine for URL 2 because the
> alert popup does not execute.
>
>
> I tried:  
> out.println(?Site : <a href=\?? + Encode.forHtmlAttribute(web) + ?\?>?
> + Encode.forUri(web) +  ?</a>?);
> ?> the output works fine for URL 1 because it redirects to google
> site, but it does not work for URL 2 because the alert popup gets
> executed. ( I also tried Encode.forUriComponent() instead of
> Encode.forUri() and got same result )
>
>
> Please, How could I protect the URL so the javascript popup does not
> execute for URL 2 and it redirects for URL1? Any help, will be greatly
> appreciated .
>
>
> Thank you very much for your guidance and opinions.
>
> Merly Knox 
>
>
> _______________________________________________
> Owasp-java-encoder-project mailing list
> Owasp-java-encoder-project at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-java-encoder-project

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-java-encoder-project/attachments/20160628/66d5bdfc/attachment.html>

From mayo.merly at gmail.com  Tue Jun 28 02:59:22 2016
From: mayo.merly at gmail.com (Merly Knox)
Date: Mon, 27 Jun 2016 21:59:22 -0500
Subject: [Owasp-java-encoder-project] Java Encoder for URL help needed
In-Reply-To: <b91aa3e3-eccf-7d76-c84c-f286e1c86a1c@owasp.org>
References: <38BEB96A-9463-4DC5-8FF6-8E017A83F98B@gmail.com>
	<b91aa3e3-eccf-7d76-c84c-f286e1c86a1c@owasp.org>
Message-ID: <636CC618-39F0-4C2B-BEC0-54262A382EAE@gmail.com>

Thank you very much for the help, yes, I think combining input validation and output encoding is the best way to protect against XSS 
I will use your recommendation.

Aloha 
Merly

> On Jun 27, 2016, at 8:18 PM, Jim Manico <jim.manico at owasp.org> wrote:
> 
> To safely render untrusted URL's you need a combination of validation (to remove evil schemes like javascript:) and escaping.
> 
> 
> 1) First validate to ensure unsafe schemes and other nonsense is rejected. Here is some code to get you started here.
> 
> public static String validateURL(String rawURI)
> throws ValidationException {
> 
> // throws URISyntaxException if invalid URI
> URI uri = new URI(rawURI); 
> 
> // don't allow relative uris
> if (!uri.isAbsolute()) throw new ValidationException("not an absolute uri");
> 
> // don't allows javascript urls, etc?
> if ((!"http".equals(uri.getScheme()) && (!"https".equals(uri.getScheme())) throw new ValidationException("http or https urls are only accepted";
> 
> // who legitimately uses user-infos in their urls?!?
> if (uri.getUserInfo() != null)
>    throw new ValidationException("this can only be trouble");
> 
> // normalize to get rid of '.' and '..' path components
> uri = uri.normalize();
> 
> // check: uri.getHost() against whitelist/blacklist?
> // check: uri.getPort() for shenanigans?
> return uri.toASCIIString();
> }
> 
> 
> 2) Next escape that URL based on the content of use.
> 
> This looks good to me.
> 
> out.println(?Site : <a href=\?? + Encode.forHtmlAttribute(web) + ?\?>? + web +  ?</a>?);
> 
> Aloha, Jim
> 
> On 6/28/16 2:31 AM, Merly Knox wrote:
>> Hello,
>> 
>> I am using the Java Encoder library in order to protect an application against XSS and I have a specific question since I have a payload that gets executed in the URL. I?ve tried all different ways to encode but still have the problem:
>> 
>> The user enters an URL in a field and these are the 2 cases I am testing:
>> 
>> URL 1:  <https://www.google.com/>https://www.google.com <https://www.google.com/> ?> I would like to redirect to this page by using <a> html element
>> URL 2: javascript:alert(?hi?)// <javascript:alert(%E2%80%98hi%E2%80%99)//>www.google.com <http://www.google.com/> ?> I would like this alert popup not to execute in the browser.
>> 
>> so I tried  in the servlet:
>> 
>> Printer out = response.getWritter();
>> out.println (?<html><body>?);
>> String web = request .getParameter(?site?);  // this is where I have the URL value entered by user
>> 
>> 
>> 
>> I tried:
>> out.println(?Site : <a href=\?? + Encode.forHtmlAttribute(web) + ?\?>? + web +  ?</a>?);
>> ?> the output works fine for URL 1 because it redirects to google site but it does not work for URL 2 because the popup gets executed.
>> 
>> 
>> I tried: 
>> out.println(?Site : <a href=\?? + Encode.forUriComponent(web) + ?\?>? + Encode.forHtml(web) +  ?</a>?);
>> ?> the output does not work for URL 1 because it gives 404 resource not found for  <https://www.google.com/>https://www.google.com <https://www.google.com/> when I click on the link ( it redirects to https%3A%2F%2Fwww.google.com <http://2fwww.google.com/> ) but it works fine for URL 2 because the alert popup does not execute.
>> 
>> 
>> I tried:  
>> out.println(?Site : <a href=\?? + Encode.forHtmlAttribute(web) + ?\?>? + Encode.forUri(web) +  ?</a>?);
>> ?> the output works fine for URL 1 because it redirects to google site, but it does not work for URL 2 because the alert popup gets executed. ( I also tried Encode.forUriComponent() instead of Encode.forUri() and got same result )
>> 
>> 
>> Please, How could I protect the URL so the javascript popup does not execute for URL 2 and it redirects for URL1? Any help, will be greatly appreciated .
>> 
>> 
>> Thank you very much for your guidance and opinions.
>> 
>> Merly Knox 
>> 
>> 
>> _______________________________________________
>> Owasp-java-encoder-project mailing list
>> Owasp-java-encoder-project at lists.owasp.org <mailto:Owasp-java-encoder-project at lists.owasp.org>
>> https://lists.owasp.org/mailman/listinfo/owasp-java-encoder-project <https://lists.owasp.org/mailman/listinfo/owasp-java-encoder-project>
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-java-encoder-project/attachments/20160627/efb6d549/attachment-0001.html>

