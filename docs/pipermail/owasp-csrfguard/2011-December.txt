From afomin at jaspersoft.com  Fri Dec  2 11:59:05 2011
From: afomin at jaspersoft.com (Anton Fomin)
Date: Fri, 2 Dec 2011 18:59:05 +0200
Subject: [Owasp-csrfguard] Which code is most stable?
Message-ID: <CAGzcv2aCHAXy8NZ3=TcOXrYCMDzi=-bwha2DpdiV1G7MtBhUig@mail.gmail.com>

Hello CSRF Guard Community!

I'm wondering whether the latest CSRF code from github is enough stable and
intended to be used out of the box, or would you suggest to use OWASP
CSRFGuard 3.0.0.503 (ALPHA) Bug fix release, dated February 17, 2011?

Thanks,
Anton.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-csrfguard/attachments/20111202/11cb56e1/attachment.html 

From afomin at jaspersoft.com  Fri Dec  2 12:36:01 2011
From: afomin at jaspersoft.com (Anton Fomin)
Date: Fri, 2 Dec 2011 19:36:01 +0200
Subject: [Owasp-csrfguard] Why the CsrfGuard class is final?
Message-ID: <CAGzcv2YVXBGVEOKNGCT_FaF6neGodP-BB22+9-O40ke3bw2EJg@mail.gmail.com>

Hi,

I have need for change some behavior inside CsrfGuard class, I wanted to
extend it, but I noticed that class is declared final.

I have no other way than change the source code of the CSRFGuard jar (I'm
using Owasp-CsrfGuard-3.0.0.503.tar.gz) and thus I'm wondering whether
there was some certain reason for making that class final, may be some
convention or something else?

Best regards,
Anton.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-csrfguard/attachments/20111202/d7d63a03/attachment.html 

From eric.sheridan at owasp.org  Thu Dec 15 21:00:03 2011
From: eric.sheridan at owasp.org (eric sheridan)
Date: Thu, 15 Dec 2011 16:00:03 -0500
Subject: [Owasp-csrfguard] javascript solution stinks
In-Reply-To: <BLU148-W30B5FE646E384441603394E9D70@phx.gbl>
References: <BLU148-W30B5FE646E384441603394E9D70@phx.gbl>
Message-ID: <CAOaxbhKHRAtNmGexuU+v91eRtYa1qv0jc4yLPXYXo9KNPONG8g@mail.gmail.com>

Sam,

Thank you for insightful contribution to the effort. I love how you
support your thoughts with strong empirical evidence and field
expertise. It is quite difficult to manage a single JavaScript file
consisting of about 100 line of code, especially across all these wild
crazy browsers.

Thank you and goodbye...

-Eric

On Tue, Nov 1, 2011 at 11:01 AM, Sam Theman <xray316 at hotmail.com> wrote:
> why even bother with a javascript solution? How stupid... what a
> browser?maintenance?nightmare...
>
> _______________________________________________
> Owasp-csrfguard mailing list
> Owasp-csrfguard at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-csrfguard
>

From gautamashishkumar at gmail.com  Mon Dec 19 12:19:36 2011
From: gautamashishkumar at gmail.com (ashish kumar Gautam)
Date: Mon, 19 Dec 2011 17:49:36 +0530
Subject: [Owasp-csrfguard] Getting error in CSRF Guard Test Project
Message-ID: <CACtUEVnmiBh=rwHPN8udKUZ7pK3Hx5uKBBGzOhFnLM3EY4ZtmQ@mail.gmail.com>

Dear CSRF GUARD USERS

I am trying to run csrf guard test project .
i have getting following error message on console

Console MSG:-

[Mon Dec 19 16:10:44 IST 2011] [Info] CsrfGuard analyzing request
/csrfgurdtest/
[Mon Dec 19 16:10:44 IST 2011] [Info] CsrfGuard analyzing request
/csrfgurdtest/index.html
[Mon Dec 19 16:10:47 IST 2011] [Info] CsrfGuard analyzing request
/csrfgurdtest/javascript.html
[Mon Dec 19 16:10:47 IST 2011] [Error] potential cross-site request forgery
(CSRF) attack thwarted (user:<anonymous>, ip:0:0:0:0:0:0:0:1,
uri:/csrfgurdtest/javascript.html, error:required token is missing from the
request)
[Mon Dec 19 16:10:47 IST 2011] [Info] CsrfGuard skipping redirect token
injection for location /Owasp.CsrfGuard.Test/error.html

web.xml file :

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="
http://java.sun.com/xml/ns/javaee" xmlns:web="
http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="
http://java.sun.com/xml/ns/javaee
http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID"
version="2.5">
<display-name>Owasp.CsrfGuard.Test</display-name>
 <welcome-file-list>
<welcome-file>index.html</welcome-file>
<welcome-file>index.htm</welcome-file>
<welcome-file>index.jsp</welcome-file>
<welcome-file>default.html</welcome-file>
<welcome-file>default.htm</welcome-file>
<welcome-file>default.jsp</welcome-file>
</welcome-file-list>
 <context-param>
<param-name>Owasp.CsrfGuard.Config</param-name>
<param-value>WEB-INF/Owasp.CsrfGuard.properties</param-value>
</context-param>
 <context-param>
<param-name>Owasp.CsrfGuard.Config.Print</param-name>
<param-value>true</param-value>
</context-param>
 <listener>
<listener-class>org.owasp.csrfguard.CsrfGuardListener</listener-class>
</listener>
 <filter>
<filter-name>CSRFGuard</filter-name>
<filter-class>org.owasp.csrfguard.CsrfGuardFilter</filter-class>
</filter>
 <filter-mapping>
<filter-name>CSRFGuard</filter-name>
<url-pattern>/*</url-pattern>
</filter-mapping>

<servlet>
<servlet-name>JavaScriptServlet</servlet-name>
<servlet-class>org.owasp.csrfguard.servlet.JavaScriptServlet</servlet-class>
<init-param>
<param-name>source-file</param-name>
<param-value>WEB-INF/Owasp.CsrfGuard.js</param-value>
</init-param>
<init-param>
<param-name>inject-into-forms</param-name>
<param-value>true</param-value>
</init-param>
<init-param>
<param-name>inject-into-attributes</param-name>
<param-value>true</param-value>
</init-param>
<init-param>
<param-name>domain-strict</param-name>
<param-value>true</param-value>
</init-param>
<init-param>
<param-name>referer-pattern</param-name>
 <param-value>.*10.1.10.129.*</param-value>
</init-param>
<init-param>
<param-name>x-requested-with</param-name>
<param-value>OWASP CSRFGuard Project</param-value>
</init-param>
</servlet>

<servlet-mapping>
<servlet-name>JavaScriptServlet</servlet-name>
<url-pattern>/JavaScriptServlet</url-pattern>
</servlet-mapping>


<servlet>
<servlet-name>Hello</servlet-name>
<servlet-class>mypack.Hello</servlet-class>
</servlet>
 <servlet-mapping>
<servlet-name>Hello</servlet-name>
<url-pattern>/Hello</url-pattern>
</servlet-mapping>

<servlet>
<description></description>
<display-name>HelloServlet</display-name>
<servlet-name>HelloServlet</servlet-name>
<servlet-class>org.owasp.csrfguard.test.HelloServlet</servlet-class>
</servlet>
 <servlet-mapping>
<servlet-name>HelloServlet</servlet-name>
<url-pattern>/HelloServlet</url-pattern>
</servlet-mapping>
</web-app>


Owasp.CsrfGuard.properties File

# The OWASP CSRFGuard Project, BSD License
# Eric Sheridan (eric.sheridan at owasp.org), Copyright (c) 2011
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of OWASP nor the names of its contributors may be used
#    to endorse or promote products derived from this software without
specific
#    prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Logger
#
# The logger property (org.owasp.csrfguard.Logger) defines the qualified
class name of
# the object responsible for processing all log messages produced by
CSRFGuard. The default
# CSRFGuard logger is org.owasp.csrfguard.log.ConsoleLogger. This class
logs all messages
# to System.out which JavaEE application servers redirect to a vendor
specific log file.
# Developers can customize the logging behavior of CSRFGuard by
implementing the
# org.owasp.csrfguard.log.ILogger interface and setting the logger property
to the new
# logger's qualified class name. The following configuration snippet
instructs OWASP CSRFGuard
# to capture all log messages to the console:
#
# org.owasp.csrfguard.Logger=org.owasp.csrfguard.log.ConsoleLogger
org.owasp.csrfguard.Logger=org.owasp.csrfguard.log.ConsoleLogger

# New Token Landing Page
#
# The new token landing page property
(org.owasp.csrfguard.NewTokenLandingPage) defines where
# to send a user if the token is being generated for the first time, and
the use new token landing
# page boolean property (org.owasp.csrfguard.UseNewTokenLandingPage)
determines if any redirect happens.
# UseNewTokenLandingPage defaults to false if NewTokenLandingPage is not
specified, and to true
# if it is specified.. If UseNewTokenLandingPage is set true then this
request is generated
# using auto-posting forms and will only contain the CSRF prevention token
parameter, if
# applicable. All query-string or form parameters sent with the original
request will be
# discarded. If this property is not defined, CSRFGuard will instead
auto-post the user to the
# original context and servlet path. The following configuration snippet
instructs OWASP CSRFGuard to
# redirect the user to /Owasp.CsrfGuard.Test/index.html when the user
visits a protected resource
# without having a corresponding CSRF token present in the HttpSession
object:
#
# org.owasp.csrfguard.NewTokenLandingPage=/Owasp.CsrfGuard.Test/index.html

# Protected Methods
#
# The protected methods property (org.owasp.csrfguard.ProtectedMethods)
defines a comma
# separated list of HTTP request methods that should be protected by
CSRFGuard. The default
# list is an empty list which will cause all HTTP methods to be protected,
thus preserving
# legacy behavior. This setting allows the user to inform CSRFGuard that
only requests of the
# given types should be considered for protection. All HTTP mehtods not in
the list will be
# considered safe (i.e. view only / unable to modify data). This should be
used only when the
# user has concrete knowledge that all requests made via methods not in the
list
# are safe (i.e. do not apply an action to any data) since it can actually
introduce new
# security vulnerabilities. For example: the user thinks that all
actionable requests are
# only available by POST requests when in fact some are available via GET
requests. If the
# user has excluded GET requests from the list then they have introduced a
vulnerability.
# The following configuration snippet instructs OWASP CSRFGuard to protect
only the POST,
# PUT, and DELETE HTTP methods.
#
org.owasp.csrfguard.ProtectedMethods=POST,PUT,DELETE,GET

# Unique Per-Page Tokens
#
# The unique token per-page property (org.owasp.csrfguard.TokenPerPage) is
a boolean value that
# determines if CSRFGuard should make use of unique per-page (i.e. URI)
prevention tokens as
# opposed to unique per-session prevention tokens. When a user requests a
protected resource,
# CSRFGuard will determine if a page specific token has been previously
generated. If a page
# specific token has not yet been previously generated, CSRFGuard will
verify the request was
# submitted with the per-session token intact. After verifying the presence
of the per-session token,
# CSRFGuard will create a page specific token that is required for all
subsequent requests to the
# associated resource. The per-session CSRF token can only be used when
requesting a resource for
# the first time. All subsequent requests must have the per-page token
intact or the request will
# be treated as a CSRF attack. Use of the unique token per page property is
currently experimental
# but provides a significant amount of improved security. Consider the
exposure of a CSRF token using
# the legacy unique per-session model. Exposure of this token facilitates
the attacker's ability to
# carry out a CSRF attack against the victim's active session for any
resource exposed by the web
# application. Now consider the exposure of a CSRF token using the
experimental unique token per-page
# model. Exposure of this token would only allow the attacker to carry out
a CSRF attack against the
# victim's active session for a small subset of resources exposed by the
web application. Use of the
# unique token per-page property is a strong defense in depth strategy
significantly reducing the
# impact of exposed CSRF prevention tokens. The following configuration
snippet instructs OWASP
# CSRFGuard to utilize the unique token per-page model:
#


# org.owasp.csrfguard.TokenPerPage=true
org.owasp.csrfguard.TokenPerPage=true

# Token Rotation
#
# The rotate token property (org.owasp.csrfguard.Rotate) is a boolean value
that determines if
# CSRFGuard should generate and utilize a new token after verifying the
previous token. Rotation
# helps minimize the window of opportunity an attacker has to leverage the
victim's stolen token
# in a targeted CSRF attack. However, this functionality generally causes
navigation problems in
# most applications. Specifically, the 'Back' button in the browser will
often cease to function
# properly. When a user hits the 'Back' button and interacts with the HTML,
the browser may submit
# an old token causing CSRFGuard to incorrectly believe this request is a
CSRF attack in progress
# (i.e. a 'false positive'). Users can prevent this scenario by preventing
the caching of HTML pages
# containing FORM submissions using the cache-control header. However, this
may also introduce
# performance problems as the browser will have to request HTML on a more
frequent basis. The following
# configuration snippet enables token rotation:
#
# org.owasp.csrfguard.Rotate=true

# Ajax and XMLHttpRequest Support
#
# The Ajax property (org.owasp.csrfguard.Ajax) is a boolean value that
indicates whether or not OWASP
# CSRFGuard should support the injection and verification of unique
per-session prevention tokens for
# XMLHttpRequests. To leverage Ajax support, the user must not only set
this property to true but must
# also reference the JavaScript DOM Manipulation code using a script
element. This dynamic script will
# override the send method of the XMLHttpRequest object to ensure the
submission of an X-Requested-With
# header name value pair coupled with the submission of a custom header
name value pair for each request.
# The name of the custom header is the value of the token name property and
the value of the header is
# always the unique per-session token value. This custom header is
analogous to the HTTP parameter name
# value pairs submitted via traditional GET and POST requests. If the
X-Requested-With header was sent
# in the HTTP request, then CSRFGuard will look for the presence and ensure
the validity of the unique
# per-session token in the custom header name value pair. Note that
verification of these headers takes
# precedence over verification of the CSRF token supplied as an HTTP
parameter. More specifically,
# CSRFGuard does not verify the presence of the CSRF token if the Ajax
support property is enabled and
# the corresponding X-Requested-With and custom headers are embedded within
the request. The following
# configuration snippet instructs OWASP CSRFGuard to support Ajax requests
by verifying the presence and
# correctness of the X-Requested-With and custom headers:
#
# org.owasp.csrfguard.Ajax=true
org.owasp.csrfguard.Ajax=true

# Unprotected Pages:
#
# The unprotected pages property (org.owasp.csrfguard.unprotected.*)
defines a series of pages that
# should not be protected by CSRFGuard. Such configurations are useful when
the CsrfGuardFilter is
# aggressively mapped (ex: /*). The syntax of the property name is
org.owasp.csrfguard.unprotected.[PageName],
# where PageName is some arbitrary identifier that can be used to reference
a resource. The syntax of
# defining the uri of unprotected pages is the same as the syntax used by
the JavaEE container for uri mapping.
# Specifically, CSRFGuard will identify the first match (if any) between
the requested uri and an unprotected
# page in order of declaration. Match criteria is as follows:
#
# Case 1: exact match between request uri and unprotected page
# Case 2: longest path prefix match, beginning / and ending /*
# Case 3: extension match, beginning *.
# Default: requested resource must be validated by CSRFGuard
#
# The following code snippet illustrates the three use cases over four
examples. The first two examples
# (Tag and JavaScriptServlet) look for direct URI matches. The third
example (Html) looks for all resources
# ending in a .html extension. The last example (Public) looks for all
resources prefixed with the URI path /MySite/Public/*.
#
# org.owasp.csrfguard.unprotected.Tag=/Owasp.CsrfGuard.Test/tag.jsp
#
org.owasp.csrfguard.unprotected.JavaScriptServlet=/Owasp.CsrfGuard.Test/JavaScriptServlet
# org.owasp.csrfguard.unprotected.Html=*.html
# org.owasp.csrfguard.unprotected.Public=/MySite/Public/*
org.owasp.csrfguard.unprotected.Default=/Owasp.CsrfGuard.Test/
org.owasp.csrfguard.unprotected.Upload=/Owasp.CsrfGuard.Test/upload.html
org.owasp.csrfguard.unprotected.JavaScriptServlet=/Owasp.CsrfGuard.Test/JavaScriptServlet
org.owasp.csrfguard.unprotected.Ajax=/Owasp.CsrfGuard.Test/ajax.html
org.owasp.csrfguard.unprotected.Error=/Owasp.CsrfGuard.Test/error.html
org.owasp.csrfguard.unprotected.Index=/Owasp.CsrfGuard.Test/index.html
org.owasp.csrfguard.unprotected.JavaScript=/Owasp.CsrfGuard.Test/javascript.html
org.owasp.csrfguard.unprotected.Tag=/Owasp.CsrfGuard.Test/tag.jsp
org.owasp.csrfguard.unprotected.Redirect=/Owasp.CsrfGuard.Test/redirect.jsp
org.owasp.csrfguard.unprotected.Forward=/Owasp.CsrfGuard.Test/forward.jsp
org.owasp.csrfguard.unprotected.Session=/Owasp.CsrfGuard.Test/session.jsp

# Actions: Responding to Attacks
#
# The actions directive (org.owasp.csrfguard.action.*) gives the user the
ability to specify one or more
# actions that should be invoked when a CSRF attack is detected. Every
action must implement the
# org.owasp.csrfguard.action.IAction interface either directly or
indirectly through the
# org.owasp.csrfguard.action.AbstractAction helper class. Many actions
accept parameters that can be specified
# along with the action class declaration. These parameters are consumed at
runtime and impact the behavior of
# the associated action.
#
# The syntax for defining and configuring CSRFGuard actions is relatively
straight forward. Let us assume we wish
# to redirect the user to a default page when a CSRF attack is detected. A
redirect action already exists within
# the CSRFGuard bundle and is available via the class name
org.owasp.csrfguard.actions.Redirect. In order to enable
# this action, we capture the following declaration in the
Owasp.CsrfGuard.properties file:
#
# syntax: org.owasp.csrfguard.action.[actionName]=[className]
# example:
org.owasp.csrfguard.action.class.Redirect=org.owasp.csrfguard.actions.Redirect
#
# The aforementioned directive declares an action called "Redirect" (i.e.
[actionName]) referencing the Java class
# "org.owasp.csrfguard.actions.Redirect" (i.e. [className]). Anytime a CSRF
attack is detected, the Redirect action
# will be executed. You may be asking yourself, "but how do I specify where
the user is redirected?"; this is where
# action parameters come into play. In order to specify the redirect
location, we capture the following declaration
# in the Owasp.CsrfGuard.properties file:
#
# syntax:
org.owasp.csrfguard.action.[actionName].[parameterName]=[parameterValue]
# example:
org.owasp.csrfguard.action.Redirect.ErrorPage=/Owasp.CsrfGuard.Test/error.html
#
# The aforementioned directive declares an action parameter called
"ErrorPage" (i.e. [parameterName]) with the value
# of "/Owasp.CsrfGuard.Test/error.html" (i.e. [parameterValue]) for the
action "Redirect" (i.e. [actionName]). The
# Redirect action expects the "ErrorPage" parameter to be defined and will
redirect the user to this location when
# an attack is detected.
#
#org.owasp.csrfguard.action.Empty=org.owasp.csrfguard.action.Empty
org.owasp.csrfguard.action.Log=org.owasp.csrfguard.action.Log
org.owasp.csrfguard.action.Log.Message=potential cross-site request forgery
(CSRF) attack thwarted (user:%user%, ip:%remote_ip%, uri:%request_uri%,
error:%exception_message%)
#org.owasp.csrfguard.action.Invalidate=org.owasp.csrfguard.action.Invalidate
org.owasp.csrfguard.action.Redirect=org.owasp.csrfguard.action.Redirect
org.owasp.csrfguard.action.Redirect.Page=/Owasp.CsrfGuard.Test/error.html
#org.owasp.csrfguard.action.RequestAttribute=org.owasp.csrfguard.action.RequestAttribute
#org.owasp.csrfguard.action.RequestAttribute.AttributeName=Owasp_CsrfGuard_Exception_Key
org.owasp.csrfguard.action.Rotate=org.owasp.csrfguard.action.Rotate
#org.owasp.csrfguard.action.SessionAttribute=org.owasp.csrfguard.action.SessionAttribute
#org.owasp.csrfguard.action.SessionAttribute.AttributeName=Owasp_CsrfGuard_Exception_Key

# Token Name
#
# The token name property (org.owasp.csrfguard.TokenName) defines the name
of the HTTP parameter
# to contain the value of the OWASP CSRFGuard token for each request. The
following configuration
# snippet sets the CSRFGuard token parameter name to the value
OWASP_CSRFTOKEN:
#
# org.owasp.csrfguard.TokenName=OWASP_CSRFTOKEN
org.owasp.csrfguard.TokenName=OWASP_CSRFTOKEN

# Session Key
#
# The session key property (org.owasp.csrfguard.SessionKey) defines the
string literal used to save
# and lookup the CSRFGuard token from the session. This value is used by
the filter and the tag
# libraries to retrieve and set the token value in the session. Developers
can use this key to
# programmatically lookup the token within their own code. The following
configuration snippet sets
# the session key to the value OWASP_CSRFTOKEN:
#
# org.owasp.csrfguard.SessionKey=OWASP_CSRFTOKEN
org.owasp.csrfguard.SessionKey=OWASP_CSRFTOKEN

# Token Length
#
# The token length property (org.owasp.csrfguard.TokenLength) defines the
number of characters that
# should be found within the CSRFGuard token. Note that characters are
delimited by dashes (-) in groups
# of four. For cosmetic reasons, users are encourage to ensure the token
length is divisible by four.
# The following configuration snippet sets the token length property to 32
characters:
#
# org.owasp.csrfguard.TokenLength=32
org.owasp.csrfguard.TokenLength=32

# Pseudo-random Number Generator
#
# The pseudo-random number generator property (org.owasp.csrfguard.PRNG)
defines what PRNG should be used
# to generate the OWASP CSRFGuard token. Always ensure this value
references a cryptographically strong
# pseudo-random number generator algorithm. The following configuration
snippet sets the pseudo-random number
# generator to SHA1PRNG:
#
# org.owasp.csrfguard.PRNG=SHA1PRNG
org.owasp.csrfguard.PRNG=SHA1PRNG




-- 
Best regards,
Ashish K. Gautam
NIC, Delhi India
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-csrfguard/attachments/20111219/03fef273/attachment-0001.html>

From afomin at jaspersoft.com  Mon Dec 19 15:00:01 2011
From: afomin at jaspersoft.com (Anton Fomin)
Date: Mon, 19 Dec 2011 17:00:01 +0200
Subject: [Owasp-csrfguard] Getting error in CSRF Guard Test Project
Message-ID: <CAGzcv2Zq5y_kMPAn7Un07JrD8gGFM4bhA2qHaZbxKy3s0uFMBw@mail.gmail.com>

Hi Ashish K. Gautam,

As message indicated, csrf token wan't sent with request. I think you need
to debug Owasp.CsrfGuard.js and your DOM model to see why token is not set
to the request. Please note, that Owasp.CsrfGuard.js sets tokens for ajax
and html requests differently.

Anton.

2011/12/19 <owasp-csrfguard-request at owasp.org>

> Send Owasp-csrfguard mailing list submissions to
>        owasp-csrfguard at lists.owasp.org
>
> To subscribe or unsubscribe via the World Wide Web, visit
>        https://lists.owasp.org/mailman/listinfo/owasp-csrfguard
> or, via email, send a message with subject or body 'help' to
>        owasp-csrfguard-request at lists.owasp.org
>
> You can reach the person managing the list at
>        owasp-csrfguard-owner at lists.owasp.org
>
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of Owasp-csrfguard digest..."
>
> Today's Topics:
>
>   1. Getting error in CSRF Guard Test Project (ashish kumar Gautam)
>
>
> ---------- ???????????? ????????? ----------
> From: ashish kumar Gautam <gautamashishkumar at gmail.com>
> To: owasp-csrfguard at lists.owasp.org, owasp-csrfguard-request at owasp.org,
> Jeff Williams <jeff.williams at aspectsecurity.com>, Jim Manico <
> jim.manico at owasp.org>
> Cc:
> Date: Mon, 19 Dec 2011 17:49:36 +0530
> Subject: [Owasp-csrfguard] Getting error in CSRF Guard Test Project
> Dear CSRF GUARD USERS
>
> I am trying to run csrf guard test project .
> i have getting following error message on console
>
> Console MSG:-
>
> [Mon Dec 19 16:10:44 IST 2011] [Info] CsrfGuard analyzing request
> /csrfgurdtest/
> [Mon Dec 19 16:10:44 IST 2011] [Info] CsrfGuard analyzing request
> /csrfgurdtest/index.html
> [Mon Dec 19 16:10:47 IST 2011] [Info] CsrfGuard analyzing request
> /csrfgurdtest/javascript.html
> [Mon Dec 19 16:10:47 IST 2011] [Error] potential cross-site request
> forgery (CSRF) attack thwarted (user:<anonymous>, ip:0:0:0:0:0:0:0:1,
> uri:/csrfgurdtest/javascript.html, error:required token is missing from the
> request)
> [Mon Dec 19 16:10:47 IST 2011] [Info] CsrfGuard skipping redirect token
> injection for location /Owasp.CsrfGuard.Test/error.html
>
> web.xml file :
>
> <?xml version="1.0" encoding="UTF-8"?>
> <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="
> http://java.sun.com/xml/ns/javaee" xmlns:web="
> http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="
> http://java.sun.com/xml/ns/javaee
> http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID"
> version="2.5">
>  <display-name>Owasp.CsrfGuard.Test</display-name>
>  <welcome-file-list>
> <welcome-file>index.html</welcome-file>
>  <welcome-file>index.htm</welcome-file>
> <welcome-file>index.jsp</welcome-file>
>  <welcome-file>default.html</welcome-file>
> <welcome-file>default.htm</welcome-file>
>  <welcome-file>default.jsp</welcome-file>
> </welcome-file-list>
>  <context-param>
>  <param-name>Owasp.CsrfGuard.Config</param-name>
> <param-value>WEB-INF/Owasp.CsrfGuard.properties</param-value>
>  </context-param>
>  <context-param>
> <param-name>Owasp.CsrfGuard.Config.Print</param-name>
>  <param-value>true</param-value>
> </context-param>
>  <listener>
>  <listener-class>org.owasp.csrfguard.CsrfGuardListener</listener-class>
> </listener>
>  <filter>
>  <filter-name>CSRFGuard</filter-name>
> <filter-class>org.owasp.csrfguard.CsrfGuardFilter</filter-class>
>  </filter>
>  <filter-mapping>
> <filter-name>CSRFGuard</filter-name>
>  <url-pattern>/*</url-pattern>
> </filter-mapping>
>
> <servlet>
> <servlet-name>JavaScriptServlet</servlet-name>
>
> <servlet-class>org.owasp.csrfguard.servlet.JavaScriptServlet</servlet-class>
> <init-param>
>  <param-name>source-file</param-name>
> <param-value>WEB-INF/Owasp.CsrfGuard.js</param-value>
>  </init-param>
> <init-param>
>  <param-name>inject-into-forms</param-name>
> <param-value>true</param-value>
>  </init-param>
> <init-param>
>  <param-name>inject-into-attributes</param-name>
> <param-value>true</param-value>
>  </init-param>
> <init-param>
>  <param-name>domain-strict</param-name>
> <param-value>true</param-value>
>  </init-param>
> <init-param>
>  <param-name>referer-pattern</param-name>
>  <param-value>.*10.1.10.129.*</param-value>
>  </init-param>
> <init-param>
>  <param-name>x-requested-with</param-name>
> <param-value>OWASP CSRFGuard Project</param-value>
>  </init-param>
> </servlet>
>
> <servlet-mapping>
>  <servlet-name>JavaScriptServlet</servlet-name>
> <url-pattern>/JavaScriptServlet</url-pattern>
>  </servlet-mapping>
>
>
> <servlet>
> <servlet-name>Hello</servlet-name>
>  <servlet-class>mypack.Hello</servlet-class>
> </servlet>
>  <servlet-mapping>
>  <servlet-name>Hello</servlet-name>
> <url-pattern>/Hello</url-pattern>
>  </servlet-mapping>
>
> <servlet>
> <description></description>
>  <display-name>HelloServlet</display-name>
> <servlet-name>HelloServlet</servlet-name>
>  <servlet-class>org.owasp.csrfguard.test.HelloServlet</servlet-class>
> </servlet>
>  <servlet-mapping>
>  <servlet-name>HelloServlet</servlet-name>
> <url-pattern>/HelloServlet</url-pattern>
>  </servlet-mapping>
> </web-app>
>
>
> Owasp.CsrfGuard.properties File
>
> # The OWASP CSRFGuard Project, BSD License
> # Eric Sheridan (eric.sheridan at owasp.org), Copyright (c) 2011
> # All rights reserved.
> #
> # Redistribution and use in source and binary forms, with or without
> # modification, are permitted provided that the following conditions are
> met:
> #
> # 1. Redistributions of source code must retain the above copyright notice,
> #    this list of conditions and the following disclaimer.
> # 2. Redistributions in binary form must reproduce the above copyright
> #    notice, this list of conditions and the following disclaimer in the
> #    documentation and/or other materials provided with the distribution.
> # 3. Neither the name of OWASP nor the names of its contributors may be
> used
> #    to endorse or promote products derived from this software without
> specific
> #    prior written permission.
> #
> # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
> IS"
> # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
> # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
> PURPOSE
> # ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
> BE LIABLE
> # FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
> CONSEQUENTIAL DAMAGES
> # (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
> SERVICES;
> # LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
> AND ON
> # ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
> # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
> THIS
> # SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
>
> # Logger
> #
> # The logger property (org.owasp.csrfguard.Logger) defines the qualified
> class name of
> # the object responsible for processing all log messages produced by
> CSRFGuard. The default
> # CSRFGuard logger is org.owasp.csrfguard.log.ConsoleLogger. This class
> logs all messages
> # to System.out which JavaEE application servers redirect to a vendor
> specific log file.
> # Developers can customize the logging behavior of CSRFGuard by
> implementing the
> # org.owasp.csrfguard.log.ILogger interface and setting the logger
> property to the new
> # logger's qualified class name. The following configuration snippet
> instructs OWASP CSRFGuard
> # to capture all log messages to the console:
> #
> # org.owasp.csrfguard.Logger=org.owasp.csrfguard.log.ConsoleLogger
> org.owasp.csrfguard.Logger=org.owasp.csrfguard.log.ConsoleLogger
>
> # New Token Landing Page
> #
> # The new token landing page property
> (org.owasp.csrfguard.NewTokenLandingPage) defines where
> # to send a user if the token is being generated for the first time, and
> the use new token landing
> # page boolean property (org.owasp.csrfguard.UseNewTokenLandingPage)
> determines if any redirect happens.
> # UseNewTokenLandingPage defaults to false if NewTokenLandingPage is not
> specified, and to true
> # if it is specified.. If UseNewTokenLandingPage is set true then this
> request is generated
> # using auto-posting forms and will only contain the CSRF prevention token
> parameter, if
> # applicable. All query-string or form parameters sent with the original
> request will be
> # discarded. If this property is not defined, CSRFGuard will instead
> auto-post the user to the
> # original context and servlet path. The following configuration snippet
> instructs OWASP CSRFGuard to
> # redirect the user to /Owasp.CsrfGuard.Test/index.html when the user
> visits a protected resource
> # without having a corresponding CSRF token present in the HttpSession
> object:
> #
> # org.owasp.csrfguard.NewTokenLandingPage=/Owasp.CsrfGuard.Test/index.html
>
> # Protected Methods
> #
> # The protected methods property (org.owasp.csrfguard.ProtectedMethods)
> defines a comma
> # separated list of HTTP request methods that should be protected by
> CSRFGuard. The default
> # list is an empty list which will cause all HTTP methods to be protected,
> thus preserving
> # legacy behavior. This setting allows the user to inform CSRFGuard that
> only requests of the
> # given types should be considered for protection. All HTTP mehtods not in
> the list will be
> # considered safe (i.e. view only / unable to modify data). This should be
> used only when the
> # user has concrete knowledge that all requests made via methods not in
> the list
> # are safe (i.e. do not apply an action to any data) since it can actually
> introduce new
> # security vulnerabilities. For example: the user thinks that all
> actionable requests are
> # only available by POST requests when in fact some are available via GET
> requests. If the
> # user has excluded GET requests from the list then they have introduced a
> vulnerability.
> # The following configuration snippet instructs OWASP CSRFGuard to protect
> only the POST,
> # PUT, and DELETE HTTP methods.
> #
> org.owasp.csrfguard.ProtectedMethods=POST,PUT,DELETE,GET
>
> # Unique Per-Page Tokens
> #
> # The unique token per-page property (org.owasp.csrfguard.TokenPerPage) is
> a boolean value that
> # determines if CSRFGuard should make use of unique per-page (i.e. URI)
> prevention tokens as
> # opposed to unique per-session prevention tokens. When a user requests a
> protected resource,
> # CSRFGuard will determine if a page specific token has been previously
> generated. If a page
> # specific token has not yet been previously generated, CSRFGuard will
> verify the request was
> # submitted with the per-session token intact. After verifying the
> presence of the per-session token,
> # CSRFGuard will create a page specific token that is required for all
> subsequent requests to the
> # associated resource. The per-session CSRF token can only be used when
> requesting a resource for
> # the first time. All subsequent requests must have the per-page token
> intact or the request will
> # be treated as a CSRF attack. Use of the unique token per page property
> is currently experimental
> # but provides a significant amount of improved security. Consider the
> exposure of a CSRF token using
> # the legacy unique per-session model. Exposure of this token facilitates
> the attacker's ability to
> # carry out a CSRF attack against the victim's active session for any
> resource exposed by the web
> # application. Now consider the exposure of a CSRF token using the
> experimental unique token per-page
> # model. Exposure of this token would only allow the attacker to carry out
> a CSRF attack against the
> # victim's active session for a small subset of resources exposed by the
> web application. Use of the
> # unique token per-page property is a strong defense in depth strategy
> significantly reducing the
> # impact of exposed CSRF prevention tokens. The following configuration
> snippet instructs OWASP
> # CSRFGuard to utilize the unique token per-page model:
> #
>
>
> # org.owasp.csrfguard.TokenPerPage=true
> org.owasp.csrfguard.TokenPerPage=true
>
> # Token Rotation
> #
> # The rotate token property (org.owasp.csrfguard.Rotate) is a boolean
> value that determines if
> # CSRFGuard should generate and utilize a new token after verifying the
> previous token. Rotation
> # helps minimize the window of opportunity an attacker has to leverage the
> victim's stolen token
> # in a targeted CSRF attack. However, this functionality generally causes
> navigation problems in
> # most applications. Specifically, the 'Back' button in the browser will
> often cease to function
> # properly. When a user hits the 'Back' button and interacts with the
> HTML, the browser may submit
> # an old token causing CSRFGuard to incorrectly believe this request is a
> CSRF attack in progress
> # (i.e. a 'false positive'). Users can prevent this scenario by preventing
> the caching of HTML pages
> # containing FORM submissions using the cache-control header. However,
> this may also introduce
> # performance problems as the browser will have to request HTML on a more
> frequent basis. The following
> # configuration snippet enables token rotation:
> #
> # org.owasp.csrfguard.Rotate=true
>
> # Ajax and XMLHttpRequest Support
> #
> # The Ajax property (org.owasp.csrfguard.Ajax) is a boolean value that
> indicates whether or not OWASP
> # CSRFGuard should support the injection and verification of unique
> per-session prevention tokens for
> # XMLHttpRequests. To leverage Ajax support, the user must not only set
> this property to true but must
> # also reference the JavaScript DOM Manipulation code using a script
> element. This dynamic script will
> # override the send method of the XMLHttpRequest object to ensure the
> submission of an X-Requested-With
> # header name value pair coupled with the submission of a custom header
> name value pair for each request.
> # The name of the custom header is the value of the token name property
> and the value of the header is
> # always the unique per-session token value. This custom header is
> analogous to the HTTP parameter name
> # value pairs submitted via traditional GET and POST requests. If the
> X-Requested-With header was sent
> # in the HTTP request, then CSRFGuard will look for the presence and
> ensure the validity of the unique
> # per-session token in the custom header name value pair. Note that
> verification of these headers takes
> # precedence over verification of the CSRF token supplied as an HTTP
> parameter. More specifically,
> # CSRFGuard does not verify the presence of the CSRF token if the Ajax
> support property is enabled and
> # the corresponding X-Requested-With and custom headers are embedded
> within the request. The following
> # configuration snippet instructs OWASP CSRFGuard to support Ajax requests
> by verifying the presence and
> # correctness of the X-Requested-With and custom headers:
> #
> # org.owasp.csrfguard.Ajax=true
> org.owasp.csrfguard.Ajax=true
>
> # Unprotected Pages:
> #
> # The unprotected pages property (org.owasp.csrfguard.unprotected.*)
> defines a series of pages that
> # should not be protected by CSRFGuard. Such configurations are useful
> when the CsrfGuardFilter is
> # aggressively mapped (ex: /*). The syntax of the property name is
> org.owasp.csrfguard.unprotected.[PageName],
> # where PageName is some arbitrary identifier that can be used to
> reference a resource. The syntax of
> # defining the uri of unprotected pages is the same as the syntax used by
> the JavaEE container for uri mapping.
> # Specifically, CSRFGuard will identify the first match (if any) between
> the requested uri and an unprotected
> # page in order of declaration. Match criteria is as follows:
> #
> # Case 1: exact match between request uri and unprotected page
> # Case 2: longest path prefix match, beginning / and ending /*
> # Case 3: extension match, beginning *.
> # Default: requested resource must be validated by CSRFGuard
> #
> # The following code snippet illustrates the three use cases over four
> examples. The first two examples
> # (Tag and JavaScriptServlet) look for direct URI matches. The third
> example (Html) looks for all resources
> # ending in a .html extension. The last example (Public) looks for all
> resources prefixed with the URI path /MySite/Public/*.
> #
> # org.owasp.csrfguard.unprotected.Tag=/Owasp.CsrfGuard.Test/tag.jsp
> #
> org.owasp.csrfguard.unprotected.JavaScriptServlet=/Owasp.CsrfGuard.Test/JavaScriptServlet
> # org.owasp.csrfguard.unprotected.Html=*.html
> # org.owasp.csrfguard.unprotected.Public=/MySite/Public/*
> org.owasp.csrfguard.unprotected.Default=/Owasp.CsrfGuard.Test/
> org.owasp.csrfguard.unprotected.Upload=/Owasp.CsrfGuard.Test/upload.html
>
> org.owasp.csrfguard.unprotected.JavaScriptServlet=/Owasp.CsrfGuard.Test/JavaScriptServlet
> org.owasp.csrfguard.unprotected.Ajax=/Owasp.CsrfGuard.Test/ajax.html
> org.owasp.csrfguard.unprotected.Error=/Owasp.CsrfGuard.Test/error.html
> org.owasp.csrfguard.unprotected.Index=/Owasp.CsrfGuard.Test/index.html
>
> org.owasp.csrfguard.unprotected.JavaScript=/Owasp.CsrfGuard.Test/javascript.html
> org.owasp.csrfguard.unprotected.Tag=/Owasp.CsrfGuard.Test/tag.jsp
> org.owasp.csrfguard.unprotected.Redirect=/Owasp.CsrfGuard.Test/redirect.jsp
> org.owasp.csrfguard.unprotected.Forward=/Owasp.CsrfGuard.Test/forward.jsp
> org.owasp.csrfguard.unprotected.Session=/Owasp.CsrfGuard.Test/session.jsp
>
> # Actions: Responding to Attacks
> #
> # The actions directive (org.owasp.csrfguard.action.*) gives the user the
> ability to specify one or more
> # actions that should be invoked when a CSRF attack is detected. Every
> action must implement the
> # org.owasp.csrfguard.action.IAction interface either directly or
> indirectly through the
> # org.owasp.csrfguard.action.AbstractAction helper class. Many actions
> accept parameters that can be specified
> # along with the action class declaration. These parameters are consumed
> at runtime and impact the behavior of
> # the associated action.
> #
> # The syntax for defining and configuring CSRFGuard actions is relatively
> straight forward. Let us assume we wish
> # to redirect the user to a default page when a CSRF attack is detected. A
> redirect action already exists within
> # the CSRFGuard bundle and is available via the class name
> org.owasp.csrfguard.actions.Redirect. In order to enable
> # this action, we capture the following declaration in the
> Owasp.CsrfGuard.properties file:
> #
> # syntax: org.owasp.csrfguard.action.[actionName]=[className]
> # example:
> org.owasp.csrfguard.action.class.Redirect=org.owasp.csrfguard.actions.Redirect
> #
> # The aforementioned directive declares an action called "Redirect" (i.e.
> [actionName]) referencing the Java class
> # "org.owasp.csrfguard.actions.Redirect" (i.e. [className]). Anytime a
> CSRF attack is detected, the Redirect action
> # will be executed. You may be asking yourself, "but how do I specify
> where the user is redirected?"; this is where
> # action parameters come into play. In order to specify the redirect
> location, we capture the following declaration
> # in the Owasp.CsrfGuard.properties file:
> #
> # syntax:
> org.owasp.csrfguard.action.[actionName].[parameterName]=[parameterValue]
> # example:
> org.owasp.csrfguard.action.Redirect.ErrorPage=/Owasp.CsrfGuard.Test/error.html
> #
> # The aforementioned directive declares an action parameter called
> "ErrorPage" (i.e. [parameterName]) with the value
> # of "/Owasp.CsrfGuard.Test/error.html" (i.e. [parameterValue]) for the
> action "Redirect" (i.e. [actionName]). The
> # Redirect action expects the "ErrorPage" parameter to be defined and will
> redirect the user to this location when
> # an attack is detected.
> #
> #org.owasp.csrfguard.action.Empty=org.owasp.csrfguard.action.Empty
> org.owasp.csrfguard.action.Log=org.owasp.csrfguard.action.Log
> org.owasp.csrfguard.action.Log.Message=potential cross-site request
> forgery (CSRF) attack thwarted (user:%user%, ip:%remote_ip%,
> uri:%request_uri%, error:%exception_message%)
>
> #org.owasp.csrfguard.action.Invalidate=org.owasp.csrfguard.action.Invalidate
> org.owasp.csrfguard.action.Redirect=org.owasp.csrfguard.action.Redirect
> org.owasp.csrfguard.action.Redirect.Page=/Owasp.CsrfGuard.Test/error.html
>
> #org.owasp.csrfguard.action.RequestAttribute=org.owasp.csrfguard.action.RequestAttribute
>
> #org.owasp.csrfguard.action.RequestAttribute.AttributeName=Owasp_CsrfGuard_Exception_Key
> org.owasp.csrfguard.action.Rotate=org.owasp.csrfguard.action.Rotate
>
> #org.owasp.csrfguard.action.SessionAttribute=org.owasp.csrfguard.action.SessionAttribute
>
> #org.owasp.csrfguard.action.SessionAttribute.AttributeName=Owasp_CsrfGuard_Exception_Key
>
> # Token Name
> #
> # The token name property (org.owasp.csrfguard.TokenName) defines the name
> of the HTTP parameter
> # to contain the value of the OWASP CSRFGuard token for each request. The
> following configuration
> # snippet sets the CSRFGuard token parameter name to the value
> OWASP_CSRFTOKEN:
> #
> # org.owasp.csrfguard.TokenName=OWASP_CSRFTOKEN
> org.owasp.csrfguard.TokenName=OWASP_CSRFTOKEN
>
> # Session Key
> #
> # The session key property (org.owasp.csrfguard.SessionKey) defines the
> string literal used to save
> # and lookup the CSRFGuard token from the session. This value is used by
> the filter and the tag
> # libraries to retrieve and set the token value in the session. Developers
> can use this key to
> # programmatically lookup the token within their own code. The following
> configuration snippet sets
> # the session key to the value OWASP_CSRFTOKEN:
> #
> # org.owasp.csrfguard.SessionKey=OWASP_CSRFTOKEN
> org.owasp.csrfguard.SessionKey=OWASP_CSRFTOKEN
>
> # Token Length
> #
> # The token length property (org.owasp.csrfguard.TokenLength) defines the
> number of characters that
> # should be found within the CSRFGuard token. Note that characters are
> delimited by dashes (-) in groups
> # of four. For cosmetic reasons, users are encourage to ensure the token
> length is divisible by four.
> # The following configuration snippet sets the token length property to 32
> characters:
> #
> # org.owasp.csrfguard.TokenLength=32
> org.owasp.csrfguard.TokenLength=32
>
> # Pseudo-random Number Generator
> #
> # The pseudo-random number generator property (org.owasp.csrfguard.PRNG)
> defines what PRNG should be used
> # to generate the OWASP CSRFGuard token. Always ensure this value
> references a cryptographically strong
> # pseudo-random number generator algorithm. The following configuration
> snippet sets the pseudo-random number
> # generator to SHA1PRNG:
> #
> # org.owasp.csrfguard.PRNG=SHA1PRNG
> org.owasp.csrfguard.PRNG=SHA1PRNG
>
>
>
>
> --
> Best regards,
> Ashish K. Gautam
> NIC, Delhi India
>
> _______________________________________________
> Owasp-csrfguard mailing list
> Owasp-csrfguard at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-csrfguard
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.owasp.org/pipermail/owasp-csrfguard/attachments/20111219/5162e0a2/attachment-0001.html>

