<?xml version="1.0" encoding="iso-8859-1"?>
<web-app version="2.5"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
            http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<display-name>WebCommerce</display-name>

	<!--
	 We have to explicitly clear the welcome file list.
	 We don't need to serve a default or index page as we can handle all the requests via spring MVC.
	-->
	<welcome-file-list>
		<welcome-file/>
	</welcome-file-list>

	<!-- Filters -->
	<filter>
		<description>
			ResourceFilter
			Filter used to server file resources by bypassing the other filters.
		</description>
		<filter-name>ResourceFilter</filter-name>
		<filter-class>com.xxx.web.servlets.ResourceFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>ResourceFilter</filter-name>
		<!-- All javascript, CSS, images, and themes are under the /_ui/ path -->
		<url-pattern>/_ui/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>ResourceFilter</filter-name>
		<!-- /js/ path required for CMS preview -->
		<url-pattern>/js/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>ResourceFilter</filter-name>
		<!-- /stylesheets/ path required for CMS preview -->
		<url-pattern>/stylesheets/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>ResourceFilter</filter-name>
		<url-pattern>/relaiscolis/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>ResourceFilter</filter-name>
		<url-pattern>/mobilewebapp/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>ResourceFilter</filter-name>
		<url-pattern>/pocs/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>ResourceFilter</filter-name>
		<url-pattern>/sitemap/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>ResourceFilter</filter-name>
		<url-pattern>/sitemapIndex.xml</url-pattern>
	</filter-mapping>	

<!--
		This is useful because current browsers typically do not set a
		character encoding even if specified in the HTML page or form. This
		filter must be executed before any access is done on a parameter.
	-->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>		
	</filter-mapping>
	
	<filter>
        <filter-name>UnexpectedExceptionManagerFilter</filter-name>
        <filter-class>com.xxx.web.filters.UnexpectedExceptionManagerFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>UnexpectedExceptionManagerFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

	<filter>
		<description>
			RequestLoggerFilter
			The request logger filter logs each HTTP request received by this webapp.
			This is a useful filter during development but is not recommended for use in production.
		</description>
		<filter-name>RequestLoggerFilter</filter-name>
		<filter-class>com.xxx.web.servlets.RequestLoggerFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>RequestLoggerFilter</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
	</filter-mapping>

	<filter>
		<description>
			HybrisInitFilter
			Filter that will do initialization work for the hybris web application, including:
			- Getting the JaloSession from the HttpSession or, if not available, create a new JaloSession.
			- Activate this JaloSession so that calls to JaloSession.getCurrentSession() can be performed.
			- Notify all extension managers or each request.
		</description>
		<filter-name>HybrisInitFilter</filter-name>
		<filter-class>de.hybris.platform.util.HybrisInitFilter</filter-class>
		<init-param>
			<!-- GZIP compression of response (default = true) -->
			<param-name>enable.compression</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>tenantIDPattern</param-name>
			<param-value>;\s*tenantID\s*=\s*(\w+)</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>HybrisInitFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	

	<filter>
		<description>
			CMSSiteFilter
			The CMS Site filter sets up the CMS integration for the application.
		</description>
		<filter-name>CMSSiteFilter</filter-name>
		<filter-class>com.xxx.web.servlets.CMSSiteFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>CMSSiteFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<description>
			StoreFrontFilter
			Application specific filter that initialises the session for the application.
		</description>
		<filter-name>StoreFrontFilter</filter-name>
		<filter-class>com.xxx.web.servlets.StoreFrontFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>StoreFrontFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<filter>
		<description>
			FlashScopeFilter
			The Flash Scope filter supports extracting the flash scoped variables from the session
			and adding them to the current request.
		</description>
	    <filter-name>FlashScopeFilter</filter-name>
	    <filter-class>com.xxx.web.servlets.FlashScopeFilter</filter-class>
	</filter>
	<filter-mapping>
	    <filter-name>FlashScopeFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<description>
			springSecurityFilterChain
			Supports delegating to a chain of spring configured filters. The filter name
			must match the bean name.
		</description>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>GoogleBotFilter</filter-name>
		<filter-class>com.xxx.web.servlets.GoogleBotFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>GoogleBotFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!--
	BTG Filters
	-->

	<filter>
		<filter-name>refererHeaderBtgFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>refererHeaderBtgFilter</filter-name>
		<servlet-name>DispatcherServlet</servlet-name>
	</filter-mapping>

	<filter>
		<filter-name>requestParamsBtgFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>requestParamsBtgFilter</filter-name>
		<servlet-name>DispatcherServlet</servlet-name>
	</filter-mapping>

	<filter>
		<filter-name>productVisitedBtgFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>productVisitedBtgFilter</filter-name>
		<servlet-name>DispatcherServlet</servlet-name>
	</filter-mapping>

	<filter>
		<filter-name>categoryVisitedBtgFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>categoryVisitedBtgFilter</filter-name>
		<servlet-name>DispatcherServlet</servlet-name>
	</filter-mapping>

	<filter>
		<filter-name>BTGSegmentFilter</filter-name>
		<filter-class>com.xxx.web.servlets.btg.BTGSegmentFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>BTGSegmentFilter</filter-name>
		<servlet-name>DispatcherServlet</servlet-name>
	</filter-mapping>
-->
<!-- Security -->
	<filter>
		<filter-name>cookieManagerFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>cookieManagerFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
  	
   	<filter>
	  <filter-name>antiSamyFilter</filter-name>
	  <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	 </filter>
	 <filter-mapping>
	  <filter-name>antiSamyFilter</filter-name>
	  <url-pattern>/*</url-pattern>
	 </filter-mapping>
	 <filter>
		<filter-name>CSRFGuard</filter-name>
		<filter-class>org.owasp.csrfguard.CsrfGuardFilter</filter-class>
	</filter>
	<!-- TODO il faut definir les pages ? prot?ger pour que CSRFGuard ne bloque pas tout. Actullement on prot?ge rienDuTout -->
	<filter-mapping>
		<filter-name>CSRFGuard</filter-name> 
		<url-pattern >/riendurien</url-pattern>
		<url-pattern>/cart/add</url-pattern>
		<url-pattern>/cart/add/mobile</url-pattern>
		<url-pattern>/cart/update</url-pattern>
		<url-pattern>/cart/update/mobile</url-pattern>
		<url-pattern>/cart/applyVoucher</url-pattern>
		<url-pattern>/cart/cancelVoucher</url-pattern>
	</filter-mapping>
	 	
	<filter>
		<filter-name>citUrlRewriteFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>confReloadCheckInterval</param-name>
			<param-value>300</param-value>
		</init-param>

		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
        <init-param>
            <param-name>confPath</param-name>
            <param-value>/WEB-INF/urlrewrite.xml</param-value>
        </init-param>
		<init-param>
			<param-name>logLevel</param-name>
			<param-value>sysout:ERROR</param-value>
		</init-param>
    </filter>
    <filter-mapping>
       <filter-name>citUrlRewriteFilter</filter-name>
       <url-pattern>/p/*</url-pattern>
       <url-pattern>/old/p/*</url-pattern>
       <url-pattern>/item/*</url-pattern>
       <url-pattern>/category/*</url-pattern>
	   <url-pattern>/mode/*</url-pattern>
	   <url-pattern>/homme/*</url-pattern>
	   <url-pattern>/femme/*</url-pattern>
	   <url-pattern>/teen/*</url-pattern>
	   <url-pattern>/marques/*</url-pattern>
	   <url-pattern>/vp/*</url-pattern>
	   <url-pattern>/venteprivee/*</url-pattern>
       <dispatcher>REQUEST</dispatcher>  
       <dispatcher>FORWARD</dispatcher> 
    </filter-mapping>
	 
	<!-- Context Parameters -->
<context-param>
		<param-name>Owasp.CsrfGuard.Config</param-name>
		<param-value>WEB-INF/Owasp.CsrfGuard.properties</param-value>
	</context-param>
	
	<context-param>
		<param-name>Owasp.CsrfGuard.Config.Print</param-name>
		<param-value>true</param-value>
	</context-param>	
	<context-param>
		<description>
			The 'contextConfigLocation' param specifies where your configuration files are located.
			The 'WEB-INF/config/web-application-config.xml' file includes several other XML config
			files to build up the configuration for the application.
		</description>
		<param-name>contextConfigLocation</param-name>
		<param-value>WEB-INF/config/web-application-config.xml</param-value>
	</context-param>

	
	<!-- HTTP Session Listeners -->

	<listener>
		<description>
			The HybrisContextLoaderListener extends the usual SpringContextLoaderListener (which loads
			the context from specified location) by adding the global application context of
			the platform as parent context. With having the global context set as parent you can access
			or override beans of the global context and get the 'tenant' scope.
		</description>
		<listener-class>de.hybris.platform.spring.HybrisContextLoaderListener</listener-class>
	</listener>

	<listener>
		<description>
			The RequestContextListener exposes the 'request' scope to the context.
			Furthermore it is needed when overriding the 'jalosession' bean for your web application.
		</description>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.owasp.csrfguard.CsrfGuardListener</listener-class>
	</listener>
	

	<!-- Servlets -->

	<servlet>
		<description>
			DispatcherServlet
			Spring MVC dispatcher servlet. This is the entry point for the Spring MVC application.
		</description>
		<servlet-name>DispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<description>
				Specifies the location for Spring MVC to load an additional XML configuration file.
				Because hybris is already configured with the XML spring configuration files to load
				we must set this param value to EMPTY in order to prevent loading of the default
				/WEB-INF/applicationContext.xml file.
			</description>
			<param-name>contextConfigLocation</param-name>
			<param-value></param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet>
	     <servlet-name>JavaScriptServlet</servlet-name>
	     <servlet-class>org.owasp.csrfguard.servlet.JavaScriptServlet</servlet-class>
	     <init-param>
	         <param-name>source-file</param-name>
	         <param-value>WEB-INF/Owasp.CsrfGuard.js</param-value>
	     </init-param>
	     <init-param>
	         <param-name>inject-into-forms</param-name>
	         <param-value>true</param-value>
	     </init-param>
	     <init-param>
	         <param-name>inject-into-attributes</param-name>
	         <param-value>false</param-value>
	     </init-param>
	    <init-param>
	         <param-name>domain-strict</param-name>
	         <param-value>true</param-value>
	    </init-param>
	    <init-param>
         <param-name>referer-pattern</param-name>
         <param-value>.*</param-value>
    </init-param>
	</servlet> 
	
	
	<servlet-mapping>
		<servlet-name>DispatcherServlet</servlet-name>
		<!-- Map all requests to the DispatcherServlet -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
     <servlet-name>JavaScriptServlet</servlet-name>
     <url-pattern>/JavaScriptServlet</url-pattern>
	</servlet-mapping>
	<!-- Uncomment in to enable handling of 500 server errors  -->
	<!--
	<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<location>/WEB-INF/pages/error/serverError.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/WEB-INF/pages/error/serverError.jsp</location>
	</error-page>
	-->


	<!-- Session -->

	<session-config>
		<!-- Session timeout of 30 minutes -->
		<session-timeout>30</session-timeout>
	</session-config>


	<!-- JSP Configuration -->

	<jsp-config>
		<jsp-property-group>
			<url-pattern>*.jsp</url-pattern>
			<!-- Disable JSP scriptlets and expressions -->
			<scripting-invalid>true</scripting-invalid>
			<!-- Remove additional whitespace due to JSP directives -->
			<trim-directive-whitespaces>true</trim-directive-whitespaces>
		</jsp-property-group>
	</jsp-config>
	
	<!-- currently the W3C havent settled on a media type for WSDL;
		http://www.w3.org/TR/2003/WD-wsdl12-20030303/#ietf-draft
		for now we go with the basic 'it's XML' response -->
	<mime-mapping>
		<extension>wsdl</extension>
		<mime-type>text/xml</mime-type>
	</mime-mapping>

	<mime-mapping>
		<extension>xsd</extension>
		<mime-type>text/xml</mime-type>
	</mime-mapping>	
	
    <mime-mapping>
        <extension>ico</extension>
        <mime-type>image/x-icon</mime-type>
    </mime-mapping> 	
	
</web-app>