From Alexander_Gempp at rcomext.com  Wed Feb  9 08:13:14 2011
From: Alexander_Gempp at rcomext.com (Alexander_Gempp at rcomext.com)
Date: Wed, 9 Feb 2011 14:13:14 +0100
Subject: [Owasp-csrfguard] URL Rewriting in CSRF Guard
Message-ID: <OFAFF2A21A.E3E40208-ONC1257832.004825E7-C1257832.00489FC9@swissre.com>

Hi,

I've got a question regarding the Java version of the guard.

I tried using it without cookies. Looks like get stuck in a loop because 
the dynamic form for redirecting to the 'default token landing page' 
removes my session url. Could that be?

Is there a workaround for my problem?

Best regards,
Alex





This e-mail, including attachments, is intended for the person(s) or company named and may contain confidential and/or legally privileged information. Unauthorized disclosure, copying or use of this information may be unlawful and is prohibited. If you are not the intended recipient, please delete this message and notify the sender.
All incoming and outgoing e-mail messages are stored in the Swiss Re Electronic Message Repository. If you do not wish the retention of potentially private e-mails by Swiss Re, we strongly advise you not to use the Swiss Re e-mail account for any private, non-business related communications.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-csrfguard/attachments/20110209/db5b8c11/attachment.html 

From eric.sheridan at owasp.org  Wed Feb  9 09:24:56 2011
From: eric.sheridan at owasp.org (Eric Sheridan)
Date: Wed, 09 Feb 2011 09:24:56 -0500
Subject: [Owasp-csrfguard] URL Rewriting in CSRF Guard
In-Reply-To: <OFAFF2A21A.E3E40208-ONC1257832.004825E7-C1257832.00489FC9@swissre.com>
References: <OFAFF2A21A.E3E40208-ONC1257832.004825E7-C1257832.00489FC9@swissre.com>
Message-ID: <4D52A3B8.8050708@owasp.org>

Alex,

> Could that be?

Yes - this is entirely possible. There are two ways CSRFGuard will
redirect the use when the context is first initialize: default landing
page and, if the default landing page is unspecified, an auto posting
form to the same URI without any parameters.

On a side note: I am planning on releasing a new ALPHA version which
more correctly constructs the URI in this auto-posting form such that
path parameters are not included.

> Is there a workaround for my problem?

I'm sure there is a way to do this through configuration. Try setting
your default landing page to a page for which CSRFGuard has no
visibility. This is a page that either a) is not accessible to the
Filter mapping and or b) a page that is marked as 'unprotected' in
Owasp.CsrfGuard.properties. I'd be interested to see if these
modifications affect your situation.

Another work around is to disable URL rewriting in your application.
This seems ideal from my perspective - as someone who has zero business
context of your app and only a minor technical context :) URl rewriting
has an associated security risk. Disabling URL rewriting should mitigate
the risk of session identifier in the URL AND it *should* fix your
CSRFGuard problem. Are you in a position where you can disable URL
rewriting in your application?

Perhaps the last thing I could try is allowing the user to optionally
include params/sessionid in the request to the 'default landing page' by
adding a couple more configuration capabilities in
Owasp.CsrfGuard.properties. I'd prefer not to do this though as it
increases the risk of users disclosing session ids and or increases the
risk of a 'one time csrf attack' against a user who's csrf context has
not yet been initialized and where the default landing page performs
some operation (or, if not defined, the requested context/servlet path
performs some operation).

Winded response... hope that helps.

-Eric

On 2/9/11 8:13 AM, Alexander_Gempp at rcomext.com wrote:
> Hi,
> 
> I've got a question regarding the Java version of the guard.
> 
> I tried using it without cookies. Looks like get stuck in a loop because 
> the dynamic form for redirecting to the 'default token landing page' 
> removes my session url. Could that be?
> 
> Is there a workaround for my problem?
> 
> Best regards,
> Alex
> 
> 
> 
> 
> 
> This e-mail, including attachments, is intended for the person(s) or company named and may contain confidential and/or legally privileged information. Unauthorized disclosure, copying or use of this information may be unlawful and is prohibited. If you are not the intended recipient, please delete this message and notify the sender.
> All incoming and outgoing e-mail messages are stored in the Swiss Re Electronic Message Repository. If you do not wish the retention of potentially private e-mails by Swiss Re, we strongly advise you not to use the Swiss Re e-mail account for any private, non-business related communications.
> 
> 
> 
> _______________________________________________
> Owasp-csrfguard mailing list
> Owasp-csrfguard at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-csrfguard


From eric.sheridan at owasp.org  Thu Feb 10 13:39:56 2011
From: eric.sheridan at owasp.org (Eric Sheridan)
Date: Thu, 10 Feb 2011 13:39:56 -0500
Subject: [Owasp-csrfguard] Django and Ruby on Rails Mimic CSRFGuard
Message-ID: <4D5430FC.8020006@owasp.org>

List,

I read an article last night about how Django and Ruby on Rails CSRF
protections for Ajax requests were found broken. Attackers could forge
the headers through a combination of browser plugins and redirects.
Their fix? Implement the CSRF protection token in a custom HTTP header
for all Ajax requests - this is what CSRFGuard already does! I was a
little ornery about the subject last night resulting in an amusing blog
post:

http://ericsheridan.blogspot.com/2011/02/hey-django-and-ror-how-about-some.html

If you know anyone using CSRFGuard or using it as a reference
implementation, please let me know! I'd like to have the main page list
companies/users using the product.

As always, I am in need of testing for the 3.0 release. Drop me a line
if you have feedback!

-Eric

From eric.sheridan at owasp.org  Fri Feb 11 09:35:01 2011
From: eric.sheridan at owasp.org (Eric Sheridan)
Date: Fri, 11 Feb 2011 09:35:01 -0500
Subject: [Owasp-csrfguard] Potential Vulnerability in isValidUrl
Message-ID: <4D554915.10405@owasp.org>

List,

Koto on GitHub pointed out a potential vulnerability in the "isValidUrl"
method of the dynamic JavaScript code - and I believe this person is
correct. This method is poorly written and this problem only highlights
that fact. Here is the snippet:

/** determine if uri/url points to valid domain * */
function isValidUrl(src) {
	var result = false;
	
	/** parse out domain to make sure it points to our own * */
	if(src.substring(0, 7) == "http://" || src.substring(0, 8) == "https://") {
		// check if is valid domain
	} else if(src.charAt(0) == '#') {
		...
	} else if(src.charAt(0) == '/' || src.indexOf(':') == -1) {
		result = true;
	}
		
	return result;
}

The idea behind this code is to determine if the form/url location
points to a page for which we must include the CSRF token. This helps
ensure that a token destined for abc.com is not sent off site to an
xyz.com. However, the following URL //attacker.com/whatever is not local
yet will translate to http://attacker.com/whatever and the token will be
included. If the user clicks the link, their CSRF token destined for
abc.com is sent to attacker.com.

Any thoughts on how I could do this uri/url parsing logic in a cleaner
fashion without introducing a third party library? I could sneak in a
third conditional (&& !src.startsWith("//")) but this seems really fragile.

-Eric

From eric.sheridan at owasp.org  Fri Feb 11 10:12:38 2011
From: eric.sheridan at owasp.org (Eric Sheridan)
Date: Fri, 11 Feb 2011 10:12:38 -0500
Subject: [Owasp-csrfguard] Potential Vulnerability in isValidUrl
In-Reply-To: <4D554915.10405@owasp.org>
References: <4D554915.10405@owasp.org>
Message-ID: <4D5551E6.60304@owasp.org>

Just an update: I'm having trouble reproducing this in every browser
that I've tried - always resolves to file://attacker.com which shouldn't
have the token but is still local resource. So this might just be a
functional bug and not a security bug.

-Eric

On 2/11/11 9:35 AM, Eric Sheridan wrote:
> List,
> 
> Koto on GitHub pointed out a potential vulnerability in the "isValidUrl"
> method of the dynamic JavaScript code - and I believe this person is
> correct. This method is poorly written and this problem only highlights
> that fact. Here is the snippet:
> 
> /** determine if uri/url points to valid domain * */
> function isValidUrl(src) {
> 	var result = false;
> 	
> 	/** parse out domain to make sure it points to our own * */
> 	if(src.substring(0, 7) == "http://" || src.substring(0, 8) == "https://") {
> 		// check if is valid domain
> 	} else if(src.charAt(0) == '#') {
> 		...
> 	} else if(src.charAt(0) == '/' || src.indexOf(':') == -1) {
> 		result = true;
> 	}
> 		
> 	return result;
> }
> 
> The idea behind this code is to determine if the form/url location
> points to a page for which we must include the CSRF token. This helps
> ensure that a token destined for abc.com is not sent off site to an
> xyz.com. However, the following URL //attacker.com/whatever is not local
> yet will translate to http://attacker.com/whatever and the token will be
> included. If the user clicks the link, their CSRF token destined for
> abc.com is sent to attacker.com.
> 
> Any thoughts on how I could do this uri/url parsing logic in a cleaner
> fashion without introducing a third party library? I could sneak in a
> third conditional (&& !src.startsWith("//")) but this seems really fragile.
> 
> -Eric


From eric.sheridan at owasp.org  Sat Feb 12 09:49:10 2011
From: eric.sheridan at owasp.org (Eric Sheridan)
Date: Sat, 12 Feb 2011 09:49:10 -0500
Subject: [Owasp-csrfguard] Potential Vulnerability in isValidUrl
In-Reply-To: <4D5551E6.60304@owasp.org>
References: <4D554915.10405@owasp.org> <4D5551E6.60304@owasp.org>
Message-ID: <4D569DE6.6010003@owasp.org>

Botched testing on my part - the browser assumes the current protocol. I
ran this locally and it assumed file. If I hosted the doc, it would
become http(s). Botched test on my part. I'll be pushing a fix shortly.

-Eric

On 2/11/11 10:12 AM, Eric Sheridan wrote:
> Just an update: I'm having trouble reproducing this in every browser
> that I've tried - always resolves to file://attacker.com which shouldn't
> have the token but is still local resource. So this might just be a
> functional bug and not a security bug.
> 
> -Eric
> 
> On 2/11/11 9:35 AM, Eric Sheridan wrote:
>> List,
>>
>> Koto on GitHub pointed out a potential vulnerability in the "isValidUrl"
>> method of the dynamic JavaScript code - and I believe this person is
>> correct. This method is poorly written and this problem only highlights
>> that fact. Here is the snippet:
>>
>> /** determine if uri/url points to valid domain * */
>> function isValidUrl(src) {
>> 	var result = false;
>> 	
>> 	/** parse out domain to make sure it points to our own * */
>> 	if(src.substring(0, 7) == "http://" || src.substring(0, 8) == "https://") {
>> 		// check if is valid domain
>> 	} else if(src.charAt(0) == '#') {
>> 		...
>> 	} else if(src.charAt(0) == '/' || src.indexOf(':') == -1) {
>> 		result = true;
>> 	}
>> 		
>> 	return result;
>> }
>>
>> The idea behind this code is to determine if the form/url location
>> points to a page for which we must include the CSRF token. This helps
>> ensure that a token destined for abc.com is not sent off site to an
>> xyz.com. However, the following URL //attacker.com/whatever is not local
>> yet will translate to http://attacker.com/whatever and the token will be
>> included. If the user clicks the link, their CSRF token destined for
>> abc.com is sent to attacker.com.
>>
>> Any thoughts on how I could do this uri/url parsing logic in a cleaner
>> fashion without introducing a third party library? I could sneak in a
>> third conditional (&& !src.startsWith("//")) but this seems really fragile.
>>
>> -Eric
> 


From eric.sheridan at owasp.org  Mon Feb 14 15:30:04 2011
From: eric.sheridan at owasp.org (Eric Sheridan)
Date: Mon, 14 Feb 2011 15:30:04 -0500
Subject: [Owasp-csrfguard] Potential Vulnerability in isValidUrl
In-Reply-To: <4D569DE6.6010003@owasp.org>
References: <4D554915.10405@owasp.org> <4D5551E6.60304@owasp.org>
	<4D569DE6.6010003@owasp.org>
Message-ID: <4D5990CC.5000504@owasp.org>

I've implemented a fix to address this issue. I also modified how
CSRFGuard is installed within a webapp. Instead of just installing a
filter, you now have to install an HttpSessionListener as well. This
session listener is responsible for constructing the CSRFGuard context
whenever a new session is created. This helps address one or more state
related bugs when the developer creates/invalidates sessions and yet
uses API requiring existence of the CSRFGuard context.

http://www.owasp.org/index.php/Category:OWASP_CSRFGuard_Project

Let me know what you think!

-Eric

On 2/12/11 9:49 AM, Eric Sheridan wrote:
> Botched testing on my part - the browser assumes the current protocol. I
> ran this locally and it assumed file. If I hosted the doc, it would
> become http(s). Botched test on my part. I'll be pushing a fix shortly.
> 
> -Eric
> 
> On 2/11/11 10:12 AM, Eric Sheridan wrote:
>> Just an update: I'm having trouble reproducing this in every browser
>> that I've tried - always resolves to file://attacker.com which shouldn't
>> have the token but is still local resource. So this might just be a
>> functional bug and not a security bug.
>>
>> -Eric
>>
>> On 2/11/11 9:35 AM, Eric Sheridan wrote:
>>> List,
>>>
>>> Koto on GitHub pointed out a potential vulnerability in the "isValidUrl"
>>> method of the dynamic JavaScript code - and I believe this person is
>>> correct. This method is poorly written and this problem only highlights
>>> that fact. Here is the snippet:
>>>
>>> /** determine if uri/url points to valid domain * */
>>> function isValidUrl(src) {
>>> 	var result = false;
>>> 	
>>> 	/** parse out domain to make sure it points to our own * */
>>> 	if(src.substring(0, 7) == "http://" || src.substring(0, 8) == "https://") {
>>> 		// check if is valid domain
>>> 	} else if(src.charAt(0) == '#') {
>>> 		...
>>> 	} else if(src.charAt(0) == '/' || src.indexOf(':') == -1) {
>>> 		result = true;
>>> 	}
>>> 		
>>> 	return result;
>>> }
>>>
>>> The idea behind this code is to determine if the form/url location
>>> points to a page for which we must include the CSRF token. This helps
>>> ensure that a token destined for abc.com is not sent off site to an
>>> xyz.com. However, the following URL //attacker.com/whatever is not local
>>> yet will translate to http://attacker.com/whatever and the token will be
>>> included. If the user clicks the link, their CSRF token destined for
>>> abc.com is sent to attacker.com.
>>>
>>> Any thoughts on how I could do this uri/url parsing logic in a cleaner
>>> fashion without introducing a third party library? I could sneak in a
>>> third conditional (&& !src.startsWith("//")) but this seems really fragile.
>>>
>>> -Eric
>>
> 


From eric.sheridan at owasp.org  Mon Feb 14 15:32:50 2011
From: eric.sheridan at owasp.org (Eric Sheridan)
Date: Mon, 14 Feb 2011 15:32:50 -0500
Subject: [Owasp-csrfguard] Visibility of CSRFGuard
Message-ID: <4D599172.6050401@owasp.org>

List,

One thing I've done a horrible job of is tracking who is actually using
CSRFGuard. If you or someone else is using CSRFGuard, please let me
know! I'd like to begin creating a section on the main project website
listing those vendors/companies/users actively using CSRFGuard in their
own applications.

Care to share who you know is using CSRFGuard?? Can you put me in touch
with them so I can see if they're open to me listing them on the site?

-Eric

From mfelipe at gmail.com  Fri Feb 18 11:45:59 2011
From: mfelipe at gmail.com (Marcos Felipe)
Date: Fri, 18 Feb 2011 14:45:59 -0200
Subject: [Owasp-csrfguard] "multipart/form-data" form not working on Java
Message-ID: <AANLkTikYUtnkfMNTc5OkbKUyCepBupTYn5_xikfo=XEN@mail.gmail.com>

Hi there,

I'm mailing to you as last resort, I could not find anything on the web
about this issue on CSRFGuard for java.

The thing is: if your form have enctype="multipart/form-data",
HttpServletRequest.getParameter() method will always return null and
CSRFGuard will never find the key.

I'm trying to fix it using Oreilly's MultipartRequest (
http://www.servlets.com/cos/index.html), but I don't know if this is the
best approach.

Did anyone ever saw this?

Thanks and best regards,
Marcos
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://lists.owasp.org/pipermail/owasp-csrfguard/attachments/20110218/acb0fa83/attachment.html 

From eric.sheridan at owasp.org  Tue Feb 22 16:36:14 2011
From: eric.sheridan at owasp.org (Eric Sheridan)
Date: Tue, 22 Feb 2011 16:36:14 -0500
Subject: [Owasp-csrfguard] "multipart/form-data" form not working on Java
In-Reply-To: <AANLkTikYUtnkfMNTc5OkbKUyCepBupTYn5_xikfo=XEN@mail.gmail.com>
References: <AANLkTikYUtnkfMNTc5OkbKUyCepBupTYn5_xikfo=XEN@mail.gmail.com>
Message-ID: <4D642C4E.30304@owasp.org>

Marcos,

Unfortunately, JavaEE 5 and below do not have built in support for
multipart requests. JavaEE 6 exposes API for working with multipart
requests (ex: request.getPart) so it should work out of the box. Please
note that is an untested claim.

To properly fix this, CSRFGuard would have to support multi-part
requests similar to the strategy you are taking. No quick fix for this
one, unfortunately. Let me know how your effort goes. I'd like to use it
as a reference for CSRFGuard, if possible.

-Eric

On 2/18/11 11:45 AM, Marcos Felipe wrote:
> Hi there,
> 
> I'm mailing to you as last resort, I could not find anything on the web
> about this issue on CSRFGuard for java.
> 
> The thing is: if your form have enctype="multipart/form-data",
> HttpServletRequest.getParameter() method will always return null and
> CSRFGuard will never find the key.
> 
> I'm trying to fix it using Oreilly's MultipartRequest (
> http://www.servlets.com/cos/index.html), but I don't know if this is the
> best approach.
> 
> Did anyone ever saw this?
> 
> Thanks and best regards,
> Marcos
> 
> 
> 
> 
> _______________________________________________
> Owasp-csrfguard mailing list
> Owasp-csrfguard at lists.owasp.org
> https://lists.owasp.org/mailman/listinfo/owasp-csrfguard


